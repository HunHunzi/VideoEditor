/*! For license information please see hyvodlib.js.LICENSE.txt */
!(function (e, t) {
  if ('object' == typeof exports && 'object' == typeof module) module.exports = t();
  else if ('function' == typeof define && define.amd) define([], t);
  else {
    var i = t();
    for (var s in i) ('object' == typeof exports ? exports : e)[s] = i[s];
  }
})(this, function () {
  return (function () {
    var e = {
        1506: function (e) {
          e.exports = function (e) {
            if (void 0 === e)
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return e;
          };
        },
        4575: function (e) {
          e.exports = function (e, t) {
            if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
          };
        },
        3913: function (e) {
          function t(e, t) {
            for (var i = 0; i < t.length; i++) {
              var s = t[i];
              (s.enumerable = s.enumerable || !1),
                (s.configurable = !0),
                'value' in s && (s.writable = !0),
                Object.defineProperty(e, s.key, s);
            }
          }
          e.exports = function (e, i, s) {
            return i && t(e.prototype, i), s && t(e, s), e;
          };
        },
        6525: function (e, t, i) {
          var s = i(8331);
          function r(t, i, a) {
            return (
              'undefined' != typeof Reflect && Reflect.get
                ? (e.exports = r = Reflect.get)
                : (e.exports = r =
                    function (e, t, i) {
                      var r = s(e, t);
                      if (r) {
                        var a = Object.getOwnPropertyDescriptor(r, t);
                        return a.get ? a.get.call(i) : a.value;
                      }
                    }),
              r(t, i, a || t)
            );
          }
          e.exports = r;
        },
        9754: function (e) {
          function t(i) {
            return (
              (e.exports = t =
                Object.setPrototypeOf
                  ? Object.getPrototypeOf
                  : function (e) {
                      return e.__proto__ || Object.getPrototypeOf(e);
                    }),
              t(i)
            );
          }
          e.exports = t;
        },
        2205: function (e, t, i) {
          var s = i(9489);
          e.exports = function (e, t) {
            if ('function' != typeof t && null !== t)
              throw new TypeError('Super expression must either be null or a function');
            (e.prototype = Object.create(t && t.prototype, {
              constructor: { value: e, writable: !0, configurable: !0 },
            })),
              t && s(e, t);
          };
        },
        8585: function (e, t, i) {
          var s = i(8),
            r = i(1506);
          e.exports = function (e, t) {
            return !t || ('object' !== s(t) && 'function' != typeof t) ? r(e) : t;
          };
        },
        9489: function (e) {
          function t(i, s) {
            return (
              (e.exports = t =
                Object.setPrototypeOf ||
                function (e, t) {
                  return (e.__proto__ = t), e;
                }),
              t(i, s)
            );
          }
          e.exports = t;
        },
        8331: function (e, t, i) {
          var s = i(9754);
          e.exports = function (e, t) {
            for (; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = s(e)); );
            return e;
          };
        },
        8: function (e) {
          function t(i) {
            return (
              'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                ? (e.exports = t =
                    function (e) {
                      return typeof e;
                    })
                : (e.exports = t =
                    function (e) {
                      return e &&
                        'function' == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? 'symbol'
                        : typeof e;
                    }),
              t(i)
            );
          }
          e.exports = t;
        },
        442: function (e, t, i) {
          'use strict';
          i.d(t, {
            default: function () {
              return C;
            },
          }),
            i(6833),
            i(2222),
            i(9554),
            i(9653),
            i(9601),
            i(4747);
          var s = i(4575),
            r = i.n(s),
            a = i(3913),
            n = i.n(a),
            o = i(1506),
            h = i.n(o),
            u = i(6525),
            d = i.n(u),
            c = i(2205),
            l = i.n(c),
            p = i(8585),
            f = i.n(p),
            m = i(9754),
            _ = i.n(m),
            v = i(1631),
            y = i.n(v),
            S = i(8001);
          var g = 'webh5&'.concat('1.6.104', '&websocket'),
            T = (function (e) {
              l()(a, e);
              var t,
                i,
                s =
                  ((t = a),
                  (i = (function () {
                    if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
                    if (Reflect.construct.sham) return !1;
                    if ('function' == typeof Proxy) return !0;
                    try {
                      return (
                        Date.prototype.toString.call(Reflect.construct(Date, [], function () {})),
                        !0
                      );
                    } catch (e) {
                      return !1;
                    }
                  })()),
                  function () {
                    var e,
                      s = _()(t);
                    if (i) {
                      var r = _()(this).constructor;
                      e = Reflect.construct(s, arguments, r);
                    } else e = s.apply(this, arguments);
                    return f()(this, e);
                  });
              function a(e) {
                var t;
                return (
                  r()(this, a),
                  (t = s.call(this, e)),
                  console.warn(
                    'HYVOD SDK '
                      .concat('1.6.104', ' | ')
                      .concat('2024-01-25 11:33:49', ' | ')
                      .concat('RELEASE'),
                  ),
                  (t._sdkUA = g),
                  e.ua &&
                    ((g = ''.concat(e.ua, '&').concat('1.6.104', '&websocket')), (t._sdkUA = g)),
                  (t.signalSdk = null),
                  (t._source = e && e.source),
                  (t._closeMetric = !1),
                  (t._onDataMetricBind = t._onDataMetric.bind(h()(t))),
                  t.initTafSdk(),
                  t.initMetricEvent(),
                  t
                );
              }
              return (
                n()(a, [
                  {
                    key: 'start',
                    value: function () {
                      var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                      (e.closeFetch = !!e.closeFetch),
                        (e.ignoreSei = !0),
                        (e.secUseSeekTime = !0),
                        (this._closeMetric = !!e.closeMetric),
                        'zhixu_web' === this._source &&
                          ((e.isCloseVodPcdn = !0), (e.closeFetch = !0)),
                        ('editor' !== this._source && 'hotspot' !== this._source) ||
                          (e.isCloseVodPcdn = !0),
                        d()(_()(a.prototype), 'start', this).call(this, e);
                    },
                  },
                  {
                    key: 'initTafSdk',
                    value: function () {
                      var e = this;
                      this.signalSdk = new a.TafSdk.init({
                        appSrc: 'WEBH5&ZH&2052',
                        APPID: 'WEBH5',
                        uid: (this.uid || 0) + '',
                        guid: this.guid,
                        ua: this.ua,
                        isDebug: 67 === Number(this.appId) ? 1 : 0,
                        noConnect: 0,
                      });
                      var t = this.signalSdk.getUserId();
                      (t.sHuYaUA = this._sdkUA),
                        (t.sGuid = this.guid),
                        (this.signalSdk.addListener = this.signalSdk.on.bind(this.signalSdk)),
                        (this.signalSdk.removeListener = this.signalSdk.off.bind(this.signalSdk)),
                        this.signalSdk.on(S.events.WEBSOCKET_CONNECTED, function () {
                          e.signalSdk.connected = !0;
                        }),
                        this.setTafHandler(this.signalSdk);
                    },
                  },
                  {
                    key: 'getSdkUA',
                    value: function () {
                      return this._sdkUA;
                    },
                  },
                  {
                    key: 'initMetricEvent',
                    value: function () {
                      this.on('DATA_METRIC2', this._onDataMetricBind);
                    },
                  },
                  {
                    key: '_onDataMetric',
                    value: function (e, t) {
                      if (((t = t || []), 'zhixu_web' !== this._source && !this._closeMetric)) {
                        var i = [];
                        t.forEach(function (e) {
                          var t = Object.assign({}, e, { vExLog: {} });
                          i.push(t);
                        }),
                          this.signalSdk.sendDataMetric(i);
                      }
                    },
                  },
                ]),
                a
              );
            })(y());
          (T.TafSdk = S), (T.SDK_UA = g);
          var E = T;
          Object.values ||
            (Object.values = function (e) {
              if (e !== Object(e)) throw new TypeError('Object.values called on a non-object');
              var t = [];
              for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && t.push(e[i]);
              return t;
            }),
            (E.BUILDTIME = '2024-01-25 11:33:49'),
            (E.VERSION = '1.6.104'),
            (window.VodSdkPlayer = E);
          var C = E;
        },
        3099: function (e) {
          e.exports = function (e) {
            if ('function' != typeof e) throw TypeError(String(e) + ' is not a function');
            return e;
          };
        },
        6077: function (e, t, i) {
          var s = i(111);
          e.exports = function (e) {
            if (!s(e) && null !== e) throw TypeError("Can't set " + String(e) + ' as a prototype');
            return e;
          };
        },
        9670: function (e, t, i) {
          var s = i(111);
          e.exports = function (e) {
            if (!s(e)) throw TypeError(String(e) + ' is not an object');
            return e;
          };
        },
        8533: function (e, t, i) {
          'use strict';
          var s = i(2092).forEach,
            r = i(9341)('forEach');
          e.exports = r
            ? [].forEach
            : function (e) {
                return s(this, e, arguments.length > 1 ? arguments[1] : void 0);
              };
        },
        1318: function (e, t, i) {
          var s = i(5656),
            r = i(7466),
            a = i(1400),
            n = function (e) {
              return function (t, i, n) {
                var o,
                  h = s(t),
                  u = r(h.length),
                  d = a(n, u);
                if (e && i != i) {
                  for (; u > d; ) if ((o = h[d++]) != o) return !0;
                } else for (; u > d; d++) if ((e || d in h) && h[d] === i) return e || d || 0;
                return !e && -1;
              };
            };
          e.exports = { includes: n(!0), indexOf: n(!1) };
        },
        2092: function (e, t, i) {
          var s = i(9974),
            r = i(8361),
            a = i(7908),
            n = i(7466),
            o = i(5417),
            h = [].push,
            u = function (e) {
              var t = 1 == e,
                i = 2 == e,
                u = 3 == e,
                d = 4 == e,
                c = 6 == e,
                l = 7 == e,
                p = 5 == e || c;
              return function (f, m, _, v) {
                for (
                  var y,
                    S,
                    g = a(f),
                    T = r(g),
                    E = s(m, _, 3),
                    C = n(T.length),
                    D = 0,
                    P = v || o,
                    A = t ? P(f, C) : i || l ? P(f, 0) : void 0;
                  C > D;
                  D++
                )
                  if ((p || D in T) && ((S = E((y = T[D]), D, g)), e))
                    if (t) A[D] = S;
                    else if (S)
                      switch (e) {
                        case 3:
                          return !0;
                        case 5:
                          return y;
                        case 6:
                          return D;
                        case 2:
                          h.call(A, y);
                      }
                    else
                      switch (e) {
                        case 4:
                          return !1;
                        case 7:
                          h.call(A, y);
                      }
                return c ? -1 : u || d ? d : A;
              };
            };
          e.exports = {
            forEach: u(0),
            map: u(1),
            filter: u(2),
            some: u(3),
            every: u(4),
            find: u(5),
            findIndex: u(6),
            filterOut: u(7),
          };
        },
        1194: function (e, t, i) {
          var s = i(7293),
            r = i(5112),
            a = i(7392),
            n = r('species');
          e.exports = function (e) {
            return (
              a >= 51 ||
              !s(function () {
                var t = [];
                return (
                  ((t.constructor = {})[n] = function () {
                    return { foo: 1 };
                  }),
                  1 !== t[e](Boolean).foo
                );
              })
            );
          };
        },
        9341: function (e, t, i) {
          'use strict';
          var s = i(7293);
          e.exports = function (e, t) {
            var i = [][e];
            return (
              !!i &&
              s(function () {
                i.call(
                  null,
                  t ||
                    function () {
                      throw 1;
                    },
                  1,
                );
              })
            );
          };
        },
        5417: function (e, t, i) {
          var s = i(111),
            r = i(3157),
            a = i(5112)('species');
          e.exports = function (e, t) {
            var i;
            return (
              r(e) &&
                ('function' != typeof (i = e.constructor) || (i !== Array && !r(i.prototype))
                  ? s(i) && null === (i = i[a]) && (i = void 0)
                  : (i = void 0)),
              new (void 0 === i ? Array : i)(0 === t ? 0 : t)
            );
          };
        },
        4326: function (e) {
          var t = {}.toString;
          e.exports = function (e) {
            return t.call(e).slice(8, -1);
          };
        },
        9920: function (e, t, i) {
          var s = i(6656),
            r = i(3887),
            a = i(1236),
            n = i(3070);
          e.exports = function (e, t) {
            for (var i = r(t), o = n.f, h = a.f, u = 0; u < i.length; u++) {
              var d = i[u];
              s(e, d) || o(e, d, h(t, d));
            }
          };
        },
        8880: function (e, t, i) {
          var s = i(9781),
            r = i(3070),
            a = i(9114);
          e.exports = s
            ? function (e, t, i) {
                return r.f(e, t, a(1, i));
              }
            : function (e, t, i) {
                return (e[t] = i), e;
              };
        },
        9114: function (e) {
          e.exports = function (e, t) {
            return { enumerable: !(1 & e), configurable: !(2 & e), writable: !(4 & e), value: t };
          };
        },
        6135: function (e, t, i) {
          'use strict';
          var s = i(7593),
            r = i(3070),
            a = i(9114);
          e.exports = function (e, t, i) {
            var n = s(t);
            n in e ? r.f(e, n, a(0, i)) : (e[n] = i);
          };
        },
        9781: function (e, t, i) {
          var s = i(7293);
          e.exports = !s(function () {
            return (
              7 !=
              Object.defineProperty({}, 1, {
                get: function () {
                  return 7;
                },
              })[1]
            );
          });
        },
        317: function (e, t, i) {
          var s = i(7854),
            r = i(111),
            a = s.document,
            n = r(a) && r(a.createElement);
          e.exports = function (e) {
            return n ? a.createElement(e) : {};
          };
        },
        8324: function (e) {
          e.exports = {
            CSSRuleList: 0,
            CSSStyleDeclaration: 0,
            CSSValueList: 0,
            ClientRectList: 0,
            DOMRectList: 0,
            DOMStringList: 0,
            DOMTokenList: 1,
            DataTransferItemList: 0,
            FileList: 0,
            HTMLAllCollection: 0,
            HTMLCollection: 0,
            HTMLFormElement: 0,
            HTMLSelectElement: 0,
            MediaList: 0,
            MimeTypeArray: 0,
            NamedNodeMap: 0,
            NodeList: 1,
            PaintRequestList: 0,
            Plugin: 0,
            PluginArray: 0,
            SVGLengthList: 0,
            SVGNumberList: 0,
            SVGPathSegList: 0,
            SVGPointList: 0,
            SVGStringList: 0,
            SVGTransformList: 0,
            SourceBufferList: 0,
            StyleSheetList: 0,
            TextTrackCueList: 0,
            TextTrackList: 0,
            TouchList: 0,
          };
        },
        5268: function (e, t, i) {
          var s = i(4326),
            r = i(7854);
          e.exports = 'process' == s(r.process);
        },
        8113: function (e, t, i) {
          var s = i(5005);
          e.exports = s('navigator', 'userAgent') || '';
        },
        7392: function (e, t, i) {
          var s,
            r,
            a = i(7854),
            n = i(8113),
            o = a.process,
            h = o && o.versions,
            u = h && h.v8;
          u
            ? (r = (s = u.split('.'))[0] + s[1])
            : n &&
              (!(s = n.match(/Edge\/(\d+)/)) || s[1] >= 74) &&
              (s = n.match(/Chrome\/(\d+)/)) &&
              (r = s[1]),
            (e.exports = r && +r);
        },
        748: function (e) {
          e.exports = [
            'constructor',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'toLocaleString',
            'toString',
            'valueOf',
          ];
        },
        2109: function (e, t, i) {
          var s = i(7854),
            r = i(1236).f,
            a = i(8880),
            n = i(1320),
            o = i(3505),
            h = i(9920),
            u = i(4705);
          e.exports = function (e, t) {
            var i,
              d,
              c,
              l,
              p,
              f = e.target,
              m = e.global,
              _ = e.stat;
            if ((i = m ? s : _ ? s[f] || o(f, {}) : (s[f] || {}).prototype))
              for (d in t) {
                if (
                  ((l = t[d]),
                  (c = e.noTargetGet ? (p = r(i, d)) && p.value : i[d]),
                  !u(m ? d : f + (_ ? '.' : '#') + d, e.forced) && void 0 !== c)
                ) {
                  if (typeof l == typeof c) continue;
                  h(l, c);
                }
                (e.sham || (c && c.sham)) && a(l, 'sham', !0), n(i, d, l, e);
              }
          };
        },
        7293: function (e) {
          e.exports = function (e) {
            try {
              return !!e();
            } catch (e) {
              return !0;
            }
          };
        },
        9974: function (e, t, i) {
          var s = i(3099);
          e.exports = function (e, t, i) {
            if ((s(e), void 0 === t)) return e;
            switch (i) {
              case 0:
                return function () {
                  return e.call(t);
                };
              case 1:
                return function (i) {
                  return e.call(t, i);
                };
              case 2:
                return function (i, s) {
                  return e.call(t, i, s);
                };
              case 3:
                return function (i, s, r) {
                  return e.call(t, i, s, r);
                };
            }
            return function () {
              return e.apply(t, arguments);
            };
          };
        },
        5005: function (e, t, i) {
          var s = i(857),
            r = i(7854),
            a = function (e) {
              return 'function' == typeof e ? e : void 0;
            };
          e.exports = function (e, t) {
            return arguments.length < 2
              ? a(s[e]) || a(r[e])
              : (s[e] && s[e][t]) || (r[e] && r[e][t]);
          };
        },
        7854: function (e, t, i) {
          var s = function (e) {
            return e && e.Math == Math && e;
          };
          e.exports =
            s('object' == typeof globalThis && globalThis) ||
            s('object' == typeof window && window) ||
            s('object' == typeof self && self) ||
            s('object' == typeof i.g && i.g) ||
            (function () {
              return this;
            })() ||
            Function('return this')();
        },
        6656: function (e) {
          var t = {}.hasOwnProperty;
          e.exports = function (e, i) {
            return t.call(e, i);
          };
        },
        3501: function (e) {
          e.exports = {};
        },
        490: function (e, t, i) {
          var s = i(5005);
          e.exports = s('document', 'documentElement');
        },
        4664: function (e, t, i) {
          var s = i(9781),
            r = i(7293),
            a = i(317);
          e.exports =
            !s &&
            !r(function () {
              return (
                7 !=
                Object.defineProperty(a('div'), 'a', {
                  get: function () {
                    return 7;
                  },
                }).a
              );
            });
        },
        8361: function (e, t, i) {
          var s = i(7293),
            r = i(4326),
            a = ''.split;
          e.exports = s(function () {
            return !Object('z').propertyIsEnumerable(0);
          })
            ? function (e) {
                return 'String' == r(e) ? a.call(e, '') : Object(e);
              }
            : Object;
        },
        9587: function (e, t, i) {
          var s = i(111),
            r = i(7674);
          e.exports = function (e, t, i) {
            var a, n;
            return (
              r &&
                'function' == typeof (a = t.constructor) &&
                a !== i &&
                s((n = a.prototype)) &&
                n !== i.prototype &&
                r(e, n),
              e
            );
          };
        },
        2788: function (e, t, i) {
          var s = i(5465),
            r = Function.toString;
          'function' != typeof s.inspectSource &&
            (s.inspectSource = function (e) {
              return r.call(e);
            }),
            (e.exports = s.inspectSource);
        },
        9909: function (e, t, i) {
          var s,
            r,
            a,
            n = i(8536),
            o = i(7854),
            h = i(111),
            u = i(8880),
            d = i(6656),
            c = i(5465),
            l = i(6200),
            p = i(3501),
            f = o.WeakMap;
          if (n) {
            var m = c.state || (c.state = new f()),
              _ = m.get,
              v = m.has,
              y = m.set;
            (s = function (e, t) {
              return (t.facade = e), y.call(m, e, t), t;
            }),
              (r = function (e) {
                return _.call(m, e) || {};
              }),
              (a = function (e) {
                return v.call(m, e);
              });
          } else {
            var S = l('state');
            (p[S] = !0),
              (s = function (e, t) {
                return (t.facade = e), u(e, S, t), t;
              }),
              (r = function (e) {
                return d(e, S) ? e[S] : {};
              }),
              (a = function (e) {
                return d(e, S);
              });
          }
          e.exports = {
            set: s,
            get: r,
            has: a,
            enforce: function (e) {
              return a(e) ? r(e) : s(e, {});
            },
            getterFor: function (e) {
              return function (t) {
                var i;
                if (!h(t) || (i = r(t)).type !== e)
                  throw TypeError('Incompatible receiver, ' + e + ' required');
                return i;
              };
            },
          };
        },
        3157: function (e, t, i) {
          var s = i(4326);
          e.exports =
            Array.isArray ||
            function (e) {
              return 'Array' == s(e);
            };
        },
        4705: function (e, t, i) {
          var s = i(7293),
            r = /#|\.prototype\./,
            a = function (e, t) {
              var i = o[n(e)];
              return i == u || (i != h && ('function' == typeof t ? s(t) : !!t));
            },
            n = (a.normalize = function (e) {
              return String(e).replace(r, '.').toLowerCase();
            }),
            o = (a.data = {}),
            h = (a.NATIVE = 'N'),
            u = (a.POLYFILL = 'P');
          e.exports = a;
        },
        111: function (e) {
          e.exports = function (e) {
            return 'object' == typeof e ? null !== e : 'function' == typeof e;
          };
        },
        1913: function (e) {
          e.exports = !1;
        },
        133: function (e, t, i) {
          var s = i(5268),
            r = i(7392),
            a = i(7293);
          e.exports =
            !!Object.getOwnPropertySymbols &&
            !a(function () {
              return !Symbol.sham && (s ? 38 === r : r > 37 && r < 41);
            });
        },
        8536: function (e, t, i) {
          var s = i(7854),
            r = i(2788),
            a = s.WeakMap;
          e.exports = 'function' == typeof a && /native code/.test(r(a));
        },
        1574: function (e, t, i) {
          'use strict';
          var s = i(9781),
            r = i(7293),
            a = i(1956),
            n = i(5181),
            o = i(5296),
            h = i(7908),
            u = i(8361),
            d = Object.assign,
            c = Object.defineProperty;
          e.exports =
            !d ||
            r(function () {
              if (
                s &&
                1 !==
                  d(
                    { b: 1 },
                    d(
                      c({}, 'a', {
                        enumerable: !0,
                        get: function () {
                          c(this, 'b', { value: 3, enumerable: !1 });
                        },
                      }),
                      { b: 2 },
                    ),
                  ).b
              )
                return !0;
              var e = {},
                t = {},
                i = Symbol(),
                r = 'abcdefghijklmnopqrst';
              return (
                (e[i] = 7),
                r.split('').forEach(function (e) {
                  t[e] = e;
                }),
                7 != d({}, e)[i] || a(d({}, t)).join('') != r
              );
            })
              ? function (e, t) {
                  for (var i = h(e), r = arguments.length, d = 1, c = n.f, l = o.f; r > d; )
                    for (
                      var p,
                        f = u(arguments[d++]),
                        m = c ? a(f).concat(c(f)) : a(f),
                        _ = m.length,
                        v = 0;
                      _ > v;

                    )
                      (p = m[v++]), (s && !l.call(f, p)) || (i[p] = f[p]);
                  return i;
                }
              : d;
        },
        30: function (e, t, i) {
          var s,
            r = i(9670),
            a = i(6048),
            n = i(748),
            o = i(3501),
            h = i(490),
            u = i(317),
            d = i(6200)('IE_PROTO'),
            c = function () {},
            l = function (e) {
              return '<script>' + e + '</script>';
            },
            p = function () {
              try {
                s = document.domain && new ActiveXObject('htmlfile');
              } catch (e) {}
              var e, t;
              p = s
                ? (function (e) {
                    e.write(l('')), e.close();
                    var t = e.parentWindow.Object;
                    return (e = null), t;
                  })(s)
                : (((t = u('iframe')).style.display = 'none'),
                  h.appendChild(t),
                  (t.src = String('javascript:')),
                  (e = t.contentWindow.document).open(),
                  e.write(l('document.F=Object')),
                  e.close(),
                  e.F);
              for (var i = n.length; i--; ) delete p.prototype[n[i]];
              return p();
            };
          (o[d] = !0),
            (e.exports =
              Object.create ||
              function (e, t) {
                var i;
                return (
                  null !== e
                    ? ((c.prototype = r(e)), (i = new c()), (c.prototype = null), (i[d] = e))
                    : (i = p()),
                  void 0 === t ? i : a(i, t)
                );
              });
        },
        6048: function (e, t, i) {
          var s = i(9781),
            r = i(3070),
            a = i(9670),
            n = i(1956);
          e.exports = s
            ? Object.defineProperties
            : function (e, t) {
                a(e);
                for (var i, s = n(t), o = s.length, h = 0; o > h; ) r.f(e, (i = s[h++]), t[i]);
                return e;
              };
        },
        3070: function (e, t, i) {
          var s = i(9781),
            r = i(4664),
            a = i(9670),
            n = i(7593),
            o = Object.defineProperty;
          t.f = s
            ? o
            : function (e, t, i) {
                if ((a(e), (t = n(t, !0)), a(i), r))
                  try {
                    return o(e, t, i);
                  } catch (e) {}
                if ('get' in i || 'set' in i) throw TypeError('Accessors not supported');
                return 'value' in i && (e[t] = i.value), e;
              };
        },
        1236: function (e, t, i) {
          var s = i(9781),
            r = i(5296),
            a = i(9114),
            n = i(5656),
            o = i(7593),
            h = i(6656),
            u = i(4664),
            d = Object.getOwnPropertyDescriptor;
          t.f = s
            ? d
            : function (e, t) {
                if (((e = n(e)), (t = o(t, !0)), u))
                  try {
                    return d(e, t);
                  } catch (e) {}
                if (h(e, t)) return a(!r.f.call(e, t), e[t]);
              };
        },
        8006: function (e, t, i) {
          var s = i(6324),
            r = i(748).concat('length', 'prototype');
          t.f =
            Object.getOwnPropertyNames ||
            function (e) {
              return s(e, r);
            };
        },
        5181: function (e, t) {
          t.f = Object.getOwnPropertySymbols;
        },
        6324: function (e, t, i) {
          var s = i(6656),
            r = i(5656),
            a = i(1318).indexOf,
            n = i(3501);
          e.exports = function (e, t) {
            var i,
              o = r(e),
              h = 0,
              u = [];
            for (i in o) !s(n, i) && s(o, i) && u.push(i);
            for (; t.length > h; ) s(o, (i = t[h++])) && (~a(u, i) || u.push(i));
            return u;
          };
        },
        1956: function (e, t, i) {
          var s = i(6324),
            r = i(748);
          e.exports =
            Object.keys ||
            function (e) {
              return s(e, r);
            };
        },
        5296: function (e, t) {
          'use strict';
          var i = {}.propertyIsEnumerable,
            s = Object.getOwnPropertyDescriptor,
            r = s && !i.call({ 1: 2 }, 1);
          t.f = r
            ? function (e) {
                var t = s(this, e);
                return !!t && t.enumerable;
              }
            : i;
        },
        7674: function (e, t, i) {
          var s = i(9670),
            r = i(6077);
          e.exports =
            Object.setPrototypeOf ||
            ('__proto__' in {}
              ? (function () {
                  var e,
                    t = !1,
                    i = {};
                  try {
                    (e = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set).call(
                      i,
                      [],
                    ),
                      (t = i instanceof Array);
                  } catch (e) {}
                  return function (i, a) {
                    return s(i), r(a), t ? e.call(i, a) : (i.__proto__ = a), i;
                  };
                })()
              : void 0);
        },
        4699: function (e, t, i) {
          var s = i(9781),
            r = i(1956),
            a = i(5656),
            n = i(5296).f,
            o = function (e) {
              return function (t) {
                for (var i, o = a(t), h = r(o), u = h.length, d = 0, c = []; u > d; )
                  (i = h[d++]), (s && !n.call(o, i)) || c.push(e ? [i, o[i]] : o[i]);
                return c;
              };
            };
          e.exports = { entries: o(!0), values: o(!1) };
        },
        3887: function (e, t, i) {
          var s = i(5005),
            r = i(8006),
            a = i(5181),
            n = i(9670);
          e.exports =
            s('Reflect', 'ownKeys') ||
            function (e) {
              var t = r.f(n(e)),
                i = a.f;
              return i ? t.concat(i(e)) : t;
            };
        },
        857: function (e, t, i) {
          var s = i(7854);
          e.exports = s;
        },
        1320: function (e, t, i) {
          var s = i(7854),
            r = i(8880),
            a = i(6656),
            n = i(3505),
            o = i(2788),
            h = i(9909),
            u = h.get,
            d = h.enforce,
            c = String(String).split('String');
          (e.exports = function (e, t, i, o) {
            var h,
              u = !!o && !!o.unsafe,
              l = !!o && !!o.enumerable,
              p = !!o && !!o.noTargetGet;
            'function' == typeof i &&
              ('string' != typeof t || a(i, 'name') || r(i, 'name', t),
              (h = d(i)).source || (h.source = c.join('string' == typeof t ? t : ''))),
              e !== s
                ? (u ? !p && e[t] && (l = !0) : delete e[t], l ? (e[t] = i) : r(e, t, i))
                : l
                ? (e[t] = i)
                : n(t, i);
          })(Function.prototype, 'toString', function () {
            return ('function' == typeof this && u(this).source) || o(this);
          });
        },
        4488: function (e) {
          e.exports = function (e) {
            if (null == e) throw TypeError("Can't call method on " + e);
            return e;
          };
        },
        3505: function (e, t, i) {
          var s = i(7854),
            r = i(8880);
          e.exports = function (e, t) {
            try {
              r(s, e, t);
            } catch (i) {
              s[e] = t;
            }
            return t;
          };
        },
        6200: function (e, t, i) {
          var s = i(2309),
            r = i(9711),
            a = s('keys');
          e.exports = function (e) {
            return a[e] || (a[e] = r(e));
          };
        },
        5465: function (e, t, i) {
          var s = i(7854),
            r = i(3505),
            a = '__core-js_shared__',
            n = s[a] || r(a, {});
          e.exports = n;
        },
        2309: function (e, t, i) {
          var s = i(1913),
            r = i(5465);
          (e.exports = function (e, t) {
            return r[e] || (r[e] = void 0 !== t ? t : {});
          })('versions', []).push({
            version: '3.9.1',
            mode: s ? 'pure' : 'global',
            copyright: '© 2021 Denis Pushkarev (zloirock.ru)',
          });
        },
        3111: function (e, t, i) {
          var s = i(4488),
            r = '[' + i(1361) + ']',
            a = RegExp('^' + r + r + '*'),
            n = RegExp(r + r + '*$'),
            o = function (e) {
              return function (t) {
                var i = String(s(t));
                return 1 & e && (i = i.replace(a, '')), 2 & e && (i = i.replace(n, '')), i;
              };
            };
          e.exports = { start: o(1), end: o(2), trim: o(3) };
        },
        1400: function (e, t, i) {
          var s = i(9958),
            r = Math.max,
            a = Math.min;
          e.exports = function (e, t) {
            var i = s(e);
            return i < 0 ? r(i + t, 0) : a(i, t);
          };
        },
        5656: function (e, t, i) {
          var s = i(8361),
            r = i(4488);
          e.exports = function (e) {
            return s(r(e));
          };
        },
        9958: function (e) {
          var t = Math.ceil,
            i = Math.floor;
          e.exports = function (e) {
            return isNaN((e = +e)) ? 0 : (e > 0 ? i : t)(e);
          };
        },
        7466: function (e, t, i) {
          var s = i(9958),
            r = Math.min;
          e.exports = function (e) {
            return e > 0 ? r(s(e), 9007199254740991) : 0;
          };
        },
        7908: function (e, t, i) {
          var s = i(4488);
          e.exports = function (e) {
            return Object(s(e));
          };
        },
        7593: function (e, t, i) {
          var s = i(111);
          e.exports = function (e, t) {
            if (!s(e)) return e;
            var i, r;
            if (t && 'function' == typeof (i = e.toString) && !s((r = i.call(e)))) return r;
            if ('function' == typeof (i = e.valueOf) && !s((r = i.call(e)))) return r;
            if (!t && 'function' == typeof (i = e.toString) && !s((r = i.call(e)))) return r;
            throw TypeError("Can't convert object to primitive value");
          };
        },
        9711: function (e) {
          var t = 0,
            i = Math.random();
          e.exports = function (e) {
            return 'Symbol(' + String(void 0 === e ? '' : e) + ')_' + (++t + i).toString(36);
          };
        },
        3307: function (e, t, i) {
          var s = i(133);
          e.exports = s && !Symbol.sham && 'symbol' == typeof Symbol.iterator;
        },
        5112: function (e, t, i) {
          var s = i(7854),
            r = i(2309),
            a = i(6656),
            n = i(9711),
            o = i(133),
            h = i(3307),
            u = r('wks'),
            d = s.Symbol,
            c = h ? d : (d && d.withoutSetter) || n;
          e.exports = function (e) {
            return (
              (a(u, e) && (o || 'string' == typeof u[e])) ||
                (o && a(d, e) ? (u[e] = d[e]) : (u[e] = c('Symbol.' + e))),
              u[e]
            );
          };
        },
        1361: function (e) {
          e.exports = '\t\n\v\f\r                　\u2028\u2029\ufeff';
        },
        2222: function (e, t, i) {
          'use strict';
          var s = i(2109),
            r = i(7293),
            a = i(3157),
            n = i(111),
            o = i(7908),
            h = i(7466),
            u = i(6135),
            d = i(5417),
            c = i(1194),
            l = i(5112),
            p = i(7392),
            f = l('isConcatSpreadable'),
            m = 9007199254740991,
            _ = 'Maximum allowed index exceeded',
            v =
              p >= 51 ||
              !r(function () {
                var e = [];
                return (e[f] = !1), e.concat()[0] !== e;
              }),
            y = c('concat'),
            S = function (e) {
              if (!n(e)) return !1;
              var t = e[f];
              return void 0 !== t ? !!t : a(e);
            };
          s(
            { target: 'Array', proto: !0, forced: !v || !y },
            {
              concat: function (e) {
                var t,
                  i,
                  s,
                  r,
                  a,
                  n = o(this),
                  c = d(n, 0),
                  l = 0;
                for (t = -1, s = arguments.length; t < s; t++)
                  if (S((a = -1 === t ? n : arguments[t]))) {
                    if (l + (r = h(a.length)) > m) throw TypeError(_);
                    for (i = 0; i < r; i++, l++) i in a && u(c, l, a[i]);
                  } else {
                    if (l >= m) throw TypeError(_);
                    u(c, l++, a);
                  }
                return (c.length = l), c;
              },
            },
          );
        },
        9554: function (e, t, i) {
          'use strict';
          var s = i(2109),
            r = i(8533);
          s({ target: 'Array', proto: !0, forced: [].forEach != r }, { forEach: r });
        },
        9653: function (e, t, i) {
          'use strict';
          var s = i(9781),
            r = i(7854),
            a = i(4705),
            n = i(1320),
            o = i(6656),
            h = i(4326),
            u = i(9587),
            d = i(7593),
            c = i(7293),
            l = i(30),
            p = i(8006).f,
            f = i(1236).f,
            m = i(3070).f,
            _ = i(3111).trim,
            v = 'Number',
            y = r.Number,
            S = y.prototype,
            g = h(l(S)) == v,
            T = function (e) {
              var t,
                i,
                s,
                r,
                a,
                n,
                o,
                h,
                u = d(e, !1);
              if ('string' == typeof u && u.length > 2)
                if (43 === (t = (u = _(u)).charCodeAt(0)) || 45 === t) {
                  if (88 === (i = u.charCodeAt(2)) || 120 === i) return NaN;
                } else if (48 === t) {
                  switch (u.charCodeAt(1)) {
                    case 66:
                    case 98:
                      (s = 2), (r = 49);
                      break;
                    case 79:
                    case 111:
                      (s = 8), (r = 55);
                      break;
                    default:
                      return +u;
                  }
                  for (n = (a = u.slice(2)).length, o = 0; o < n; o++)
                    if ((h = a.charCodeAt(o)) < 48 || h > r) return NaN;
                  return parseInt(a, s);
                }
              return +u;
            };
          if (a(v, !y(' 0o1') || !y('0b1') || y('+0x1'))) {
            for (
              var E,
                C = function (e) {
                  var t = arguments.length < 1 ? 0 : e,
                    i = this;
                  return i instanceof C &&
                    (g
                      ? c(function () {
                          S.valueOf.call(i);
                        })
                      : h(i) != v)
                    ? u(new y(T(t)), i, C)
                    : T(t);
                },
                D = s
                  ? p(y)
                  : 'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,fromString,range'.split(
                      ',',
                    ),
                P = 0;
              D.length > P;
              P++
            )
              o(y, (E = D[P])) && !o(C, E) && m(C, E, f(y, E));
            (C.prototype = S), (S.constructor = C), n(r, v, C);
          }
        },
        9601: function (e, t, i) {
          var s = i(2109),
            r = i(1574);
          s({ target: 'Object', stat: !0, forced: Object.assign !== r }, { assign: r });
        },
        6833: function (e, t, i) {
          var s = i(2109),
            r = i(4699).values;
          s(
            { target: 'Object', stat: !0 },
            {
              values: function (e) {
                return r(e);
              },
            },
          );
        },
        4747: function (e, t, i) {
          var s = i(7854),
            r = i(8324),
            a = i(8533),
            n = i(8880);
          for (var o in r) {
            var h = s[o],
              u = h && h.prototype;
            if (u && u.forEach !== a)
              try {
                n(u, 'forEach', a);
              } catch (e) {
                u.forEach = a;
              }
          }
        },
        1631: function (e) {
          e.exports = (function (e) {
            var t = {};
            function i(s) {
              if (t[s]) return t[s].exports;
              var r = (t[s] = { i: s, l: !1, exports: {} });
              return e[s].call(r.exports, r, r.exports, i), (r.l = !0), r.exports;
            }
            return (
              (i.m = e),
              (i.c = t),
              (i.d = function (e, t, s) {
                i.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: s });
              }),
              (i.r = function (e) {
                'undefined' != typeof Symbol &&
                  Symbol.toStringTag &&
                  Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
                  Object.defineProperty(e, '__esModule', { value: !0 });
              }),
              (i.t = function (e, t) {
                if ((1 & t && (e = i(e)), 8 & t)) return e;
                if (4 & t && 'object' == typeof e && e && e.__esModule) return e;
                var s = Object.create(null);
                if (
                  (i.r(s),
                  Object.defineProperty(s, 'default', { enumerable: !0, value: e }),
                  2 & t && 'string' != typeof e)
                )
                  for (var r in e)
                    i.d(
                      s,
                      r,
                      function (t) {
                        return e[t];
                      }.bind(null, r),
                    );
                return s;
              }),
              (i.n = function (e) {
                var t =
                  e && e.__esModule
                    ? function () {
                        return e.default;
                      }
                    : function () {
                        return e;
                      };
                return i.d(t, 'a', t), t;
              }),
              (i.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
              }),
              (i.p = ''),
              i((i.s = 83))
            );
          })([
            function (e, t, i) {
              'use strict';
              t.a = {
                KEY_VALUE: 'value',
                KEY_STR: 'str',
                KEY_DIM: 'dim',
                K: 'k',
                LIVE_TYPE: { FLV: 0, P2P: 1, HLS: 2 },
                HEART_TYPE: { START: 0, CONTINUS: 1, END: 2 },
                DIM_COM: {
                  P2P: 'p2p',
                  OEXP: 'oexp',
                  STREAM_URL: 'stream_url',
                  CDNDOMAIN: 'cdndomain',
                  STREAM: 'stream',
                  CDNP_CONNECT_IP: 'cdnp_connect_ip',
                  CDNP_CONNECTED: 'cdnp_connected',
                  CDP_ID: 'cdp_id',
                  USER_WAN_IP: 'user_wan_ip',
                  VIDEO_LOGIN_FAIL: 'video_login_fail',
                  ORIGINAL_BITRATE: 'original_bitrate',
                  BROWSER_NAME: 'browser_name',
                  BROWSER_VERSION: 'browser_version',
                  BROWSER_KERNEL: 'browser_kernel',
                  BROWSER_KERNEL_VERSION: 'browser_kernel_version',
                  OS_NAME: 'os_name',
                  OS_VERSION: 'os_version',
                  RENDER_INFO: 'render_info',
                  SPHD_TYPE: 'sphd_type',
                  DPI: 'dpi',
                  CDNIP: 'cdnip',
                  AUTO_BITRATE: 'auto_bitrate',
                  P2P_COOL_FLAG: 'p2p_cool_flag',
                  MP_EXPERIMENT: 'mp_experiment',
                  ACT_LOAD_TYPE: 'act_load_type',
                  STREAM_INDEX: 'stream_index',
                  OBS_RENDER_MODE: 'obs_render_mode',
                  PLAYER_TYPE: 'player_type',
                  LIVE_TYPE: 'live_type',
                  STREAM_TYPE: 'stream_type',
                  HLS_TYPE: 'hls_type',
                  VR_ENABLE: 'vr_enable',
                  VR_MODE: 'vr_mode',
                  CODEC_TYPE: 'codec_type',
                  CDN_CIP: 'cdn_cip',
                  CDN_SIP: 'cdn_sip',
                  ALT_SVC: 'alt_svc',
                  QUIC: 'quic',
                  START_TYPE: 'start_type',
                  PCDN_ORIGIN: 'pcdn_origin',
                  CLI_ISP: 'cli_isp',
                  CLI_PROV: 'cli_prov',
                  SUB_PCDN_STATE: 'sub_pcdn_state',
                  STREAM_TOTAL_DURATION: 'stream_total_duration',
                  CODERATE_BPS: 'coderatebps',
                  VOD_CODERATE: 'vod_coderate',
                  PLAYBACK_RATE: 'playbackrate',
                  ANCHOR_UID: 'anchoruid',
                  FLV_PCDN_STATE: 'flv_pcdn_state',
                  H265: 'h265',
                  V_DECODEC: 'v_decodec',
                  V_RECV_FRAME: 'v_recv_frames',
                  V_TO_DECODE_FRAMES: 'v_to_decode_frames',
                  V_DECODE_FRAME: 'v_decode_frames',
                  V_PLAY_FRAME: 'v_play_frame',
                  V_TO_PLAY_FRAME: 'v_to_play_frames',
                  AV_DELTA: 'av_delta',
                  A_RENDER_SILENCE_TIME: 'a_render_silence_time',
                  SIGNAL_RTT: 'signal_rtt',
                  CDNP_RTT: 'cdnp_rtt',
                  SUB_CHANGE_STATE: 'sub_change_state',
                  FORCE_SUB_TYPE: 'force_sub_type',
                  USE_PCDN: 'use_pcdn',
                  MUTE_DATA: 'mute_data',
                  VISIBILITY_STATE: 'visibility_state',
                  SESSION_ID: 'session_id',
                  VIDEO_MIN_BUF: 'video_min_buf',
                  AUTO_VERSION: 'auto_version',
                  MSE_PLAYER: 'mse_player',
                  DECODE_HARDWARE_ACCELERATION: 'decode_hardware_acceleration',
                  HARDWARE_CONCURRENCY: 'hardware_concurrency',
                  START_CODERATEBPS: 'start_coderatebps',
                  DEFAULT_BITRATEBPS: 'default_bitratebps',
                  MEMORY_BITRATEBPS: 'memory_bitratebps',
                  RECOMMEND_BITRATEBPS: 'recommend_bitratebps',
                  AUTO_USER_TAGS: 'auto_user_tags',
                  AUTO_OPEN: 'auto_open',
                  V_RECV_FRAMES: 'v_recv_frames',
                  H265_SUPPORT_REASON: 'h265_support_reason',
                  PLACE: 'place',
                  PULLSTREAM_REASOM: 'pullstream_reason',
                  VIDEO_PAUSE_BUFFERS: 'video_pause_buffers',
                  VIDEO_PAUSE_CONTINUE_BUFFERS: 'video_pause_continue_buffers',
                  HARDDECODE: 'harddecode',
                  DECODE_SUPPORT: 'deocode_support',
                  IS_TIE_STREAM: 'is_tie_stream',
                  IS_REDIRECT: 'is_redirect',
                  CLOSE_EXTSTREAM: 'close_extstream',
                  MOSAIC_DATA: 'mosaic_data',
                  PCDN_IAAS: 'pcdn_iaas',
                  P2P_TO_FLV_DOMAIN: 'p2p_to_flv_domain',
                  DECODE_CAPABILITY: 'decode_capability',
                  WEBCODECS_BACK_REASON: 'webcodecs_back_reason',
                  STREAM_FORMAT: 'stream_format',
                  A_CFG: 'a_cfg',
                  IS_MUTE: 'is_mute',
                  IS_MOSAIC: 'is_mosaic',
                  I_GPU: 'i_gpu',
                  P_IAAS_INFO: 'p_iaas_info',
                  UA: 'ua',
                  IAAS_BW_INFO: 'iaas_bw_info',
                  IS_PAID_ROOM: 'is_paid_room',
                  SUB_STATA_INFO: 'sub_state_info',
                  PSUB_PROXY_INFO: 'psub_proxy_info',
                  I_AVC_CHANGE: 'i_avc_change',
                  FEATURE_STATUS: 'features_status',
                  V_ENHANCE_TYPE: 'v_enhance_type',
                  V_ENHANCE_ENTRY: 'v_enhance_entry',
                  ENHANCE_BACK_REASON: 'enhance_back_reason',
                  FRAMERATE: 'framerate',
                  GAMEID: 'gameid',
                },
                DIM_CORE: {
                  REPROT_TIME: 'reprot_time',
                  BATCH_ID: 'batch_id',
                  REPORT_TYPE: 'report_type',
                  CREATE_TIME: 'create_time',
                  VIDEO_BAD_QUALITY_OLD: 'video_bad_quality_old',
                  VIDEO_BAD_QUALITY: 'video_bad_quality',
                  VIDEO_BAD_REASON: 'video_bad_reason',
                  USER_PROPERTY: 'user_property',
                  HEART_TYPE: 'heart_type',
                  SIGNAL_USER_PROPERTY: 'signal_user_property',
                  F_BUF: 'f_buf',
                  VTDAVG: 'vtdavg',
                  VTDMAX: 'vtdmax',
                  ATDAVG: 'atdavg',
                  ATDMAX: 'atdmax',
                  VRTADE: 'vrtade',
                  VRTADEMAX: 'vrtademax',
                  VATRDE: 'vatrde',
                  VATRDEMAX: 'vatrdemax',
                  ARTADE: 'artade',
                  ARTADEMAX: 'artademax',
                  AATRDE: 'aatrde',
                  AATRDEMAX: 'aatrdemax',
                  VRDFPS: 'vrdfps',
                  VRCFPS: 'vrcfps',
                  VDF: 'vdf',
                  PFPS: 'pfps',
                  PFPSMAX: 'pfpsmax',
                  PFPSMIN: 'pfpsmin',
                  VRBQ: 'vrbq',
                  VRBQC: 'vrbqc',
                  VRBQD: 'vrbqd',
                  AVSDA: 'avsda',
                  AVSDM: 'avsdm',
                  AVEFS: 'avefs',
                  VIDEO_H265_BAD_QUALITY: 'video_h265_bad_quality',
                  AUTO_U_REASON: 'auto_u_reason',
                  AUTO_D_REASON: 'auto_down_reason',
                  AUTO_HEART_TYPE: 'auto_heart_type',
                  AUTO_CODEC_CHANGE_TYPE: 'auto_codec_change_type',
                  AUTO_BAD_REASON: 'auto_bad_reason',
                  AUTO_BAD_MIN_REASON: 'auto_bad_min_reason',
                  DISPATCH_ID: 'dispatch_id',
                  PCDN_SVR_ISP: 'pcdn_svr_isp',
                  PCDN_SVR_AREA: 'pcdn_svr_area',
                  UNOPEND_CPFLV_BW: 'unopend_cpflv_bw',
                  NORETURN_CPFLV_BW: 'noreturn_cpflv_bw',
                  UNSUPPORT_CPFLV_BW: 'unsupport_cpflv_bw',
                  LOAD_LIB_CPFLV_BW: 'load_lib_cpflv_bw',
                  GATHER_CPFLV_BW: 'gather_cpflv_bw',
                  GATHER_FAIL_CPFLV_BW: 'gather_fail_cpflv_bw',
                  LOAD_SUC_CPFLV_BW: 'load_suc_cpflv_bw',
                  ERROR_CPFLV_BW: 'error_cpflv_bw',
                  KICK_CPFLV_BW: 'kick_cpflv_bw',
                  WAIT_CDN_LOAD_CPFLV_BW: 'wait_cdn_load_cpflv_bw',
                  DTS_ERROR_CPFLV_BW: 'dts_error_cpflv_bw',
                  OTHER_CPFLV_BW: 'other_cpflv_bw',
                  ENHANCE_TOTAL: 'enhance_total',
                  ENHACNE_LESS_30: 'enhance_less_30',
                  ENHACNE_LESS_150: 'enhance_less_150',
                  ENHACNE_LESS_200: 'enhance_less_200',
                  ENHACNE_LARGE_200: 'enhance_large_200',
                },
                PCDN_DATA: {
                  GET_PCDN_URL_TOTAL_CNT: 'get_pcdn_url_total_cnt',
                  GET_PCDN_URL_SUCCESS: 'get_pcdn_url_success',
                  GET_PCDN_URL_SUC_FREETIME: 'get_pcdn_url_suc_freetime',
                  GET_PCDN_ERR_NOT_REACHED: 'get_pcdn_err_not_reached',
                  GET_PCDN_ERR_OVER_RUN: 'get_pcdn_err_over_run',
                  GET_PCDN_ERR_OVER_RUN_FREETIME: 'get_pcdn_err_over_run_freetime',
                  GET_PCDN_ERR_NOT_COVERD: 'get_pcdn_err_not_coverd',
                  GET_PCDN_ERR_OTHER: 'get_pcdn_err_other',
                  GET_PCDN_ERROR_REQ: 'get_pcdn_err_req',
                  GET_SUBS_URL_ERROR_CNT: 'get_subs_url_error_cnt',
                  GET_PCDN_DATA_TIME: 'get_pcdn_data_time',
                  GET_PCDN_DATA_TIME_CNT: 'get_pcdn_data_time_cnt',
                  GET_PCDN_SUBS_URL_TIME: 'get_pcdn_subs_url_time',
                  GET_PCDN_SUBS_URL_TIME_CNT: 'get_pcdn_subs_url_time_cnt',
                  GET_CDN_DATA_TIME: 'get_cdn_data_time',
                  GET_CDN_DATA_TIME_CNT: 'get_cdn_data_time_cnt',
                  PCDN_REPEAT_BW: 'pcdn_repeat_bw',
                  USE_PCDN: 'use_pcdn',
                },
                DIM_LINK_STA: {
                  name: 'link_sta',
                  CONNECT_SUC: 'cns',
                  HAS_DATA: 'hd',
                  DATA_ENOUGH: 'de',
                  AUDIO_CONFIG: 'acf',
                  VIDEO_CONFIG: 'vcf',
                  VIDEO_IFRAME: 'vif',
                  VIDEO_FRAME: 'vf',
                  AUDIO_FRAME: 'af',
                  NO_SLICE_DATA: 'nsd',
                  H265: 'h265',
                },
                DIM_LINK_SAM: {
                  name: 'link_sam',
                  AUDIO_DTS: 'ad',
                  VIDEO_DTS: 'vd',
                  AUDIO_RATE: 'ar',
                  VIDEO_RATE: 'vr',
                  AUDIO_WAIT_PUSH: 'awp',
                  VIDEO_WAIT_PUSH: 'vwp',
                  AUDIO_WAIT_REASON: 'awr',
                  VIDEO_WAIT_REASON: 'vwr',
                  AUDIO_WAIT_GAP: 'awg',
                  VIDEO_WAIT_GAP: 'vwg',
                  VIDEO_DROP_FRAMES: 'vdf',
                  VIDEO_AUDIO_GAP: 'vag',
                  VIDEO_BUFFER_EMPTY_TIME: 'vbet',
                  VIDEO_BUFFER_EMPTY_COUNT: 'vbec',
                  SPEED: 'sp',
                },
                DIM_H265_SAM: {
                  name: 'h265_sam',
                  decode_fps: 'decode_fps',
                  render_fps: 'render_fps',
                  frame_list_len: 'frame_list_len',
                },
                DIM_EXT: { CDN_IP: 'cdn_ip' },
                CORE: {
                  name: 'yspwl.web.live.user.heart20',
                  HTD: 'htd',
                  AUDIO_CNT: 'audio_cnt',
                  BIG_AUDIO_CNT: 'big_audio_cnt',
                  A_VOL: 'a_vol',
                  A_E_DUR: 'a_e_dur',
                  V_CAPTURE_JITTERS: 'v_capture_jitters',
                  V_CAPTURE_JITTER_MAX: 'v_capture_jitter_max',
                  A_CAPTURE_JITTERS: 'a_capture_jitters',
                  A_CAPTURE_JITTER_MAX: 'a_capture_jitter_max',
                  STAT_BW: 'stat_bw',
                  CDN_TOTAL_BW: 'cdn_total_bw',
                  CDN_VALID_BW: 'cdn_valid_bw',
                  CDN_REPEAT_BW: 'cdn_repeat_bw',
                  P2P_TOTAL_BW: 'p2p_total_bw',
                  P2P_REPEAT_BW: 'p2p_repeat_bw',
                  P2P_VALID_BW: 'p2p_valid_bw',
                  RANGE_TOTAL_BW: 'range_total_bw',
                  RANGE_VALID_BW: 'range_valid_bw',
                  PEER_RANGE_TOTAL_BW: 'peer_range_total_bw',
                  PEER_RANGE_VALID_BW: 'peer_range_valid_bw',
                  PEER_RANGE_REPEAT_BW: 'peer_range_repeat_bw',
                  DEFAULT_BW: 'default_bw',
                  FAST_BW: 'fast_bw',
                  PATCH_BW: 'patch_bw',
                  COMPETE_BW: 'compete_bw',
                  FIXED_BW: 'fixed_bw',
                  FORCE_BW: 'force_bw',
                  SIGNAL_UP_BW: 'signal_up_bw',
                  SIGNAL_DOWN_BW: 'signal_down_bw',
                  ENC_FLOW: 'enc_flow',
                  DEC_FLOW: 'dec_flow',
                  DEC_OK_CNT: 'dec_ok_cnt',
                  DEC_FAIL_CNT: 'dec_fail_cnt',
                  BUFFER_LENGTH: 'buffer_length',
                  PLAY_DELAY: 'play_delay',
                  DELAY_ANCHOR: 'delay_anchor',
                  DELAY_SERVER: 'delay_server',
                  DELAY_NET: 'delay_net',
                  SVR_DELAY_INFOS: 'svr_delay_infos',
                  DELAY_NODE_INFO: 'delay_node_info',
                  SVR_LAST_P_DELAY: 'svr_last_p_delay',
                  UPLOADER_TYPE: 'uploader_type',
                  ENCODER_SOURCE: 'encoder_source',
                  OBS_FPS: 'obs_fps',
                  OBS_UPLOAD_TS: 'obs_upload_ts',
                  VIDEO_BLOCK_COUNT: 'video_block_count',
                  VIDEO_BLOCK_DURATION: 'video_block_duration',
                  VIDEO_BAD_BUFFER: 'video_bad_buffer',
                  VIDEO_CONTINUE_BUFFER: 'video_continue_buffer',
                  PRTTCNT: 'prttcnt',
                  PRSUCNT: 'prsucnt',
                  PRNNCnt: 'prnncnt',
                  PRTOCNT: 'prtocnt',
                  PRFTCNT: 'prftcnt',
                  PRFSCNT: 'prfscnt',
                  PRNPID: 'prnpid',
                  PRNSDK: 'prnsdk',
                  PRNPUB: 'prnpub',
                  PRNSUB: 'prnsub',
                  PRNPEER: 'prnpeer',
                  PRNSTREAM: 'prnstream',
                  PRNLATE: 'prnlate',
                  PRNRTT: 'prnrtt',
                  PRNNONE: 'prnnone',
                  AUTO_SWITCH_CNT: 'auto_switch_cnt',
                  AUTO_SWITCH_SAME_CNT: 'auto_switch_same_cnt',
                  AUTO_BAD_QUALITY: 'auto_bad_quality',
                  AUTO_BAD_QUALITY_UP: 'auto_bad_quality_up',
                  AUTO_BAD_DURATION: 'auto_bad_duration',
                  AUTO_BAD_DURATION_UP: 'auto_bad_duration_up',
                  AUTO_BAD_SWITCH: 'auto_bad_switch',
                  AUTO_BAD_SWITCH_SAME: 'auto_bad_switch_same',
                  AUTO_BAD_SWITCH_UP: 'auto_bad_switch_up',
                  AUTO_BAD_DONE: 'auto_bad_done',
                  AUTO_BAD_BUFFER: 'auto_bad_buffer',
                  AUTO_CONTINUE_BUFFER: 'auto_continue_buffer',
                  PCDN_TOTAL_BW: 'pcdn_total_bw',
                  PCDN_FREETIME_BW: 'pcdn_freetime_bw',
                  PCDN_REALTIME_BW: 'pcdn_realtime_bw',
                  SWITCH_CDN_CNT: 'switch_cdn_cnt',
                  GET_STREAM_CNT: 'get_stream_cnt',
                  GET_STREAM_ERROR_CNT: 'get_stream_error_cnt',
                  GET_STREAM_LINK_ERROR_CNT: 'get_stream_link_error_cnt',
                  GET_STREAM_LINK_TIMEOUT_CNT: 'get_stream_link_timeout_cnt',
                  GET_STREAM_LOW_DATA_CNT: 'get_stream_low_data_cnt',
                  REAL_KBPS_SAMPLE: 'real_kbps_sample',
                  REAL_FLAC_KBPS_SAMPLE: 'real_flac_kbps_sample',
                  RECV_TOTAL_SAMPLE: 'recv_total_sample',
                  RECV_LAN_SAMPLE: 'recv_lan_sample',
                  HAS_PUNCH_NODES: 'has_punch_nodes',
                  HAS_PUNCH_NODES_SDKV2: 'has_punch_nodes_sdkv2',
                  HAS_PUNCH_NODES_WEBV2: 'has_punch_nodes_webv2',
                  HAS_PUNCH_NODES_MEDIA: 'has_punch_nodes_media',
                  HAS_PUNCH_NODES_SIGNAL: 'has_punch_nodes_signal',
                  FORWARD_REJECT_CNT: 'forward_reject_cnt',
                  FRAME_BUFFER_DELAY: 'frame_buffer_delay',
                  STREAM_BUFFERED: 'stream_buffered',
                  RANGE_SIP_SUC_CNT: 'range_sip_suc_cnt',
                  RANGE_SIP_DIF_CNT: 'range_sip_dif_cnt',
                  RANGE_REQ_CNT: 'range_req_cnt',
                  RANGE_RSP_CNT: 'range_rsp_cnt',
                  RANGE_CONNECT_TIME: 'range_connect_time',
                  RANGE_RSP_TIME: 'range_rsp_time',
                  VISIBILITY_HIDDEN_TIME: 'visibility_hidden_time',
                  VIDEO_PERFPAUSE_CONTINUE_CNT: 'video_perfpause_continue_cnt',
                  VIDEO_PERFPAUSE_CNT: 'video_perfpause_cnt',
                  FULL_CDN_CNT: 'full_cdn_cnt',
                  SUB_CDN_CNT: 'sub_cdn_cnt',
                  PATCH_CDN_CNT: 'patch_cdn_cnt',
                  MOSAIC_DURATION: 'mosaic_duration',
                  MOSAIC_COUNT: 'mosaic_count',
                  MUTE_DURATION: 'mute_duration',
                  MUTE_COUNT: 'mute_count',
                },
                VIDEO_LINK: {
                  PVSSC: 'pvssc',
                  PVFSC: 'pvfsc',
                  PVLSC: 'pvlsc',
                  PVLFC: 'pvlfc',
                  PVPFC: 'pvpfc',
                  PVPTC: 'pvptc',
                  PVPAFC: 'pvpafc',
                  PVRFC: 'pvrfc',
                },
                UPDOWN_INFO: {
                  name: 'updown_info',
                  UPLINK_BW: 'uplink_bw',
                  DOWNLINK_BW: 'downlink_bw',
                  UPLINK_CNT: 'uplink_cnt',
                  UPLINK_LIMIT_CNT: 'uplink_limit_cnt',
                },
                SIGNAL_HEART20: {
                  name: 'yspwl.web.live.signal.heart20',
                  STREAM_NAME: 'stream_name',
                  STREAM_DELAY: 'stream_delay',
                  FULL_FRAME_NUM: 'full_frame_num',
                  LOST_FRAME_NUM: 'lost_frame_num',
                  P2P_FLOW_DANMU: 'p2p_flow_danmu',
                  P2P_FLOW_EMPTY: 'p2p_flow_empty',
                  RESEND_TOTAL_CNT: 'resend_total_cnt',
                  RESEND_TIMEOUT_CNT: 'resend_timeout_cnt',
                  RESEND_ERROR_CNT: 'resend_error_cnt',
                  MIN_DELAY: 'min_delay',
                  MAX_DELAY: 'max_delay',
                  AVE_DELAY: 'ave_delay',
                  SER_2_REC_DELAY: 'ser_2_rec_delay',
                  REC_2_MERGE_DELAY: 'rec_2_merge_delay',
                  MERGE_2_NOTIFY_DELAY: 'merge_2_notify_delay',
                  CDN_FLOW_DANMU_VALID: 'cdn_flow_danmu_valid',
                  CDN_FLOW_DANMU_TOTAL: 'cdn_flow_danmu_total',
                  CDN_FLOW_EMPTY_VALID: 'cdn_flow_empty_valid',
                  CDN_FLOW_EMPTY_TOTAL: 'cdn_flow_empty_total',
                },
                HLS_INFO: {
                  name: 'hls_info',
                  M3U8_CNT: 'm3u8_cnt',
                  M3U8_SUC_CNT: 'm3u8_suc_cnt',
                  M3U8_FAIL_CNT: 'm3u8_fail_cnt',
                  M3U8_EMPTY_CNT: 'm3u8_empty_cnt',
                  M3U8_WRONG_CNT: 'm3u8_wrong_cnt',
                  M3U8_TIMEOUT_CNT: 'm3u8_timeout_cnt',
                  TS_CNT: 'ts_cnt',
                  TS_SUC_CNT: 'ts_suc_cnt',
                  TS_FAIL_CNT: 'ts_fail_cnt',
                  TS_TIMEOUT_CNT: 'ts_timeout_cnt',
                  TS_OPEN_AVG: 'ts_open_avg',
                  TS_LOADED_AVG: 'ts_loaded_avg',
                  TS_SPEED_AVG: 'ts_speed_avg',
                  TS_SIZE_AVG: 'ts_size_avg',
                },
                FRAME_INFO: {
                  name: 'frame_info',
                  LATE_SEQS: 'late_seqs',
                  LOSS_FRAMES: 'loss_frames',
                  PLAY_FRAMES: 'play_frames',
                  DTS_JUMPPAUSE_CNT: 'dts_jumppause_cnt',
                  SKIP_PAUSE_CNT: 'skip_pause_cnt',
                  EMPTY_FRAMES: 'empty_frames',
                  FULL_RATIO: 'full_ratio',
                },
                SUB_INFO: {
                  name: 'sub_info',
                  TOTAL_CNT: 'total_cnt',
                  SUCC_CNT: 'succ_cnt',
                  FAIL_CNT: 'fail_cnt',
                  TIMEOUT_CNT: 'timeout_cnt',
                  KICK_CNT: 'kick_cnt',
                  TRY_CNT: 'try_cnt',
                  CMP_TOTAL_CNT: 'cmp_total_cnt',
                  CMP_SUCC_CNT: 'cmp_succ_cnt',
                  CMP_FAIL_CNT: 'cmp_fail_cnt',
                  CMP_TIMEOUT_CNT: 'cmp_timeout_cnt',
                  FORCE_CNT: 'force_cnt',
                },
                PUNCH_INFO: {
                  name: 'punch_info',
                  TOTAL_CNT: 'total_cnt',
                  VALID_CNT: 'valid_cnt',
                  TRY_CNT: 'try_cnt',
                  SUCC_CNT: 'succ_cnt',
                  BACK_CNT: 'back_cnt',
                  BACK_SUCC_CNT: 'back_succ_cnt',
                  BACK_TRY_CNT: 'back_try_cnt',
                },
                PUNCH_BACK_RET: { name: 'punch_back_ret' },
                RESEND_INFO: {
                  name: 'resend_info',
                  RESEND_CNT: 'resend_cnt',
                  TIMEOUT_CNT: 'timeout_cnt',
                  ERROR_CNT: 'error_cnt',
                  SLICE_CNT: 'slice_cnt',
                  RESPOND_CNT: 'respond_cnt',
                  LATE_CNT: 'late_cnt',
                  MISS_CNT: 'miss_cnt',
                  REPEAT_CNT: 'repeat_cnt',
                  REPEAT_SUCC_CNT: 'repeat_succ_cnt',
                  REPEAT_FAIL_CNT: 'repeat_fail_cnt',
                  LIMIT_CNT: 'limit_cnt',
                },
                SUBSTREAM_INFO: {
                  name: 'substream_info',
                  FIXED_CNT: 'fixed_cnt',
                  FORCE_CNT: 'force_cnt',
                  COMPETE_CNT: 'compete_cnt',
                },
                FORCESUB_REASON: {
                  name: 'forcesub_reason',
                  NOPEER_CNT: 'nopeer_cnt',
                  SUBEND_CNT: 'subend_cnt',
                  TIMEOUT_CNT: 'timeout_cnt',
                },
                SUB_RETURN: {
                  sub_name: 'sub_return',
                  switch_name: 'switch_return',
                  last_name: 'last_return',
                },
                NONODE_RETURN: {
                  name: 'nonode_return',
                  PRESENTER_CNT: 'presenter_cnt',
                  UPLINK_LESS_CNT: 'uplink_less_cnt',
                  PULL_SAME_CNT: 'pull_same_cnt',
                  SUBED_CNT: 'subed_cnt',
                  COOL_CNT: 'cool_cnt',
                  DELAY_CNT: 'delay_cnt',
                  RTT_CNT: 'rtt_cnt',
                  LATE_CNT: 'late_cnt',
                  FAST_CNT: 'fast_cnt',
                  NONE_CNT: 'none_cnt',
                },
                AUTO_INFO: {
                  name: 'auto_info',
                  UP_CNT: 'up_cnt',
                  DOWN_CNT: 'down_cnt',
                  BACK_CNT: 'back_cnt',
                },
                P2P_TCP_TYPE: { name: 'p2p_tcp_type' },
                P2P_TCP_STATE: { name: 'p2p_tcp_state' },
                PCDN_BW_DATA: { name: 'pcdn_bw_data' },
                AI_CONTROL_DATA: {
                  name: 'ai_control_data',
                  AI_P2P_CNT: 'ai_p2p_cnt',
                  AI_FLV_CNT: 'ai_flv_cnt',
                  AI_P2P_TIMEOUT_CNT: 'ai_p2p_timeout_cnt',
                  AI_FLV_TIMEOUT_CNT: 'ai_flv_timeout_cnt',
                  AI_P2P_ERROR_CNT: 'ai_p2p_error_cnt',
                  AI_FLV_ERROR_CNT: 'ai_flv_error_cnt',
                  AI_P2P_SWITCH_CNT: 'ai_p2p_switch_cnt',
                  AI_FLV_SWITCH_CNT: 'ai_flv_switch_cnt',
                  AI_P2P_NOT_SWITCH_CNT: 'ai_p2p_not_switch_cnt',
                  AI_FLV_NOT_SWITCH_CNT: 'ai_flv_not_switch_cnt',
                  AI_FLV_ERROR_SWITCH_CNT: 'ai_flv_error_switch_cnt',
                  AI_FLV_ERROR_NOT_SWITCH_CNT: 'ai_flv_error_not_switch_cnt：flv',
                  AI_START_P2P_CNT: 'ai_start_p2p_cnt',
                  AI_START_FLV_CNT: 'ai_start_flv_cnt',
                },
                ACT: {
                  name: 'yspwl.web.live.user.act',
                  field: 'act_type',
                  SWITCH_BITRATE: 'switch_bitrate',
                  SWITCH_AUTO: 'switch_auto',
                  SWITCH_LINE: 'switch_line',
                  SWITCH_PTS: 'switch_pts',
                  FAST_SAMPLE: 'fast_sample',
                  NO_PICTURE: 'no_picture',
                  NO_PICTURE_ALL: 'no_picture_all',
                  NO_PICTURE_P2P: 'no_picture_p2p',
                  LINK_STA: 'link_sta',
                  HLS_PLAY_SUCC: 'hls_play_succ',
                  HLS_LOAD_SUCC: 'hls_load_succ',
                  P2P_PLAY_FAIL: 'p2p_play_fail',
                  P2P_LOAD_VIDEO: 'p2p_load_video',
                  P2P_RESTART: 'p2p_restart',
                  TCP_NO_SLICE: 'tcp_no_slice',
                  TCP_OPEN_TIME: 'tcp_open_time',
                  HTTP_CODE_: 'http_code_',
                  HTTP_CLOSE: 'http_close',
                  TCP_TIMEOUT: 'tcp_timeout',
                  P2P_COOLING: 'p2p_cooling',
                  CONNECT_VIDEO_TS: 'connect_video_ts',
                  RECV_VIDEO_TS: 'recv_video_ts',
                  FIRST_VIDEO_PKG_TS: 'first_video_pkg_ts',
                  FIRST_VIDEO_IFRAME_TS: 'first_video_iframe_ts',
                  VIDEO_IFRAME_TS: 'video_iframe_ts',
                  FIRST_VIDEO_RENDER_TS: 'first_video_render_ts',
                  VIDEO_PLAYED_TS: 'video_played_ts',
                  VIDEO_LOAD_TS: 'video_load_ts',
                  VIDEO_LOAD_SEG: 'video_load_seg',
                  VIDEO_LOAD_TS_ALL: 'video_load_ts_all',
                  VIDEO_LOAD_TS_V2: 'video_load_ts_v2',
                  AUTO_TEST_RESULT: 'auto_test_result',
                  VIDEO_GET_VP_TS: 'video_get_vp_ts',
                  VIDEO_LOGIN_TS: 'video_login_ts',
                  LOAD_M3U8_TS: 'load_m3u8_ts',
                  FIRST_FRAG_LOAD_TS: 'first_frag_load_ts',
                  FIRST_FRAG_LOADED_TS: 'first_frag_loaded_ts',
                  FIRST_FRAG_SIZE: 'first_frag_size',
                  SIGNAL_TURN_BACK: 'signal_turn_back',
                  SWITCH_COST: 'switch_cost',
                  OB_BG_DURATION: 'ob_bg_duration',
                  LOAD_P2PLIB_ERROR: 'load_p2plib_error',
                  LOAD_PCDNLIB_ERROR: 'load_pcdnlib_error',
                  PCDN_TO_CDN: 'pcdn_to_cdn',
                  MUTE_STATUS: 'mute_status',
                  NO_PICTURE2: 'no_picture2',
                  H265_WORKER_LOAD_TS: 'h265_worker_load_ts',
                  H265_STATUS: 'h265_status',
                  MOSAIC_STATUS: 'mosaic_status',
                  AI_P2P_FLV_SWITCH: 'ai_p2p_flv_switch',
                  BLOCK_BAD: 'block_bad',
                  SWITCH_AUDIO_RES: 'switch_audio_res',
                },
                VOD_ACT: { name: 'yspwl.web.vod.user.act' },
                VOD_CORE: {
                  name: 'yspwl.web.vod.user.heart20',
                  AV1_SVR: 'av1_svr',
                  AV1_SPT: 'av1_spt',
                  AV1_USE: 'av1_use',
                  VOD_BAD_QUALITY: 'vod_bad_quality',
                  VOD_BAD_REASON: 'vod_bad_reason',
                  VOD_NO_PICTURE: 'vod_no_picture',
                  VOD_NO_PICTURE_REASON: 'vod_no_picture_reason',
                  VOD_DTS_JUMP: 'vod_dts_jump',
                  VOD_BLOCK_COUNT: 'vod_block_count',
                  VOD_BLOCK_DURATION: 'vod_block_duration',
                  M3U8_FILE_BW: 'm3u8_file_bw',
                  TS_PLAY_TIME: 'ts_play_time',
                  TS_SIZE: 'ts_size',
                  VOD_PCDN_STATE: 'vod_pcdn_state',
                  VIDEO_H265_BAD_QUALITY: 'video_h265_bad_quality',
                },
                VOD_DIM_CORE: {
                  TS_START_TIME: 'ts_start_time',
                  TS_END_TIME: 'ts_end_time',
                  ENHANCE_TOTAL: 'enhance_total',
                  ENHACNE_LESS_30: 'enhance_less_30',
                  ENHACNE_LESS_150: 'enhance_less_150',
                  ENHACNE_LESS_200: 'enhance_less_200',
                  ENHACNE_LARGE_200: 'enhance_large_200',
                },
                VOD_DIM_COM: {
                  VOD_VIDEOSOURCEID: 'vod_videosourceid',
                  VOD_CODERATE: 'vod_coderate',
                  VODANCHORID: 'vodanchorid',
                  STREAMTYPE: 'streamtype',
                  RESOURCE_TYPE: 'resource_type',
                  HAS_302: 'has_302',
                  VOD_FIRST_TS: 'vod_first_ts',
                  SGUID: 'sguid',
                  M3U8_FILE_BW: 'm3u8_file_bw',
                  VOD_AB_SWITCH: 'vod_ab_switch',
                  CREATE_TIME: 'create_time',
                  VOD_PLACE: 'vod_place',
                  VOD_MP4_SIZE: 'vod_mp4_size',
                  VOD_DURATION: 'vod_duration',
                  VOD_NO_PICTURE_REASON: 'vod_no_picture_reason',
                  LINE: 'line',
                  BACKUP_FIELD1: 'backup_field1',
                  BACKUP_FIELD2: 'backup_field2',
                  BACKUP_FIELD3: 'backup_field3',
                  BACKUP_FIELD4: 'backup_field4',
                  BACKUP_FIELD5: 'backup_field5',
                  BACKUP_FIELD6: 'backup_field6',
                  RENDER_INFO: 'render_info',
                  HARDWARE_CONCURRENCY: 'hardware_concurrency',
                  MSE_PLAYER: 'mse_player',
                  DECODE_HARDWARE_ACCELERATION: 'decode_hard_acc',
                  HARDDECODE: 'harddecode',
                  DECODE_SUPPORT: 'deocode_support',
                  DECODE_CAPABILITY: 'decode_capability',
                  WEBCODECS_BACK_REASON: 'webcodecs_back_reason',
                  I_GPU: 'i_gpu',
                  FEATURE_STATUS: 'features_status',
                  V_ENHANCE_TYPE: 'v_enhance_type',
                  V_ENHANCE_ENTRY: 'v_enhance_entry',
                  ENHANCE_BACK_REASON: 'enhance_back_reason',
                  FRAMERATE: 'framerate',
                  GAMEID: 'gameid',
                  PULLSTREAM_REASOM: 'pullstream_reason',
                  IS_MEMORY_GEAR: 'is_memory_gear',
                },
                VOD_EXT_COM: {
                  VID: 'vid',
                  CLIENT: 'client',
                  PID: 'pid',
                  BITRATE: 'bitrate',
                  DEFINITION: 'definition',
                  SCENE: 'scene',
                },
                ROOM_HEART60: {
                  name: 'yspwl.web.liveroom.user.heart1',
                  SESSION_ID: 'session_id',
                  NOW_TS: 'now_ts',
                  MAX_NO_RENDER_DU: 'max_no_render_du',
                  NO_RENDER_DURATION: 'no_render_duration',
                  REPEAT_PIC_TS: 'repeat_pic_ts',
                },
              };
            },
            function (e, t, i) {
              'use strict';
              var s = i(23),
                r = i(12),
                a = i(5),
                n = i(4),
                o = 99;
              function h() {
                return a.a.getDateTimeStr() + ' ';
              }
              var u = !1,
                d = {
                  _data: [],
                  _data2: [],
                  _length: 0,
                  debug: function () {
                    var e = h(),
                      t = Array.apply(null, arguments);
                    (t[0] = e + t[0]), o <= -1 && console.log.apply(console, t);
                  },
                  log: function (e) {
                    var t = h(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]), o <= 0 && console.log.apply(console, i), d.record(i, 'log');
                  },
                  info: function (e) {
                    var t = h(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      o <= 1 && console.info.apply(console, i),
                      d.record(i, 'info');
                  },
                  warn: function (e) {
                    var t = h(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      o <= 2 && console.warn.apply(console, i),
                      d.record(i, 'warn');
                  },
                  error: function (e) {
                    var t = h(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      o <= 3 && console.error.apply(console, i),
                      d.record(i, 'error');
                  },
                  group: function (e) {
                    var t = h(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      o <= 1 &&
                        (console.groupCollapsed || console.group || console.log).apply(console, i),
                      d.record(i, 'group');
                  },
                  groupEnd: function () {
                    console.groupEnd && console.groupEnd.apply(console);
                  },
                  setLevel: function (e) {
                    e != o && (console.log(h() + ' set log level from ' + o + ' to ' + e), (o = e));
                  },
                  getLevel: function () {
                    return o;
                  },
                  record: function (e, t) {
                    var i = n.a.logMaxLen || 1e3;
                    d._length === i + 100 &&
                      (d._data.splice(0, 100), d._data2.splice(0, 100), (d._length = i));
                    var s = 0,
                      r = (e.shift() || '').toString();
                    for (
                      r = r.replace(/\%c/gi, function (e, t) {
                        return s++, '';
                      });
                      s-- && e.length;

                    )
                      e.shift();
                    for (var a = 0, o = e.length; a < o; a++)
                      'object' == typeof e[a] && (e[a] = '');
                    e.unshift(r);
                    var h = e.join(' ');
                    d._length++,
                      d._data.push('['.concat(t, ']').concat(h)),
                      d._data2.push('['.concat(t, ']').concat(h));
                  },
                  getLog: function () {
                    return (
                      u ||
                        ((u = !0),
                        d._data.unshift(r.a.platform + ' ' + r.a.name + ' ' + r.a.version.string)),
                      d._data
                    );
                  },
                  getNewLog: function () {
                    u ||
                      ((u = !0),
                      d._data2.unshift(r.a.platform + ' ' + r.a.name + ' ' + r.a.version.string));
                    var e = Object(s.a)(d._data2);
                    return (d._data2.length = 0), e;
                  },
                  logcss: function (e, t, i) {
                    var s = 'font-weight:900';
                    return (
                      e && (s += ';color:' + e),
                      t && (s += ';background:' + t),
                      i && (s += ';border:3px solid ' + i),
                      s
                    );
                  },
                  padNum: function (e, t) {
                    var i = e.toString().length,
                      s = Math.max(0, t - i);
                    return '0'.repeat(s) + e;
                  },
                };
              t.a = d;
            },
            function (e, t, i) {
              'use strict';
              function s(e, t) {
                if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              'use strict';
              function s(e, t) {
                for (var i = 0; i < t.length; i++) {
                  var s = t[i];
                  (s.enumerable = s.enumerable || !1),
                    (s.configurable = !0),
                    'value' in s && (s.writable = !0),
                    Object.defineProperty(e, s.key, s);
                }
              }
              function r(e, t, i) {
                return t && s(e.prototype, t), i && s(e, i), e;
              }
              i.d(t, 'a', function () {
                return r;
              });
            },
            function (e, t, i) {
              'use strict';
              var s = i(2),
                r = i(3),
                a = i(10),
                n = i(1),
                o = i(11),
                h = i(12),
                u = new ((function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.pushGop = !1),
                      (this.jitBufLen = 3e3),
                      (this.jitMaxBufLen = 4e3),
                      (this.jitMinBufLen = 2e3),
                      (this.resendPlayThreshold = 1500),
                      (this.mutilLinkConfig = [
                        [0, 4e3],
                        [8, 4],
                      ]),
                      (this.resendModeConfig = [
                        [0, 2e3],
                        [1, 2],
                      ]),
                      (this.resendMode = 1),
                      (this.resendWaitLimitList = {
                        500: 2500,
                        2e3: 2500,
                        4e3: 2500,
                        8e3: 2500,
                        1e4: 2500,
                        12e3: 2500,
                        2e4: 2500,
                      }),
                      (this.sliceListLengthMaxList = {
                        500: 1e3,
                        2e3: 25e3,
                        8e3: 1e4,
                        1e4: 12500,
                        2e4: 25e3,
                      }),
                      (this.noUrgentResentBuffer = 2e3),
                      (this.latency = [
                        [3e3, 2e3, 4e3, 2e3],
                        [1e3, 500, 1500, 1e3],
                      ]),
                      (this.jitTest = [2e3, 5e3, 1500]),
                      (this.jitPid = []),
                      (this.hlsJitCfg = [6e3, 4e3, 8e3]),
                      (this.hlsUseFetch = 100),
                      (this.obsUseFull = 0),
                      (this.obsFullRatio = 1),
                      (this.obsBgRatio = 0),
                      (this.obsFaceRatio = 0),
                      (this.obsSrAudio = 1),
                      (this.obsFrame = 0),
                      (this.obsSyncTs = 50),
                      (this.obsSeekTs = 200),
                      (this.obsSeekJumpTs = 0),
                      (this.obsRateTs = 10),
                      (this.p2pQuicktime = 5e3),
                      (this.baseSubs = 10),
                      (this.urgentResend = 1),
                      (this.urgentResendAudio = 1),
                      (this.crossPunchPloy = 1),
                      (this.crossClientPer = 'all|all:100'),
                      (this.crossClientUpBwMod = 1),
                      (this.syncMob = 1),
                      (this.noSignalNode = 1),
                      (this.crossCdn = 1),
                      (this.crossLineSub = 'all'),
                      (this.punchWan = ''),
                      (this.p2pWssLines = 'all'),
                      (this.connectTotalTime = 6e3),
                      (this.connectTimeout = 2e3),
                      (this.connectPcdnTimeout = 4e3),
                      (this.flowTimeout = 2e3),
                      (this.flowRetryTimes = 3),
                      (this.renderTimeout = 3e3),
                      (this.noDataTimeout = 4e3),
                      (this.noSliceTimeout = 1e4),
                      (this.noPcdnDataTimeout = 2e3),
                      (this.testResender = 0),
                      (this.maxResendTimes = 3),
                      (this.resendDelayTs = 400),
                      (this.patchSubTs = 500),
                      (this.http2Channel = ''),
                      (this.rangeNums = 256),
                      (this.deleteH264Aud = []),
                      (this.useChangeRate = []),
                      (this.audioEmptyDur = 100),
                      (this.p2pMediaLogCfg = 'all|all:0'),
                      (this.p2pSignalLogCfg = 'all|all:0'),
                      (this.p2pPunchMode = 2),
                      (this.freeBufferBitrate = 15e3),
                      (this.needCooling = 1),
                      (this.needQueue = 0),
                      (this.queueTime = 500),
                      (this.punchedCoolingTime = 1e4),
                      (this.delayCloseNum = 200),
                      (this.punchTimeout = 7e3),
                      (this.maxPunchedCnt = 50),
                      (this.maxPunchedCntMore = 60),
                      (this.maxNodeCnt = 50),
                      (this.maxPunchedCntSdk = 10),
                      (this.punchBackCooling = 2e4),
                      (this.punchIgnoreTime = 3e4),
                      (this.coefficient = 8),
                      (this.trySubNum = 5),
                      (this.trySubTime = 7e3),
                      (this.fastTime = 5e3),
                      (this.lostSeqTime = 6),
                      (this.sliceLate = 1e3),
                      (this.sliceFast = 1500),
                      (this.sliceConstraints = 6e3),
                      (this.sliceConstraintBad = 8e3),
                      (this.pubSelectorConstraint = 0),
                      (this.badDelay = 1e3),
                      (this.emuteDelay = 2200),
                      (this.switchDelay = 500),
                      (this.aliveTimeout = 1e3),
                      (this.resubTime = 3e4),
                      (this.sliceTimeout = 1e3),
                      (this.maxPeerStreamNum = 7),
                      (this.maxPeerStreamNum20M = 4),
                      (this.maxUplinkBw = 6e3),
                      (this.closeUids = []),
                      (this.closeSub = 0),
                      (this.closeSubRooms = []),
                      (this.closeAllUids = []),
                      (this.p2pMediaCfg = 'all|all:100'),
                      (this.p2pSignalCfg = 'all|all:100'),
                      (this.ignoreUids = [
                        1259515661837, 1354740567, 2368274334, 1706479145, 2367547387,
                        1099531787526, 1827824615, 1531433300, 1680925919, 2227875499, 2272316519,
                        367138632, 1677942333, 157525e4, 1610145122, 1199534013894, 813535483,
                        1259553301717, 570184355, 679257140, 1067459140, 2222971974, 1279514601966,
                        1199577571975, 294636272, 518969542, 745373351, 1199515480194,
                        1199568157971, 1199517808234, 1430972471, 1356299405, 1724691, 10748220,
                        1199525977184, 2176998321, 1099531752788, 1487476672, 1199536349047,
                        1259525634703, 17363578, 1191588902, 1629021815, 124902116, 1705516953,
                        1199536199401, 1120785052, 1852594244, 2285403183, 1199526826004,
                        2250967121, 2208606321,
                      ]),
                      (this.flvEmptyAudioFrame = 1),
                      (this.sendHeartBeatAlone = 0),
                      (this.signalNoCdnp = []),
                      (this.switchSeamLessLine = 0),
                      (this.isProduce = !0),
                      (this.coderates = [
                        [15e3, 0, 8e3, 5, 5, 230, 1, 20],
                        [8e3, 0, 4e3, 5, 5, 230, 5, 10],
                        [6e3, 0, 4e3, 5, 5, 170, 5, 10],
                        [4e3, 0, 4e3, 5, 5, 120, 5, 10],
                        [3e3, 0, 4e3, 5, 5, 80, 5, 10],
                        [0, 0, 4e3, 5, 5, 50, 5, 10],
                      ]),
                      (this.seaSubNums = []),
                      (this.swapdomain = {}),
                      (this.iP2PType = 2),
                      (this.danmuZipPids = []),
                      (this.randomPercent = 1e4),
                      (this.frameBufLen = [2500, 1500, 1500, 3500]),
                      (this.bufferMode = 2),
                      (this.bufferConfig = []),
                      (this.urgentResendTime = 1500),
                      (this.forceSkipFrameTime = 3900),
                      (this.frameTimeout = 3e3),
                      (this.p2pBuffer = [3500, 2500, 4500]),
                      (this.p2pOpenBrowsers = ['opera']),
                      (this.jitCfg = [
                        [15e3, 4e3, 3e3, 5e3],
                        [0, 3e3, 2e3, 4e3],
                      ]),
                      (this.jitCfgPid = []),
                      (this.jitJump = [2e4, 8e3]),
                      (this.jitLowLatency = 2e3),
                      (this.jitLow = [1500, 1e3, 2e3]),
                      (this.safariPlayDelay = 500),
                      (this.safariFirstLoad = !0),
                      (this.jitAB = []),
                      (this.waitAudio = 1),
                      (this._isFrameBuffer = -1),
                      (this.isSubUseHttps = 1),
                      (this.usePcdn = 1),
                      (this.pcdnSubsConfig = [1, 1, 1]),
                      (this.notUsePcdnUids = []),
                      (this.notUsePcdnUsers = []),
                      (this.notUseFlvPcdnUsers = []),
                      (this.isPcdnReportErr = 0),
                      (this.pcdnNoDataMod = 2),
                      (this.pcdnSlowTime = 2),
                      (this.pcdnSlowCoolTime = 6e4),
                      (this.pcdnSowCnt = 5),
                      (this.pcdnSwitchUrls = ['xd']),
                      (this.pcdnPubIceCfg = 'all|all:100'),
                      (this.pcdnPubIceOpen = !1),
                      (this.isMute = 1),
                      (this.muteCfg = [1e4]),
                      (this.isAutoNoPicture = 0),
                      (this.playbackrateMin = 0.95),
                      (this.playbackrateMax = 1.05),
                      (this.pcdnFlv = 1),
                      (this.isAiP2PToFlv = 1),
                      (this.randomAIP2PFlvPercent = Math.floor(1e4 * Math.random())),
                      (this.aiRandomPercent = 5e3),
                      (this.aiABRandomPercent = 2e3),
                      (this.aiUids = []),
                      (this.aiBlackUids = []),
                      (this.aiBlackLines = []),
                      (this.aiBlack2Uids = []),
                      (this.isAutoH265 = 0),
                      (this.renderDelta = 300),
                      (this.autoReportTime = 4e3),
                      (this.autoReportUsers = []),
                      (this.h265Config = [
                        [
                          [2e3, 4e3],
                          [4e4, 4e4],
                        ],
                        [4e3, 2e3, 1300, 1e3, 500],
                        75,
                        [
                          [500, 1e3, 1300, 2e3, 4e3],
                          [3, 3, 3, 3, 4],
                        ],
                        30,
                        3,
                        [!0, !0],
                      ]),
                      (this.h265MseConfig = [
                        1,
                        [86],
                        [500, 1e3, 1300, 2e3, 4e3],
                        [],
                        [[500, 1e3, 1300, 2e3, 4e3], [5, 5, 5, 5, 5], [], []],
                        1,
                      ]),
                      (this.h265MseChromeConfig = [107, 3e4, 4, 0, 1]),
                      (this.vodH265Config = [1, 0, 1]),
                      (this.wcs265BlackUids = []),
                      (this.mse265BlackUids = [
                        1225100385, 1199560999561, 1199636047603, 1647046597, 1199627582352,
                        1609064756, 1807493940, 1624909255, 1624909255, 2364972864, 1259514251347,
                        1782184421, 1564616639, 1259524774186, 1199518148059, 1579681436,
                        1866277950820, 1488231977, 1346502221, 124968931, 1465100418, 1199538749015,
                        1700394847, 1199554450502,
                      ]),
                      (this.wcsGBlackIds = []),
                      (this.hardH265UidList = []),
                      (this.h265MseWhiteBlackUids = [[], []]),
                      (this.h265BlackUids = []),
                      (this.replayH265BlackUids = []),
                      (this.whiteH265Uids = [[], 1]),
                      (this.h265NoPushVideoDis = 1e4),
                      (this.randomH265Percent = Math.floor(1e4 * Math.random())),
                      (this.h265PercentConfig = 1e5),
                      (this.enableAiMosaic = 1),
                      (this.limitMosaicAreas = 40),
                      (this.aiMosaicUis = []),
                      (this.aiRequestInterval = 5e3),
                      (this.aiBathRequestInterval = 3e4),
                      (this.aiBufferEmptyRequestInterval = 3e5),
                      (this.playerdata = { profileP2POpt: '' }),
                      (this.isCommonAb = 1),
                      (this.aiP2PFlvConfig = [5e3, 5]),
                      (this.closePcdnBitrate = 8e4),
                      (this.closePcdn500 = 0),
                      (this.setVideoCTCfg = [-100, 1500, 1e4]),
                      (this.jumpBufferCfg = [30, 1e3, 1e4, 5e3, 30, 25]),
                      (this.jumpBufferCfg2 = [0, 500]),
                      (this.jumpBufferCfgAids = []),
                      (this.jumpBufferVer = 80),
                      (this.sliceQuantityPerSecond = 1),
                      (this.useNewPloy = 1),
                      (this.minPlayout = 170),
                      (this.maxPlayout = 500),
                      (this.playoutUids = []),
                      (this.isMuteAct = 0),
                      (this.useAV1 = !1),
                      (this.useAV1PidList = []),
                      (this.useAV1LinesAndBitRates = [[], 0]),
                      (this.isClosePlayBackRate = 1),
                      (this.pcdnAbConnectData = [0, [1e3, 2e3, 3e3, 4e3]]),
                      (this.isForceUseWorker = 0),
                      (this.platform = o.a.PLATFORM_TYPE_NAME.web),
                      (this.av1PercentConfig = 5e3),
                      (this.isConfigSupportH265 = 1),
                      (this.isVodSupportH265 = 0),
                      (this.abUseAv1 = 1),
                      (this.platform = o.a.PLATFORM_TYPE_NAME.web),
                      (this.h265GameIds = [!0, []]),
                      (this.isNoVideoReport = 0),
                      (this.simdAbPercentConfig = 5e3),
                      (this.vodAbSwitch = 0),
                      (this.dropFrameAb = 0),
                      (this.useNewParser = 1),
                      (this.maxGop = 3e3),
                      (this.autoCfg = {
                        close: 0,
                        closeLines: [],
                        closePids: [],
                        upGap: 0,
                        downGap: 15e3,
                        backGap: 15e3,
                        upPer: 0.8,
                        downPer: 0.3,
                        downNowPer: 0.2,
                        waitPer: 0.8,
                        downBitrate: 2e3,
                        slow: 0.85,
                        bufCnt: 10,
                        sucPer: 0.9,
                        sampleTime: 200,
                        minTime: 1e4,
                        maxTime: 3e5,
                        sysTime: 1e4,
                        evalTime: 300,
                        highRate: 4e3,
                        badBuf: 2e3,
                        badCnt: 3,
                        badS: [1e4, 3],
                        badL: [6e4, 5],
                        noRederTime: 12e4,
                        monitorTime: 15e3,
                      }),
                      (this.continueBufferDeltaStart = 6e3),
                      (this.continueBufferDeltaEnd = 3e3),
                      (this.autoBufferScore = 1e3),
                      (this.autoConnectScore = 500),
                      (this.autoFirstScore = 500),
                      (this.autoPtsScore = 500),
                      (this.force_auto_count = 9999),
                      (this.force_auto_effective_time = 2592e5),
                      (this.autoReportCfg = [1, 3, 0, 1]),
                      (this.autoReportSea = 0),
                      (this.isWebAutoAB = 0),
                      (this.maxBitRate = 500),
                      (this.recSysExpiredTime = 6e4),
                      (this.autoDownTimer = 0),
                      (this.autoDownMaxBitrate = 1),
                      (this.minFps = 24),
                      (this.dropTime = 0),
                      (this.perfBitrate = 2e3),
                      (this.perfCnt = 1),
                      (this.perfBuf = 2e3),
                      (this.p2p302Config = [[[6, 1, 0, 1]], 1]),
                      (this.sdkCloseAutoAi = 0),
                      (this.closeP2PPids = []),
                      (this.closeP2PConfig = [1, 1]),
                      (this.enableAutoCloseP2P = 1),
                      (this.isCloseVodPcdn = 0),
                      (this.is265VideoLoadTs = 1),
                      (this.isSendPlaybackLoadTime = 0),
                      (this.vodPcdnOpenBuffer = 1e4),
                      (this.vodPcdnCloseBuffer = 7e3),
                      (this.vodPcdnCoolTime = 6e4),
                      (this.vodPcdnBufferCfg = [[1e4, 7e3, 6e4], [], []]),
                      (this.perfBlockCfg = [2e3, 3e3, 6e3]),
                      (this.vodPcdnStatCfg = [0]),
                      (this.vodAv1Cfg = 'all|all:100'),
                      (this.vodAv1Cd = 6e4),
                      (this.vodAv1CdCnt = 5),
                      (this.vodAv1CloseCfg = [
                        [
                          [4e3, 8],
                          [1300, 2],
                        ],
                        [4e3, 4],
                      ]),
                      (this.vodAv1UseFirst = 1),
                      (this.vodUseBackupField = [1, 1, 1, 1, 1, 1, 0]),
                      (this.vodDtsFixCfg = [0, 0]),
                      (this.vodRetryTime = 5e3),
                      (this.blockBadCfg = [800, 1]),
                      (this.perfWin7kaCfg = [2e3, 3]),
                      (this.openWebcodec = 1),
                      (this.vodOpenWebcodecs = 0),
                      (this.av1Webcodecs = 0),
                      (this.webCodecBlackUids = []),
                      (this.webCodecsAnchoruids = []),
                      (this.vodWebcodecsGameIds = []),
                      (this.replayWebcodecsGameIds = [1]),
                      (this.vodWebcodecsVids = []),
                      (this.vodWcsBroCfg = [0]),
                      (this.wcsBlackAids = []),
                      (this.webCodecCfg = [4, 8e3, 2e3, 1, 1500, [2e3, 1e4, 2e4]]),
                      (this.webCodecAVDeltaCfg = [5e3, 2e3]),
                      (this.noNextWcsTimeUids = []),
                      (this.useNextWcsTime = 1),
                      (this.hardHevcConfig = [0, 0, 0]),
                      (this.repairSameDtsCfg = ''),
                      (this.repairSameDts = 0),
                      (this.useNewCdnp = 1),
                      (this.shieldAudioCfg = [1, 3e3, 6e3, 15e3, 15e3, 3e3]),
                      (this.useCdnpFixed = 'all|all:100'),
                      (this.signalClose = ''),
                      (this.signalExperiment = 0),
                      (this.signalRangeGap = 'all|all:1000'),
                      (this.signalSubGap = 'all|all:1000'),
                      (this.signalBaseIndexExp = 0),
                      (this.signalBaseIndexExpCfg = ''),
                      (this.signalBaseIndexMode = 3),
                      (this.signalBaseIndexCfg = 'all|all:3'),
                      (this.fakeHdrCfg = [
                        {
                          auid: [1346609715, 1099531728402, 1560173863, 1544838475, 1544838388],
                          bitrateMap: { 4100: 17200, 4200: 17100, 20100: 19200 },
                        },
                      ]),
                      (this.fpsBitrateCfg = [100, [], { 4200: 17300 }, 120]),
                      (this.signalSliceCache = 'all|all:750'),
                      (this.signalSliceDispatch = 'all|all:750'),
                      (this.signalOpenExp = ''),
                      (this.signalOpen = -1),
                      (this.statLv = [1, 1, 0, 1, 0, 2, 0, 0, 1, 0, 2, 1, 1, 1, 1, 1, 0]),
                      (this.statCfg = 'all|all:100'),
                      (this.mediaRangeGap = 'all|all:200'),
                      (this.mediaSubGap = 'all|all:500'),
                      (this.mediaBaseIndexExp = 0),
                      (this.mediaBaseIndexExpCfg = ''),
                      (this.mediaBaseIndexMode = 1),
                      (this.mediaBaseIndexCfg = 'all|all:3'),
                      (this.mediaSliceCache = 'all|all:750'),
                      (this.mediaSliceDispatch = 'all|all:750'),
                      (this.dropFrameUids = [1]),
                      (this.dropFrameDts = [1e4, 2e4]),
                      (this.usePullPunch = 'all|all:100'),
                      (this.closeLowBufResend = ''),
                      (this.renderStat = [0]),
                      (this.pause500Cfg = [300, []]),
                      (this.closePause500 = 0),
                      (this.recvProcesser = 0),
                      (this.recvCfg = 'all|all:100'),
                      (this.isQQSoft = 1),
                      (this.isWin7WcsSoft = 1),
                      (this.isLimitNaluType = 1),
                      (this.isCloseMseDrop = 0),
                      (this.isAutoWcsReport = 1),
                      (this.avHeaderChangeCfg = [[], 0, 300, 1e4]),
                      (this.avHeaderChangeStatCfg = [[], 3e3, 1]),
                      (this.enableHvcc = 1),
                      (this.videoMaxGap = 2e4),
                      (this.iaasCfg = [1, 1, 3, 0.3, 4e3, 600, 200, 5e3, 5, 0.4]),
                      (this.iaasCfgWhiteAuids = [0, []]),
                      (this.iaasCfgBlackAuids = []),
                      (this.iaasCloseGather = 1),
                      (this.p2pSubSdkV2 = 0),
                      (this.p2pSubSdkCfg = 'all|all:0'),
                      (this.h265BlackBrows = []),
                      (this.wcsSoftBrows = []),
                      (this.wcsBlackBrowVers = []),
                      (this.p2pBlackBrowVers = []),
                      (this.pcdnBlackBrowVers = []),
                      (this.wasm265BlackBrowVers = []),
                      (this.mse265BlackBrowVers = []),
                      (this.wcs265BlackBrowVers = []),
                      (this.wcs264BlackBrowVers = []),
                      (this.bitrateBrowHard265Cfg = [0, 4e3, []]),
                      (this.wcsSoft264Uids = []),
                      (this.popSize0Brows = []),
                      (this.payRoomCfg = [0, 5]),
                      (this.mobVBlockCfg = 1),
                      (this.wasmCloseCfg = [0, []]),
                      (this.enhanceVCfg = [1, 4e3, 6, 1080]),
                      (this.enhanceGameIds = [1, 2336, 5699, 1663, 2168, 2633]),
                      (this.enhanceGameIdRatioMap = { 1663: 450, 2168: 450, 2633: 450 }),
                      (this.eHBlackUids = []),
                      (this.eHBlackAnchoruids = []),
                      (this.eHBlackBrowVers = []),
                      (this.eHBlackRenderList = []),
                      (this.ehWhiteAnchoruids = [0, []]),
                      (this.enhanceSupportMode = 1),
                      (this.enhanceVodVCfg = [0, 4e3, 6, 1080]),
                      (this.enhanceVodGameIds = [1]),
                      (this.eHVodBlackUids = []),
                      (this.eHVodBlackAnchoruids = []),
                      (this.eHVodBlackVids = []),
                      (this.eHVodBlackBrowVers = []),
                      (this.eHVodBlackRenderList = []),
                      (this.ehVodWhiteAnchoruids = [0, []]),
                      (this.ehVodWhiteVids = [0, []]),
                      (this.vodEnhanceChannelMap = [{ vhuyalol: 1 }, { 9521: 9521 }]),
                      (this.popDuration = 200),
                      (this.decodeDelay = 100),
                      (this.p2pRangePeerMode = 1),
                      (this.rtPeerMax = 1),
                      (this.rtPeerPer = 0),
                      (this.rtPeerCfg = [[0, 3, 0]]),
                      (this.rtPeerTimeout = 300),
                      (this.rtPeerPRN = 1),
                      (this.rtPeerSelectorCfg = 'all|all:100'),
                      (this.rtPeerSelector = !1),
                      (this.resendUrgentCfg = [[1, [[0, 700]]]]),
                      (this.resendUrgentMse = [[1, [[0, 700]]]]),
                      (this.resendUrgentWcs = [[1, [[0, 400]]]]),
                      (this.rtPeerAsk = 0),
                      (this.rtPeerSrc = 1),
                      (this.rtPeerTopN = 5),
                      (this.rtPeerUrgent = 1),
                      (this.rtPeerUrgentOpt = 0),
                      (this.rtPeerRTONum = 2),
                      (this.rtPeerBeforeHand = 0),
                      (this.rtPeerRandom = 1),
                      (this.rtPeerUgMin = 300),
                      (this.fastTimeCfg = 'all|all:100'),
                      (this.urgentBuffer = 300),
                      (this.resendAudioCfg = 'all|all:500'),
                      (this.resendAudioBufCfg = 'all|all:1500'),
                      (this.useFastTime = !1),
                      (this.logMaxLen = 4e3),
                      (this.hisLogMaxLen = 2e3),
                      (this.isHisLog = 1),
                      (this.pcdnProTimoutTs = 3e3),
                      (this.heartMode = 'all|all:1'),
                      (this.heartQpsPids = 'all|all:100'),
                      (this.heartQps = 'all|all:3'),
                      (this.pcdn302FlvCfg = [1, 15]),
                      (this.pcdn302FlvBakCfg = [1, 1]),
                      (this.pcdn302BlackAids = []),
                      (this.flvPcdn302Ab = 10001),
                      (this.enableBroMseCfg = [117]),
                      (this.audioDtsOpen = !1),
                      (this.audioDtsCfg = 'all|all:100'),
                      (this.dtsJumpOpen = !1),
                      (this.dtsJumpCfg = 'all|all:100'),
                      (this.dtsJumpThreshold = 2e4),
                      (this.enableEdgeBroMseCfg = [117]),
                      (this.audioDropTime = 1e4),
                      (this.audioDropOpen = !1),
                      (this.audioDropCfg = 'all|all:100'),
                      (this.isAudioEmptyLimit = 1),
                      (this.isFilterMsePause = 1),
                      (this.isMseCheckRcRd = 1),
                      (this.testRenderCfg = [5, 2e4, 500, [120]]),
                      (this.testRenderSwitchCfg = [1, 1]);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'initRTPeerCfg',
                        value: function (e) {
                          for (var t = this.rtPeerCfg, i = 0; i < t.length; i++)
                            if (e >= t[i][0]) {
                              (this.rtPeerMax = t[i][1]),
                                (this.rtPeerPer = t[i][2]),
                                n.a.log(
                                  'Config.initRTPeerCfg bitrate='
                                    .concat(e, ' rtPeerMax=')
                                    .concat(this.rtPeerMax, ' rtPeerPer=')
                                    .concat(this.rtPeerPer),
                                );
                              break;
                            }
                        },
                      },
                      {
                        key: 'getAvHeaderChangeStat',
                        value: function (e) {
                          for (
                            var t = this.avHeaderChangeStatCfg[0], i = !1, s = 0;
                            s < t.length;
                            s++
                          )
                            t[s] == e && (i = !0);
                          return 1 == this.avHeaderChangeStatCfg[2] && (i = !0), i;
                        },
                      },
                      {
                        key: 'initOpen',
                        value: function (e, t, i, s) {
                          a.b.isOpen(this[i], e, t, !1) ? (this[s] = 1) : (this[s] = 0);
                        },
                      },
                      {
                        key: 'initByBitrate',
                        value: function (e) {
                          if (
                            (this.initRTPeerCfg(e),
                            (this.maxPeerStreamNum = e >= 1e4 ? this.maxPeerStreamNum20M : 7),
                            (this.resendMode = 1),
                            this.resendModeConfig &&
                              this.resendModeConfig[0].length === this.resendModeConfig[1].length)
                          )
                            for (var t = this.resendModeConfig[0].length - 1; t >= 0; t--)
                              if (e >= this.resendModeConfig[0][t]) {
                                this.resendMode = this.resendModeConfig[1][t];
                                break;
                              }
                        },
                      },
                      {
                        key: 'isAutoClose',
                        value: function (e, t) {
                          if (
                            1 === this.autoCfg.close ||
                            -1 !== this.autoCfg.closeLines.indexOf(Number(e))
                          )
                            return !0;
                          for (var i = this.autoCfg.closePids.length, s = 0; s < i; s++) {
                            var r = this.autoCfg.closePids[s];
                            if (Number(r.pid) === Number(t))
                              return !r.hasOwnProperty('lines') || -1 !== r.lines.indexOf(e);
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'initRepaireSameDtsCfg',
                        value: function (e) {
                          'all' === this.repairSameDtsCfg || -1 !== this.repairSameDtsCfg.indexOf(e)
                            ? (this.repairSameDts = 1)
                            : (this.repairSameDts = 0),
                            n.a.log('Config.initRepaireSameDtsCfg='.concat(this.repairSameDts));
                        },
                      },
                      {
                        key: 'setLowLatency',
                        value: function (e) {
                          e && e.setJitter(this.jitLow[0], this.jitLow[1], this.jitLow[2]);
                        },
                      },
                      {
                        key: 'setJitterCfg',
                        value: function (e, t, i) {
                          this.setJitterAB(e, t, i) ||
                            this.setJitterByPid(e, t, i) ||
                            this.setJitterByRate(e, i, this.jitCfg);
                        },
                      },
                      {
                        key: 'setJitterAB',
                        value: function (e, t, i) {
                          if (this.jitAB.length > 0) {
                            var s = this.jitAB[0],
                              r = this.jitAB[1],
                              a = this.jitAB[2];
                            if ('all' === s || -1 !== s.indexOf(t + '')) {
                              var o = this.getGroupNum(a.length);
                              return (
                                n.a.log('setJitterAB name='.concat(r, ' group=').concat(o)),
                                this.setJitterByRate(e, i, a[o]),
                                !0
                              );
                            }
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'getGroupNum',
                        value: function (e) {
                          for (var t = 1e4 * Math.random(), i = e - 1; i < e; i--)
                            if (t > (1e4 / e) * i) return i;
                          return 0;
                        },
                      },
                      {
                        key: 'setJitterByPid',
                        value: function (e, t, i) {
                          for (var s = 0; s < this.jitCfgPid.length; s++) {
                            var r = this.jitCfgPid[s];
                            if (-1 !== r[0].indexOf(t + ''))
                              return (
                                n.a.log('setJitterByPid'), this.setJitterByRate(e, i, r[1]), !0
                              );
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'setJitterByRate',
                        value: function (e, t, i) {
                          for (var s = 0; s < i.length; s++) {
                            var r = i[s];
                            if (t >= r[0]) return e && e.setJitter(r[1], r[2], r[3]), !0;
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'init',
                        value: function (e) {
                          if (e) {
                            Object.assign(this, e);
                            var t = [
                              'p2pWssLines',
                              'http2Channel',
                              'crossLineSub',
                              'punchWan',
                              'repairSameDtsCfg',
                              'signalClose',
                              'signalRangeGap',
                              'signalSubGap',
                              'signalBaseIndexCfg',
                              'signalBaseIndexExpCfg',
                              'useCdnpFixed',
                              'signalSliceCache',
                              'signalSliceDispatch',
                              'mediaRangeGap',
                              'mediaSubGap',
                              'mediaBaseIndexCfg',
                              'mediaBaseIndexExpCfg',
                              'mediaSliceCache',
                              'mediaSliceDispatch',
                              'usePullPunch',
                              'closeLowBufResend',
                              'statCfg',
                              'signalOpenExp',
                              'recvCfg',
                              'vodAv1Cfg',
                              'platform',
                              'crossClientPer',
                              'p2pSubSdkCfg',
                              'p2pMediaCfg',
                              'p2pSignalCfg',
                              'fastTimeCfg',
                              'rtPeerTimeCfg',
                              'rtPeerSelectorCfg',
                              'heartMode',
                              'heartQpsPids',
                              'heartQps',
                              'audioDtsCfg',
                              'dtsJumpCfg',
                              'resendAudioCfg',
                              'resendAudioBufCfg',
                              'pcdnPubIceCfg',
                              'p2pMediaLogCfg',
                              'p2pSignalLogCfg',
                            ];
                            n.a.group('Configs');
                            var i = ['Configs:'];
                            for (var s in this) {
                              var r = this[s];
                              'string' == typeof r &&
                                ('pushGop' == s
                                  ? (r = !!Number(r))
                                  : 'coderates' == s || 'testCoderates' == s || 'swapdomain' == s
                                  ? ((r = r.replace(/[↵\s+\n]/gm, '')), (r = JSON.parse(r)))
                                  : -1 === t.indexOf(s) && (r = Number(r))),
                                (this[s] = r),
                                'object' == typeof r && (r = JSON.stringify(r)),
                                (s = a.b.padStrLen(s, 18, !1)),
                                i.push('\t' + s + ' => ' + r);
                            }
                            n.a.log(i.join('\n')), n.a.groupEnd(), n.a.log('Config', this);
                          }
                        },
                      },
                      {
                        key: 'setAiP2PToFlv',
                        value: function (e) {
                          this.isAiP2PToFlv = e;
                        },
                      },
                      {
                        key: 'setUseAV1',
                        value: function (e) {
                          var t = this.useAV1PidList,
                            i = e.presenterUid,
                            s = !1,
                            r = this.useAV1LinesAndBitRates[0],
                            a = this.useAV1LinesAndBitRates[1];
                          t.forEach(function (e) {
                            i && e.toString() == i.toString() && (s = !0);
                          }),
                            s &&
                              (r.forEach(function (t) {
                                t == e.lineType && (s = !1);
                              }),
                              e.curBitrate < Number(a) && (s = !1)),
                            (this.useAV1 = s),
                            s && (this.autoCfg.close = 1);
                        },
                      },
                      {
                        key: 'isCloseP2P',
                        value: function (e) {
                          return e && this.closeUids && -1 !== this.closeUids.indexOf(e);
                        },
                      },
                      {
                        key: 'isClosePidMediaP2P',
                        value: function (e, t) {
                          return !a.b.isOpen(this.p2pMediaCfg, e, t, !1);
                        },
                      },
                      {
                        key: 'isClosePidSignalP2P',
                        value: function (e, t) {
                          return !a.b.isOpen(this.p2pSignalCfg, e, t, !1);
                        },
                      },
                      {
                        key: 'isCloseP2PBroVer',
                        value: function () {
                          var e = h.a.version.major;
                          return (
                            e && this.p2pBlackBrowVers && -1 !== this.p2pBlackBrowVers.indexOf(e)
                          );
                        },
                      },
                      {
                        key: 'isClosePcdnBroVer',
                        value: function () {
                          var e = h.a.version.major;
                          return (
                            e && this.pcdnBlackBrowVers && -1 !== this.pcdnBlackBrowVers.indexOf(e)
                          );
                        },
                      },
                      {
                        key: 'getEnableAiMosaic',
                        value: function (e) {
                          return !!this.enableAiMosaic;
                        },
                      },
                      {
                        key: 'setMute',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          this.isMute = e;
                        },
                      },
                      {
                        key: 'setUseAuto',
                        value: function (e) {
                          e && (this.isConfigSupportH265 = 0);
                        },
                      },
                      {
                        key: 'getEnableJumpBuffer',
                        value: function () {
                          var e = h.a.version.major >= this.jumpBufferVer;
                          return (h.a.chrome && e) || 'firefox' === h.a.name;
                        },
                      },
                      {
                        key: 'isCloseAllFuncs',
                        value: function (e) {
                          return (
                            -1 !== this.ignoreUids.indexOf(Number(e)) ||
                            (this.closeAllUids && -1 !== this.closeAllUids.indexOf(Number(e)))
                          );
                        },
                      },
                      {
                        key: 'isCloseFlvPcdnUser',
                        value: function (e) {
                          return (
                            this.notUseFlvPcdnUsers &&
                            -1 !== this.notUseFlvPcdnUsers.indexOf(Number(e))
                          );
                        },
                      },
                      {
                        key: 'isNotUsePcdn',
                        value: function (e, t) {
                          var i = !1;
                          return (
                            this.notUsePcdnUids.map(function (t) {
                              Number(t) === Number(e) && (i = !0);
                            }),
                            this.notUsePcdnUsers.map(function (e) {
                              Number(e) === Number(t) && (i = !0);
                            }),
                            i
                          );
                        },
                      },
                      {
                        key: 'setVodPcdnConfig',
                        value: function (e) {
                          var t = this,
                            i = e.vid,
                            s = e.anchoruid,
                            r = e.useVodPcdnAbCfg;
                          if (i || s) {
                            if (void 0 !== r && r && this.vodPcdnBufferCfg[0].length >= 3)
                              return (
                                (this.vodPcdnOpenBuffer = this.vodPcdnBufferCfg[0][0]),
                                (this.vodPcdnCloseBuffer = this.vodPcdnBufferCfg[0][1]),
                                void (this.vodPcdnCoolTime = this.vodPcdnBufferCfg[0][2])
                              );
                            var a = function (e, i) {
                              e.some(function (e) {
                                return (
                                  !(e.length < 4 && e[3].length <= 0) &&
                                  (e[3].indexOf(i) >= 0
                                    ? ((t.vodPcdnOpenBuffer = e[0]),
                                      (t.vodPcdnCloseBuffer = e[1]),
                                      (t.vodPcdnCoolTime = e[2]),
                                      !0)
                                    : void 0)
                                );
                              });
                            };
                            this.vodPcdnBufferCfg[1].length > 0 &&
                              4 === this.vodPcdnBufferCfg[1][0].length &&
                              a(this.vodPcdnBufferCfg[1], Number(s)),
                              this.vodPcdnBufferCfg[2].length > 0 &&
                                4 === this.vodPcdnBufferCfg[2][0].length &&
                                a(this.vodPcdnBufferCfg[2], String(i));
                          }
                        },
                      },
                      {
                        key: 'enableWebCodec',
                        value: function () {
                          this.openWebcodec = 1;
                        },
                      },
                      {
                        key: 'enableVodWebCodecs',
                        value: function () {
                          this.vodOpenWebcodecs = 1;
                        },
                      },
                      {
                        key: 'getFakeHdrBitrate',
                        value: function (e, t, i) {
                          var s = null;
                          this.fakeHdrCfg.some(function (t) {
                            return t.auid.indexOf(Number(e)) >= 0 && ((s = t.bitrateMap), !0);
                          });
                          var r = t;
                          s && (r = s[t] || r);
                          var a = this.fpsBitrateCfg[1],
                            n = this.fpsBitrateCfg[3] || 120;
                          if (-1 != a.indexOf(e) && i == n) {
                            var o = this.fpsBitrateCfg[2];
                            for (var h in o) o.hasOwnProperty(h) && h == t && (r = o[h]);
                          }
                          return r;
                        },
                      },
                      {
                        key: 'getFpsBitrate',
                        value: function (e, t) {
                          var i = !1,
                            s = this.fpsBitrateCfg[1],
                            r = this.fpsBitrateCfg[0];
                          return s.indexOf(Number(e)) >= 0 && t >= r && (i = !0), i;
                        },
                      },
                      {
                        key: 'setClosePause500',
                        value: function (e) {
                          var t = this.pause500Cfg[1];
                          t.length > 0 &&
                            -1 != t.indexOf(Number(e)) &&
                            (n.a.log('Config.closePause500Report'), (this.closePause500 = 1));
                        },
                      },
                      {
                        key: 'setEnableIaas',
                        value: function (e, t, i) {
                          1 == this.iaasCfgWhiteAuids[0] &&
                            ((this.iaasCfg[0] = 0),
                            -1 != this.iaasCfgWhiteAuids[1].indexOf(Number(t.presenterUid)) &&
                              (this.iaasCfg[0] = 1)),
                            -1 != this.iaasCfgBlackAuids.indexOf(Number(t.presenterUid)) &&
                              (this.iaasCfg[0] = 0);
                        },
                      },
                      {
                        key: 'setJumpCfg',
                        value: function (e) {
                          this.jumpBufferCfgAids.length > 0 &&
                            -1 != this.jumpBufferCfgAids.indexOf(Number(e.presenterUid)) &&
                            (this.jumpBufferCfg[1] = this.jumpBufferCfg2[1]);
                        },
                      },
                      {
                        key: 'isFrameBuffer',
                        get: function () {
                          return 2;
                        },
                      },
                    ]),
                    e
                  );
                })())();
              t.a = u;
            },
            function (e, t, i) {
              'use strict';
              function s(e, t) {
                var i = e.toString().length,
                  s = Math.max(0, t - i),
                  r = '';
                if (s > 0) for (var a = 0; a < s; a++) r += '0';
                return r + e;
              }
              var r = 0,
                a = {
                  now: function () {
                    if (void 0 !== window.performance) {
                      var e = window.performance;
                      if (void 0 !== e.now) return ~~e.now();
                      if (void 0 !== e.webkitNow) return ~~e.webkitNow();
                      if (void 0 !== e.mozNow) return ~~e.mozNow();
                      if (void 0 !== e.msNow) return ~~e.msNow();
                    }
                    0 === r && (r = Date.now() - 1);
                    var t = Date.now() - r;
                    return t > 4294967295 ? ((r += 4294967295), t - 4294967295) : t;
                  },
                  utc: function () {
                    return Math.round(Date.now() / 1e3);
                  },
                  getDateStr: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN,
                      t = null,
                      i = (t = e ? new Date(e) : new Date()).getFullYear(),
                      r = s(t.getMonth() + 1, 2),
                      a = s(t.getDate(), 2);
                    return ''.concat(i, '-').concat(r, '-').concat(a);
                  },
                  getTimeStr: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN,
                      t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                      i = null,
                      r = s((i = e ? new Date(e) : new Date()).getHours(), 2),
                      a = s(i.getMinutes(), 2),
                      n = s(i.getSeconds(), 2),
                      o = ''.concat(r, ':').concat(a, ':').concat(n);
                    return t && (o += '.' + s(i.getMilliseconds(), 3)), o;
                  },
                  getDateTimeStr: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN,
                      t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                      i = null,
                      r = (i = e ? new Date(e) : new Date()).getFullYear(),
                      a = s(i.getMonth() + 1, 2),
                      n = s(i.getDate(), 2),
                      o = s(i.getHours(), 2),
                      h = s(i.getMinutes(), 2),
                      u = s(i.getSeconds(), 2),
                      d = ''
                        .concat(r, '-')
                        .concat(a, '-')
                        .concat(n, ' ')
                        .concat(o, ':')
                        .concat(h, ':')
                        .concat(u);
                    return t && (d += '.' + s(i.getMilliseconds(), 3)), d;
                  },
                };
              t.a = a;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3);
              function a(e, t) {
                var i = e.toString().length,
                  s = Math.max(0, t - i),
                  r = '';
                if (s > 0) for (var a = 0; a < s; a++) r += '0';
                return r + e;
              }
              function n() {
                var e = new Date(),
                  t = e.getFullYear(),
                  i = a(e.getMonth() + 1, 2),
                  s = a(e.getDate(), 2),
                  r = a(e.getHours(), 2),
                  n = a(e.getMinutes(), 2),
                  o = a(e.getSeconds(), 2);
                return (
                  '[' +
                  ''
                    .concat(t, '-')
                    .concat(i, '-')
                    .concat(s, ' ')
                    .concat(r, ':')
                    .concat(n, ':')
                    .concat(o) +
                  '.' +
                  a(e.getMilliseconds(), 3) +
                  '][w-webcodecs]'
                );
              }
              var o = new ((function () {
                function e() {
                  Object(s.a)(this, e), (this.logArr = []);
                }
                return (
                  Object(r.a)(e, [
                    {
                      key: 'getNow',
                      value: function () {
                        return null != typeof performance ? performance.now() : Date.now();
                      },
                    },
                    {
                      key: 'log',
                      value: function () {
                        for (var e = n(), t = arguments.length, i = new Array(t), s = 0; s < t; s++)
                          i[s] = arguments[s];
                        (i[0] = e + i[0]), this.logArr.push(i);
                      },
                    },
                    {
                      key: 'postMessage',
                      value: function (e, t) {
                        var i = { type: e };
                        null != t && (i.data = t), self.postMessage(i);
                      },
                    },
                  ]),
                  e
                );
              })())();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'c', function () {
                return s;
              }),
                i.d(t, 'b', function () {
                  return r;
                }),
                i.d(t, 'd', function () {
                  return a;
                }),
                i.d(t, 'e', function () {
                  return n;
                }),
                i.d(t, 'a', function () {
                  return o;
                });
              var s = {
                  START: 1,
                  POSTFRAME: 2,
                  RESIZE: 3,
                  CLOSE: 4,
                  VISIBILITYCHANGE: 5,
                  AUDIOSAMPLES: 6,
                  VIDEOSAMPLES: 7,
                  AVCCONFIG: 8,
                  AVCPPS: 9,
                  AVCSPS: 10,
                  AACCONFIG: 11,
                  UPDATE_VIDEOFPS: 12,
                  SET_PLAY_MINBUFFER: 13,
                  SET_JITTER: 14,
                  SET_USE_SOFTACCELERATION: 15,
                  LOCAL_CONFIG: 16,
                  PAUSE_VIDEO_DECODE: 17,
                  PAUSE_AUDIO_DECODE: 18,
                  ENABLE_DISCARD_VIDEO: 19,
                  SET_AUDIO_WRITER: 20,
                  UPDATE_CURBITRATE: 21,
                  INIT_CONFIG: 22,
                  AVCVPS: 23,
                  RECV_FPS: 24,
                  FAST_OVER: 25,
                  LOG_CFG: 26,
                  UPDATE_SOFTACCELERATION: 27,
                  SET_ENHANCE: 28,
                  SET_SEGMENTTION: 29,
                  RECV_FAST_OVER: 30,
                  AV1_INIT_SEG: 31,
                  SEEK_TIME: 32,
                  SET_PLAYBACKRATE: 33,
                  SET_VOD_AV1: 34,
                },
                r = {
                  WEBGLPLAY: 1,
                  STAT: 2,
                  PAUSE: 3,
                  WORKERSHAREBUFFER: 4,
                  RENDERERROR: 5,
                  LOG: 6,
                  AUDIODECODEDFRAME: 7,
                  VIDEODECODEERROR: 8,
                  AUDIODECODEERROR: 9,
                  INTERVAL: 10,
                  WOREKR_READY: 11,
                  TURN_TO_WEBCODECS_SOFT: 12,
                  AUDIO_PLAY: 13,
                  AUDIORENDERERROR: 14,
                  SOFT_TURN_TO_MSE: 15,
                  AUDIO_FRAME_DECODED: 16,
                  DECODE_COST: 17,
                  DECODE_DTS: 18,
                  WAIT_KEY_FRAME: 19,
                  SET_FRAME_PAUSE: 20,
                  SET_FRMAE_RESUME: 21,
                  RENDER_FPS_PAUSE: 22,
                  AUDIO_FORMAT_ERROR: 23,
                  VIDEO_ENHANCE_ERROR: 24,
                  VIDEO_ENHANCE_SUCCESS: 25,
                  ON_WCS_VIDEO_SEEK: 26,
                },
                a = {
                  VIDEODECODEERROR: 1,
                  AUDIODECODEERROR: 2,
                  VIDEORENDEERROR: 3,
                  VIDEOFAST: 4,
                  AUDIOFAST: 5,
                  WORKERERROR: 6,
                  AUDIORENDERERROR: 7,
                  NOT_SUPPORT_MEDIASRTREAMTRACK: 8,
                  DISABLE_HARDWARE_ACCELERATION: 9,
                  SOFT_TURN_TO_MSE: 10,
                  WIN_PERF_INSUFFICIENT: 11,
                  RETRY_MAX_TIMES: 12,
                  DECODE_COST: 13,
                  DECODE_DTS: 14,
                  BROWSER_NOT_SUPPORTED: 15,
                  IS_PUREAUDIO: 16,
                  ANGLE_NULL: 17,
                  DECODE_ERROR_COOL: 18,
                  CHROME_H265_RENDER_INFO_EMPTY: 19,
                  IS_NOT_SUPPORT_CONFIGURE: 20,
                  IS_NOT_SUPPORT_OS: 21,
                  AUDIO_DATA_NAN: 22,
                  AUDIO_FORMAT_ERROR: 23,
                  AUDIO_DATA_MUTE: 24,
                  IS_NOT_SUPPORT_CATEGORY: 25,
                  BROWSER_VERSION_NOT_SUPPORTED_WCS: 26,
                  BROWSER_VERSION_NOT_SUPPORTED_WCS_H265: 27,
                  BROWSER_VERSION_NOT_SUPPORTED_WCS_H264: 28,
                  VOD_AV1_CLOSE_CFg: 29,
                  NOT_SUPPORT_AUDIO_SAMPLERATE: 30,
                },
                n = {
                  VIDEO_PTS: 0,
                  VIDEO_RENDER_NUMS: 1,
                  VIDEO_NOT_RENDERD_BUFFER: 2,
                  AUDIO_TODECODE_NUMS: 3,
                  VIDEO_TODECODE_NUMS: 4,
                  AUDIO_DECODE_NUMS: 5,
                  VIDEO_DECODE_NUMS: 6,
                  VIDEO_DECODED_DELAY: 7,
                  VIDEO_READY_TO_RENDER_LIST_LEN: 8,
                  VIDEO_BUFFER_LEN: 9,
                  VIDEO_THROW_FRAME_FPS: 11,
                  AUDIO_DTS: 12,
                  AUDIO_RENDER_NUMS: 13,
                  VIDEO_DECODE_DISCARD_NUMS: 14,
                  VIDEO_DECODED_DELAY_SMOOTH: 21,
                  VIDEO_ENHANCE_NUMS: 22,
                  VIDEO_ENAHNCE_COST: 23,
                  VIDEO_ENHANCE_LESS30_NUMS: 24,
                  VIDEO_ENHANCE_LESS150_NUMS: 25,
                  VIDEO_ENHANCE_LESS200_NUMS: 26,
                  VIDEO_ENHANCE_LARGE200_NUMS: 27,
                  VIDEO_ENHANCE_TOTAL: 28,
                  AUDIO_WORKER_UN_RENDER_AUDIO_FRAMES: 31,
                  MAIN_UN_RENDER_AUDIO_FRAMES: 32,
                },
                o = {
                  AUDIO_DECODED_BUFFER: 15,
                  PAUSE_STATUS: 16,
                  AUDIO_DECODED_BUFFER_LEN: 17,
                  VIDEO_REAL_FPS: 18,
                  IS_SHIELD_AUDIO: 19,
                  FRAME_BUFFER_LEN: 20,
                  LAST_VIDEO_RCV_TS: 29,
                  BROWSER_PAUSE_STATUS: 30,
                };
            },
            function (e, t, i) {
              'use strict';
              function s(e) {
                return (s = Object.setPrototypeOf
                  ? Object.getPrototypeOf
                  : function (e) {
                      return e.__proto__ || Object.getPrototypeOf(e);
                    })(e);
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'a', function () {
                return r;
              });
              var s = i(8);
              function r(e, t, i) {
                return (r =
                  'undefined' != typeof Reflect && Reflect.get
                    ? Reflect.get
                    : function (e, t, i) {
                        var r = (function (e, t) {
                          for (
                            ;
                            !Object.prototype.hasOwnProperty.call(e, t) &&
                            null !== (e = Object(s.a)(e));

                          );
                          return e;
                        })(e, t);
                        if (r) {
                          var a = Object.getOwnPropertyDescriptor(r, t);
                          return a.get ? a.get.call(i) : a.value;
                        }
                      })(e, t, i || e);
              }
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'a', function () {
                return f;
              });
              var s = i(2),
                r = i(3),
                a = i(36),
                n = i(4),
                o = i(21),
                h = (i(1), i(12)),
                u = i(28),
                d = i(24),
                c = i(0),
                l = (i(17), i(25)),
                p = (function () {
                  function e() {
                    Object(s.a)(this, e);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'turnStr',
                        value: function (e, t, i) {
                          for (var s = e.toString(t), r = s.length; r < i; r++) s = '0' + s;
                          return s;
                        },
                      },
                      {
                        key: 'rotl64',
                        value: function (t, i) {
                          var s = e.turnStr(t, 2, 64),
                            r = s.substring(0, 32),
                            a = s.substring(32),
                            n = a.substr(i, 32 - i) + a.substr(0, i);
                          return parseInt(r + n, 2);
                        },
                      },
                      {
                        key: 'rotr64',
                        value: function (t, i) {
                          var s = e.turnStr(t, 2, 64),
                            r = s.substring(0, 32),
                            a = s.substring(32),
                            n = a.substr(32 - i, i) + a.substr(0, 32 - i);
                          return parseInt(r + n, 2);
                        },
                      },
                      {
                        key: 'rotUid',
                        value: function (t, i) {
                          return (
                            0 === t &&
                              (t = '1234' + e.turnStr(parseInt(9999 * Math.random()), 10, 4)),
                            isNaN(i) && (i = 0),
                            (t = parseInt(t)),
                            (i = parseInt(i)),
                            e.rotl64(t, 8)
                          );
                        },
                      },
                      {
                        key: 'revertUid',
                        value: function (t, i) {
                          return (t = parseInt(t)), e.rotr64(t, 8);
                        },
                      },
                      {
                        key: 'inet_ntoa',
                        value: function (e) {
                          var t,
                            i,
                            s,
                            r = new Uint8Array(4),
                            a = new DataView(r.buffer);
                          return (
                            a.setUint32(0, e),
                            (t = a.getUint8(0)),
                            (i = a.getUint8(1)),
                            (s = a.getUint8(2)),
                            a.getUint8(3) + '.' + s + '.' + i + '.' + t
                          );
                        },
                      },
                      {
                        key: 'ip2uint',
                        value: function (e) {
                          for (var t = 0, i = e.split('.'), s = 0; s < i.length; s++)
                            t |= Number(i[s]) << (8 * s);
                          return t < 0 && (t += 4294967296), t;
                        },
                      },
                      {
                        key: 'isBiggerUint',
                        value: function (e, t) {
                          return e !== t && (e > t ? e - t < 2147483647 : !(t - e < 2147483647));
                        },
                      },
                      {
                        key: 'isEqualOrBiggerUint',
                        value: function (e, t) {
                          return e === t || (e > t ? e - t < 2147483647 : !(t - e < 2147483647));
                        },
                      },
                      {
                        key: 'isUintMax',
                        value: function (e) {
                          return 4294967295 === e;
                        },
                      },
                      {
                        key: 'isUint64Max',
                        value: function (e) {
                          return 0x10000000000000000 === e;
                        },
                      },
                      {
                        key: 'getQueryString',
                        value: function (e) {
                          var t =
                              arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : '',
                            i = new RegExp('(^|&)' + e + '=([^&]*)(&|$)'),
                            s = (t || window.location.search.substr(1)).match(i);
                          return null != s ? unescape(s[2]) : null;
                        },
                      },
                      {
                        key: 'printHexBytes',
                        value: function (e) {
                          for (
                            var t =
                                !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                              i = new DataView(e.buffer),
                              s = t ? 10 : 0,
                              r = [];
                            s < i.byteLength;

                          ) {
                            var a = i.getUint8(s++);
                            (a = a.toString(16).toUpperCase()).length < 2 && (a = '0' + a),
                              r.push(a, '\t'),
                              s % 10 == 0 && r.push('\n');
                          }
                          console.log(r.join('') + '\tsize:', i.byteLength);
                        },
                      },
                      {
                        key: 'getCookie',
                        value: function (e) {
                          for (
                            var t = e + '=', i = document.cookie.split(';'), s = 0, r = i.length;
                            s < r;
                            s++
                          ) {
                            var a = i[s].trim();
                            if (0 == a.indexOf(t)) return a.substr(t.length);
                          }
                          return '';
                        },
                      },
                      {
                        key: 'formatByteSize',
                        value: function (e) {
                          var t = e / 1024;
                          return t > 1024 ? (t /= 1024).toFixed(1) + 'MB' : t.toFixed(1) + 'KB';
                        },
                      },
                      {
                        key: 'padStrLen',
                        value: function (e, t) {
                          var i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                          if (e.length >= t) return e;
                          var s = ' '.repeat(t - e.length);
                          return i ? s + e : e + s;
                        },
                      },
                      {
                        key: 'xhr',
                        value: function (e, t, i, s, r) {
                          var a = new XMLHttpRequest();
                          a.overrideMimeType('text/plain; charset=x-user-defined'),
                            a.addEventListener('readystatechange', function e() {
                              4 === a.readyState &&
                                (200 === a.status || 304 === a.status ? s(a.response) : r(a.status),
                                a.removeEventListener('readystatechange', e),
                                (a = void 0));
                            }),
                            a.open(t, e, !0),
                            a.send(i);
                        },
                      },
                      {
                        key: 'getAv1Random',
                        value: function (e, t) {
                          if (!e) return !1;
                          var i = localStorage.av1PresentUid,
                            s = e.presenterUid;
                          (localStorage.randomAv1Percent && i == s) ||
                            (localStorage.randomAv1Percent = Math.floor(1e4 * Math.random()));
                          var r = Number(localStorage.randomAv1Percent);
                          return (localStorage.av1PresentUid = e.presenterUid), r < t;
                        },
                      },
                      {
                        key: 'is64bitSoftware',
                        value: function () {
                          return (
                            -1 != navigator.userAgent.indexOf('Macintosh') ||
                            -1 != navigator.userAgent.indexOf('x64')
                          );
                        },
                      },
                      {
                        key: 'isGameIdSupport265',
                        value: function (e, t) {
                          if (e[0]) return !0;
                          var i = !1;
                          return (
                            e[1].map(function (e) {
                              t && t.toString() == e.toString() && (i = !0);
                            }),
                            i
                          );
                        },
                      },
                      {
                        key: 'unescapeHTML',
                        value: function (e) {
                          return (e = '' + e)
                            .replace(/&lt;/g, '<')
                            .replace(/&gt;/g, '>')
                            .replace(/&amp;/g, '&')
                            .replace(/&quot;/g, '"')
                            .replace(/&apos;/g, "'")
                            .replace(/&#39;/g, "'")
                            .replace('↵', '');
                        },
                      },
                      {
                        key: 'getSdkAbRandom',
                        value: function (e, t) {
                          var i = localStorage.abPresentUid;
                          (localStorage.randomAbPercent && i == e.presenterUid) ||
                            (localStorage.randomAbPercent = Math.floor(1e4 * Math.random()));
                          var s = Number(localStorage.randomAbPercent);
                          return (localStorage.abPresentUid = e.presenterUid), s < t;
                        },
                      },
                      {
                        key: 'removeUrlParam',
                        value: function (e) {
                          var t =
                            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                          if (!e) return e;
                          var i = e.split('?'),
                            s = i[0],
                            r = i.length > 1 ? i[1] : '';
                          if (!r) return e;
                          for (var a = {}, n = r.split('&'), o = 0; o < n.length; o++)
                            (n[o] = n[o].split('=')), (a[n[o][0]] = n[o][1]);
                          return (
                            t.forEach(function (e) {
                              r.indexOf(e) > -1 && delete a[e];
                            }),
                            s +
                              JSON.stringify(a)
                                .replace(/[\"\{\}]/g, '')
                                .replace(/\:/g, '=')
                                .replace(/\,/g, '&')
                          );
                        },
                      },
                      {
                        key: 'removeUrlAllParam',
                        value: function (e) {
                          return e ? e.split('?')[0] : e;
                        },
                      },
                      {
                        key: 'getBrowserHidden',
                        value: function () {
                          return (
                            document.hidden ||
                            document.webkitHidden ||
                            document.mozHidden ||
                            document.msHidden
                          );
                        },
                      },
                      {
                        key: 'isWebCodecsSupported',
                        value: function () {
                          return (
                            !(
                              'undefined' == typeof VideoDecoder ||
                              'undefined' == typeof SharedArrayBuffer ||
                              'undefined' == typeof Atomics
                            ) && navigator.hardwareConcurrency >= n.a.webCodecCfg[0]
                          );
                        },
                      },
                      {
                        key: 'isWebcodecsBrowserSupported',
                        value: function () {
                          var e = navigator.userAgent.toLowerCase(),
                            t = -1 != e.indexOf('yabrowser') || -1 != e.indexOf('yowser');
                          return 'opera' != h.a.name && !t;
                        },
                      },
                      {
                        key: 'checkWebCodec',
                        value: function (t, i, s) {
                          if (s && !u.a.isMseSupportedHevc()) return !1;
                          if (s && 0 == n.a.vodH265Config[0] && t.liveType != l.a.LIVE) return !1;
                          var r = t.presenterUid,
                            a = (t.uid, t.curBitrate);
                          n.a.webCodecsAnchoruids.indexOf(Number(r)) >= 0 && n.a.enableWebCodec(),
                            t.liveType != l.a.LIVE &&
                              (t.liveType == l.a.REPLAY
                                ? -1 !== n.a.replayWebcodecsGameIds.indexOf(t.gameId) &&
                                  n.a.enableVodWebCodecs()
                                : -1 !== n.a.vodWebcodecsGameIds.indexOf(t.gameId) &&
                                  n.a.enableVodWebCodecs(),
                              -1 !== n.a.vodWebcodecsVids.indexOf(t.vid) &&
                                n.a.enableVodWebCodecs());
                          var p = a <= n.a.webCodecCfg[1],
                            f = n.a.openWebcodec && p;
                          t.liveType != l.a.LIVE &&
                            ((f = n.a.vodOpenWebcodecs && p),
                            h.a.version.major < n.a.vodWcsBroCfg[0] && (f = !1));
                          var m = o.a.os || '',
                            _ = o.a.osVersion || '',
                            v = !0;
                          if (
                            (('windows' == m.toLocaleLowerCase() &&
                              Number(_) >= 10 &&
                              -1 !== h.a.name.indexOf('edg') &&
                              h.a.version.major >= n.a.h265MseChromeConfig[0] &&
                              s) ||
                            ('windows' == m.toLocaleLowerCase() &&
                              Number(_) >= 10 &&
                              -1 !== h.a.name.indexOf('chrome') &&
                              h.a.version.major >= n.a.h265MseChromeConfig[0] &&
                              s)
                              ? (v = !0)
                              : s && (v = !1),
                            s && (f = f && v),
                            -1 !== n.a.wcs265BlackUids.indexOf(Number(t.uid)) && (f = !1),
                            n.a.webCodecBlackUids.indexOf(Number(r)) >= 0 && (f = !1),
                            n.a.wcsBlackAids.indexOf(Number(r)) >= 0 && (f = !1),
                            -1 != n.a.wcsBlackBrowVers.indexOf(h.a.version.major) &&
                              ((f = !1),
                              i.setComDim(
                                c.a.DIM_COM.WEBCODECS_BACK_REASON,
                                d.a.BROWSER_VERSION_NOT_SUPPORTED_WCS,
                              )),
                            -1 !== n.a.wcs265BlackBrowVers.indexOf(h.a.version.major) && s)
                          ) {
                            f = !1;
                            var y = n.a.bitrateBrowHard265Cfg[0],
                              S = n.a.bitrateBrowHard265Cfg[1],
                              g = n.a.bitrateBrowHard265Cfg[2];
                            1 == y &&
                              t.curBitrate <= S &&
                              -1 !== g.indexOf(h.a.version.major) &&
                              (f = !0),
                              f ||
                                i.setComDim(
                                  c.a.DIM_COM.WEBCODECS_BACK_REASON,
                                  d.a.BROWSER_VERSION_NOT_SUPPORTED_WCS_H265,
                                );
                          }
                          return (
                            -1 === n.a.wcs264BlackBrowVers.indexOf(h.a.version.major) ||
                              s ||
                              ((f = !1),
                              i.setComDim(
                                c.a.DIM_COM.WEBCODECS_BACK_REASON,
                                d.a.BROWSER_VERSION_NOT_SUPPORTED_WCS_H264,
                              )),
                            (f = f && e.isWebCodecsSupported()),
                            1 == Number(localStorage._forceWebcodecs) && (f = !0),
                            1 == Number(localStorage._forceMse) && (f = !1),
                            f
                          );
                        },
                      },
                      {
                        key: 'getDecodeMod',
                        value: function (e, t, i) {
                          var s = 'mseh';
                          return (
                            e
                              ? (s = 'wcs')
                              : t
                              ? (s = 'wasm')
                              : i &&
                                (s =
                                  (h.a.chrome && h.a.version.major > 104) || 'safari' == h.a.name
                                    ? 'mseh'
                                    : 'mses'),
                            s
                          );
                        },
                      },
                      {
                        key: 'getDMod',
                        value: function (e, t) {
                          return (
                            'mseh' !== e &&
                              'wcs' !== e &&
                              'wasm' !== e &&
                              'mses' !== e &&
                              (e = 'unknow'),
                            (t = Number(t)),
                            isNaN(t) && (t = 0),
                            ''.concat(e, '-').concat(t)
                          );
                        },
                      },
                      {
                        key: 'checkDMod',
                        value: function (t, i, s) {
                          return (
                            -1 === t.indexOf('&dMod=') &&
                              ((t += -1 === t.indexOf('?') ? '?' : '&'),
                              (t += 'dMod='.concat(e.getDMod(i, s)))),
                            t
                          );
                        },
                      },
                      {
                        key: 'getAv1Support',
                        value: function (e, t, i, s) {
                          var r = 5;
                          return e && (r = t ? (i ? 2 : s ? 3 : 4) : 1), r;
                        },
                      },
                      {
                        key: 'getSupportMod',
                        value: function (t, i, s, r) {
                          var a = u.a.isMseSupportedHevc(),
                            o = a && h.a.chrome && h.a.version.major >= n.a.h265MseChromeConfig[0],
                            d = 0;
                          if (
                            (s && (d |= 64),
                            (3 !== r && 4 !== r) || (d |= 128),
                            e.isWebCodecsSupported() && (d |= 1),
                            t && (d |= 2),
                            o && ((d |= 8), e.isWebCodecsSupported() && (d |= 16)),
                            a)
                          ) {
                            var c = n.a.h265MseConfig[1];
                            if (c.length > 0) {
                              var l = h.a.version.major;
                              h.a.chrome && c.indexOf(l) >= 0 && (d |= 4);
                            }
                          }
                          return i && (d |= 32), d;
                        },
                      },
                      {
                        key: 'isOpen',
                        value: function (t, i, s) {
                          var r =
                              !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                            a = e.getCfgValue(t, i, s);
                          return -1 === a ? r : 100 * Math.random() < a;
                        },
                      },
                      {
                        key: 'getCfgValue',
                        value: function (t, i, s) {
                          var r =
                            arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : -1;
                          (i += '|'), (s = 'line' + s + ':');
                          for (
                            var a = (t += '').split(','), n = '', o = '', h = a.length, u = 0;
                            u < h;
                            u++
                          ) {
                            var d = a[u];
                            -1 !== d.indexOf(i)
                              ? (n = d.replace(i, ''))
                              : -1 !== d.indexOf('all|') && (o = d.replace('all|', ''));
                          }
                          var c = r,
                            l = r;
                          return (
                            '' !== n && (c = e.getLineValue(n, s, r)),
                            '' !== o && (l = e.getLineValue(o, s, r)),
                            c !== r ? c : l !== r ? l : r
                          );
                        },
                      },
                      {
                        key: 'getLineValue',
                        value: function (t, i) {
                          for (
                            var s =
                                arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : -1,
                              r = t.split('_'),
                              a = r.length,
                              n = s,
                              o = s,
                              h = 0;
                            h < a;
                            h++
                          ) {
                            var u = r[h];
                            -1 !== u.indexOf('all')
                              ? (n = e.getValue(u, s))
                              : -1 !== u.indexOf(i) && (o = e.getValue(u, s));
                          }
                          return o !== s ? o : n !== s ? n : s;
                        },
                      },
                      {
                        key: 'getValue',
                        value: function (e) {
                          var t =
                              arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : -1,
                            i = t,
                            s = e.split(':');
                          return s.length > 1 && ((i = parseInt(s[1])), isNaN(i) && (i = t)), i;
                        },
                      },
                      {
                        key: 'getBrowserHidden',
                        value: function () {
                          return (
                            document.hidden ||
                            document.webkitHidden ||
                            document.mozHidden ||
                            document.msHidden
                          );
                        },
                      },
                      {
                        key: 'isMseSupportedHevc',
                        value: function () {
                          return u.a.isMseSupportedHevc();
                        },
                      },
                    ]),
                    e
                  );
                })();
              function f(e) {
                return atob(e);
              }
              Object(a.a)(p, 'indateLocalStorage', {
                set: function (e, t, i) {
                  var s = { value: t, expirse: new Date(i).getTime() };
                  localStorage[e] = JSON.stringify(s);
                },
                get: function (e) {
                  var t = JSON.parse(localStorage[e]);
                  if (null !== t) {
                    if (!(null != t.expirse && t.expirse < new Date().getTime())) return t.value;
                    delete localStorage[e];
                  }
                  return null;
                },
                update: function (e, t) {
                  var i = JSON.parse(localStorage[e]);
                  i && ((i.value = t), (localStorage[e] = JSON.stringify(i)));
                },
              }),
                (p.IntMax = 2147483647),
                (p.IntMin = -2147483647),
                (p.UintMax = 4294967295),
                (t.b = p);
            },
            function (e, t, i) {
              'use strict';
              var s = i(18),
                r = {
                  SLICE_SPEED: 12.5,
                  MAX_PACKET_CNT: 1e4,
                  SWITCH_INTERVAL: 10,
                  MAX_DELAY: 66e4,
                  DEFAULT_DELAY: 65535,
                  SUBSCRIBE_TIMEOUT: 1e4,
                  PUNCH_BACK_COOLING: 2e4,
                  PUNCH_IGNORE_TIME: 3e5,
                  SUB_TIMEOUT: 5e3,
                  RESUB_TIMEOUT: 3e4,
                  STREAM_DELAY: 2e3,
                  EMULATE_DELAY: 1800,
                  MAX_DEPTH: 1,
                  PROXY_NUM: 3,
                  MAX_PEER_STREAM_NUM: 8,
                  MAX_PUSH_NUM: 3,
                  MAX_PULL_NUM: 3,
                  SLICE_DELAY: 100,
                  SLICE_LATE: 50,
                  SLICE_FAST: 50,
                  SLICE_TIMEOUT: 2e3,
                  SWITCH_DELAY: 500,
                  StreamType: { NONE: 0, FORCE: 1, FIXED: 2, COMPETE: 3, PEER: 4 },
                  LeaveReason: { PING_DIF: 1, RESET: 2 },
                  DEL_REASON: {
                    CHANNEL_CLOSE: 1,
                    CHANNEL_ERROR: 2,
                    NODE_LEAVE: 3,
                    SERVER_REJECT: 5,
                    PEER_ERROR: 6,
                    PEER_TIMEOUT: 7,
                    PING_TIMEOUT: 8,
                    OTHER_SID: 9,
                    EMPTY_SLICE: 10,
                    SUB_TIMEOUT: 11,
                    SUB_FAIL_TIMES: 12,
                    NODE_REJECT: 13,
                    DIF_CDNP: 14,
                    PEER_HANDLER_ERR: 15,
                  },
                  PERIOD: { UPLINK_CALC: 10, CHECK_SEED: 20, GET_NODE: 5 },
                  SubType: { SUBSCRIBE_FORCE: 0, SUBSCRIBE_NORMAL: 1 },
                  LoadVideoTimeoutReason: {
                    FLV_DISCONNECTED: 0,
                    FLV_CONNECTED: 1,
                    FLV_CONNECT_ERROR: 2,
                    FLV_RECV_DATA: 3,
                    FLV_DATA_INVALID: 4,
                    FLV_STARTPLAY: 5,
                    FLV_PLAYERROR: 6,
                    HLS_DISCONNECTED: 7,
                    HLS_LOADMANIFEST_ERROR: 8,
                    HLS_LOADMANIFEST_SUCCESS: 9,
                    HLS_LOADFRAMENT: 10,
                    HLS_LOADFRAMENT_ERROR: 11,
                    HLS_LOADFRAMENT_SUCCESS: 12,
                    HLS_PLAY_ERROR: 13,
                  },
                  SubResCode: {
                    ACCEPT_SUBSCRIBE: 0,
                    EMPTY_UPLOAD_NUM: 1,
                    DETECT_SUBSCRIBE_CYCLE: 2,
                    EMPTY_PEER_INFO: 3,
                    SUBSCRIBE_UPLINK_NOT_ENOUGH: 4,
                    PUBLISHER_KICK_OFF: 5,
                    NOT_SUBSCRIBER: 6,
                    INVALID_SUB_STREAM: 7,
                    ACCEPT_BY_SUBSCRIBER_UPLINK: 9,
                    INVALID_STREAMID: 10,
                    SERVER_EMPTY_BW: 11,
                    PUBLISHER_LEAVE: 12,
                    DIFFERENT_VIDEO_PROXY: 13,
                    OLD_VERSION_REQ: 14,
                    INVALID_TREE_DEPTH: 15,
                    INVALID_MAX_SUBSTREAM_NUM: 16,
                    STREAM_LATE: 17,
                    DEPTH_LARGE: 18,
                    STREAM_LIMIT: 19,
                    SLICE_LARGE: 20,
                    NOT_FOUND_PKG: 21,
                    KICK_OUT: 22,
                    SELF_WORST: 23,
                    SLICE_LATE: 24,
                    SLICE_FAST: 25,
                    RESTART: 26,
                    RESET: 27,
                    DIF_BASE_SUBS: 28,
                  },
                  VIDEO_COMPETE_UID: 4294967295,
                  VIDEO_FORCE_UID: 0,
                  VIDEO_FIXED_UID: -1,
                  VIDEO_DEFAULT_UID: -2,
                  isProxyUid: function (e) {
                    return (
                      e === r.VIDEO_COMPETE_UID ||
                      e === r.VIDEO_FORCE_UID ||
                      e === r.VIDEO_FIXED_UID ||
                      e === r.VIDEO_DEFAULT_UID
                    );
                  },
                  isCompete: function (e) {
                    return e === r.VIDEO_COMPETE_UID;
                  },
                  isForce: function (e) {
                    return e === r.VIDEO_FORCE_UID;
                  },
                  isFixed: function (e) {
                    return e === r.VIDEO_FIXED_UID;
                  },
                  isDefault: function (e) {
                    return e === r.VIDEO_DEFAULT_UID;
                  },
                  isSliceJumpFromPeer: function (e, t) {
                    return t.isFromPeer && e > 0 && t.seq - e > 10 * r.LOST_SEQ_NUM;
                  },
                  offerReject: {
                    REASON_NOTSTART: 1,
                    REASON_PUNCHFAILED_CD: 2,
                    REASON_PUNCHED_FULL: 3,
                    REASON_QUOTA_EXHAUST: 4,
                    REASON_VERSION: 5,
                    REASON_DIF_LINE: 6,
                    REASON_FAIL: 7,
                    REASON_IGNORE: 8,
                    REASON_HAS_NODE: 9,
                    REASON_WAITING: 10,
                    REASON_OTHER: 100,
                  },
                  offerRejectTime: 12e4,
                  punchBackRet: {
                    SUC: 0,
                    DIF_STREAM: 1,
                    CLOSING: 2,
                    COOLING: 3,
                    REQUEST: 4,
                    REJECT: 5,
                  },
                  restartReason: {
                    RANGE_SEQ_MAX: 1,
                    RANGE_SEQ_LARGE: 2,
                    CDN_JUMP: 3,
                    PLAYER_NO_DATA: 4,
                    LOST_SEQ: 5,
                    CONNECT: 6,
                    WORKER_ERROR: 7,
                    MULTI_CDN: 8,
                    FLV_TO_P2P: 9,
                    PLAYER_ERROR: 10,
                    PLAYER_DISPOSE: 11,
                    LOST_SEQ_JUMP: 12,
                  },
                  turnToFlvReason: {
                    FULL_PLAY_FAIL: 1,
                    FULL_CONNECT_TIMEOUT: 2,
                    SUB_CONNECT_TIMEOUT: 3,
                    FULL_NO_DATA: 4,
                    SUB_NO_DATA: 5,
                    P2P_ARGS_ERROR: 6,
                    P2P_COOLING: 7,
                    FLV_TO_P2P_FAIL: 8,
                    FLV_TO_P2P_FULL_STREAM_COMPLETE: 9,
                    FULL_ERROR: 10,
                    FULL_CLOSE: 11,
                    SUB_ERROR: 12,
                    SUB_CLOSE: 13,
                    RESTART_TIMES: 14,
                    SIGNAL_TIMEOUT: 15,
                    PROBE_TIMEOUT: 16,
                    PROBE_ERROR: 17,
                    NO_DATA_TIMEOUT: 18,
                    IS_NOT_FIRST_FETCH: 19,
                    VIDEO_BUFFER_EMPTY: 20,
                    PLAY_TIMEOUT: 21,
                    NOT_SUPPORT_P2P: 22,
                  },
                  userProperty: {
                    SERVER_CLOSE: 1,
                    CLIENT_CLOSE: 2,
                    BROWSER_UN_SUPPORT: 3,
                    FLASH: 4,
                    UNKNOW: 5,
                    P2P: 6,
                    FIRST_FULL_CONNECT_TIMEOUT: 7,
                    FIRST_FULL_PLAY_FAIL: 8,
                    FIRST_FULL_NO_DATA: 17,
                    RESTART_RANGE_MAX: 9,
                    RESTART_RANGE_LARGE: 10,
                    RESTART_CONNECT: 11,
                    RESTART_MUTI_CDN: 12,
                    RESTART_PLAYER_NO_DATA: 13,
                    RESTART_PLAYER_ERROR: 14,
                    SUB_NO_DATA: 15,
                    SUB_CONNECT_TIMEOUT: 16,
                    P2P_ARGS_ERROR: 18,
                    FLV_TO_P2P: 19,
                    LOST_SEQ: 20,
                    P2P_COOLING: 21,
                    IS_NOT_FIRST_FETCH: 22,
                    VIDEO_BUFFER_EMPTY: 23,
                  },
                  h265TurnToH264Reason: { DECODE_ERROR: 1, RENDER_ERROR: 2 },
                  pauseReason: {
                    FLV_NO_BUFF: 1,
                    FLV_UNKNOW_PAUSE: 2,
                    FLV_NET_SLOW: 3,
                    P2P_NO_BUFF: 4,
                    P2P_UNKNOW_PAUSE: 5,
                    P2P_FULL_LOADER_NO_DATA: 10,
                    P2P_FULL_LOADER_CONNECT_FAIL: 11,
                    P2P_SUB_LOADER_NO_DATA: 12,
                    P2P_SUB_LOADER_CONNECT_FAIL: 13,
                    FLV_NO_DATA: 14,
                    P2P_NO_SLICE: 15,
                    P2P_RESEND_SKIP_FRAME: 20,
                    P2P_RESEND_TOOLATE: 21,
                    P2P_RESEND_TIMEOUT: 22,
                    P2P_RESEND_ERROR: 23,
                    P2P_RESEND_MISSING: 24,
                    P2P_DTS_JUMP: 25,
                    P2P_NET_SLOW: 26,
                  },
                  DataType: { SIGNALLING: 0, PING: 1, SLICE: 2 },
                  LOST_SEQ_NUM: 4e3,
                  BAD_REASONS: {
                    UNKNOW: 100,
                    SUB_LINK: 1,
                    DOWN_LINK: 2,
                    RANGE_MISS: 3,
                    RANGE_RECV_TIMEOUT: 4,
                    FRAME_SEQ_LOST: 5,
                    BUFFER_JUMP: 6,
                    TIMESTAMP_JUMP: 7,
                    FRAME_VIDEO_JUMP: 8,
                    FRAME_AUDIO_JUMP: 9,
                    FRAME_DROP: 10,
                    PERFORMANCE: 11,
                  },
                  initConfig: function (e, t) {
                    for (var i = t.coderates, a = null, n = 0; n < i.length; n++)
                      if (((a = i[n]), e > Number(a[0]))) {
                        (r.PROXY_NUM = Number(a[1])),
                          (r.SLICE_DELAY = Number(a[2])),
                          (r.MAX_PUSH_NUM = Number(a[3])),
                          (r.MAX_PULL_NUM = Number(a[4])),
                          (r.SLICE_LARGE = Number(a[5]));
                        break;
                      }
                    r.MAX_PEER_STREAM_NUM = Number(t.maxPeerStreamNum) || 8;
                    var o = r.SLICE_SPEED * s.a.baseSubs * (e / 1e3);
                    (r.SLICE_LATE = parseInt(o * ((Number(t.sliceLate) || 1e3) / 1e3))),
                      (r.SLICE_FAST = parseInt(o * ((Number(t.sliceFast) || 2e3) / 1e3))),
                      (r.STREAM_DELAY = Number(t.badDelay) || 2e3),
                      (r.EMULATE_DELAY = Number(t.emuteDelay) || 1800),
                      (r.RESUB_TIMEOUT = Number(t.resubTime) || 3e4),
                      (r.SLICE_TIMEOUT = Number(t.sliceTimeout) || 2e3),
                      (r.SWITCH_DELAY = Number(t.switchDelay) || 500);
                  },
                  HLS_LOAD_TYPE: { FETCH: 1, XHR: 2 },
                  LATENCY_MODEL_TYPE: {
                    NONE: 0,
                    CONTROL_MODEL: 2,
                    RTC_MODEL: 4,
                    TOPSPEED_MODEL: 99,
                  },
                  PLATFORM_TYPE: {
                    web: 100,
                    mini_app: 102,
                    wap: 103,
                    huya_liveshareh5: 104,
                    adr: 2,
                    ios: 3,
                  },
                  PLATFORM_TYPE_NAME: { web: 'web', wap: 'wap' },
                  H5_ERROR_CODE: { VIDEO_ERROR: -1e3, PLAY_TIMEOUT: -1001 },
                  VISIBILITY_STATE: {
                    VISIBLE: 'visible',
                    HIDDEN: 'hidden',
                    PRERENDER: 'prerender',
                  },
                  PCDN_OPEN_BUFFER: 1e4,
                  PCDN_CLOSE_BUFFER: 7e3,
                  PCDN_COOL_TIME: 6e4,
                  PLAYER_CORE_TYPE: { MSE: 1, WEBCODECS: 2 },
                };
              t.a = r;
            },
            function (e, t, i) {
              'use strict';
              var s = {};
              self || (self = window),
                (function () {
                  var e = self.navigator.userAgent.toLowerCase(),
                    t =
                      /(edge)\/([\w.]+)/.exec(e) ||
                      /(edg)\/([\w.]+)/.exec(e) ||
                      /(opr)[\/]([\w.]+)/.exec(e) ||
                      /(chrome)[ \/]([\w.]+)/.exec(e) ||
                      /(iemobile)[\/]([\w.]+)/.exec(e) ||
                      /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) ||
                      /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(
                        e,
                      ) ||
                      /(webkit)[ \/]([\w.]+)/.exec(e) ||
                      /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) ||
                      /(msie) ([\w.]+)/.exec(e) ||
                      (e.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(e)) ||
                      (e.indexOf('compatible') < 0 && /(firefox)[ \/]([\w.]+)/.exec(e)) ||
                      [],
                    i =
                      /(ipad)/.exec(e) ||
                      /(ipod)/.exec(e) ||
                      /(windows phone)/.exec(e) ||
                      /(iphone)/.exec(e) ||
                      /(kindle)/.exec(e) ||
                      /(android)/.exec(e) ||
                      /(windows)/.exec(e) ||
                      /(mac)/.exec(e) ||
                      /(linux)/.exec(e) ||
                      /(cros)/.exec(e) ||
                      [],
                    r = {
                      browser: t[5] || t[3] || t[1] || '',
                      version: t[2] || t[4] || '0',
                      majorVersion: t[4] || t[2] || '0',
                      platform: i[0] || '',
                    },
                    a = {};
                  if (r.browser) {
                    a[r.browser] = !0;
                    var n = r.majorVersion.split('.');
                    (a.version = {
                      major: parseInt(r.majorVersion, 10),
                      string: r.version,
                      majorVersion: r.majorVersion,
                    }),
                      n.length > 1 && (a.version.minor = parseInt(n[1], 10)),
                      n.length > 2 && (a.version.build = parseInt(n[2], 10));
                  }
                  for (var o in (r.platform && (a[r.platform] = !0),
                  (a.chrome || a.opr || a.safari) && (a.webkit = !0),
                  (a.rv || a.iemobile) &&
                    (a.rv && delete a.rv, (r.browser = 'msie'), (a.msie = !0)),
                  a.edge && (delete a.edge, (r.browser = 'msedge'), (a.chrome = !0)),
                  a.edg && (delete a.edg, (r.browser = 'msedge'), (a.chrome = !0)),
                  a.opr && ((r.browser = 'opera'), (a.opera = !0)),
                  a.safari && a.android && ((r.browser = 'android'), (a.android = !0)),
                  (a.name = r.browser),
                  (a.platform = r.platform),
                  s))
                    s.hasOwnProperty(o) && delete s[o];
                  Object.assign(s, a);
                })(),
                s.version || (s.version = { major: 0, minor: 0, build: 0, string: '0.0.0' }),
                (t.a = s);
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'a', function () {
                return h;
              });
              var s = i(8);
              function r() {
                if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
                if (Reflect.construct.sham) return !1;
                if ('function' == typeof Proxy) return !0;
                try {
                  return (
                    Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0
                  );
                } catch (e) {
                  return !1;
                }
              }
              function a(e) {
                return (a =
                  'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                    ? function (e) {
                        return typeof e;
                      }
                    : function (e) {
                        return e &&
                          'function' == typeof Symbol &&
                          e.constructor === Symbol &&
                          e !== Symbol.prototype
                          ? 'symbol'
                          : typeof e;
                      })(e);
              }
              var n = i(15);
              function o(e, t) {
                return !t || ('object' !== a(t) && 'function' != typeof t) ? Object(n.a)(e) : t;
              }
              function h(e) {
                return function () {
                  var t,
                    i = Object(s.a)(e);
                  if (r()) {
                    var a = Object(s.a)(this).constructor;
                    t = Reflect.construct(i, arguments, a);
                  } else t = i.apply(this, arguments);
                  return o(this, t);
                };
              }
            },
            function (e, t, i) {
              'use strict';
              function s(e, t) {
                return (s =
                  Object.setPrototypeOf ||
                  function (e, t) {
                    return (e.__proto__ = t), e;
                  })(e, t);
              }
              function r(e, t) {
                if ('function' != typeof t && null !== t)
                  throw new TypeError('Super expression must either be null or a function');
                (e.prototype = Object.create(t && t.prototype, {
                  constructor: { value: e, writable: !0, configurable: !0 },
                })),
                  t && s(e, t);
              }
              i.d(t, 'a', function () {
                return r;
              });
            },
            function (e, t, i) {
              'use strict';
              function s(e) {
                if (void 0 === e)
                  throw new ReferenceError(
                    "this hasn't been initialised - super() hasn't been called",
                  );
                return e;
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              'use strict';
              i.r(t),
                i.d(t, 'WebCodecsErrType', function () {
                  return s;
                }),
                i.d(t, 'ReceiveMessageType', function () {
                  return r;
                }),
                i.d(t, 'ToMainMessageType', function () {
                  return a;
                }),
                i.d(t, 'StoreWorkerType', function () {
                  return n;
                }),
                i.d(t, 'MainSharedBufferType', function () {
                  return o;
                });
              var s = {
                  VIDEODECODEERROR: 1,
                  AUDIODECODEERROR: 2,
                  VIDEORENDEERROR: 3,
                  VIDEOFAST: 4,
                  AUDIOFAST: 5,
                  WORKERERROR: 6,
                },
                r = {
                  START: 1,
                  POSTFRAME: 2,
                  RESIZE: 3,
                  CLOSE: 4,
                  VISIBILITYCHANGE: 5,
                  AUDIOSAMPLES: 6,
                  VIDEOSAMPLES: 7,
                  AVCCONFIG: 8,
                  AVCPPS: 9,
                  AVCSPS: 10,
                  AACCONFIG: 11,
                  UPDATE_VIDEOFPS: 12,
                  SET_PLAY_MINBUFFER: 13,
                  SET_JITTER: 14,
                  SET_USE_SOFTACCELERATION: 15,
                  LOCAL_CONFIG: 16,
                  PAUSE_VIDEO_DECODE: 17,
                  PAUSE_AUDIO_DECODE: 18,
                  ENABLE_DISCARD_VIDEO: 19,
                  SET_AUDIO_WRITER: 20,
                  UPDATE_CURBITRATE: 21,
                  INIT_CONFIG: 22,
                  AVCVPS: 23,
                  RECV_FPS: 24,
                  FAST_OVER: 25,
                  LOG_CFG: 26,
                  UPDATE_SOFTACCELERATION: 27,
                  SET_ENHANCE: 28,
                  SET_SEGMENTTION: 29,
                  RECV_FAST_OVER: 30,
                  AV1_INIT_SEG: 31,
                  SEEK_TIME: 32,
                  SET_PLAYBACKRATE: 33,
                  SET_VOD_AV1: 34,
                },
                a = {
                  WebGLPLAY: 1,
                  STAT: 2,
                  PAUSE: 3,
                  WORKERSHAREBUFFER: 4,
                  VIDEORENDERERROR: 5,
                  LOG: 6,
                  AUDIODECODEDFRAME: 7,
                  VIDEODECODEERROR: 8,
                  AUDIODECODEERROR: 9,
                  INTERVAL: 10,
                  WOREKR_READY: 11,
                  TURN_TO_WEBCODECS_SOFT: 12,
                  AUDIO_PLAY: 13,
                  AUDIORENDERERROR: 14,
                  SOFT_TURN_TO_MSE: 15,
                  AUDIO_FRAME_DECODED: 16,
                  DECODE_COST: 17,
                  DECODE_DTS: 18,
                  WAIT_KEY_FRAME: 19,
                  SET_FRAME_PAUSE: 20,
                  SET_FRMAE_RESUME: 21,
                  RENDER_FPS_PAUSE: 22,
                  AUDIO_FORMAT_ERROR: 23,
                  VIDEO_ENHANCE_ERROR: 24,
                  VIDEO_ENHANCE_SUCCESS: 25,
                  ON_WCS_VIDEO_SEEK: 26,
                },
                n = {
                  VIDEO_PTS: 0,
                  VIDEO_RENDER_NUMS: 1,
                  VIDEO_NOT_RENDERD_BUFFER: 2,
                  AUDIO_TODECODE_NUMS: 3,
                  VIDEO_TODECODE_NUMS: 4,
                  AUDIO_DECODE_NUMS: 5,
                  VIDEO_DECODE_NUMS: 6,
                  VIDEO_DECODED_DELAY: 7,
                  VIDEO_READY_TO_RENDER_LIST_LEN: 8,
                  VIDEO_BUFFER_LEN: 9,
                  VIDEO_THROW_FRAME_FPS: 11,
                  AUDIO_DTS: 12,
                  AUDIO_RENDER_NUMS: 13,
                  VIDEO_DECODE_DISCARD_NUMS: 14,
                  VIDEO_DECODED_DELAY_SMOOTH: 21,
                  VIDEO_ENHANCE_NUMS: 22,
                  VIDEO_ENAHNCE_COST: 23,
                  VIDEO_ENHANCE_LESS30_NUMS: 24,
                  VIDEO_ENHANCE_LESS150_NUMS: 25,
                  VIDEO_ENHANCE_LESS200_NUMS: 26,
                  VIDEO_ENHANCE_LARGE200_NUMS: 27,
                  VIDEO_ENHANCE_TOTAL: 28,
                  AUDIO_WORKER_UN_RENDER_AUDIO_FRAMES: 31,
                },
                o = {
                  AUDIO_DECODED_BUFFER: 15,
                  PAUSE_STATUS: 16,
                  AUDIO_DECODED_BUFFER_LEN: 17,
                  VIDEO_REAL_FPS: 18,
                  IS_SHIELD_AUDIO: 19,
                  FRAME_BUFFER_LEN: 20,
                  LAST_VIDEO_RCV_TS: 29,
                  BROWSER_PAUSE_STATUS: 30,
                };
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'b', function () {
                return s;
              }),
                i.d(t, 'a', function () {
                  return r;
                });
              var s = {
                  FLV: 1,
                  P2P: 2,
                  HLS: 3,
                  HUYA: 4,
                  STREAM: 5,
                  OBS: 6,
                  VR: 7,
                  HUYAWEBRTC: 8,
                  PLAYBACK: 9,
                  P2PFLV: 10,
                },
                r = { H264: 'h264', H265: 'h265', AV1: 'av1' };
            },
            function (e, t, i) {
              'use strict';
              var s = i(2),
                r = i(3),
                a = i(1),
                n = new ((function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.sdkVersion = 2401251130),
                      (this.version = 1100),
                      (this.baseSubs = 10),
                      (this.uid = 0),
                      (this.sGuid = ''),
                      (this.roomId = 0),
                      (this.uuid = 0),
                      (this.convertUid = 0),
                      (this.appId = 66),
                      (this.appid = 66),
                      (this.p2pCooling = !1),
                      (this.flvTryToP2P = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'initUUId',
                        value: function () {
                          0 === this.uuid &&
                            (this.uuid = Number(
                              ((Date.now() % 1e10) * 1e3 + ((1e3 * Math.random()) | 0)) %
                                4294967295,
                            ));
                          var e = Number(localStorage.appid);
                          e && ((this.appid = e), a.a.warn('--- test appid ' + e + ' ---', this));
                        },
                      },
                      {
                        key: 'getAnonymouUid',
                        value: function () {
                          var e = Number(localStorage.sdk_anonymousuid);
                          return (
                            e ||
                              ((e = Number(
                                ((Date.now() % 1e10) * 1e3 + ((1e3 * Math.random()) | 0)) %
                                  4294967295,
                              )),
                              (localStorage.sdk_anonymousuid = e)),
                            e
                          );
                        },
                      },
                    ]),
                    e
                  );
                })())();
              t.a = n;
            },
            function (e, t, i) {
              'use strict';
              var s = i(2),
                r = i(3),
                a = (function () {
                  function e() {
                    var t = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                    Object(s.a)(this, e),
                      (this.hasHeader = t),
                      (this.segments = []),
                      (this.data = null),
                      (this.totalLen = 0),
                      (this.uri = 0),
                      this.hasHeader &&
                        (this.pushUInt32(10), this.pushUInt32(this.uri), this.pushUInt16(200));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          if (0 === this.segments.length) return null;
                          this.data = new Uint8Array(this.totalLen);
                          for (var e = 0, t = 0; t < this.segments.length; ++t) {
                            var i = this.segments[t];
                            this.data.set(i, e), (e += i.length);
                          }
                          return (
                            this.hasHeader &&
                              (this.replaceUInt32(0, this.totalLen),
                              this.replaceUInt32(4, this.uri)),
                            this.data
                          );
                        },
                      },
                      {
                        key: 'setUri',
                        value: function (e) {
                          this.uri = e;
                        },
                      },
                      {
                        key: 'replaceUInt32',
                        value: function (e, t) {
                          new DataView(this.data.buffer).setUint32(e, t, !0);
                        },
                      },
                      {
                        key: 'pushBool',
                        value: function (e) {
                          this.pushUInt8(e ? 1 : 0);
                        },
                      },
                      {
                        key: 'pushUInt8',
                        value: function (e) {
                          var t = new Uint8Array(1);
                          new DataView(t.buffer).setUint8(0, e),
                            this.segments.push(t),
                            this.totalLen++;
                        },
                      },
                      {
                        key: 'pushUInt16',
                        value: function (e) {
                          var t = new Uint8Array(2);
                          new DataView(t.buffer).setUint16(0, e, !0),
                            this.segments.push(t),
                            (this.totalLen += 2);
                        },
                      },
                      {
                        key: 'pushUInt32',
                        value: function (e) {
                          var t = new Uint8Array(4);
                          new DataView(t.buffer).setUint32(0, e, !0),
                            this.segments.push(t),
                            (this.totalLen += 4);
                        },
                      },
                      {
                        key: 'pushUInt64',
                        value: function (e) {
                          var t = new Uint8Array(8),
                            i = new DataView(t.buffer),
                            s = e % 4294967296,
                            r = (e / 4294967296) >> 0;
                          i.setUint32(0, s, !0),
                            i.setUint32(4, r, !0),
                            this.segments.push(t),
                            (this.totalLen += 8);
                        },
                      },
                      {
                        key: 'pushUint8Array',
                        value: function (e) {
                          this.pushUInt16(e.length),
                            this.segments.push(e),
                            (this.totalLen += e.length);
                        },
                      },
                      {
                        key: 'pushUint8ArrayWithoutLen',
                        value: function (e) {
                          this.segments.push(e), (this.totalLen += e.length);
                        },
                      },
                      {
                        key: 'pushUint8Array32',
                        value: function (e) {
                          this.pushUInt32(e.length),
                            this.segments.push(e),
                            (this.totalLen += e.length);
                        },
                      },
                      {
                        key: 'pushUInt32Vector',
                        value: function (e) {
                          this.pushUInt32(e.length);
                          for (var t = 0; t < e.length; t++) this.pushUInt32(e[t]);
                        },
                      },
                      {
                        key: 'pushUInt64Vector',
                        value: function (e) {
                          this.pushUInt32(e.length);
                          for (var t = 0; t < e.length; t++) this.pushUInt64(e[t]);
                        },
                      },
                      {
                        key: 'pushUInt16Vector',
                        value: function (e) {
                          this.pushUInt32(e.length);
                          for (var t = 0; t < e.length; t++) this.pushUInt16(e[t]);
                        },
                      },
                      {
                        key: 'popObjVector',
                        value: function (e) {
                          for (var t = this.popUInt32(), i = [], s = 0; s < t; s++) {
                            var r = new e();
                            i.push(r.unmarshall(this));
                          }
                          return i;
                        },
                      },
                      {
                        key: 'pushString',
                        value: function (e) {
                          this.pushUInt16(e.length);
                          for (
                            var t = new Uint8Array(e.length), i = new DataView(t.buffer), s = 0;
                            s < e.length;
                            ++s
                          )
                            i.setUint8(s, e.charCodeAt(s));
                          this.segments.push(t), (this.totalLen += e.length);
                        },
                      },
                      {
                        key: 'pushString32',
                        value: function (e) {
                          this.pushUInt32(e.length);
                          for (
                            var t = new Uint8Array(e.length), i = new DataView(t.buffer), s = 0;
                            s < e.length;
                            ++s
                          )
                            i.setUint8(s, e.charCodeAt(s));
                          this.segments.push(t), (this.totalLen += e.length);
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.a = a;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = {},
                r = {
                  setTaf: function (e) {
                    return (s = e);
                  },
                };
              (t.default = r),
                (r.UserId = function () {
                  (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.sToken = ''),
                    (this.sHuYaUA = ''),
                    (this.sCookie = ''),
                    (this.iTokenType = 0);
                }),
                (r.UserId.prototype._clone = function () {
                  return new r.UserId();
                }),
                (r.UserId.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.UserId.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.UserId.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeString(1, this.sGuid),
                    e.writeString(2, this.sToken),
                    e.writeString(3, this.sHuYaUA),
                    e.writeString(4, this.sCookie),
                    e.writeInt32(5, this.iTokenType);
                }),
                (r.UserId.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.sGuid = e.readString(1, !1, this.sGuid)),
                    (this.sToken = e.readString(2, !1, this.sToken)),
                    (this.sHuYaUA = e.readString(3, !1, this.sHuYaUA)),
                    (this.sCookie = e.readString(4, !1, this.sCookie)),
                    (this.iTokenType = e.readInt32(5, !1, this.iTokenType));
                }),
                (r.VideoGatewayProxy2VGPingReq = function () {
                  this.lLocalTime = 0;
                }),
                (r.VideoGatewayProxy2VGPingReq.prototype._clone = function () {
                  return new r.VideoGatewayProxy2VGPingReq();
                }),
                (r.VideoGatewayProxy2VGPingReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.VideoGatewayProxy2VGPingReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.VideoGatewayProxy2VGPingReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lLocalTime);
                }),
                (r.VideoGatewayProxy2VGPingReq.prototype.readFrom = function (e) {
                  this.lLocalTime = e.readInt64(0, !1, this.lLocalTime);
                }),
                (r.VideoGatewayProxy2VGPingRsp = function () {
                  this.lLocalTime = 0;
                }),
                (r.VideoGatewayProxy2VGPingRsp.prototype._clone = function () {
                  return new r.VideoGatewayProxy2VGPingRsp();
                }),
                (r.VideoGatewayProxy2VGPingRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.VideoGatewayProxy2VGPingRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.VideoGatewayProxy2VGPingRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lLocalTime);
                }),
                (r.VideoGatewayProxy2VGPingRsp.prototype.readFrom = function (e) {
                  this.lLocalTime = e.readInt64(0, !1, this.lLocalTime);
                }),
                (r.GetInfoFromVGReq = function () {
                  (this.lUid = 0),
                    (this.iServiceType = 0),
                    (this.iClientType = 0),
                    (this.iClientIp = 0),
                    (this.iTerminalType = 0),
                    (this.iRequestVPType = 0),
                    (this.sMsg = new s.BinBuffer()),
                    (this.iUri = 0),
                    (this.sProtoName = ''),
                    (this.lSid = 0),
                    (this.vStreamName = new s.Vector(new s.STRING())),
                    (this.tId = new r.UserId());
                }),
                (r.GetInfoFromVGReq.prototype._clone = function () {
                  return new r.GetInfoFromVGReq();
                }),
                (r.GetInfoFromVGReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetInfoFromVGReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetInfoFromVGReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeInt32(1, this.iServiceType),
                    e.writeInt32(2, this.iClientType),
                    e.writeInt64(3, this.iClientIp),
                    e.writeInt32(4, this.iTerminalType),
                    e.writeInt32(5, this.iRequestVPType),
                    e.writeBytes(6, this.sMsg),
                    e.writeInt64(7, this.iUri),
                    e.writeString(8, this.sProtoName),
                    e.writeInt64(9, this.lSid),
                    e.writeVector(10, this.vStreamName),
                    e.writeStruct(11, this.tId);
                }),
                (r.GetInfoFromVGReq.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.iServiceType = e.readInt32(1, !1, this.iServiceType)),
                    (this.iClientType = e.readInt32(2, !1, this.iClientType)),
                    (this.iClientIp = e.readInt64(3, !1, this.iClientIp)),
                    (this.iTerminalType = e.readInt32(4, !1, this.iTerminalType)),
                    (this.iRequestVPType = e.readInt32(5, !1, this.iRequestVPType)),
                    (this.sMsg = e.readBytes(6, !1, this.sMsg)),
                    (this.iUri = e.readInt64(7, !1, this.iUri)),
                    (this.sProtoName = e.readString(8, !1, this.sProtoName)),
                    (this.lSid = e.readInt64(9, !1, this.lSid)),
                    (this.vStreamName = e.readVector(10, !1, this.vStreamName)),
                    (this.tId = e.readStruct(11, !1, this.tId));
                }),
                (r.GetInfoFromVGRsp = function () {
                  (this.lUid = 0),
                    (this.ServerId = 0),
                    (this.sMsg = new s.BinBuffer()),
                    (this.iUri = 0),
                    (this.sProtoName = '');
                }),
                (r.GetInfoFromVGRsp.prototype._clone = function () {
                  return new r.GetInfoFromVGRsp();
                }),
                (r.GetInfoFromVGRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetInfoFromVGRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetInfoFromVGRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeInt64(1, this.ServerId),
                    e.writeBytes(2, this.sMsg),
                    e.writeInt64(3, this.iUri),
                    e.writeString(4, this.sProtoName);
                }),
                (r.GetInfoFromVGRsp.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.ServerId = e.readInt64(1, !1, this.ServerId)),
                    (this.sMsg = e.readBytes(2, !1, this.sMsg)),
                    (this.iUri = e.readInt64(3, !1, this.iUri)),
                    (this.sProtoName = e.readString(4, !1, this.sProtoName));
                }),
                (r.GetCdnTokenExReq = function () {
                  (this.sFlvUrl = ''),
                    (this.sStreamName = ''),
                    (this.iLoopTime = 0),
                    (this.tId = new r.UserId()),
                    (this.iAppId = 66);
                }),
                (r.GetCdnTokenExReq.prototype._clone = function () {
                  return new r.GetCdnTokenExReq();
                }),
                (r.GetCdnTokenExReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetCdnTokenExReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetCdnTokenExReq.prototype.writeTo = function (e) {
                  e.writeString(0, this.sFlvUrl),
                    e.writeString(1, this.sStreamName),
                    e.writeInt32(2, this.iLoopTime),
                    e.writeStruct(3, this.tId),
                    e.writeInt32(4, this.iAppId);
                }),
                (r.GetCdnTokenExReq.prototype.readFrom = function (e) {
                  (this.sFlvUrl = e.readString(0, !1, this.sFlvUrl)),
                    (this.sStreamName = e.readString(1, !1, this.sStreamName)),
                    (this.iLoopTime = e.readInt32(2, !1, this.iLoopTime)),
                    (this.tId = e.readStruct(3, !1, this.tId)),
                    (this.iAppId = e.readInt32(4, !1, this.iAppId));
                }),
                (r.GetCdnTokenExRsp = function () {
                  (this.sFlvToken = ''), (this.iExpireTime = 0);
                }),
                (r.GetCdnTokenExRsp.prototype._clone = function () {
                  return new r.GetCdnTokenExRsp();
                }),
                (r.GetCdnTokenExRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetCdnTokenExRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetCdnTokenExRsp.prototype.writeTo = function (e) {
                  e.writeString(0, this.sFlvToken), e.writeInt32(1, this.iExpireTime);
                }),
                (r.GetCdnTokenExRsp.prototype.readFrom = function (e) {
                  (this.sFlvToken = e.readString(0, !1, this.sFlvToken)),
                    (this.iExpireTime = e.readInt32(1, !1, this.iExpireTime));
                }),
                (r.LiveScenarioType = {
                  ECommon_Live: 0,
                  EAudio_Only: 1,
                  EVideo_Only: 2,
                  ELink_Live: 3,
                }),
                (r.LimitedStreamInfo = function () {
                  (this.iVerMin = 0),
                    (this.iVerMax = 0),
                    (this.sCdnType = ''),
                    (this.iIsMaster = 0),
                    (this.lChannelId = 0),
                    (this.lSubChannelId = 0),
                    (this.lPresenterUid = 0),
                    (this.sStreamName = ''),
                    (this.sFlvUrl = ''),
                    (this.sFlvUrlSuffix = ''),
                    (this.sFlvAntiCode = ''),
                    (this.sHlsUrl = ''),
                    (this.sHlsUrlSuffix = ''),
                    (this.sHlsAntiCode = ''),
                    (this.iLineIndex = 0),
                    (this.iIsMultiStream = 0),
                    (this.iPCPriorityRate = 0),
                    (this.iWebPriorityRate = 0),
                    (this.iMobilePriorityRate = 0),
                    (this.vFlvIPList = new s.Vector(new s.STRING())),
                    (this.iIsP2PSupport = 0),
                    (this.sP2pUrl = ''),
                    (this.sP2pUrlSuffix = ''),
                    (this.sP2pAntiCode = ''),
                    (this.lFreeFlag = 0);
                }),
                (r.LimitedStreamInfo.prototype._clone = function () {
                  return new r.LimitedStreamInfo();
                }),
                (r.LimitedStreamInfo.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.LimitedStreamInfo.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.LimitedStreamInfo.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iVerMin),
                    e.writeInt32(1, this.iVerMax),
                    e.writeString(2, this.sCdnType),
                    e.writeInt32(3, this.iIsMaster),
                    e.writeInt64(4, this.lChannelId),
                    e.writeInt64(5, this.lSubChannelId),
                    e.writeInt64(6, this.lPresenterUid),
                    e.writeString(7, this.sStreamName),
                    e.writeString(8, this.sFlvUrl),
                    e.writeString(9, this.sFlvUrlSuffix),
                    e.writeString(10, this.sFlvAntiCode),
                    e.writeString(11, this.sHlsUrl),
                    e.writeString(12, this.sHlsUrlSuffix),
                    e.writeString(13, this.sHlsAntiCode),
                    e.writeInt32(14, this.iLineIndex),
                    e.writeInt32(15, this.iIsMultiStream),
                    e.writeInt32(16, this.iPCPriorityRate),
                    e.writeInt32(17, this.iWebPriorityRate),
                    e.writeInt32(18, this.iMobilePriorityRate),
                    e.writeVector(19, this.vFlvIPList),
                    e.writeInt32(20, this.iIsP2PSupport),
                    e.writeString(21, this.sP2pUrl),
                    e.writeString(22, this.sP2pUrlSuffix),
                    e.writeString(23, this.sP2pAntiCode),
                    e.writeInt64(24, this.lFreeFlag);
                }),
                (r.LimitedStreamInfo.prototype.readFrom = function (e) {
                  (this.iVerMin = e.readInt32(0, !1, this.iVerMin)),
                    (this.iVerMax = e.readInt32(1, !1, this.iVerMax)),
                    (this.sCdnType = e.readString(2, !1, this.sCdnType)),
                    (this.iIsMaster = e.readInt32(3, !1, this.iIsMaster)),
                    (this.lChannelId = e.readInt64(4, !1, this.lChannelId)),
                    (this.lSubChannelId = e.readInt64(5, !1, this.lSubChannelId)),
                    (this.lPresenterUid = e.readInt64(6, !1, this.lPresenterUid)),
                    (this.sStreamName = e.readString(7, !1, this.sStreamName)),
                    (this.sFlvUrl = e.readString(8, !1, this.sFlvUrl)),
                    (this.sFlvUrlSuffix = e.readString(9, !1, this.sFlvUrlSuffix)),
                    (this.sFlvAntiCode = e.readString(10, !1, this.sFlvAntiCode)),
                    (this.sHlsUrl = e.readString(11, !1, this.sHlsUrl)),
                    (this.sHlsUrlSuffix = e.readString(12, !1, this.sHlsUrlSuffix)),
                    (this.sHlsAntiCode = e.readString(13, !1, this.sHlsAntiCode)),
                    (this.iLineIndex = e.readInt32(14, !1, this.iLineIndex)),
                    (this.iIsMultiStream = e.readInt32(15, !1, this.iIsMultiStream)),
                    (this.iPCPriorityRate = e.readInt32(16, !1, this.iPCPriorityRate)),
                    (this.iWebPriorityRate = e.readInt32(17, !1, this.iWebPriorityRate)),
                    (this.iMobilePriorityRate = e.readInt32(18, !1, this.iMobilePriorityRate)),
                    (this.vFlvIPList = e.readVector(19, !1, this.vFlvIPList)),
                    (this.iIsP2PSupport = e.readInt32(20, !1, this.iIsP2PSupport)),
                    (this.sP2pUrl = e.readString(21, !1, this.sP2pUrl)),
                    (this.sP2pUrlSuffix = e.readString(22, !1, this.sP2pUrlSuffix)),
                    (this.sP2pAntiCode = e.readString(23, !1, this.sP2pAntiCode)),
                    (this.lFreeFlag = e.readInt64(24, !1, this.lFreeFlag));
                }),
                (r.ClassifiedStreamInfoPack = function () {
                  (this.iLiveScenarioType = 0),
                    (this.vStreamInfo = new s.Vector(new r.LimitedStreamInfo())),
                    (this.vCdnList = new s.Vector(new s.STRING())),
                    (this.lLiveId = 0),
                    (this.sLinkGroupId = ''),
                    (this.mStreamRatioWeb = new s.Map(new s.STRING(), new s.INT32())),
                    (this.mStreamRatioPC = new s.Map(new s.STRING(), new s.INT32())),
                    (this.mStreamRatioMobile = new s.Map(new s.STRING(), new s.INT32()));
                }),
                (r.ClassifiedStreamInfoPack.prototype._clone = function () {
                  return new r.ClassifiedStreamInfoPack();
                }),
                (r.ClassifiedStreamInfoPack.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClassifiedStreamInfoPack.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClassifiedStreamInfoPack.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iLiveScenarioType),
                    e.writeVector(1, this.vStreamInfo),
                    e.writeVector(2, this.vCdnList),
                    e.writeInt64(3, this.lLiveId),
                    e.writeString(4, this.sLinkGroupId),
                    e.writeMap(5, this.mStreamRatioWeb),
                    e.writeMap(6, this.mStreamRatioPC),
                    e.writeMap(7, this.mStreamRatioMobile);
                }),
                (r.ClassifiedStreamInfoPack.prototype.readFrom = function (e) {
                  (this.iLiveScenarioType = e.readInt32(0, !1, this.iLiveScenarioType)),
                    (this.vStreamInfo = e.readVector(1, !1, this.vStreamInfo)),
                    (this.vCdnList = e.readVector(2, !1, this.vCdnList)),
                    (this.lLiveId = e.readInt64(3, !1, this.lLiveId)),
                    (this.sLinkGroupId = e.readString(4, !1, this.sLinkGroupId)),
                    (this.mStreamRatioWeb = e.readMap(5, !1, this.mStreamRatioWeb)),
                    (this.mStreamRatioPC = e.readMap(6, !1, this.mStreamRatioPC)),
                    (this.mStreamRatioMobile = e.readMap(7, !1, this.mStreamRatioMobile));
                }),
                (r.LivingStreamInfoNotice = function () {
                  (this.lPresenterUid = 0),
                    (this.lLiveId = 0),
                    (this.mStreamInfo = new s.Map(new s.INT32(), new r.ClassifiedStreamInfoPack()));
                }),
                (r.LivingStreamInfoNotice.prototype._clone = function () {
                  return new r.LivingStreamInfoNotice();
                }),
                (r.LivingStreamInfoNotice.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.LivingStreamInfoNotice.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.LivingStreamInfoNotice.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lPresenterUid),
                    e.writeInt64(1, this.lLiveId),
                    e.writeMap(2, this.mStreamInfo);
                }),
                (r.LivingStreamInfoNotice.prototype.readFrom = function (e) {
                  (this.lPresenterUid = e.readInt64(0, !1, this.lPresenterUid)),
                    (this.lLiveId = e.readInt64(1, !1, this.lLiveId)),
                    (this.mStreamInfo = e.readMap(2, !1, this.mStreamInfo));
                }),
                (r.LivingStreamEndNotice = function () {
                  (this.sStreamName = ''),
                    (this.sCdnType = ''),
                    (this.iLineIndex = 0),
                    (this.lLiveId = 0),
                    (this.iLiveScenarioType = 0);
                }),
                (r.LivingStreamEndNotice.prototype._clone = function () {
                  return new r.LivingStreamEndNotice();
                }),
                (r.LivingStreamEndNotice.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.LivingStreamEndNotice.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.LivingStreamEndNotice.prototype.writeTo = function (e) {
                  e.writeString(0, this.sStreamName),
                    e.writeString(1, this.sCdnType),
                    e.writeInt32(2, this.iLineIndex),
                    e.writeInt64(3, this.lLiveId),
                    e.writeInt32(4, this.iLiveScenarioType);
                }),
                (r.LivingStreamEndNotice.prototype.readFrom = function (e) {
                  (this.sStreamName = e.readString(0, !1, this.sStreamName)),
                    (this.sCdnType = e.readString(1, !1, this.sCdnType)),
                    (this.iLineIndex = e.readInt32(2, !1, this.iLineIndex)),
                    (this.lLiveId = e.readInt64(3, !1, this.lLiveId)),
                    (this.iLiveScenarioType = e.readInt32(4, !1, this.iLiveScenarioType));
                }),
                (r.GetLivingStreamInfoReq = function () {
                  (this.tId = new r.UserId()),
                    (this.lTopSid = 0),
                    (this.lSubSid = 0),
                    (this.lPresenterUid = 0),
                    (this.sTraceSource = '');
                }),
                (r.GetLivingStreamInfoReq.prototype._clone = function () {
                  return new r.GetLivingStreamInfoReq();
                }),
                (r.GetLivingStreamInfoReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetLivingStreamInfoReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetLivingStreamInfoReq.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tId),
                    e.writeInt64(1, this.lTopSid),
                    e.writeInt64(2, this.lSubSid),
                    e.writeInt64(3, this.lPresenterUid),
                    e.writeString(4, this.sTraceSource);
                }),
                (r.GetLivingStreamInfoReq.prototype.readFrom = function (e) {
                  (this.tId = e.readStruct(0, !1, this.tId)),
                    (this.lTopSid = e.readInt64(1, !1, this.lTopSid)),
                    (this.lSubSid = e.readInt64(2, !1, this.lSubSid)),
                    (this.lPresenterUid = e.readInt64(3, !1, this.lPresenterUid)),
                    (this.sTraceSource = e.readString(4, !1, this.sTraceSource));
                }),
                (r.GetLivingStreamInfoRsp = function () {
                  (this.bIsLiving = 0),
                    (this.tNotice = new r.LivingStreamInfoNotice()),
                    (this.bIsSelfLiving = 0);
                }),
                (r.GetLivingStreamInfoRsp.prototype._clone = function () {
                  return new r.GetLivingStreamInfoRsp();
                }),
                (r.GetLivingStreamInfoRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetLivingStreamInfoRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetLivingStreamInfoRsp.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.bIsLiving),
                    e.writeStruct(1, this.tNotice),
                    e.writeInt32(2, this.bIsSelfLiving);
                }),
                (r.GetLivingStreamInfoRsp.prototype.readFrom = function (e) {
                  (this.bIsLiving = e.readInt32(0, !1, this.bIsLiving)),
                    (this.tNotice = e.readStruct(1, !1, this.tNotice)),
                    (this.bIsSelfLiving = e.readInt32(2, !1, this.bIsSelfLiving));
                }),
                (r.VideoClientReportReq = function () {
                  (this.iReportType = 0),
                    (this.sReportString = ''),
                    (this.sMsg = new s.BinBuffer()),
                    (this.lUid = 0);
                }),
                (r.VideoClientReportReq.prototype._clone = function () {
                  return new r.VideoClientReportReq();
                }),
                (r.VideoClientReportReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.VideoClientReportReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.VideoClientReportReq.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iReportType),
                    e.writeString(1, this.sReportString),
                    e.writeBytes(2, this.sMsg),
                    e.writeInt64(3, this.lUid);
                }),
                (r.VideoClientReportReq.prototype.readFrom = function (e) {
                  (this.iReportType = e.readInt32(0, !1, this.iReportType)),
                    (this.sReportString = e.readString(1, !1, this.sReportString)),
                    (this.sMsg = e.readBytes(2, !1, this.sMsg)),
                    (this.lUid = e.readInt64(3, !1, this.lUid));
                }),
                (r.LiveMeetingSyncNotice = function () {
                  (this.tStat = new r.MeetingStat()),
                    (this.vSeats = new s.Vector(new r.MeetingSeat())),
                    (this.iVersion = 0),
                    (this.sMessage = '');
                }),
                (r.LiveMeetingSyncNotice.prototype._clone = function () {
                  return new r.LiveMeetingSyncNotice();
                }),
                (r.LiveMeetingSyncNotice.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.LiveMeetingSyncNotice.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.LiveMeetingSyncNotice.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tStat),
                    e.writeVector(1, this.vSeats),
                    e.writeInt32(2, this.iVersion),
                    e.writeString(3, this.sMessage);
                }),
                (r.LiveMeetingSyncNotice.prototype.readFrom = function (e) {
                  (this.tStat = e.readStruct(0, !1, this.tStat)),
                    (this.vSeats = e.readVector(1, !1, this.vSeats)),
                    (this.iVersion = e.readInt32(2, !1, this.iVersion)),
                    (this.sMessage = e.readString(3, !1, this.sMessage));
                }),
                (r.MeetingStat = function () {
                  (this.lPresenterUid = 0),
                    (this.sPresenterNick = ''),
                    (this.sPresenterAvatarUrl = ''),
                    (this.mpContext = new s.Map(new s.STRING(), new s.STRING())),
                    (this.iVersion = 0),
                    (this.iCurAction = 0),
                    (this.sPassword = ''),
                    (this.lSessionId = 0),
                    (this.vApplyList = new s.Vector(new r.ApplyUser())),
                    (this.iState = 0),
                    (this.iSilence = 0),
                    (this.iActiveTime = 0),
                    (this.iLastSyncTime = 0),
                    (this.mpUserSession = new s.Map(new s.INT64(), new s.STRING())),
                    (this.iBeginTime = 0),
                    (this.iPresenterGender = 0),
                    (this.tTransferRoom = new r.TransferLiveRoomState()),
                    (this.iMode = 0),
                    (this.iModeV2 = 0),
                    (this.iOfficialType = 0);
                }),
                (r.MeetingStat.prototype._clone = function () {
                  return new r.MeetingStat();
                }),
                (r.MeetingStat.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MeetingStat.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MeetingStat.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lPresenterUid),
                    e.writeString(1, this.sPresenterNick),
                    e.writeString(2, this.sPresenterAvatarUrl),
                    e.writeMap(4, this.mpContext),
                    e.writeInt32(5, this.iVersion),
                    e.writeInt32(6, this.iCurAction),
                    e.writeString(7, this.sPassword),
                    e.writeInt64(8, this.lSessionId),
                    e.writeVector(9, this.vApplyList),
                    e.writeInt32(10, this.iState),
                    e.writeInt32(11, this.iSilence),
                    e.writeInt32(12, this.iActiveTime),
                    e.writeInt32(13, this.iLastSyncTime),
                    e.writeMap(14, this.mpUserSession),
                    e.writeInt32(15, this.iBeginTime),
                    e.writeInt32(16, this.iPresenterGender),
                    e.writeStruct(17, this.tTransferRoom),
                    e.writeInt32(18, this.iMode),
                    e.writeInt32(19, this.iModeV2),
                    e.writeInt32(20, this.iOfficialType);
                }),
                (r.MeetingStat.prototype.readFrom = function (e) {
                  (this.lPresenterUid = e.readInt64(0, !1, this.lPresenterUid)),
                    (this.sPresenterNick = e.readString(1, !1, this.sPresenterNick)),
                    (this.sPresenterAvatarUrl = e.readString(2, !1, this.sPresenterAvatarUrl)),
                    (this.mpContext = e.readMap(4, !1, this.mpContext)),
                    (this.iVersion = e.readInt32(5, !1, this.iVersion)),
                    (this.iCurAction = e.readInt32(6, !1, this.iCurAction)),
                    (this.sPassword = e.readString(7, !1, this.sPassword)),
                    (this.lSessionId = e.readInt64(8, !1, this.lSessionId)),
                    (this.vApplyList = e.readVector(9, !1, this.vApplyList)),
                    (this.iState = e.readInt32(10, !1, this.iState)),
                    (this.iSilence = e.readInt32(11, !1, this.iSilence)),
                    (this.iActiveTime = e.readInt32(12, !1, this.iActiveTime)),
                    (this.iLastSyncTime = e.readInt32(13, !1, this.iLastSyncTime)),
                    (this.mpUserSession = e.readMap(14, !1, this.mpUserSession)),
                    (this.iBeginTime = e.readInt32(15, !1, this.iBeginTime)),
                    (this.iPresenterGender = e.readInt32(16, !1, this.iPresenterGender)),
                    (this.tTransferRoom = e.readStruct(17, !1, this.tTransferRoom)),
                    (this.iMode = e.readInt32(18, !1, this.iMode)),
                    (this.iModeV2 = e.readInt32(19, !1, this.iModeV2)),
                    (this.iOfficialType = e.readInt32(20, !1, this.iOfficialType));
                }),
                (r.MeetingSeat = function () {
                  (this.mpContext = new s.Map(new s.STRING(), new s.STRING())),
                    (this.iPos = 0),
                    (this.iLocked = 0),
                    (this.lUid = 0),
                    (this.sNick = ''),
                    (this.sAvatarUrl = ''),
                    (this.iMute = 0),
                    (this.iVersion = 0),
                    (this.iCurAction = 0),
                    (this.iActiveTime = 0),
                    (this.iSilence = 0),
                    (this.iGender = 0),
                    (this.lOfferSeatTimeStamp = 0),
                    (this.iSilenceTime = 0),
                    (this.iMuteTime = 0),
                    (this.iSeatType = 0),
                    (this.iSeatTypeV2 = 0),
                    (this.sSeatUrl = ''),
                    (this.sCharm = ''),
                    (this.sName = ''),
                    (this.sSourceUrl = ''),
                    (this.sRippleUrl = '');
                }),
                (r.MeetingSeat.prototype._clone = function () {
                  return new r.MeetingSeat();
                }),
                (r.MeetingSeat.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MeetingSeat.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MeetingSeat.prototype.writeTo = function (e) {
                  e.writeMap(0, this.mpContext),
                    e.writeInt32(1, this.iPos),
                    e.writeInt32(2, this.iLocked),
                    e.writeInt64(3, this.lUid),
                    e.writeString(4, this.sNick),
                    e.writeString(5, this.sAvatarUrl),
                    e.writeInt32(7, this.iMute),
                    e.writeInt32(8, this.iVersion),
                    e.writeInt32(9, this.iCurAction),
                    e.writeInt32(10, this.iActiveTime),
                    e.writeInt32(11, this.iSilence),
                    e.writeInt32(12, this.iGender),
                    e.writeInt64(13, this.lOfferSeatTimeStamp),
                    e.writeInt32(14, this.iSilenceTime),
                    e.writeInt32(15, this.iMuteTime),
                    e.writeInt32(16, this.iSeatType),
                    e.writeInt32(17, this.iSeatTypeV2),
                    e.writeString(18, this.sSeatUrl),
                    e.writeString(19, this.sCharm),
                    e.writeString(20, this.sName),
                    e.writeString(21, this.sSourceUrl),
                    e.writeString(22, this.sRippleUrl);
                }),
                (r.MeetingSeat.prototype.readFrom = function (e) {
                  (this.mpContext = e.readMap(0, !1, this.mpContext)),
                    (this.iPos = e.readInt32(1, !1, this.iPos)),
                    (this.iLocked = e.readInt32(2, !1, this.iLocked)),
                    (this.lUid = e.readInt64(3, !1, this.lUid)),
                    (this.sNick = e.readString(4, !1, this.sNick)),
                    (this.sAvatarUrl = e.readString(5, !1, this.sAvatarUrl)),
                    (this.iMute = e.readInt32(7, !1, this.iMute)),
                    (this.iVersion = e.readInt32(8, !1, this.iVersion)),
                    (this.iCurAction = e.readInt32(9, !1, this.iCurAction)),
                    (this.iActiveTime = e.readInt32(10, !1, this.iActiveTime)),
                    (this.iSilence = e.readInt32(11, !1, this.iSilence)),
                    (this.iGender = e.readInt32(12, !1, this.iGender)),
                    (this.lOfferSeatTimeStamp = e.readInt64(13, !1, this.lOfferSeatTimeStamp)),
                    (this.iSilenceTime = e.readInt32(14, !1, this.iSilenceTime)),
                    (this.iMuteTime = e.readInt32(15, !1, this.iMuteTime)),
                    (this.iSeatType = e.readInt32(16, !1, this.iSeatType)),
                    (this.iSeatTypeV2 = e.readInt32(17, !1, this.iSeatTypeV2)),
                    (this.sSeatUrl = e.readString(18, !1, this.sSeatUrl)),
                    (this.sCharm = e.readString(19, !1, this.sCharm)),
                    (this.sName = e.readString(20, !1, this.sName)),
                    (this.sSourceUrl = e.readString(21, !1, this.sSourceUrl)),
                    (this.sRippleUrl = e.readString(22, !1, this.sRippleUrl));
                }),
                (r.ApplyUser = function () {
                  (this.lUid = 0),
                    (this.sNick = ''),
                    (this.sAvatarUrl = ''),
                    (this.lActiveTime = 0),
                    (this.mpContext = new s.Map(new s.STRING(), new s.STRING())),
                    (this.iGender = 0),
                    (this.sStreamName = ''),
                    (this.iSeatType = 0);
                }),
                (r.ApplyUser.prototype._clone = function () {
                  return new r.ApplyUser();
                }),
                (r.ApplyUser.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ApplyUser.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ApplyUser.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeString(1, this.sNick),
                    e.writeString(2, this.sAvatarUrl),
                    e.writeInt64(3, this.lActiveTime),
                    e.writeMap(4, this.mpContext),
                    e.writeInt32(5, this.iGender),
                    e.writeString(6, this.sStreamName),
                    e.writeInt32(7, this.iSeatType);
                }),
                (r.ApplyUser.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.sNick = e.readString(1, !1, this.sNick)),
                    (this.sAvatarUrl = e.readString(2, !1, this.sAvatarUrl)),
                    (this.lActiveTime = e.readInt64(3, !1, this.lActiveTime)),
                    (this.mpContext = e.readMap(4, !1, this.mpContext)),
                    (this.iGender = e.readInt32(5, !1, this.iGender)),
                    (this.sStreamName = e.readString(6, !1, this.sStreamName)),
                    (this.iSeatType = e.readInt32(7, !1, this.iSeatType));
                }),
                (r.TransferLiveRoomState = function () {
                  (this.lTargetUid = 0),
                    (this.iInviteTime = 0),
                    (this.iTokeOverTime = 0),
                    (this.iBeginLiveTime = 0),
                    (this.lNewLiveId = 0),
                    (this.iInviteExpire = 0),
                    (this.iState = 0),
                    (this.iResult = 0),
                    (this.iSuccessTime = 0),
                    (this.sTargetNick = '');
                }),
                (r.TransferLiveRoomState.prototype._clone = function () {
                  return new r.TransferLiveRoomState();
                }),
                (r.TransferLiveRoomState.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.TransferLiveRoomState.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.TransferLiveRoomState.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lTargetUid),
                    e.writeInt32(1, this.iInviteTime),
                    e.writeInt32(2, this.iTokeOverTime),
                    e.writeInt32(3, this.iBeginLiveTime),
                    e.writeInt64(4, this.lNewLiveId),
                    e.writeInt32(5, this.iInviteExpire),
                    e.writeInt32(6, this.iState),
                    e.writeInt32(7, this.iResult),
                    e.writeInt32(8, this.iSuccessTime),
                    e.writeString(9, this.sTargetNick);
                }),
                (r.TransferLiveRoomState.prototype.readFrom = function (e) {
                  (this.lTargetUid = e.readInt64(0, !1, this.lTargetUid)),
                    (this.iInviteTime = e.readInt32(1, !1, this.iInviteTime)),
                    (this.iTokeOverTime = e.readInt32(2, !1, this.iTokeOverTime)),
                    (this.iBeginLiveTime = e.readInt32(3, !1, this.iBeginLiveTime)),
                    (this.lNewLiveId = e.readInt64(4, !1, this.lNewLiveId)),
                    (this.iInviteExpire = e.readInt32(5, !1, this.iInviteExpire)),
                    (this.iState = e.readInt32(6, !1, this.iState)),
                    (this.iResult = e.readInt32(7, !1, this.iResult)),
                    (this.iSuccessTime = e.readInt32(8, !1, this.iSuccessTime)),
                    (this.sTargetNick = e.readString(9, !1, this.sTargetNick));
                }),
                (r.GetP2PStreamInfoReq = function () {
                  (this.lUid = 0),
                    (this.sStreamName = ''),
                    (this.iP2PType = 0),
                    (this.sClientUA = '');
                }),
                (r.GetP2PStreamInfoReq.prototype._clone = function () {
                  return new r.GetP2PStreamInfoReq();
                }),
                (r.GetP2PStreamInfoReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetP2PStreamInfoReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetP2PStreamInfoReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeString(1, this.sStreamName),
                    e.writeInt32(2, this.iP2PType),
                    e.writeString(3, this.sClientUA);
                }),
                (r.GetP2PStreamInfoReq.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.sStreamName = e.readString(1, !1, this.sStreamName)),
                    (this.iP2PType = e.readInt32(2, !1, this.iP2PType)),
                    (this.sClientUA = e.readString(3, !1, this.sClientUA));
                }),
                (r.GetP2PStreamInfoRsp = function () {
                  (this.lUid = 0),
                    (this.sStreamName = ''),
                    (this.iP2PType = 0),
                    (this.sP2PToken = ''),
                    (this.iP2PExpireTime = 0),
                    (this.sP2PUrl = ''),
                    (this.sCodecType = ''),
                    (this.sCdnBrand = ''),
                    (this.mpOption = new s.Map(new s.INT16(), new s.INT64())),
                    (this.line = 0);
                }),
                (r.GetP2PStreamInfoRsp.prototype._clone = function () {
                  return new r.GetP2PStreamInfoRsp();
                }),
                (r.GetP2PStreamInfoRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetP2PStreamInfoRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetP2PStreamInfoRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeString(1, this.sStreamName),
                    e.writeInt32(2, this.iP2PType),
                    e.writeString(3, this.sP2PToken),
                    e.writeInt32(4, this.iP2PExpireTime),
                    e.writeString(5, this.sP2PUrl),
                    e.writeString(6, this.sCodecType),
                    e.writeString(7, this.sCdnBrand),
                    e.writeMap(8, this.mpOption),
                    e.writeUInt8(9, this.line);
                }),
                (r.GetP2PStreamInfoRsp.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.sStreamName = e.readString(1, !1, this.sStreamName)),
                    (this.iP2PType = e.readInt32(2, !1, this.iP2PType)),
                    (this.sP2PToken = e.readString(3, !1, this.sP2PToken)),
                    (this.iP2PExpireTime = e.readInt32(4, !1, this.iP2PExpireTime)),
                    (this.sP2PUrl = e.readString(5, !1, this.sP2PUrl)),
                    (this.sCodecType = e.readString(6, !1, this.sCodecType)),
                    (this.sCdnBrand = e.readString(7, !1, this.sCdnBrand)),
                    (this.mpOption = e.readMap(8, !1, this.mpOption)),
                    (this.line = e.readUInt8(9, !1, this.line));
                }),
                (r.GetP2PStreamTokenExReq = function () {
                  (this.sStreamName = ''), (this.iLoopTime = 0);
                }),
                (r.GetP2PStreamTokenExReq.prototype._clone = function () {
                  return new r.GetP2PStreamTokenExReq();
                }),
                (r.GetP2PStreamTokenExReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetP2PStreamTokenExReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetP2PStreamTokenExReq.prototype.writeTo = function (e) {
                  e.writeString(0, this.sStreamName), e.writeInt32(1, this.iLoopTime);
                }),
                (r.GetP2PStreamTokenExReq.prototype.readFrom = function (e) {
                  (this.sStreamName = e.readString(0, !1, this.sStreamName)),
                    (this.iLoopTime = e.readInt32(1, !1, this.iLoopTime));
                }),
                (r.GetP2PStreamTokenExRsp = function () {
                  (this.sP2PToken = ''), (this.iExpireTime = 0);
                }),
                (r.GetP2PStreamTokenExRsp.prototype._clone = function () {
                  return new r.GetP2PStreamTokenExRsp();
                }),
                (r.GetP2PStreamTokenExRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetP2PStreamTokenExRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetP2PStreamTokenExRsp.prototype.writeTo = function (e) {
                  e.writeString(0, this.sP2PToken), e.writeInt32(1, this.iExpireTime);
                }),
                (r.GetP2PStreamTokenExRsp.prototype.readFrom = function (e) {
                  (this.sP2PToken = e.readString(0, !1, this.sP2PToken)),
                    (this.iExpireTime = e.readInt32(1, !1, this.iExpireTime));
                }),
                (r.HttpDnsItem = function () {
                  (this.vIp = new s.Vector(new s.STRING())),
                    (this.iExpireTime = 0),
                    (this.vIpv6 = new s.Vector(new s.STRING()));
                }),
                (r.HttpDnsItem.prototype._clone = function () {
                  return new r.HttpDnsItem();
                }),
                (r.HttpDnsItem.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.HttpDnsItem.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.HttpDnsItem.prototype.writeTo = function (e) {
                  e.writeVector(0, this.vIp),
                    e.writeInt64(1, this.iExpireTime),
                    e.writeVector(2, this.vIpv6);
                }),
                (r.HttpDnsItem.prototype.readFrom = function (e) {
                  (this.vIp = e.readVector(0, !1, this.vIp)),
                    (this.iExpireTime = e.readInt64(1, !1, this.iExpireTime)),
                    (this.vIpv6 = e.readVector(2, !1, this.vIpv6));
                }),
                (r.QueryHttpDnsReq = function () {
                  (this.lUid = 0),
                    (this.sUA = ''),
                    (this.vDomain = new s.Vector(new s.STRING())),
                    (this.sAppSrc = '');
                }),
                (r.QueryHttpDnsReq.prototype._clone = function () {
                  return new r.QueryHttpDnsReq();
                }),
                (r.QueryHttpDnsReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.QueryHttpDnsReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.QueryHttpDnsReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeString(1, this.sUA),
                    e.writeVector(2, this.vDomain),
                    e.writeString(3, this.sAppSrc);
                }),
                (r.QueryHttpDnsReq.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.sUA = e.readString(1, !1, this.sUA)),
                    (this.vDomain = e.readVector(2, !1, this.vDomain)),
                    (this.sAppSrc = e.readString(3, !1, this.sAppSrc));
                }),
                (r.QueryHttpDnsRsp = function () {
                  this.mDomain2Ip = new s.Map(new s.STRING(), new r.HttpDnsItem());
                }),
                (r.QueryHttpDnsRsp.prototype._clone = function () {
                  return new r.QueryHttpDnsRsp();
                }),
                (r.QueryHttpDnsRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.QueryHttpDnsRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.QueryHttpDnsRsp.prototype.writeTo = function (e) {
                  e.writeMap(0, this.mDomain2Ip);
                }),
                (r.QueryHttpDnsRsp.prototype.readFrom = function (e) {
                  this.mDomain2Ip = e.readMap(0, !1, this.mDomain2Ip);
                }),
                (r.WSTimeSyncReq = function () {
                  (this.sGuid = ''), (this.lClientTime = 0);
                }),
                (r.WSTimeSyncReq.prototype._clone = function () {
                  return new r.WSTimeSyncReq();
                }),
                (r.WSTimeSyncReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.WSTimeSyncReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.WSTimeSyncReq.prototype.writeTo = function (e) {
                  e.writeString(0, this.sGuid), e.writeInt64(1, this.lClientTime);
                }),
                (r.WSTimeSyncReq.prototype.readFrom = function (e) {
                  (this.sGuid = e.readString(0, !1, this.sGuid)),
                    (this.lClientTime = e.readInt64(1, !1, this.lClientTime));
                }),
                (r.WSTimeSyncRsp = function () {
                  this.lServerTime = 0;
                }),
                (r.WSTimeSyncRsp.prototype._clone = function () {
                  return new r.WSTimeSyncRsp();
                }),
                (r.WSTimeSyncRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.WSTimeSyncRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.WSTimeSyncRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lServerTime);
                }),
                (r.WSTimeSyncRsp.prototype.readFrom = function (e) {
                  this.lServerTime = e.readInt64(0, !1, this.lServerTime);
                }),
                (r.MediaUserId = function () {
                  (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.sToken = ''),
                    (this.sUA = ''),
                    (this.sCookie = ''),
                    (this.iTokenType = 0),
                    (this.iAppid = 0),
                    (this.bAnonymous = 0),
                    (this.sStrUid = '');
                }),
                (r.MediaUserId.prototype._clone = function () {
                  return new r.MediaUserId();
                }),
                (r.MediaUserId.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MediaUserId.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MediaUserId.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeString(1, this.sGuid),
                    e.writeString(2, this.sToken),
                    e.writeString(3, this.sUA),
                    e.writeString(4, this.sCookie),
                    e.writeInt32(5, this.iTokenType),
                    e.writeInt32(6, this.iAppid),
                    e.writeInt32(7, this.bAnonymous),
                    e.writeString(8, this.sStrUid);
                }),
                (r.MediaUserId.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.sGuid = e.readString(1, !1, this.sGuid)),
                    (this.sToken = e.readString(2, !1, this.sToken)),
                    (this.sUA = e.readString(3, !1, this.sUA)),
                    (this.sCookie = e.readString(4, !1, this.sCookie)),
                    (this.iTokenType = e.readInt32(5, !1, this.iTokenType)),
                    (this.iAppid = e.readInt32(6, !1, this.iAppid)),
                    (this.bAnonymous = e.readInt32(7, !1, this.bAnonymous)),
                    (this.sStrUid = e.readString(8, !1, this.sStrUid));
                }),
                (r.LoginVerifyReq = function () {
                  (this.tId = new r.MediaUserId()), (this.iCookieDeadTime = 0);
                }),
                (r.LoginVerifyReq.prototype._clone = function () {
                  return new r.LoginVerifyReq();
                }),
                (r.LoginVerifyReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.LoginVerifyReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.LoginVerifyReq.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tId), e.writeInt32(1, this.iCookieDeadTime);
                }),
                (r.LoginVerifyReq.prototype.readFrom = function (e) {
                  (this.tId = e.readStruct(0, !1, this.tId)),
                    (this.iCookieDeadTime = e.readInt32(1, !1, this.iCookieDeadTime));
                }),
                (r.LoginVerifyRsp = function () {
                  (this.iResCode = 0),
                    (this.lUid = 0),
                    (this.sCookie = ''),
                    (this.sUid = ''),
                    (this.iAppId = 0);
                }),
                (r.LoginVerifyRsp.prototype._clone = function () {
                  return new r.LoginVerifyRsp();
                }),
                (r.LoginVerifyRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.LoginVerifyRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.LoginVerifyRsp.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iResCode),
                    e.writeInt64(1, this.lUid),
                    e.writeString(2, this.sCookie),
                    e.writeString(3, this.sUid),
                    e.writeInt32(4, this.iAppId);
                }),
                (r.LoginVerifyRsp.prototype.readFrom = function (e) {
                  (this.iResCode = e.readInt32(0, !1, this.iResCode)),
                    (this.lUid = e.readInt64(1, !1, this.lUid)),
                    (this.sCookie = e.readString(2, !1, this.sCookie)),
                    (this.sUid = e.readString(3, !1, this.sUid)),
                    (this.iAppId = e.readInt32(4, !1, this.iAppId));
                }),
                (r.JoinMediaGroupReq = function () {
                  (this.tId = new r.MediaUserId()), (this.vGroupId = new s.Vector(new s.STRING()));
                }),
                (r.JoinMediaGroupReq.prototype._clone = function () {
                  return new r.JoinMediaGroupReq();
                }),
                (r.JoinMediaGroupReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.JoinMediaGroupReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.JoinMediaGroupReq.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tId), e.writeVector(1, this.vGroupId);
                }),
                (r.JoinMediaGroupReq.prototype.readFrom = function (e) {
                  (this.tId = e.readStruct(0, !1, this.tId)),
                    (this.vGroupId = e.readVector(1, !1, this.vGroupId));
                }),
                (r.JoinMediaGroupRsp = function () {
                  (this.iCode = 0),
                    (this.sMsg = ''),
                    (this.vGroupId = new s.Vector(new s.STRING()));
                }),
                (r.JoinMediaGroupRsp.prototype._clone = function () {
                  return new r.JoinMediaGroupRsp();
                }),
                (r.JoinMediaGroupRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.JoinMediaGroupRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.JoinMediaGroupRsp.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iCode),
                    e.writeString(1, this.sMsg),
                    e.writeVector(2, this.vGroupId);
                }),
                (r.JoinMediaGroupRsp.prototype.readFrom = function (e) {
                  (this.iCode = e.readInt32(0, !1, this.iCode)),
                    (this.sMsg = e.readString(1, !1, this.sMsg)),
                    (this.vGroupId = e.readVector(2, !1, this.vGroupId));
                }),
                (r.QuitMediaGroupReq = function () {
                  (this.tId = new r.MediaUserId()), (this.vGroupId = new s.Vector(new s.STRING()));
                }),
                (r.QuitMediaGroupReq.prototype._clone = function () {
                  return new r.QuitMediaGroupReq();
                }),
                (r.QuitMediaGroupReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.QuitMediaGroupReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.QuitMediaGroupReq.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tId), e.writeVector(1, this.vGroupId);
                }),
                (r.QuitMediaGroupReq.prototype.readFrom = function (e) {
                  (this.tId = e.readStruct(0, !1, this.tId)),
                    (this.vGroupId = e.readVector(1, !1, this.vGroupId));
                }),
                (r.QuitMediaGroupRsp = function () {
                  (this.iCode = 0),
                    (this.sMsg = ''),
                    (this.vGroupId = new s.Vector(new s.STRING()));
                }),
                (r.QuitMediaGroupRsp.prototype._clone = function () {
                  return new r.QuitMediaGroupRsp();
                }),
                (r.QuitMediaGroupRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.QuitMediaGroupRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.QuitMediaGroupRsp.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iCode),
                    e.writeString(1, this.sMsg),
                    e.writeVector(2, this.vGroupId);
                }),
                (r.QuitMediaGroupRsp.prototype.readFrom = function (e) {
                  (this.iCode = e.readInt32(0, !1, this.iCode)),
                    (this.sMsg = e.readString(1, !1, this.sMsg)),
                    (this.vGroupId = e.readVector(2, !1, this.vGroupId));
                }),
                (r.ikk = 1),
                (r.skk = '123'),
                (r.eIType = { k4AM: 10001, k6AM: 10002 }),
                (r.EM_PCDN_MODE = {
                  E_PcdnMode_Min: 0,
                  E_PcdnMode_P2pHttpSubstream: 1,
                  E_PcdnMode_P2pOutsideSdkSubstream: 2,
                  E_PcdnMode_FlvHttpFullstream: 3,
                  E_PcdnMode_FlvOutsideSdkFullstream: 4,
                  E_PcdnMode_Max: 255,
                  E_PcdnVodMode_Http302: 21,
                }),
                (r.EM_BUSI_TYPE = {
                  E_BusiType_Min: 0,
                  E_BusiType_Live: 1,
                  E_BusiType_Max: 255,
                  E_BusiType_Vod: 2,
                }),
                (r.EM_CLINET_TYPE = {
                  E_CLIENT_MIN: 0,
                  E_CLIENT_PC: 1,
                  E_CLIENT_ADR: 2,
                  E_CLIENT_IOS: 3,
                  E_CLIENT_WEB: 4,
                  E_CLIENT_MAX: 255,
                  E_CLIENT_NFTV: 5,
                }),
                (r.ERR_CODE_FOR_HY_PCDNGW_CLIENT_RSP = {
                  E_SUCCESS: 0,
                  E_HYGW_ERR: 1,
                  E_PCDNGW_40X: 2,
                  E_PCDNGW_50X: 3,
                  E_PCDNGW_TIO: 4,
                  E_PCDNGW_RSPERR: 5,
                  E_CLIREQ_ERR: 6,
                  E_PCDN_OFF: 7,
                  E_LIMIT_FLOWS: 8,
                }),
                (r.MyReq = function () {
                  (this.name = ''),
                    (this.opt = ''),
                    (this.mMap = new s.Map(new s.STRING(), new s.STRING()));
                }),
                (r.MyReq.prototype._clone = function () {
                  return new r.MyReq();
                }),
                (r.MyReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MyReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MyReq.prototype.writeTo = function (e) {
                  e.writeString(0, this.name), e.writeString(1, this.opt), e.writeMap(2, this.mMap);
                }),
                (r.MyReq.prototype.readFrom = function (e) {
                  (this.name = e.readString(0, !1, this.name)),
                    (this.opt = e.readString(1, !1, this.opt)),
                    (this.mMap = e.readMap(2, !1, this.mMap));
                }),
                (r.MyRsp = function () {
                  (this.value = 0),
                    (this.origin = new r.MyReq()),
                    (this.types = new s.Vector(new s.INT32())),
                    (this.eType = 0);
                }),
                (r.MyRsp.prototype._clone = function () {
                  return new r.MyRsp();
                }),
                (r.MyRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MyRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MyRsp.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.value),
                    e.writeStruct(1, this.origin),
                    e.writeVector(2, this.types),
                    e.writeInt32(3, this.eType);
                }),
                (r.MyRsp.prototype.readFrom = function (e) {
                  (this.value = e.readInt32(0, !1, this.value)),
                    (this.origin = e.readStruct(1, !1, this.origin)),
                    (this.types = e.readVector(2, !1, this.types)),
                    (this.eType = e.readInt32(3, !1, this.eType));
                }),
                (r.ClientQueryPcdnScheduleReq = function () {
                  (this.lReqTs = 0),
                    (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.lAnchorUid = 0),
                    (this.iCdnLine = 0),
                    (this.iCliType = 0),
                    (this.lBucketPara = 0),
                    (this.vPcdnMode = new s.Vector(new s.INT32())),
                    (this.iBusiType = 0),
                    (this.sStreamName = ''),
                    (this.mPcdnModeCliSupportPcdns = new s.Map(
                      new s.INT32(),
                      new s.Vector(new s.STRING()),
                    )),
                    (this.vSupportMode = new s.Vector(new s.INT32())),
                    (this.sUserAgent = ''),
                    (this.iRatio = 0),
                    (this.sCodec = '');
                }),
                (r.ClientQueryPcdnScheduleReq.prototype._clone = function () {
                  return new r.ClientQueryPcdnScheduleReq();
                }),
                (r.ClientQueryPcdnScheduleReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientQueryPcdnScheduleReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientQueryPcdnScheduleReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lUid),
                    e.writeString(2, this.sGuid),
                    e.writeInt64(3, this.lAnchorUid),
                    e.writeInt32(4, this.iCdnLine),
                    e.writeInt32(5, this.iCliType),
                    e.writeInt64(6, this.lBucketPara),
                    e.writeVector(30, this.vPcdnMode),
                    e.writeInt32(31, this.iBusiType),
                    e.writeString(32, this.sStreamName),
                    e.writeMap(100, this.mPcdnModeCliSupportPcdns),
                    e.writeVector(101, this.vSupportMode),
                    e.writeString(102, this.sUserAgent),
                    e.writeInt32(103, this.iRatio),
                    e.writeString(104, this.sCodec);
                }),
                (r.ClientQueryPcdnScheduleReq.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lUid = e.readInt64(1, !1, this.lUid)),
                    (this.sGuid = e.readString(2, !1, this.sGuid)),
                    (this.lAnchorUid = e.readInt64(3, !1, this.lAnchorUid)),
                    (this.iCdnLine = e.readInt32(4, !1, this.iCdnLine)),
                    (this.iCliType = e.readInt32(5, !1, this.iCliType)),
                    (this.lBucketPara = e.readInt64(6, !1, this.lBucketPara)),
                    (this.vPcdnMode = e.readVector(30, !1, this.vPcdnMode)),
                    (this.iBusiType = e.readInt32(31, !1, this.iBusiType)),
                    (this.sStreamName = e.readString(32, !1, this.sStreamName)),
                    (this.mPcdnModeCliSupportPcdns = e.readMap(
                      100,
                      !1,
                      this.mPcdnModeCliSupportPcdns,
                    )),
                    (this.vSupportMode = e.readVector(101, !1, this.vSupportMode)),
                    (this.sUserAgent = e.readString(102, !1, this.sUserAgent)),
                    (this.iRatio = e.readInt32(103, !1, this.iRatio)),
                    (this.sCodec = e.readString(104, !1, this.sCodec));
                }),
                (r.ClientQueryPcdnScheduleRsp = function () {
                  (this.lReqTs = 0),
                    (this.lRspTs = 0),
                    (this.iErrCode = 0),
                    (this.mPcdnModeSwitch = new s.Map(new s.INT32(), new s.INT32())),
                    (this.cliProv = ''),
                    (this.cliIsp = ''),
                    (this.lUid = 0),
                    (this.iCdnLine = 0),
                    (this.sStreamName = ''),
                    (this.mPcdnModePcdnName = new s.Map(new s.INT32(), new s.STRING()));
                }),
                (r.ClientQueryPcdnScheduleRsp.prototype._clone = function () {
                  return new r.ClientQueryPcdnScheduleRsp();
                }),
                (r.ClientQueryPcdnScheduleRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientQueryPcdnScheduleRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientQueryPcdnScheduleRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lRspTs),
                    e.writeInt32(2, this.iErrCode),
                    e.writeMap(10, this.mPcdnModeSwitch),
                    e.writeString(30, this.cliProv),
                    e.writeString(31, this.cliIsp),
                    e.writeInt64(100, this.lUid),
                    e.writeInt32(101, this.iCdnLine),
                    e.writeString(102, this.sStreamName),
                    e.writeMap(200, this.mPcdnModePcdnName);
                }),
                (r.ClientQueryPcdnScheduleRsp.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lRspTs = e.readInt64(1, !1, this.lRspTs)),
                    (this.iErrCode = e.readInt32(2, !1, this.iErrCode)),
                    (this.mPcdnModeSwitch = e.readMap(10, !1, this.mPcdnModeSwitch)),
                    (this.cliProv = e.readString(30, !1, this.cliProv)),
                    (this.cliIsp = e.readString(31, !1, this.cliIsp)),
                    (this.lUid = e.readInt64(100, !1, this.lUid)),
                    (this.iCdnLine = e.readInt32(101, !1, this.iCdnLine)),
                    (this.sStreamName = e.readString(102, !1, this.sStreamName)),
                    (this.mPcdnModePcdnName = e.readMap(200, !1, this.mPcdnModePcdnName));
                }),
                (r.ClientGetStunAndPcdnProxyReq = function () {
                  (this.lReqTs = 0),
                    (this.lUid = 0),
                    (this.sStreamname = ''),
                    (this.iBaseSubs = 0),
                    (this.vSub = new s.Vector(new s.INT32())),
                    (this.sGuid = ''),
                    (this.lAnchorUid = 0),
                    (this.iCdnLine = 0),
                    (this.iCliType = 0),
                    (this.lBucketPara = 0),
                    (this.iBusiType = 0),
                    (this.curPcdnName = ''),
                    (this.supportV6 = 0),
                    (this.retryCnt = 0),
                    (this.sUserAgent = ''),
                    (this.iRatio = 0),
                    (this.sCodec = '');
                }),
                (r.ClientGetStunAndPcdnProxyReq.prototype._clone = function () {
                  return new r.ClientGetStunAndPcdnProxyReq();
                }),
                (r.ClientGetStunAndPcdnProxyReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetStunAndPcdnProxyReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetStunAndPcdnProxyReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lUid),
                    e.writeString(2, this.sStreamname),
                    e.writeInt32(3, this.iBaseSubs),
                    e.writeVector(4, this.vSub),
                    e.writeString(5, this.sGuid),
                    e.writeInt64(6, this.lAnchorUid),
                    e.writeInt32(7, this.iCdnLine),
                    e.writeInt32(8, this.iCliType),
                    e.writeInt64(9, this.lBucketPara),
                    e.writeInt32(10, this.iBusiType),
                    e.writeString(11, this.curPcdnName),
                    e.writeInt32(12, this.supportV6),
                    e.writeInt32(13, this.retryCnt),
                    e.writeString(14, this.sUserAgent),
                    e.writeInt32(15, this.iRatio),
                    e.writeString(16, this.sCodec);
                }),
                (r.ClientGetStunAndPcdnProxyReq.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lUid = e.readInt64(1, !1, this.lUid)),
                    (this.sStreamname = e.readString(2, !1, this.sStreamname)),
                    (this.iBaseSubs = e.readInt32(3, !1, this.iBaseSubs)),
                    (this.vSub = e.readVector(4, !1, this.vSub)),
                    (this.sGuid = e.readString(5, !1, this.sGuid)),
                    (this.lAnchorUid = e.readInt64(6, !1, this.lAnchorUid)),
                    (this.iCdnLine = e.readInt32(7, !1, this.iCdnLine)),
                    (this.iCliType = e.readInt32(8, !1, this.iCliType)),
                    (this.lBucketPara = e.readInt64(9, !1, this.lBucketPara)),
                    (this.iBusiType = e.readInt32(10, !1, this.iBusiType)),
                    (this.curPcdnName = e.readString(11, !1, this.curPcdnName)),
                    (this.supportV6 = e.readInt32(12, !1, this.supportV6)),
                    (this.retryCnt = e.readInt32(13, !1, this.retryCnt)),
                    (this.sUserAgent = e.readString(14, !1, this.sUserAgent)),
                    (this.iRatio = e.readInt32(15, !1, this.iRatio)),
                    (this.sCodec = e.readString(16, !1, this.sCodec));
                }),
                (r.PCdnProxyUrl = function () {
                  (this.sProtocol = ''),
                    (this.vUrl = new s.Vector(new s.STRING())),
                    (this.iStatusPcdn = 0),
                    (this.iPcdnThresholdHotDegreeIn = -1),
                    (this.iPcdnThresholdHotDegreeKick = -1),
                    (this.iPcdnNowHotDegree = -1),
                    (this.iPcdnNowPullstreamUcnt = -1),
                    (this.iPcdnNowGetpcdnUcnt = -1);
                }),
                (r.PCdnProxyUrl.prototype._clone = function () {
                  return new r.PCdnProxyUrl();
                }),
                (r.PCdnProxyUrl.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.PCdnProxyUrl.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.PCdnProxyUrl.prototype.writeTo = function (e) {
                  e.writeString(0, this.sProtocol),
                    e.writeVector(2, this.vUrl),
                    e.writeInt32(3, this.iStatusPcdn),
                    e.writeInt32(10, this.iPcdnThresholdHotDegreeIn),
                    e.writeInt32(11, this.iPcdnThresholdHotDegreeKick),
                    e.writeInt32(12, this.iPcdnNowHotDegree),
                    e.writeInt32(13, this.iPcdnNowPullstreamUcnt),
                    e.writeInt32(14, this.iPcdnNowGetpcdnUcnt);
                }),
                (r.PCdnProxyUrl.prototype.readFrom = function (e) {
                  (this.sProtocol = e.readString(0, !1, this.sProtocol)),
                    (this.vUrl = e.readVector(2, !1, this.vUrl)),
                    (this.iStatusPcdn = e.readInt32(3, !1, this.iStatusPcdn)),
                    (this.iPcdnThresholdHotDegreeIn = e.readInt32(
                      10,
                      !1,
                      this.iPcdnThresholdHotDegreeIn,
                    )),
                    (this.iPcdnThresholdHotDegreeKick = e.readInt32(
                      11,
                      !1,
                      this.iPcdnThresholdHotDegreeKick,
                    )),
                    (this.iPcdnNowHotDegree = e.readInt32(12, !1, this.iPcdnNowHotDegree)),
                    (this.iPcdnNowPullstreamUcnt = e.readInt32(
                      13,
                      !1,
                      this.iPcdnNowPullstreamUcnt,
                    )),
                    (this.iPcdnNowGetpcdnUcnt = e.readInt32(14, !1, this.iPcdnNowGetpcdnUcnt));
                }),
                (r.ClientGetStunAndPcdnProxyRsp = function () {
                  (this.lReqTs = 0),
                    (this.lRspTs = 0),
                    (this.lUid = 0),
                    (this.sStreamname = ''),
                    (this.iErrCode = 0),
                    (this.iBaseSubs = 0),
                    (this.mSubToPullStreamUrl = new s.Map(
                      new s.INT32(),
                      new s.Map(new s.STRING(), new r.PCdnProxyUrl()),
                    )),
                    (this.cliProv = ''),
                    (this.cliIsp = ''),
                    (this.pcdnName = ''),
                    (this.iCdnLine = 0),
                    (this.sPcdnIsp = ''),
                    (this.sPcdnArea = '');
                }),
                (r.ClientGetStunAndPcdnProxyRsp.prototype._clone = function () {
                  return new r.ClientGetStunAndPcdnProxyRsp();
                }),
                (r.ClientGetStunAndPcdnProxyRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetStunAndPcdnProxyRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetStunAndPcdnProxyRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lRspTs),
                    e.writeInt64(2, this.lUid),
                    e.writeString(3, this.sStreamname),
                    e.writeInt32(4, this.iErrCode),
                    e.writeInt32(5, this.iBaseSubs),
                    e.writeMap(12, this.mSubToPullStreamUrl),
                    e.writeString(13, this.cliProv),
                    e.writeString(14, this.cliIsp),
                    e.writeString(15, this.pcdnName),
                    e.writeInt32(100, this.iCdnLine),
                    e.writeString(200, this.sPcdnIsp),
                    e.writeString(201, this.sPcdnArea);
                }),
                (r.ClientGetStunAndPcdnProxyRsp.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lRspTs = e.readInt64(1, !1, this.lRspTs)),
                    (this.lUid = e.readInt64(2, !1, this.lUid)),
                    (this.sStreamname = e.readString(3, !1, this.sStreamname)),
                    (this.iErrCode = e.readInt32(4, !1, this.iErrCode)),
                    (this.iBaseSubs = e.readInt32(5, !1, this.iBaseSubs)),
                    (this.mSubToPullStreamUrl = e.readMap(12, !1, this.mSubToPullStreamUrl)),
                    (this.cliProv = e.readString(13, !1, this.cliProv)),
                    (this.cliIsp = e.readString(14, !1, this.cliIsp)),
                    (this.pcdnName = e.readString(15, !1, this.pcdnName)),
                    (this.iCdnLine = e.readInt32(100, !1, this.iCdnLine)),
                    (this.sPcdnIsp = e.readString(200, !1, this.sPcdnIsp)),
                    (this.sPcdnArea = e.readString(201, !1, this.sPcdnArea));
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoReq = function () {
                  (this.lReqTs = 0),
                    (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.lAnchorUid = 0),
                    (this.iCdnLine = 0),
                    (this.sStreamname = ''),
                    (this.iBaseSubs = 0),
                    (this.vSub = new s.Vector(new s.INT32())),
                    (this.iCliType = 0),
                    (this.lBucketPara = 0),
                    (this.iBusiType = 0),
                    (this.vCliSupportPcdns = new s.Vector(new s.STRING())),
                    (this.curPcdnName = '');
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoReq.prototype._clone = function () {
                  return new r.ClientGetPcdnP2pOutsideSdkSubstreamInfoReq();
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoReq.prototype._write = function (
                  e,
                  t,
                  i,
                ) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lUid),
                    e.writeString(2, this.sGuid),
                    e.writeInt64(3, this.lAnchorUid),
                    e.writeInt32(4, this.iCdnLine),
                    e.writeString(5, this.sStreamname),
                    e.writeInt32(6, this.iBaseSubs),
                    e.writeVector(7, this.vSub),
                    e.writeInt32(8, this.iCliType),
                    e.writeInt64(9, this.lBucketPara),
                    e.writeInt32(10, this.iBusiType),
                    e.writeVector(11, this.vCliSupportPcdns),
                    e.writeString(12, this.curPcdnName);
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoReq.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lUid = e.readInt64(1, !1, this.lUid)),
                    (this.sGuid = e.readString(2, !1, this.sGuid)),
                    (this.lAnchorUid = e.readInt64(3, !1, this.lAnchorUid)),
                    (this.iCdnLine = e.readInt32(4, !1, this.iCdnLine)),
                    (this.sStreamname = e.readString(5, !1, this.sStreamname)),
                    (this.iBaseSubs = e.readInt32(6, !1, this.iBaseSubs)),
                    (this.vSub = e.readVector(7, !1, this.vSub)),
                    (this.iCliType = e.readInt32(8, !1, this.iCliType)),
                    (this.lBucketPara = e.readInt64(9, !1, this.lBucketPara)),
                    (this.iBusiType = e.readInt32(10, !1, this.iBusiType)),
                    (this.vCliSupportPcdns = e.readVector(11, !1, this.vCliSupportPcdns)),
                    (this.curPcdnName = e.readString(12, !1, this.curPcdnName));
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoRsp = function () {
                  (this.lReqTs = 0),
                    (this.lRspTs = 0),
                    (this.iErrCode = 0),
                    (this.sPcdnName = ''),
                    (this.mP2pSubstreamUrl = new s.Map(new s.INT32(), new s.STRING())),
                    (this.cliProv = ''),
                    (this.cliIsp = ''),
                    (this.lUid = 0),
                    (this.iCdnLine = 0),
                    (this.sStreamname = '');
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoRsp.prototype._clone = function () {
                  return new r.ClientGetPcdnP2pOutsideSdkSubstreamInfoRsp();
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoRsp.prototype._write = function (
                  e,
                  t,
                  i,
                ) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lRspTs),
                    e.writeInt32(2, this.iErrCode),
                    e.writeString(10, this.sPcdnName),
                    e.writeMap(11, this.mP2pSubstreamUrl),
                    e.writeString(30, this.cliProv),
                    e.writeString(31, this.cliIsp),
                    e.writeInt64(100, this.lUid),
                    e.writeInt32(101, this.iCdnLine),
                    e.writeString(102, this.sStreamname);
                }),
                (r.ClientGetPcdnP2pOutsideSdkSubstreamInfoRsp.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lRspTs = e.readInt64(1, !1, this.lRspTs)),
                    (this.iErrCode = e.readInt32(2, !1, this.iErrCode)),
                    (this.sPcdnName = e.readString(10, !1, this.sPcdnName)),
                    (this.mP2pSubstreamUrl = e.readMap(11, !1, this.mP2pSubstreamUrl)),
                    (this.cliProv = e.readString(30, !1, this.cliProv)),
                    (this.cliIsp = e.readString(31, !1, this.cliIsp)),
                    (this.lUid = e.readInt64(100, !1, this.lUid)),
                    (this.iCdnLine = e.readInt32(101, !1, this.iCdnLine)),
                    (this.sStreamname = e.readString(102, !1, this.sStreamname));
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoReq = function () {
                  (this.lReqTs = 0),
                    (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.lAnchorUid = 0),
                    (this.iCdnLine = 0),
                    (this.iCliType = 0),
                    (this.sStreamName = ''),
                    (this.iRatio = 0),
                    (this.sCodec = ''),
                    (this.lBucketPara = 0),
                    (this.iBusiType = 0),
                    (this.curPcdnName = ''),
                    (this.supportV6 = 0),
                    (this.sUserAgent = '');
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoReq.prototype._clone = function () {
                  return new r.ClientGetPcdnFlvHttpFullstreamInfoReq();
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lUid),
                    e.writeString(2, this.sGuid),
                    e.writeInt64(3, this.lAnchorUid),
                    e.writeInt32(4, this.iCdnLine),
                    e.writeInt32(5, this.iCliType),
                    e.writeString(6, this.sStreamName),
                    e.writeInt32(7, this.iRatio),
                    e.writeString(8, this.sCodec),
                    e.writeInt64(9, this.lBucketPara),
                    e.writeInt32(10, this.iBusiType),
                    e.writeString(11, this.curPcdnName),
                    e.writeInt32(12, this.supportV6),
                    e.writeString(13, this.sUserAgent);
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoReq.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lUid = e.readInt64(1, !1, this.lUid)),
                    (this.sGuid = e.readString(2, !1, this.sGuid)),
                    (this.lAnchorUid = e.readInt64(3, !1, this.lAnchorUid)),
                    (this.iCdnLine = e.readInt32(4, !1, this.iCdnLine)),
                    (this.iCliType = e.readInt32(5, !1, this.iCliType)),
                    (this.sStreamName = e.readString(6, !1, this.sStreamName)),
                    (this.iRatio = e.readInt32(7, !1, this.iRatio)),
                    (this.sCodec = e.readString(8, !1, this.sCodec)),
                    (this.lBucketPara = e.readInt64(9, !1, this.lBucketPara)),
                    (this.iBusiType = e.readInt32(10, !1, this.iBusiType)),
                    (this.curPcdnName = e.readString(11, !1, this.curPcdnName)),
                    (this.supportV6 = e.readInt32(12, !1, this.supportV6)),
                    (this.sUserAgent = e.readString(13, !1, this.sUserAgent));
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoRsp = function () {
                  (this.lReqTs = 0),
                    (this.lRspTs = 0),
                    (this.lUid = 0),
                    (this.sStreamName = ''),
                    (this.iErrCode = 0),
                    (this.sPcdnName = ''),
                    (this.pullStreamUrl = new r.PCdnProxyUrl()),
                    (this.cliProv = ''),
                    (this.cliIsp = ''),
                    (this.iCdnLine = 0),
                    (this.iRatio = 0),
                    (this.sCodec = ''),
                    (this.mAllPullStreamUrl = new s.Map(new s.STRING(), new r.PCdnProxyUrl()));
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoRsp.prototype._clone = function () {
                  return new r.ClientGetPcdnFlvHttpFullstreamInfoRsp();
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lRspTs),
                    e.writeInt64(2, this.lUid),
                    e.writeString(3, this.sStreamName),
                    e.writeInt32(4, this.iErrCode),
                    e.writeString(5, this.sPcdnName),
                    e.writeStruct(6, this.pullStreamUrl),
                    e.writeString(7, this.cliProv),
                    e.writeString(8, this.cliIsp),
                    e.writeInt32(9, this.iCdnLine),
                    e.writeInt32(10, this.iRatio),
                    e.writeString(11, this.sCodec),
                    e.writeMap(12, this.mAllPullStreamUrl);
                }),
                (r.ClientGetPcdnFlvHttpFullstreamInfoRsp.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lRspTs = e.readInt64(1, !1, this.lRspTs)),
                    (this.lUid = e.readInt64(2, !1, this.lUid)),
                    (this.sStreamName = e.readString(3, !1, this.sStreamName)),
                    (this.iErrCode = e.readInt32(4, !1, this.iErrCode)),
                    (this.sPcdnName = e.readString(5, !1, this.sPcdnName)),
                    (this.pullStreamUrl = e.readStruct(6, !1, this.pullStreamUrl)),
                    (this.cliProv = e.readString(7, !1, this.cliProv)),
                    (this.cliIsp = e.readString(8, !1, this.cliIsp)),
                    (this.iCdnLine = e.readInt32(9, !1, this.iCdnLine)),
                    (this.iRatio = e.readInt32(10, !1, this.iRatio)),
                    (this.sCodec = e.readString(11, !1, this.sCodec)),
                    (this.mAllPullStreamUrl = e.readMap(12, !1, this.mAllPullStreamUrl));
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq = function () {
                  (this.lReqTs = 0),
                    (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.lAnchorUid = 0),
                    (this.iCdnLine = 0),
                    (this.sStreamName = ''),
                    (this.iRatio = 0),
                    (this.sCodec = ''),
                    (this.iCliType = 0),
                    (this.lBucketPara = 0),
                    (this.iBusiType = 0),
                    (this.vCliSupportPcdns = new s.Vector(new s.STRING())),
                    (this.curPcdnName = '');
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq.prototype._clone = function () {
                  return new r.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq();
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq.prototype._write = function (
                  e,
                  t,
                  i,
                ) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq.prototype._read = function (
                  e,
                  t,
                  i,
                ) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lUid),
                    e.writeString(2, this.sGuid),
                    e.writeInt64(3, this.lAnchorUid),
                    e.writeInt32(4, this.iCdnLine),
                    e.writeString(5, this.sStreamName),
                    e.writeInt32(6, this.iRatio),
                    e.writeString(7, this.sCodec),
                    e.writeInt32(8, this.iCliType),
                    e.writeInt64(9, this.lBucketPara),
                    e.writeInt32(10, this.iBusiType),
                    e.writeVector(11, this.vCliSupportPcdns),
                    e.writeString(12, this.curPcdnName);
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoReq.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lUid = e.readInt64(1, !1, this.lUid)),
                    (this.sGuid = e.readString(2, !1, this.sGuid)),
                    (this.lAnchorUid = e.readInt64(3, !1, this.lAnchorUid)),
                    (this.iCdnLine = e.readInt32(4, !1, this.iCdnLine)),
                    (this.sStreamName = e.readString(5, !1, this.sStreamName)),
                    (this.iRatio = e.readInt32(6, !1, this.iRatio)),
                    (this.sCodec = e.readString(7, !1, this.sCodec)),
                    (this.iCliType = e.readInt32(8, !1, this.iCliType)),
                    (this.lBucketPara = e.readInt64(9, !1, this.lBucketPara)),
                    (this.iBusiType = e.readInt32(10, !1, this.iBusiType)),
                    (this.vCliSupportPcdns = e.readVector(11, !1, this.vCliSupportPcdns)),
                    (this.curPcdnName = e.readString(12, !1, this.curPcdnName));
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp = function () {
                  (this.lReqTs = 0),
                    (this.lRspTs = 0),
                    (this.iErrCode = 0),
                    (this.sPcdnName = ''),
                    (this.sFlvFullstreamUrl = ''),
                    (this.cliProv = ''),
                    (this.cliIsp = ''),
                    (this.lUid = 0),
                    (this.iCdnLine = 0),
                    (this.sStreamName = ''),
                    (this.iRatio = 0),
                    (this.sTransUid = '');
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp.prototype._clone = function () {
                  return new r.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp();
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp.prototype._write = function (
                  e,
                  t,
                  i,
                ) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp.prototype._read = function (
                  e,
                  t,
                  i,
                ) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lReqTs),
                    e.writeInt64(1, this.lRspTs),
                    e.writeInt32(2, this.iErrCode),
                    e.writeString(10, this.sPcdnName),
                    e.writeString(11, this.sFlvFullstreamUrl),
                    e.writeString(30, this.cliProv),
                    e.writeString(31, this.cliIsp),
                    e.writeInt64(100, this.lUid),
                    e.writeInt32(101, this.iCdnLine),
                    e.writeString(102, this.sStreamName),
                    e.writeInt32(103, this.iRatio),
                    e.writeString(104, this.sTransUid);
                }),
                (r.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp.prototype.readFrom = function (e) {
                  (this.lReqTs = e.readInt64(0, !1, this.lReqTs)),
                    (this.lRspTs = e.readInt64(1, !1, this.lRspTs)),
                    (this.iErrCode = e.readInt32(2, !1, this.iErrCode)),
                    (this.sPcdnName = e.readString(10, !1, this.sPcdnName)),
                    (this.sFlvFullstreamUrl = e.readString(11, !1, this.sFlvFullstreamUrl)),
                    (this.cliProv = e.readString(30, !1, this.cliProv)),
                    (this.cliIsp = e.readString(31, !1, this.cliIsp)),
                    (this.lUid = e.readInt64(100, !1, this.lUid)),
                    (this.iCdnLine = e.readInt32(101, !1, this.iCdnLine)),
                    (this.sStreamName = e.readString(102, !1, this.sStreamName)),
                    (this.iRatio = e.readInt32(103, !1, this.iRatio)),
                    (this.sTransUid = e.readString(104, !1, this.sTransUid));
                }),
                (r.RecSysInfo = function () {
                  (this.sAnchorUid = ''),
                    (this.sRoomId = ''),
                    (this.sDispatchId = ''),
                    (this.iScene = 0),
                    (this.sStrategy = ''),
                    (this.lServerTs = 0),
                    (this.lAction = 0),
                    (this.sActionReason = ''),
                    (this.sActValue = '');
                }),
                (r.RecSysInfo.prototype._clone = function () {
                  return new r.RecSysInfo();
                }),
                (r.RecSysInfo.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.RecSysInfo.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.RecSysInfo.prototype.writeTo = function (e) {
                  e.writeString(0, this.sAnchorUid),
                    e.writeString(1, this.sRoomId),
                    e.writeString(2, this.sDispatchId),
                    e.writeInt32(3, this.iScene),
                    e.writeString(4, this.sStrategy),
                    e.writeInt64(5, this.lServerTs),
                    e.writeInt64(6, this.lAction),
                    e.writeString(7, this.sActionReason),
                    e.writeString(8, this.sActValue);
                }),
                (r.RecSysInfo.prototype.readFrom = function (e) {
                  (this.sAnchorUid = e.readString(0, !1, this.sAnchorUid)),
                    (this.sRoomId = e.readString(1, !1, this.sRoomId)),
                    (this.sDispatchId = e.readString(2, !1, this.sDispatchId)),
                    (this.iScene = e.readInt32(3, !1, this.iScene)),
                    (this.sStrategy = e.readString(4, !1, this.sStrategy)),
                    (this.lServerTs = e.readInt64(5, !1, this.lServerTs)),
                    (this.lAction = e.readInt64(6, !1, this.lAction)),
                    (this.sActionReason = e.readString(7, !1, this.sActionReason)),
                    (this.sActValue = e.readString(8, !1, this.sActValue));
                }),
                (r.RecSysReq = function () {
                  (this.tId = new r.MediaUserId()),
                    (this.sAnchorUid = ''),
                    (this.sRoomId = ''),
                    (this.sDispatchId = ''),
                    (this.iScene = 0),
                    (this.bDebug = 0),
                    (this.sNet = ''),
                    (this.sSdkVer = ''),
                    (this.mAppendInfo = new s.Map(new s.STRING(), new s.STRING()));
                }),
                (r.RecSysReq.prototype._clone = function () {
                  return new r.RecSysReq();
                }),
                (r.RecSysReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.RecSysReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.RecSysReq.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tId),
                    e.writeString(1, this.sAnchorUid),
                    e.writeString(2, this.sRoomId),
                    e.writeString(3, this.sDispatchId),
                    e.writeInt32(4, this.iScene),
                    e.writeInt32(5, this.bDebug),
                    e.writeString(6, this.sNet),
                    e.writeString(7, this.sSdkVer),
                    e.writeMap(8, this.mAppendInfo);
                }),
                (r.RecSysReq.prototype.readFrom = function (e) {
                  (this.tId = e.readStruct(0, !1, this.tId)),
                    (this.sAnchorUid = e.readString(1, !1, this.sAnchorUid)),
                    (this.sRoomId = e.readString(2, !1, this.sRoomId)),
                    (this.sDispatchId = e.readString(3, !1, this.sDispatchId)),
                    (this.iScene = e.readInt32(4, !1, this.iScene)),
                    (this.bDebug = e.readInt32(5, !1, this.bDebug)),
                    (this.sNet = e.readString(6, !1, this.sNet)),
                    (this.sSdkVer = e.readString(7, !1, this.sSdkVer)),
                    (this.mAppendInfo = e.readMap(8, !1, this.mAppendInfo));
                }),
                (r.RecSysRsp = function () {
                  (this.iStatus = 0), (this.sError = ''), (this.tRecSysInfo = new r.RecSysInfo());
                }),
                (r.RecSysRsp.prototype._clone = function () {
                  return new r.RecSysRsp();
                }),
                (r.RecSysRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.RecSysRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.RecSysRsp.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iStatus),
                    e.writeString(1, this.sError),
                    e.writeStruct(2, this.tRecSysInfo);
                }),
                (r.RecSysRsp.prototype.readFrom = function (e) {
                  (this.iStatus = e.readInt32(0, !1, this.iStatus)),
                    (this.sError = e.readString(1, !1, this.sError)),
                    (this.tRecSysInfo = e.readStruct(2, !1, this.tRecSysInfo));
                }),
                (r.RecSysNotice = function () {
                  this.tRecSysInfo = new r.RecSysInfo();
                }),
                (r.RecSysNotice.prototype._clone = function () {
                  return new r.RecSysNotice();
                }),
                (r.RecSysNotice.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.RecSysNotice.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.RecSysNotice.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tRecSysInfo);
                }),
                (r.RecSysNotice.prototype.readFrom = function (e) {
                  this.tRecSysInfo = e.readStruct(0, !1, this.tRecSysInfo);
                }),
                (r.VodUrlRange = function () {
                  (this.sUrl = ''), (this.sRange = ''), (this.index = 0);
                }),
                (r.VodUrlRange.prototype._clone = function () {
                  return new r.VodUrlRange();
                }),
                (r.VodUrlRange.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.VodUrlRange.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.VodUrlRange.prototype.writeTo = function (e) {
                  e.writeString(0, this.sUrl),
                    e.writeString(1, this.sRange),
                    e.writeInt64(2, this.index);
                }),
                (r.VodUrlRange.prototype.readFrom = function (e) {
                  (this.sUrl = e.readString(0, !1, this.sUrl)),
                    (this.sRange = e.readString(1, !1, this.sRange)),
                    (this.index = e.readInt64(2, !1, this.index));
                }),
                (r.VodPcdnProxyUrl = function () {
                  (this.reqKey = new r.VodUrlRange()),
                    (this.iStatusPcdn = 0),
                    (this.iVodPcdnHotDegreeIn = -1),
                    (this.iVodPcdnHotDegreeNow = -1),
                    (this.vUrls = new s.Vector(new s.STRING()));
                }),
                (r.VodPcdnProxyUrl.prototype._clone = function () {
                  return new r.VodPcdnProxyUrl();
                }),
                (r.VodPcdnProxyUrl.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.VodPcdnProxyUrl.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.VodPcdnProxyUrl.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.reqKey),
                    e.writeInt32(1, this.iStatusPcdn),
                    e.writeInt32(2, this.iVodPcdnHotDegreeIn),
                    e.writeInt32(3, this.iVodPcdnHotDegreeNow),
                    e.writeVector(4, this.vUrls);
                }),
                (r.VodPcdnProxyUrl.prototype.readFrom = function (e) {
                  (this.reqKey = e.readStruct(0, !1, this.reqKey)),
                    (this.iStatusPcdn = e.readInt32(1, !1, this.iStatusPcdn)),
                    (this.iVodPcdnHotDegreeIn = e.readInt32(2, !1, this.iVodPcdnHotDegreeIn)),
                    (this.iVodPcdnHotDegreeNow = e.readInt32(3, !1, this.iVodPcdnHotDegreeNow)),
                    (this.vUrls = e.readVector(4, !1, this.vUrls));
                }),
                (r.ClientGetVodPcdnProxyReq = function () {
                  (this.appid = 0),
                    (this.lReqTs = 0),
                    (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.iCliType = 0),
                    (this.lBucketPara = 0),
                    (this.sOrigUrl = ''),
                    (this.vKeys = new s.Vector(new r.VodUrlRange()));
                }),
                (r.ClientGetVodPcdnProxyReq.prototype._clone = function () {
                  return new r.ClientGetVodPcdnProxyReq();
                }),
                (r.ClientGetVodPcdnProxyReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetVodPcdnProxyReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetVodPcdnProxyReq.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.appid),
                    e.writeInt64(1, this.lReqTs),
                    e.writeInt64(2, this.lUid),
                    e.writeString(3, this.sGuid),
                    e.writeInt32(4, this.iCliType),
                    e.writeInt64(5, this.lBucketPara),
                    e.writeString(6, this.sOrigUrl),
                    e.writeVector(7, this.vKeys);
                }),
                (r.ClientGetVodPcdnProxyReq.prototype.readFrom = function (e) {
                  (this.appid = e.readInt32(0, !1, this.appid)),
                    (this.lReqTs = e.readInt64(1, !1, this.lReqTs)),
                    (this.lUid = e.readInt64(2, !1, this.lUid)),
                    (this.sGuid = e.readString(3, !1, this.sGuid)),
                    (this.iCliType = e.readInt32(4, !1, this.iCliType)),
                    (this.lBucketPara = e.readInt64(5, !1, this.lBucketPara)),
                    (this.sOrigUrl = e.readString(6, !1, this.sOrigUrl)),
                    (this.vKeys = e.readVector(7, !1, this.vKeys));
                }),
                (r.ClientGetVodPcdnProxyReqRsp = function () {
                  (this.appid = 0),
                    (this.lReqTs = 0),
                    (this.lRspTs = 0),
                    (this.lUid = 0),
                    (this.sOrigUrl = ''),
                    (this.iErrCode = 0),
                    (this.vPcdnUrls = new s.Vector(new r.VodPcdnProxyUrl())),
                    (this.cliProv = ''),
                    (this.cliIsp = ''),
                    (this.pcdnName = ''),
                    (this.sPcdnIsp = ''),
                    (this.sPcdnArea = '');
                }),
                (r.ClientGetVodPcdnProxyReqRsp.prototype._clone = function () {
                  return new r.ClientGetVodPcdnProxyReqRsp();
                }),
                (r.ClientGetVodPcdnProxyReqRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ClientGetVodPcdnProxyReqRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ClientGetVodPcdnProxyReqRsp.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.appid),
                    e.writeInt64(1, this.lReqTs),
                    e.writeInt64(2, this.lRspTs),
                    e.writeInt64(3, this.lUid),
                    e.writeString(4, this.sOrigUrl),
                    e.writeInt32(5, this.iErrCode),
                    e.writeVector(6, this.vPcdnUrls),
                    e.writeString(7, this.cliProv),
                    e.writeString(8, this.cliIsp),
                    e.writeString(9, this.pcdnName),
                    e.writeString(10, this.sPcdnIsp),
                    e.writeString(11, this.sPcdnArea);
                }),
                (r.ClientGetVodPcdnProxyReqRsp.prototype.readFrom = function (e) {
                  (this.appid = e.readInt32(0, !1, this.appid)),
                    (this.lReqTs = e.readInt64(1, !1, this.lReqTs)),
                    (this.lRspTs = e.readInt64(2, !1, this.lRspTs)),
                    (this.lUid = e.readInt64(3, !1, this.lUid)),
                    (this.sOrigUrl = e.readString(4, !1, this.sOrigUrl)),
                    (this.iErrCode = e.readInt32(5, !1, this.iErrCode)),
                    (this.vPcdnUrls = e.readVector(6, !1, this.vPcdnUrls)),
                    (this.cliProv = e.readString(7, !1, this.cliProv)),
                    (this.cliIsp = e.readString(8, !1, this.cliIsp)),
                    (this.pcdnName = e.readString(9, !1, this.pcdnName)),
                    (this.sPcdnIsp = e.readString(10, !1, this.sPcdnIsp)),
                    (this.sPcdnArea = e.readString(11, !1, this.sPcdnArea));
                }),
                (r.GetVideoHisUponReq = function () {
                  (this.lUid = 0), (this.lLiveId = 0), (this.tId = new r.UserId());
                }),
                (r.GetVideoHisUponReq.prototype._clone = function () {
                  return new r.GetVideoHisUponReq();
                }),
                (r.GetVideoHisUponReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetVideoHisUponReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetVideoHisUponReq.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeInt64(1, this.lLiveId),
                    e.writeStruct(2, this.tId);
                }),
                (r.GetVideoHisUponReq.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.lLiveId = e.readInt64(1, !1, this.lLiveId)),
                    (this.tId = e.readStruct(2, !1, this.tId));
                }),
                (r.GetVideoHisUponRsp = function () {
                  (this.lUid = 0), (this.vHistoryList = new s.Vector(new r.GameLiveHlsInfo()));
                }),
                (r.GetVideoHisUponRsp.prototype._clone = function () {
                  return new r.GetVideoHisUponRsp();
                }),
                (r.GetVideoHisUponRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetVideoHisUponRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetVideoHisUponRsp.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid), e.writeVector(1, this.vHistoryList);
                }),
                (r.GetVideoHisUponRsp.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.vHistoryList = e.readVector(1, !1, this.vHistoryList));
                }),
                (r.ImgplusABTestNotice = function () {
                  (this.lPid = 0), (this.iAppid = 0), (this.iSwitch = 0);
                }),
                (r.ImgplusABTestNotice.prototype._clone = function () {
                  return new r.ImgplusABTestNotice();
                }),
                (r.ImgplusABTestNotice.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.ImgplusABTestNotice.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.ImgplusABTestNotice.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lPid),
                    e.writeInt32(1, this.iAppid),
                    e.writeInt32(2, this.iSwitch);
                }),
                (r.ImgplusABTestNotice.prototype.readFrom = function (e) {
                  (this.lPid = e.readInt64(0, !1, this.lPid)),
                    (this.iAppid = e.readInt32(1, !1, this.iAppid)),
                    (this.iSwitch = e.readInt32(2, !1, this.iSwitch));
                }),
                (r.MediaUserId = function () {
                  (this.lUid = 0),
                    (this.sGuid = ''),
                    (this.sToken = ''),
                    (this.sUA = ''),
                    (this.sCookie = ''),
                    (this.iAppid = 0),
                    (this.sStrUid = ''),
                    (this.sUAppId = ''),
                    (this.iNetType = 127);
                }),
                (r.MediaUserId.prototype._clone = function () {
                  return new r.MediaUserId();
                }),
                (r.MediaUserId.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MediaUserId.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MediaUserId.prototype.writeTo = function (e) {
                  e.writeInt64(0, this.lUid),
                    e.writeString(1, this.sGuid),
                    e.writeString(2, this.sToken),
                    e.writeString(3, this.sUA),
                    e.writeString(4, this.sCookie),
                    e.writeInt32(6, this.iAppid),
                    e.writeString(8, this.sStrUid),
                    e.writeString(9, this.sUAppId),
                    e.writeInt32(10, this.iNetType);
                }),
                (r.MediaUserId.prototype.readFrom = function (e) {
                  (this.lUid = e.readInt64(0, !1, this.lUid)),
                    (this.sGuid = e.readString(1, !1, this.sGuid)),
                    (this.sToken = e.readString(2, !1, this.sToken)),
                    (this.sUA = e.readString(3, !1, this.sUA)),
                    (this.sCookie = e.readString(4, !1, this.sCookie)),
                    (this.iAppid = e.readInt32(6, !1, this.iAppid)),
                    (this.sStrUid = e.readString(8, !1, this.sStrUid)),
                    (this.sUAppId = e.readString(9, !1, this.sUAppId)),
                    (this.iNetType = e.readInt32(10, !1, this.iNetType));
                }),
                (r.MediaResolution = function () {
                  (this.iWidth = 0), (this.iHeight = 0);
                }),
                (r.MediaResolution.prototype._clone = function () {
                  return new r.MediaResolution();
                }),
                (r.MediaResolution.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MediaResolution.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MediaResolution.prototype.writeTo = function (e) {
                  e.writeInt32(0, this.iWidth), e.writeInt32(1, this.iHeight);
                }),
                (r.MediaResolution.prototype.readFrom = function (e) {
                  (this.iWidth = e.readInt32(0, !1, this.iWidth)),
                    (this.iHeight = e.readInt32(1, !1, this.iHeight));
                }),
                (r.MediaStreamFormatInfo = function () {
                  (this.sFormatName = ''),
                    (this.sUrl = ''),
                    (this.sSuffix = ''),
                    (this.vIPList = new s.Vector(new s.STRING())),
                    (this.iIsSupport = 0),
                    (this.iRate = 0),
                    (this.sAdditionalParam = ''),
                    (this.lFormatPropertyFlag = 0);
                }),
                (r.MediaStreamFormatInfo.prototype._clone = function () {
                  return new r.MediaStreamFormatInfo();
                }),
                (r.MediaStreamFormatInfo.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MediaStreamFormatInfo.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MediaStreamFormatInfo.prototype.writeTo = function (e) {
                  e.writeString(0, this.sFormatName),
                    e.writeString(1, this.sUrl),
                    e.writeString(2, this.sSuffix),
                    e.writeVector(3, this.vIPList),
                    e.writeInt32(4, this.iIsSupport),
                    e.writeInt32(5, this.iRate),
                    e.writeString(6, this.sAdditionalParam),
                    e.writeInt64(7, this.lFormatPropertyFlag);
                }),
                (r.MediaStreamFormatInfo.prototype.readFrom = function (e) {
                  (this.sFormatName = e.readString(0, !1, this.sFormatName)),
                    (this.sUrl = e.readString(1, !1, this.sUrl)),
                    (this.sSuffix = e.readString(2, !1, this.sSuffix)),
                    (this.vIPList = e.readVector(3, !1, this.vIPList)),
                    (this.iIsSupport = e.readInt32(4, !1, this.iIsSupport)),
                    (this.iRate = e.readInt32(5, !1, this.iRate)),
                    (this.sAdditionalParam = e.readString(6, !1, this.sAdditionalParam)),
                    (this.lFormatPropertyFlag = e.readInt64(7, !1, this.lFormatPropertyFlag));
                }),
                (r.MediaStreamInfo = function () {
                  (this.sCdnName = ''),
                    (this.sStreamName = ''),
                    (this.sFlvUrl = ''),
                    (this.sFlvSuffix = ''),
                    (this.sHlsUrl = ''),
                    (this.sHlsSuffix = ''),
                    (this.iLineIndex = 0),
                    (this.vFlvIPList = new s.Vector(new s.STRING())),
                    (this.iIsP2PSupport = 0),
                    (this.sP2pUrl = ''),
                    (this.sP2pSuffix = ''),
                    (this.lFreeFlag = 0),
                    (this.iIsHEVCSupport = 0),
                    (this.vP2pIPList = new s.Vector(new s.STRING())),
                    (this.iPCPriorityRate = 0),
                    (this.iWebPriorityRate = 0),
                    (this.iMobilePriorityRate = 0),
                    (this.sAdditionalParam = ''),
                    (this.mMediaStreamFormatInfo = new s.Map(
                      new s.STRING(),
                      new r.MediaStreamFormatInfo(),
                    ));
                }),
                (r.MediaStreamInfo.prototype._clone = function () {
                  return new r.MediaStreamInfo();
                }),
                (r.MediaStreamInfo.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MediaStreamInfo.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MediaStreamInfo.prototype.writeTo = function (e) {
                  e.writeString(0, this.sCdnName),
                    e.writeString(1, this.sStreamName),
                    e.writeString(2, this.sFlvUrl),
                    e.writeString(3, this.sFlvSuffix),
                    e.writeString(4, this.sHlsUrl),
                    e.writeString(5, this.sHlsSuffix),
                    e.writeInt32(6, this.iLineIndex),
                    e.writeVector(7, this.vFlvIPList),
                    e.writeInt32(8, this.iIsP2PSupport),
                    e.writeString(9, this.sP2pUrl),
                    e.writeString(10, this.sP2pSuffix),
                    e.writeInt64(11, this.lFreeFlag),
                    e.writeInt32(12, this.iIsHEVCSupport),
                    e.writeVector(13, this.vP2pIPList),
                    e.writeInt32(14, this.iPCPriorityRate),
                    e.writeInt32(15, this.iWebPriorityRate),
                    e.writeInt32(16, this.iMobilePriorityRate),
                    e.writeString(17, this.sAdditionalParam),
                    e.writeMap(18, this.mMediaStreamFormatInfo);
                }),
                (r.MediaStreamInfo.prototype.readFrom = function (e) {
                  (this.sCdnName = e.readString(0, !1, this.sCdnName)),
                    (this.sStreamName = e.readString(1, !1, this.sStreamName)),
                    (this.sFlvUrl = e.readString(2, !1, this.sFlvUrl)),
                    (this.sFlvSuffix = e.readString(3, !1, this.sFlvSuffix)),
                    (this.sHlsUrl = e.readString(4, !1, this.sHlsUrl)),
                    (this.sHlsSuffix = e.readString(5, !1, this.sHlsSuffix)),
                    (this.iLineIndex = e.readInt32(6, !1, this.iLineIndex)),
                    (this.vFlvIPList = e.readVector(7, !1, this.vFlvIPList)),
                    (this.iIsP2PSupport = e.readInt32(8, !1, this.iIsP2PSupport)),
                    (this.sP2pUrl = e.readString(9, !1, this.sP2pUrl)),
                    (this.sP2pSuffix = e.readString(10, !1, this.sP2pSuffix)),
                    (this.lFreeFlag = e.readInt64(11, !1, this.lFreeFlag)),
                    (this.iIsHEVCSupport = e.readInt32(12, !1, this.iIsHEVCSupport)),
                    (this.vP2pIPList = e.readVector(13, !1, this.vP2pIPList)),
                    (this.iPCPriorityRate = e.readInt32(14, !1, this.iPCPriorityRate)),
                    (this.iWebPriorityRate = e.readInt32(15, !1, this.iWebPriorityRate)),
                    (this.iMobilePriorityRate = e.readInt32(16, !1, this.iMobilePriorityRate)),
                    (this.sAdditionalParam = e.readString(17, !1, this.sAdditionalParam)),
                    (this.mMediaStreamFormatInfo = e.readMap(18, !1, this.mMediaStreamFormatInfo));
                }),
                (r.StreamGearInfo = function () {
                  (this.sDisplayName = ''),
                    (this.iBitRate = 0),
                    (this.iCodecType = 0),
                    (this.iHEVCBitRate = -1),
                    (this.tResolution = new r.MediaResolution()),
                    (this.sAdditionalParam = ''),
                    (this.mSupportFormat = new s.Map(new s.STRING(), new s.INT64())),
                    (this.sBusiGearIndex = '');
                }),
                (r.StreamGearInfo.prototype._clone = function () {
                  return new r.StreamGearInfo();
                }),
                (r.StreamGearInfo.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.StreamGearInfo.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.StreamGearInfo.prototype.writeTo = function (e) {
                  e.writeString(0, this.sDisplayName),
                    e.writeInt32(1, this.iBitRate),
                    e.writeInt32(2, this.iCodecType),
                    e.writeInt32(3, this.iHEVCBitRate),
                    e.writeStruct(4, this.tResolution),
                    e.writeString(5, this.sAdditionalParam),
                    e.writeMap(6, this.mSupportFormat),
                    e.writeString(7, this.sBusiGearIndex);
                }),
                (r.StreamGearInfo.prototype.readFrom = function (e) {
                  (this.sDisplayName = e.readString(0, !1, this.sDisplayName)),
                    (this.iBitRate = e.readInt32(1, !1, this.iBitRate)),
                    (this.iCodecType = e.readInt32(2, !1, this.iCodecType)),
                    (this.iHEVCBitRate = e.readInt32(3, !1, this.iHEVCBitRate)),
                    (this.tResolution = e.readStruct(4, !1, this.tResolution)),
                    (this.sAdditionalParam = e.readString(5, !1, this.sAdditionalParam)),
                    (this.mSupportFormat = e.readMap(6, !1, this.mSupportFormat)),
                    (this.sBusiGearIndex = e.readString(7, !1, this.sBusiGearIndex));
                }),
                (r.MediaStreamNameInfoPack = function () {
                  (this.vMediaStreamInfo = new s.Vector(new r.MediaStreamInfo())),
                    (this.vStreamGearInfo = new s.Vector(new r.StreamGearInfo())),
                    (this.sStreamGroupId = ''),
                    (this.lLiveCompatibleFlag = 0),
                    (this.sAntiCode = ''),
                    (this.lStreamId = 0),
                    (this.lUid = 0),
                    (this.iStreamProperty = 0),
                    (this.iBitRate = 0),
                    (this.iStreamType = 0),
                    (this.iPcDefaultBitRate = 0),
                    (this.iWebDefaultBitRate = 0),
                    (this.iMobileDefaultBitRate = 0),
                    (this.sStreamBusiProperty = ''),
                    (this.sAdditionalParam = ''),
                    (this.iStreamCategory = 0);
                }),
                (r.MediaStreamNameInfoPack.prototype._clone = function () {
                  return new r.MediaStreamNameInfoPack();
                }),
                (r.MediaStreamNameInfoPack.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MediaStreamNameInfoPack.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MediaStreamNameInfoPack.prototype.writeTo = function (e) {
                  e.writeVector(0, this.vMediaStreamInfo),
                    e.writeVector(1, this.vStreamGearInfo),
                    e.writeString(2, this.sStreamGroupId),
                    e.writeInt64(3, this.lLiveCompatibleFlag),
                    e.writeString(4, this.sAntiCode),
                    e.writeInt64(5, this.lStreamId),
                    e.writeInt64(6, this.lUid),
                    e.writeInt32(7, this.iStreamProperty),
                    e.writeInt32(8, this.iBitRate),
                    e.writeInt32(9, this.iStreamType),
                    e.writeInt32(10, this.iPcDefaultBitRate),
                    e.writeInt32(11, this.iWebDefaultBitRate),
                    e.writeInt32(12, this.iMobileDefaultBitRate),
                    e.writeString(13, this.sStreamBusiProperty),
                    e.writeString(14, this.sAdditionalParam),
                    e.writeInt32(15, this.iStreamCategory);
                }),
                (r.MediaStreamNameInfoPack.prototype.readFrom = function (e) {
                  (this.vMediaStreamInfo = e.readVector(0, !1, this.vMediaStreamInfo)),
                    (this.vStreamGearInfo = e.readVector(1, !1, this.vStreamGearInfo)),
                    (this.sStreamGroupId = e.readString(2, !1, this.sStreamGroupId)),
                    (this.lLiveCompatibleFlag = e.readInt64(3, !1, this.lLiveCompatibleFlag)),
                    (this.sAntiCode = e.readString(4, !1, this.sAntiCode)),
                    (this.lStreamId = e.readInt64(5, !1, this.lStreamId)),
                    (this.lUid = e.readInt64(6, !1, this.lUid)),
                    (this.iStreamProperty = e.readInt32(7, !1, this.iStreamProperty)),
                    (this.iBitRate = e.readInt32(8, !1, this.iBitRate)),
                    (this.iStreamType = e.readInt32(9, !1, this.iStreamType)),
                    (this.iPcDefaultBitRate = e.readInt32(10, !1, this.iPcDefaultBitRate)),
                    (this.iWebDefaultBitRate = e.readInt32(11, !1, this.iWebDefaultBitRate)),
                    (this.iMobileDefaultBitRate = e.readInt32(12, !1, this.iMobileDefaultBitRate)),
                    (this.sStreamBusiProperty = e.readString(13, !1, this.sStreamBusiProperty)),
                    (this.sAdditionalParam = e.readString(14, !1, this.sAdditionalParam)),
                    (this.iStreamCategory = e.readInt32(15, !1, this.iStreamCategory));
                }),
                (r.MediaStreamInfoPack = function () {
                  this.mMediaStreamInfoPack = new s.Map(
                    new s.STRING(),
                    new r.MediaStreamNameInfoPack(),
                  );
                }),
                (r.MediaStreamInfoPack.prototype._clone = function () {
                  return new r.MediaStreamInfoPack();
                }),
                (r.MediaStreamInfoPack.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.MediaStreamInfoPack.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.MediaStreamInfoPack.prototype.writeTo = function (e) {
                  e.writeMap(0, this.mMediaStreamInfoPack);
                }),
                (r.MediaStreamInfoPack.prototype.readFrom = function (e) {
                  this.mMediaStreamInfoPack = e.readMap(0, !1, this.mMediaStreamInfoPack);
                }),
                (r.GetStreamInfoByRoomFakeReq = function () {
                  (this.tId = new r.MediaUserId()),
                    (this.sRoomId = ''),
                    (this.mpVariable = new s.Map(new s.STRING(), new s.STRING())),
                    (this.iMediaPackType = -1),
                    (this.mBusiParams = new s.Map(new s.STRING(), new s.STRING()));
                }),
                (r.GetStreamInfoByRoomFakeReq.prototype._clone = function () {
                  return new r.GetStreamInfoByRoomFakeReq();
                }),
                (r.GetStreamInfoByRoomFakeReq.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetStreamInfoByRoomFakeReq.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetStreamInfoByRoomFakeReq.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tId),
                    e.writeString(1, this.sRoomId),
                    e.writeMap(2, this.mpVariable),
                    e.writeInt32(3, this.iMediaPackType),
                    e.writeMap(4, this.mBusiParams);
                }),
                (r.GetStreamInfoByRoomFakeReq.prototype.readFrom = function (e) {
                  (this.tId = e.readStruct(0, !1, this.tId)),
                    (this.sRoomId = e.readString(1, !1, this.sRoomId)),
                    (this.mpVariable = e.readMap(2, !1, this.mpVariable)),
                    (this.iMediaPackType = e.readInt32(3, !1, this.iMediaPackType)),
                    (this.mBusiParams = e.readMap(4, !1, this.mBusiParams));
                }),
                (r.GetStreamInfoByRoomFakeRsp = function () {
                  (this.tStreamInfoPack = new r.MediaStreamInfoPack()),
                    (this.mpConfig = new s.Map(new s.STRING(), new s.STRING())),
                    (this.sRoomId = '');
                }),
                (r.GetStreamInfoByRoomFakeRsp.prototype._clone = function () {
                  return new r.GetStreamInfoByRoomFakeRsp();
                }),
                (r.GetStreamInfoByRoomFakeRsp.prototype._write = function (e, t, i) {
                  e.writeStruct(t, i);
                }),
                (r.GetStreamInfoByRoomFakeRsp.prototype._read = function (e, t, i) {
                  return e.readStruct(t, !0, i);
                }),
                (r.GetStreamInfoByRoomFakeRsp.prototype.writeTo = function (e) {
                  e.writeStruct(0, this.tStreamInfoPack),
                    e.writeMap(1, this.mpConfig),
                    e.writeString(2, this.sRoomId);
                }),
                (r.GetStreamInfoByRoomFakeRsp.prototype.readFrom = function (e) {
                  (this.tStreamInfoPack = e.readStruct(0, !1, this.tStreamInfoPack)),
                    (this.mpConfig = e.readMap(1, !1, this.mpConfig)),
                    (this.sRoomId = e.readString(2, !1, this.sRoomId));
                });
            },
            function (e, t, i) {
              'use strict';
              var s = i(2),
                r = i(3),
                a = navigator.userAgent,
                n = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.matches = null),
                      (this.versionFuncs = null),
                      (this.device = ''),
                      (this.language = ''),
                      (this.browser = ''),
                      (this.version = { major: 0, full: '' }),
                      (this.kernel = ''),
                      (this.kernelVersion = 0),
                      (this.os = ''),
                      (this.osVersion = ''),
                      this.genBrowserInfo(),
                      (this.amendOSVersionCallback = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getMatches',
                        value: function () {
                          var e = a;
                          (this.matches = {
                            Trident: e.indexOf('Trident') > -1 || e.indexOf('NET CLR') > -1,
                            Presto: e.indexOf('Presto') > -1,
                            WebKit: e.indexOf('AppleWebKit') > -1,
                            Gecko: e.indexOf('Gecko/') > -1,
                            KHTML: e.indexOf('KHTML/') > -1,
                            Safari: e.indexOf('Safari') > -1,
                            Chrome: e.indexOf('Chrome') > -1 || e.indexOf('CriOS') > -1,
                            IE: e.indexOf('MSIE') > -1 || e.indexOf('Trident') > -1,
                            Edge: e.indexOf('Edge') > -1 || e.indexOf('Edg/') > -1,
                            Firefox: e.indexOf('Firefox') > -1 || e.indexOf('FxiOS') > -1,
                            'Firefox Focus': e.indexOf('Focus') > -1,
                            Chromium: e.indexOf('Chromium') > -1,
                            Opera: e.indexOf('Opera') > -1 || e.indexOf('OPR') > -1,
                            Vivaldi: e.indexOf('Vivaldi') > -1,
                            Yandex: e.indexOf('YaBrowser') > -1,
                            Arora: e.indexOf('Arora') > -1,
                            Lunascape: e.indexOf('Lunascape') > -1,
                            QupZilla: e.indexOf('QupZilla') > -1,
                            'Coc Coc': e.indexOf('coc_coc_browser') > -1,
                            Kindle: e.indexOf('Kindle') > -1 || e.indexOf('Silk/') > -1,
                            Iceweasel: e.indexOf('Iceweasel') > -1,
                            Konqueror: e.indexOf('Konqueror') > -1,
                            Iceape: e.indexOf('Iceape') > -1,
                            SeaMonkey: e.indexOf('SeaMonkey') > -1,
                            Epiphany: e.indexOf('Epiphany') > -1,
                            360: e.indexOf('QihooBrowser') > -1 || e.indexOf('QHBrowser') > -1,
                            '360EE': e.indexOf('360EE') > -1,
                            '360SE': e.indexOf('360SE') > -1,
                            UC:
                              e.indexOf('UCBrowser') > -1 ||
                              e.indexOf(' UBrowser') > -1 ||
                              e.indexOf('UCWEB') > -1,
                            QQBrowser: e.indexOf('QQBrowser') > -1,
                            QQ: e.indexOf('QQ/') > -1,
                            Baidu:
                              e.indexOf('Baidu') > -1 ||
                              e.indexOf('BIDUBrowser') > -1 ||
                              e.indexOf('baidubrowser') > -1 ||
                              e.indexOf('baiduboxapp') > -1 ||
                              e.indexOf('BaiduHD') > -1,
                            Maxthon: e.indexOf('Maxthon') > -1,
                            Sogou: e.indexOf('MetaSr') > -1 || e.indexOf('Sogou') > -1,
                            Liebao: e.indexOf('LBBROWSER') > -1 || e.indexOf('LieBaoFast') > -1,
                            '2345Explorer':
                              e.indexOf('2345Explorer') > -1 ||
                              e.indexOf('Mb2345Browser') > -1 ||
                              e.indexOf('2345chrome') > -1,
                            '115Browser': e.indexOf('115Browser') > -1,
                            TheWorld: e.indexOf('TheWorld') > -1,
                            XiaoMi: e.indexOf('MiuiBrowser') > -1,
                            Quark: e.indexOf('Quark') > -1,
                            Qiyu: e.indexOf('Qiyu') > -1,
                            Wechat: e.indexOf('MicroMessenger') > -1,
                            WechatWork: e.indexOf('wxwork/') > -1,
                            Taobao: e.indexOf('AliApp(TB') > -1,
                            Alipay: e.indexOf('AliApp(AP') > -1,
                            Weibo: e.indexOf('Weibo') > -1,
                            Douban: e.indexOf('com.douban.frodo') > -1,
                            Suning: e.indexOf('SNEBUY-APP') > -1,
                            iQiYi: e.indexOf('IqiyiApp') > -1,
                            DingTalk: e.indexOf('DingTalk') > -1,
                            Huawei:
                              e.indexOf('HuaweiBrowser') > -1 ||
                              e.indexOf('HUAWEI/') > -1 ||
                              e.indexOf('HONOR') > -1,
                            Vivo: e.indexOf('VivoBrowser') > -1,
                            Windows: e.indexOf('Windows') > -1,
                            Linux: e.indexOf('Linux') > -1 || e.indexOf('X11') > -1,
                            'Mac OS': e.indexOf('Macintosh') > -1,
                            Android: e.indexOf('Android') > -1 || e.indexOf('Adr') > -1,
                            HarmonyOS: e.indexOf('HarmonyOS') > -1,
                            Ubuntu: e.indexOf('Ubuntu') > -1,
                            FreeBSD: e.indexOf('FreeBSD') > -1,
                            Debian: e.indexOf('Debian') > -1,
                            'Windows Phone':
                              e.indexOf('IEMobile') > -1 || e.indexOf('Windows Phone') > -1,
                            BlackBerry: e.indexOf('BlackBerry') > -1 || e.indexOf('RIM') > -1,
                            MeeGo: e.indexOf('MeeGo') > -1,
                            Symbian: e.indexOf('Symbian') > -1,
                            iOS: e.indexOf('like Mac OS X') > -1,
                            'Chrome OS': e.indexOf('CrOS') > -1,
                            WebOS: e.indexOf('hpwOS') > -1,
                            Mobile:
                              e.indexOf('Mobi') > -1 ||
                              e.indexOf('iPh') > -1 ||
                              e.indexOf('480') > -1,
                            Tablet:
                              e.indexOf('Tablet') > -1 ||
                              e.indexOf('Pad') > -1 ||
                              e.indexOf('Nexus 7') > -1,
                          }),
                            this.matches.Mobile
                              ? (this.matches.Mobile = !(e.indexOf('iPad') > -1))
                              : this.is360() &&
                                (this.mime('type', 'application/gameplugin') ||
                                (navigator &&
                                  void 0 !== navigator.connection &&
                                  void 0 === navigator.connection.saveData)
                                  ? (this.matches['360SE'] = !0)
                                  : (this.matches['360EE'] = !0)),
                            this.matches.Baidu && this.matches.Opera
                              ? (this.matches.Baidu = !1)
                              : this.matches.iOS && (this.matches.Safari = !0),
                            window.chrome &&
                              (window.chrome.adblock2345 || window.chrome.common2345) &&
                              (this.matches['2345Explorer'] = !0);
                        },
                      },
                      {
                        key: 'genBrowserInfo',
                        value: function () {
                          this.getMatches();
                          var e,
                            t = {
                              kernel: ['WebKit', 'Trident', 'Gecko', 'Presto', 'KHTML'],
                              browser: [
                                'Safari',
                                'Chrome',
                                'Edge',
                                'IE',
                                'Firefox',
                                'Firefox Focus',
                                'Chromium',
                                'Opera',
                                'Vivaldi',
                                'Yandex',
                                'Arora',
                                'Lunascape',
                                'QupZilla',
                                'Coc Coc',
                                'Kindle',
                                'Iceweasel',
                                'Konqueror',
                                'Iceape',
                                'SeaMonkey',
                                'Epiphany',
                                'XiaoMi',
                                'Vivo',
                                '360',
                                '360SE',
                                '360EE',
                                'UC',
                                'QQBrowser',
                                'QQ',
                                'Huawei',
                                'Baidu',
                                'Maxthon',
                                'Sogou',
                                'Liebao',
                                '2345Explorer',
                                '115Browser',
                                'TheWorld',
                                'Quark',
                                'Qiyu',
                                'Wechat',
                                'WechatWork',
                                'Taobao',
                                'Alipay',
                                'Weibo',
                                'Douban',
                                'Suning',
                                'iQiYi',
                                'DingTalk',
                              ],
                              os: [
                                'Windows',
                                'Linux',
                                'Mac OS',
                                'Android',
                                'HarmonyOS',
                                'Ubuntu',
                                'FreeBSD',
                                'Debian',
                                'iOS',
                                'Windows Phone',
                                'BlackBerry',
                                'MeeGo',
                                'Symbian',
                                'Chrome OS',
                                'WebOS',
                              ],
                              device: ['Mobile', 'Tablet'],
                            };
                          for (var i in ((this.device = 'PC'),
                          (this.language =
                            ((e = (navigator.browserLanguage || navigator.language).split(
                              '-',
                            ))[1] && (e[1] = e[1].toUpperCase()),
                            e.join('_'))),
                          t))
                            for (var s = 0; s < t[i].length; s++) {
                              var r = t[i][s];
                              this.matches[r] && (this[i] = r);
                            }
                          this.getOSVersion(),
                            this.getBrowserVersion(),
                            this.amendSpecialCase(),
                            this.amendOSVersion();
                        },
                      },
                      {
                        key: 'getOSVersion',
                        value: function () {
                          var e = a,
                            t = {
                              Windows: function () {
                                var t = e.replace(
                                  /^Mozilla\/\d.0 \(Windows NT ([\d.]+)[;)].*$/,
                                  '$1',
                                );
                                return (
                                  {
                                    10: '10',
                                    6.4: '10',
                                    6.3: '8.1',
                                    6.2: '8',
                                    6.1: '7',
                                    '6.0': 'Vista',
                                    5.2: 'XP',
                                    5.1: 'XP',
                                    '5.0': '2000',
                                  }[t] || t
                                );
                              },
                              Android: function () {
                                return e.replace(/^.*Android ([\d.]+);.*$/, '$1');
                              },
                              HarmonyOS: function () {
                                return (
                                  { 10: '2' }[
                                    e.replace(/^Mozilla.*Android ([\d.]+)[;)].*$/, '$1')
                                  ] || ''
                                );
                              },
                              iOS: function () {
                                return e.replace(/^.*OS ([\d_]+) like.*$/, '$1').replace(/_/g, '.');
                              },
                              Debian: function () {
                                return e.replace(/^.*Debian\/([\d.]+).*$/, '$1');
                              },
                              'Windows Phone': function () {
                                return e.replace(/^.*Windows Phone( OS)? ([\d.]+);.*$/, '$2');
                              },
                              'Mac OS': function () {
                                return e
                                  .replace(/^.*Mac OS X ([\d_]+).*$/, '$1')
                                  .replace(/_/g, '.');
                              },
                              WebOS: function () {
                                return e.replace(/^.*hpwOS\/([\d.]+);.*$/, '$1');
                              },
                            };
                          (this.osVersion = ''),
                            t[this.os] &&
                              ((this.osVersion = t[this.os]()),
                              this.osVersion == e && (this.osVersion = ''));
                        },
                      },
                      {
                        key: 'amendOSVersion',
                        value: function () {
                          var e = this;
                          'Windows' === this.os &&
                            navigator.userAgentData &&
                            navigator.userAgentData.getHighEntropyValues &&
                            navigator.userAgentData
                              .getHighEntropyValues(['platformVersion'])
                              .then(function (t) {
                                t.platformVersion &&
                                  parseInt(t.platformVersion.split('.')[0]) >= 13 &&
                                  ((e.osVersion = '11'),
                                  e.amendOSVersionCallback && e.amendOSVersionCallback());
                              });
                        },
                      },
                      {
                        key: 'getBrowserVersion',
                        value: function () {
                          var e = a;
                          if (
                            ((this.versionFuncs = {
                              Safari: function () {
                                return e.replace(/^.*Version\/([\d.]+).*$/, '$1');
                              },
                              Chrome: function () {
                                return e
                                  .replace(/^.*Chrome\/([\d.]+).*$/, '$1')
                                  .replace(/^.*CriOS\/([\d.]+).*$/, '$1');
                              },
                              IE: function () {
                                return e
                                  .replace(/^.*MSIE ([\d.]+).*$/, '$1')
                                  .replace(/^.*rv:([\d.]+).*$/, '$1');
                              },
                              Edge: function () {
                                return e
                                  .replace(/^.*Edge\/([\d.]+).*$/, '$1')
                                  .replace(/^.*Edg\/([\d.]+).*$/, '$1');
                              },
                              Firefox: function () {
                                return e
                                  .replace(/^.*Firefox\/([\d.]+).*$/, '$1')
                                  .replace(/^.*FxiOS\/([\d.]+).*$/, '$1');
                              },
                              'Firefox Focus': function () {
                                return e.replace(/^.*Focus\/([\d.]+).*$/, '$1');
                              },
                              Chromium: function () {
                                return e.replace(/^.*Chromium\/([\d.]+).*$/, '$1');
                              },
                              Opera: function () {
                                return e
                                  .replace(/^.*Opera\/([\d.]+).*$/, '$1')
                                  .replace(/^.*OPR\/([\d.]+).*$/, '$1');
                              },
                              Vivaldi: function () {
                                return e.replace(/^.*Vivaldi\/([\d.]+).*$/, '$1');
                              },
                              Yandex: function () {
                                return e.replace(/^.*YaBrowser\/([\d.]+).*$/, '$1');
                              },
                              Arora: function () {
                                return e.replace(/^.*Arora\/([\d.]+).*$/, '$1');
                              },
                              Lunascape: function () {
                                return e.replace(/^.*Lunascape[\/\s]([\d.]+).*$/, '$1');
                              },
                              QupZilla: function () {
                                return e.replace(/^.*QupZilla[\/\s]([\d.]+).*$/, '$1');
                              },
                              'Coc Coc': function () {
                                return e.replace(/^.*coc_coc_browser\/([\d.]+).*$/, '$1');
                              },
                              Kindle: function () {
                                return e.replace(/^.*Version\/([\d.]+).*$/, '$1');
                              },
                              Iceweasel: function () {
                                return e.replace(/^.*Iceweasel\/([\d.]+).*$/, '$1');
                              },
                              Konqueror: function () {
                                return e.replace(/^.*Konqueror\/([\d.]+).*$/, '$1');
                              },
                              Iceape: function () {
                                return e.replace(/^.*Iceape\/([\d.]+).*$/, '$1');
                              },
                              SeaMonkey: function () {
                                return e.replace(/^.*SeaMonkey\/([\d.]+).*$/, '$1');
                              },
                              Epiphany: function () {
                                return e.replace(/^.*Epiphany\/([\d.]+).*$/, '$1');
                              },
                              360: function () {
                                return e.replace(/^.*QihooBrowser\/([\d.]+).*$/, '$1');
                              },
                              '360SE': function () {
                                return (
                                  {
                                    86: '13.0',
                                    78: '12.0',
                                    69: '11.0',
                                    63: '10.0',
                                    55: '9.1',
                                    45: '8.1',
                                    42: '8.0',
                                    31: '7.0',
                                    21: '6.3',
                                  }[e.replace(/^.*Chrome\/([\d]+).*$/, '$1')] || ''
                                );
                              },
                              '360EE': function () {
                                return (
                                  {
                                    86: '13.0',
                                    78: '12.0',
                                    69: '11.0',
                                    63: '9.5',
                                    55: '9.0',
                                    50: '8.7',
                                    30: '7.5',
                                  }[e.replace(/^.*Chrome\/([\d]+).*$/, '$1')] || ''
                                );
                              },
                              Maxthon: function () {
                                return e.replace(/^.*Maxthon\/([\d.]+).*$/, '$1');
                              },
                              QQBrowser: function () {
                                return e.replace(/^.*QQBrowser\/([\d.]+).*$/, '$1');
                              },
                              QQ: function () {
                                return e.replace(/^.*QQ\/([\d.]+).*$/, '$1');
                              },
                              Baidu: function () {
                                return e
                                  .replace(/^.*BIDUBrowser[\s\/]([\d.]+).*$/, '$1')
                                  .replace(/^.*baiduboxapp\/([\d.]+).*$/, '$1');
                              },
                              UC: function () {
                                return e.replace(/^.*UC?Browser\/([\d.]+).*$/, '$1');
                              },
                              Sogou: function () {
                                return e
                                  .replace(/^.*SE ([\d.X]+).*$/, '$1')
                                  .replace(/^.*SogouMobileBrowser\/([\d.]+).*$/, '$1');
                              },
                              Liebao: function () {
                                var t = '';
                                e.indexOf('LieBaoFast') > -1 &&
                                  (t = e.replace(/^.*LieBaoFast\/([\d.]+).*$/, '$1'));
                                var i = e.replace(/^.*Chrome\/([\d]+).*$/, '$1');
                                return (
                                  t ||
                                  {
                                    57: '6.5',
                                    49: '6.0',
                                    46: '5.9',
                                    42: '5.3',
                                    39: '5.2',
                                    34: '5.0',
                                    29: '4.5',
                                    21: '4.0',
                                  }[i] ||
                                  ''
                                );
                              },
                              '2345Explorer': function () {
                                return (
                                  { 69: '10.0', 55: '9.9' }[
                                    navigator.userAgent.replace(/^.*Chrome\/([\d]+).*$/, '$1')
                                  ] ||
                                  e
                                    .replace(/^.*2345Explorer\/([\d.]+).*$/, '$1')
                                    .replace(/^.*Mb2345Browser\/([\d.]+).*$/, '$1')
                                );
                              },
                              '115Browser': function () {
                                return e.replace(/^.*115Browser\/([\d.]+).*$/, '$1');
                              },
                              TheWorld: function () {
                                return e.replace(/^.*TheWorld ([\d.]+).*$/, '$1');
                              },
                              XiaoMi: function () {
                                return e.replace(/^.*MiuiBrowser\/([\d.]+).*$/, '$1');
                              },
                              Vivo: function () {
                                return e.replace(/^.*VivoBrowser\/([\d.]+).*$/, '$1');
                              },
                              Quark: function () {
                                return e.replace(/^.*Quark\/([\d.]+).*$/, '$1');
                              },
                              Qiyu: function () {
                                return e.replace(/^.*Qiyu\/([\d.]+).*$/, '$1');
                              },
                              Wechat: function () {
                                return e.replace(/^.*MicroMessenger\/([\d.]+).*$/, '$1');
                              },
                              WechatWork: function () {
                                return e.replace(/^.*wxwork\/([\d.]+).*$/, '$1');
                              },
                              Taobao: function () {
                                return e.replace(/^.*AliApp\(TB\/([\d.]+).*$/, '$1');
                              },
                              Alipay: function () {
                                return e.replace(/^.*AliApp\(AP\/([\d.]+).*$/, '$1');
                              },
                              Weibo: function () {
                                return e.replace(/^.*weibo__([\d.]+).*$/, '$1');
                              },
                              Douban: function () {
                                return e.replace(/^.*com.douban.frodo\/([\d.]+).*$/, '$1');
                              },
                              Suning: function () {
                                return e.replace(/^.*SNEBUY-APP([\d.]+).*$/, '$1');
                              },
                              iQiYi: function () {
                                return e.replace(/^.*IqiyiVersion\/([\d.]+).*$/, '$1');
                              },
                              DingTalk: function () {
                                return e.replace(/^.*DingTalk\/([\d.]+).*$/, '$1');
                              },
                              Huawei: function () {
                                return e
                                  .replace(/^.*Version\/([\d.]+).*$/, '$1')
                                  .replace(/^.*HuaweiBrowser\/([\d.]+).*$/, '$1');
                              },
                            }),
                            this.versionFuncs[this.browser])
                          ) {
                            var t = this.versionFuncs[this.browser]();
                            t !== e &&
                              ((this.version.major = parseInt(t)), (this.version.full = t));
                          }
                        },
                      },
                      {
                        key: 'amendSpecialCase',
                        value: function () {
                          var e = a;
                          if ('Chrome' == this.browser && e.match(/\S+Browser/)) {
                            this.browser = e.match(/\S+Browser/)[0];
                            var t = e.replace(/^.*Browser\/([\d.]+).*$/, '$1');
                            (this.version.major = parseInt(t)), (this.version.full = t);
                          }
                          if (
                            ('Firefox' != this.browser ||
                              (!window.clientInformation && window.u2f) ||
                              ((this.kernel = this.browser),
                              (this.kernelVersion = this.version.major),
                              (this.browser += ' Nightly')),
                            'Edge' == this.browser)
                          )
                            this.version.major > 75
                              ? ((this.kernel = 'Chrome'),
                                (this.kernelVersion = parseInt(this.versionFuncs.Chrome())))
                              : ((this.kernel = 'EdgeHTML'), (this.kernelVersion = 0));
                          else if (
                            this.matches.Chrome &&
                            'WebKit' === this.kernel &&
                            parseInt(this.versionFuncs.Chrome()) > 27
                          )
                            (this.kernel = 'Chrome'),
                              (this.kernelVersion = parseInt(this.versionFuncs.Chrome()));
                          else if ('Opera' == this.browser && this.version.major > 12)
                            (this.kernel = 'Chrome'),
                              (this.kernelVersion = parseInt(this.versionFuncs.Chrome()));
                          else if ('Yandex' == this.browser)
                            (this.kernel = 'Chrome'),
                              (this.kernelVersion = parseInt(this.versionFuncs.Chrome()));
                          else if (this.matches.Safari && 'WebKit' === this.kernel) {
                            var i = e.replace(/^.*Version\/([\d.]+).*$/, '$1');
                            i === e && (i = e.replace(/^.*AppleWebKit\/([\d.]+).*$/, '$1')),
                              (this.kernelVersion = parseInt(i) || 0);
                          }
                        },
                      },
                      {
                        key: 'is360',
                        value: function () {
                          var e = a,
                            t = !1;
                          if (window.chrome) {
                            var i = Number(e.replace(/^.*Chrome\/([\d]+).*$/, '$1'));
                            this.mime('type', 'application/360softmgrplugin') ||
                            this.mime('type', 'application/mozilla-npqihooquicklogin') ||
                            (i > 36 && window.showModalDialog)
                              ? (t = !0)
                              : i > 45 &&
                                !(t = this.mime(
                                  'type',
                                  'application/vnd.chromium.remoting-viewer',
                                )) &&
                                i >= 69 &&
                                (t =
                                  this.mime('type', 'application/hwepass2001.installepass2001') ||
                                  this.mime('type', 'application/asx'));
                          }
                          return t;
                        },
                      },
                      {
                        key: 'mime',
                        value: function (e, t) {
                          var i = navigator.mimeTypes;
                          for (var s in i) if (i[s][e] == t) return !0;
                          return !1;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.a = new n();
            },
            function (e, t, i) {
              'use strict';
              var s = {
                PAudienceGetProxyListReq: 530178,
                PAudienceGetProxyListRsp: 530434,
                PNotifyStreamSwitch: 268034,
                PLoginVideoProxyUniformly: 5650690,
                PLoginVideoProxyUniformlyRes: 5650434,
                PNotifyCurrentCdnStream: 2739202,
                PNotifyCurrentStream4: 2675714,
                PSubscribeStream3: 2667266,
                PSubscribeStreamRes3: 2667522,
                PStreamData3: 2666754,
                PStopStream3: 2666498,
                PStopStream: 2560514,
                PPullStreamData: 2694146,
                PResendStreamData4: 2689026,
                PResendStreamDataFailAck: 2694402,
                PVideoSyncSpeakerTime3: 2674690,
                PForceConnectVideoProxy3: 2685442,
                PVideoProxyPing3: 2669570,
                PVideoProxyPingRes4: 2683650,
                PNotifyMultiVideo: 2746370,
                PLoginAndSubscribe: 4097282,
                PLoginAndSubscribeRes: 4097538,
                PNotifyUplinkRecvCount3: 2672642,
                PVideoBroadcast4: 2754050,
                PUpdateVideoConfig2: 2569474,
                PVideoQualityStatistics: 2591746,
                PP2pPing2: 40706,
                PP2pPing3: 41218,
                PP2pVideoPing3: 2671874,
                VIDEOP2P_PFlashP2PKeepAlive: 3072514,
                VIDEOP2P_PFlashP2PKeepAliveRes: 3072770,
                P2PGetNodesProxy3: 2673410,
                P2PGetNodesProxyRes3: 2673666,
                P2PSubscribeStream3: 2673922,
                P2PRemoveSubscribe3: 2674178,
                P2PKeepAlive: 3074562,
                P2PKeepAliveRes: 3074818,
                P2PNotifyNodeLeave: 3075074,
                P2PSyncDepth: 3075330,
                P2PKeepAliveWebrtc: 3075842,
                P2PKeepAliveWebrtcRes: 3076098,
                PP2PWSForward: 2757378,
                PP2PWSForwardReject: 5653506,
                P2PSubStream: 3073026,
                P2PSubStreamRes: 3073282,
                P2PSyncSubTree: 3073538,
                P2PTest: 3073794,
                P2PRemoveSub: 3074306,
                P2PRemoveSubRes: 3075586,
                P2PStreamAlive: 3076354,
                P2POffer: 12316162,
                P2PAnswer: 12316418,
                P2PCandidate: 12316674,
                P2POfferReject: 12316930,
                P2PRequestOffer: 12317186,
                P2PVersionFailed: 12317442,
                P2PPingOverProxy: 12317698,
                P2PPunchBackReq: 12317954,
                P2PPunchBackRsp: 12318210,
                PCDNNotifyUrl: 20740866,
                PCDNStatusReport: 20741122,
                PCDNGetUrl: 20741378,
                PCDNSwitchUrl: 20741634,
                PCdnP2PWSForward: 53283,
                PCdnP2PWSForwardReject: 53539,
                PCdnProxyPing: 26147,
                PCdnProxyPingRes: 26403,
                PCdnP2PStatics: 26659,
                PCdnP2PErrStatics: 26915,
                PCdnP2pGetNode: 51235,
                PCdnP2pGetNodeRes: 51491,
                PCdnP2PNodePingThroughProxy: 52259,
                PCdnP2PNodePunchThroughProxy: 52515,
                PCdnP2PUserRegister: 52771,
                PCdnP2PUserRegisterRes: 53027,
                PCdnP2pReportLog: 54051,
                PCdnForceConnectVideoProxy: 54563,
                PCDNGetProxyListReq: 153635,
                PCDNGetProxyListRsp: 153891,
                PCDNGetSliceStreamInfoReq: 154147,
                PCDNGetSliceStreamInfoRsp: 154403,
                PCDNSubscribeReq: 768547,
                PCDNSubscribeRes: 768803,
                PCDNCompeteSubscribeReq: 769059,
                PCDNCompeteSubscribeRes: 769315,
                PCDNForceSubscribeNotify: 769571,
                PCdnP2pUserUnRegister: 770083,
                PP2pSliceData: 511779,
                PP2pSliceAudioData: 512035,
                PP2pSliceVideoData: 512291,
                PP2pSliceCommonData: 514083,
                PP2pSliceSignalData: 514595,
                PP2pSliceAudioDataV2: 517411,
                PP2pSliceAudioDataV3: 517667,
                PP2pSliceControlData: 1024547,
                PForceConnectCdnVideoProxy3: 2711042,
                HuyaDelaySeiData: 17920770,
              };
              !(function e() {
                if (!e.done) {
                  e.done = !0;
                  var t = [];
                  for (var i in s) {
                    var r = s[i];
                    t.push({ uri: r, name: i });
                  }
                  t.forEach(function (e) {
                    s[e.uri] = e.name;
                  });
                }
              })(),
                (t.a = s);
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'a', function () {
                return n;
              });
              var s = i(42),
                r = i(53),
                a = i(30);
              function n(e) {
                return (
                  (function (e) {
                    if (Array.isArray(e)) return Object(s.a)(e);
                  })(e) ||
                  Object(r.a)(e) ||
                  Object(a.a)(e) ||
                  (function () {
                    throw new TypeError(
                      'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                    );
                  })()
                );
              }
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'a', function () {
                return s;
              });
              var s = {
                VIDEODECODEERROR: 1,
                AUDIODECODEERROR: 2,
                VIDEORENDEERROR: 3,
                VIDEOFAST: 4,
                AUDIOFAST: 5,
                WORKERERROR: 6,
                AUDIORENDERERROR: 7,
                NOT_SUPPORT_MEDIASRTREAMTRACK: 8,
                DISABLE_HARDWARE_ACCELERATION: 9,
                SOFT_TURN_TO_MSE: 10,
                WIN_PERF_INSUFFICIENT: 11,
                RETRY_MAX_TIMES: 12,
                DECODE_COST: 13,
                DECODE_DTS: 14,
                BROWSER_NOT_SUPPORTED: 15,
                IS_PUREAUDIO: 16,
                ANGLE_NULL: 17,
                DECODE_ERROR_COOL: 18,
                CHROME_H265_RENDER_INFO_EMPTY: 19,
                IS_NOT_SUPPORT_CONFIGURE: 20,
                IS_NOT_SUPPORT_OS: 21,
                AUDIO_DATA_NAN: 22,
                AUDIO_FORMAT_ERROR: 23,
                AUDIO_DATA_MUTE: 24,
                IS_NOT_SUPPORT_CATEGORY: 25,
                BROWSER_VERSION_NOT_SUPPORTED_WCS: 26,
                BROWSER_VERSION_NOT_SUPPORTED_WCS_H265: 27,
                BROWSER_VERSION_NOT_SUPPORTED_WCS_H264: 28,
                VOD_AV1_CLOSE_CFg: 29,
                NOT_SUPPORT_AUDIO_SAMPLERATE: 30,
                SCREEN_COLOR: 31,
              };
            },
            function (e, t, i) {
              'use strict';
              t.a = { NONE: 0, LIVE: 1, REPLAY: 2, VOD: 3 };
            },
            function (e, t, i) {
              'use strict';
              t.a = {
                printTodecodeVideo: !1,
                printToDecodeAudio: !1,
                printDecodedVideo: !1,
                printDecodedAudio: !1,
                printTorenderVideo: !1,
                printTorenderAudio: !1,
                printAppendVideo: !1,
                printAppendAudio: !1,
                printVideoDecodeFast: !1,
                printRenderSkipFrame: !1,
                setCfg: function (e) {
                  for (var t in e) this[t] = e[t];
                },
              };
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'a', function () {
                return r;
              });
              var s = i(30);
              function r(e) {
                if ('undefined' == typeof Symbol || null == e[Symbol.iterator]) {
                  if (Array.isArray(e) || (e = Object(s.a)(e))) {
                    var t = 0,
                      i = function () {};
                    return {
                      s: i,
                      n: function () {
                        return t >= e.length ? { done: !0 } : { done: !1, value: e[t++] };
                      },
                      e: function (e) {
                        throw e;
                      },
                      f: i,
                    };
                  }
                  throw new TypeError(
                    'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                  );
                }
                var r,
                  a,
                  n = !0,
                  o = !1;
                return {
                  s: function () {
                    r = e[Symbol.iterator]();
                  },
                  n: function () {
                    var e = r.next();
                    return (n = e.done), e;
                  },
                  e: function (e) {
                    (o = !0), (a = e);
                  },
                  f: function () {
                    try {
                      n || null == r.return || r.return();
                    } finally {
                      if (o) throw a;
                    }
                  },
                };
              }
            },
            function (e, t, i) {
              'use strict';
              t.a = {
                AVC1: 'avc1.42E01E,mp4a.40.2',
                HVC1: 'hvc1.1.6.L93,mp4a.40.2',
                AV01: 'av01.0.08M.08,mp4a.40.2',
                isMseSupportedH264: function () {
                  return this._isSupported(this.AVC1);
                },
                isMseSupportedHevc: function () {
                  return this._isSupported(this.HVC1);
                },
                isMseSupportedAV01: function () {
                  return this._isSupported(this.AV01);
                },
                _isSupported: function (e) {
                  return (
                    window.MediaSource &&
                    window.MediaSource.isTypeSupported('video/mp4; codecs='.concat(e))
                  );
                },
              };
            },
            function (e, t, i) {
              'use strict';
              i.r(t),
                (t.default = {
                  STREAM_UNKNOWN: 0,
                  AUDIO_SPEEX: 0,
                  AUDIO_AACPLUS: 1,
                  AUDIO_SILK: 2,
                  AUDIO_AAC_44100HZ_STEREO_128KBPS: 35,
                  AUDIO_AAC_44100HZ_STEREO_160KBPS: 36,
                  AUDIO_AAC_44100HZ_STEREO_192KBPS: 37,
                  AUDIO_ELD_AAC_44100HZ_STEREO: 38,
                  AUDIO_ELD_AAC_SBR_44100HZ_STEREO: 39,
                  SIGNAL_STREAM_DATA: 47,
                  SIGNAL_STREAM_COMPRESS_DATA: 48,
                  AUDIO_MP3: 50,
                  AUDIO_NELLYMOSER: 54,
                  VIDEO_264_START: 401,
                  VIDEO_H264_100K: 401,
                  VIDEO_H264_500K: 405,
                  VIDEO_H264_800K: 408,
                  VIDEO_H264_1200K: 412,
                  VIDEO_H264_1500K: 415,
                  VIDEO_H264_2000K: 420,
                  VIDEO_H264_3000K: 430,
                  VIDEO_H264_4000K: 440,
                  VIDEO_H264_6000K: 460,
                  VIDEO_H264_8000K: 480,
                  VIDEO_H264_END: 480,
                  VIDEO_265_START: 503,
                  VIDEO_H265_300K: 503,
                  VIDEO_H265_500K: 505,
                  VIDEO_H265_800K: 508,
                  VIDEO_H265_1200K: 512,
                  VIDEO_H265_1500K: 515,
                  VIDEO_H265_2000K: 520,
                  VIDEO_H265_3000K: 530,
                  VIDEO_H265_4000K: 540,
                  VIDEO_H265_6000K: 560,
                  VIDEO_H265_8000K: 580,
                  VIDEO_H265_END: 580,
                  VIDEO_H264_EX_BASE: 1e3,
                  VIDEO_H264_EX_START: 1005,
                  VIDEO_H264_EX_500K: 1005,
                  VIDEO_H264_EX_1M: 1010,
                  VIDEO_H264_EX_5M: 1050,
                  VIDEO_H264_EX_8M: 1080,
                  VIDEO_H264_EX_10M: 1100,
                  VIDEO_H264_EX_12M: 1120,
                  VIDEO_H264_EX_15M: 1150,
                  VIDEO_H264_EX_20M: 1200,
                  VIDEO_H264_EX_END: 1200,
                  VIDEO_H265_EX_BASE: 4e3,
                  VIDEO_H265_EX_START: 4005,
                  VIDEO_H265_EX_500K: 4005,
                  VIDEO_H265_EX_1M: 4010,
                  VIDEO_H265_EX_5M: 4050,
                  VIDEO_H265_EX_8M: 4080,
                  VIDEO_H265_EX_10M: 4100,
                  VIDEO_H265_EX_12M: 4120,
                  VIDEO_H265_EX_15M: 4150,
                  VIDEO_H265_EX_20M: 4200,
                  VIDEO_H265_EX_END: 4200,
                });
            },
            function (e, t, i) {
              'use strict';
              i.d(t, 'a', function () {
                return r;
              });
              var s = i(42);
              function r(e, t) {
                if (e) {
                  if ('string' == typeof e) return Object(s.a)(e, t);
                  var i = Object.prototype.toString.call(e).slice(8, -1);
                  return (
                    'Object' === i && e.constructor && (i = e.constructor.name),
                    'Map' === i || 'Set' === i
                      ? Array.from(i)
                      : 'Arguments' === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)
                      ? Object(s.a)(e, t)
                      : void 0
                  );
                }
              }
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(29),
                n = i(19),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.streamName = ''),
                      (this.codecType = 0),
                      (this.cdnBrand = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new n.a(!1);
                          return (
                            e.pushString(this.streamName),
                            e.pushUInt16(this.codecType),
                            e.pushUInt16(this.cdnBrand),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          return (
                            (this.streamName = e.popString()),
                            (this.codecType = e.popUInt16()),
                            (this.cdnBrand = e.popUInt16()),
                            this
                          );
                        },
                      },
                      {
                        key: 'getDefCodecRate',
                        value: function () {
                          return this.codecType >= a.default.VIDEO_264_START &&
                            this.codecType <= a.default.VIDEO_H264_END
                            ? 100 * (this.codecType - a.default.VIDEO_264_START)
                            : this.codecType >= a.default.VIDEO_265_START &&
                              this.codecType <= a.default.VIDEO_H265_END
                            ? 100 * (this.codecType - a.default.VIDEO_265_START)
                            : 128;
                        },
                      },
                      {
                        key: 'text',
                        value: function () {
                          return this.streamName + '_' + this.codecType + '_' + this.cdnBrand;
                        },
                      },
                      {
                        key: 'equal',
                        value: function (e) {
                          return (
                            !!e &&
                            this.streamName == e.streamName &&
                            this.codecType == e.codecType &&
                            this.cdnBrand == e.cdnBrand
                          );
                        },
                      },
                      {
                        key: 'isValidID',
                        get: function () {
                          return this.codecType > 0;
                        },
                      },
                      {
                        key: 'isH264',
                        get: function () {
                          return (
                            this.codecType >= a.default.VIDEO_264_START &&
                            this.codecType <= a.default.VIDEO_H264_END
                          );
                        },
                      },
                      {
                        key: 'isH265',
                        get: function () {
                          return (
                            this.codecType >= a.default.VIDEO_265_START &&
                            this.codecType <= a.default.VIDEO_H265_END
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t),
                (t.default = {
                  STREAM_UNKNOWN: 0,
                  AUDIO_SPEEX: 0,
                  AUDIO_AACPLUS: 1,
                  AUDIO_SILK: 2,
                  AUDIO_AAC_44100HZ_STEREO_128KBPS: 35,
                  AUDIO_AAC_44100HZ_STEREO_160KBPS: 36,
                  AUDIO_AAC_44100HZ_STEREO_192KBPS: 37,
                  AUDIO_ELD_AAC_44100HZ_STEREO: 38,
                  AUDIO_ELD_AAC_SBR_44100HZ_STEREO: 39,
                  AUDIO_MP3: 50,
                  AUDIO_NELLYMOSER: 54,
                  VIDEO_264_START: 401,
                  VIDEO_H264_100K: 401,
                  VIDEO_H264_500K: 405,
                  VIDEO_H264_800K: 408,
                  VIDEO_H264_1200K: 412,
                  VIDEO_H264_1500K: 415,
                  VIDEO_H264_2000K: 420,
                  VIDEO_H264_3000K: 430,
                  VIDEO_H264_4000K: 440,
                  VIDEO_H264_6000K: 460,
                  VIDEO_H264_8000K: 480,
                  VIDEO_H264_END: 480,
                  VIDEO_265_START: 503,
                  VIDEO_H265_300K: 503,
                  VIDEO_H265_500K: 505,
                  VIDEO_H265_800K: 508,
                  VIDEO_H265_1200K: 512,
                  VIDEO_H265_1500K: 515,
                  VIDEO_H265_2000K: 520,
                  VIDEO_H265_3000K: 530,
                  VIDEO_H265_4000K: 540,
                  VIDEO_H265_6000K: 560,
                  VIDEO_H265_8000K: 580,
                  VIDEO_H265_END: 580,
                });
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.ip = 0),
                      (this.tcpPorts = []),
                      (this.udpPorts = []),
                      (this.videoProxyInfo = new Map());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return (
                            'number' == typeof this.ip
                              ? e.pushUInt32(this.ip)
                              : e.pushUInt32(this.ip2uint(this.ip)),
                            e.pushUInt16Vector(this.tcpPorts),
                            e.pushUInt16Vector(this.udpPorts),
                            e.pushUInt32(this.videoProxyInfo.size),
                            this.videoProxyInfo.forEach(function (t, i) {
                              e.pushUInt8(i), e.pushUInt32(t);
                            }),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.ip = this.uint2ip(e.popUInt32())),
                            (this.tcpPorts = e.popUInt16Vector()),
                            (this.udpPorts = e.popUInt16Vector()),
                            this.videoProxyInfo.clear();
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = e.popUInt8(),
                              r = e.popUInt32();
                            this.videoProxyInfo.set(s, r);
                          }
                          return this;
                        },
                      },
                      {
                        key: 'ip2uint',
                        value: function (e) {
                          for (var t = 0, i = e.split('.'), s = 0; s < i.length; s++)
                            t |= Number(i[s]) << (8 * s);
                          return t < 0 && (t += 4294967296), t;
                        },
                      },
                      {
                        key: 'uint2ip',
                        value: function (e) {
                          return (
                            (255 & e) +
                            '.' +
                            ((e >> 8) & 255) +
                            '.' +
                            ((e >> 16) & 255) +
                            '.' +
                            ((e >> 24) & 255)
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(41),
                n = i(32),
                o = i(19),
                h = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.appid = 0),
                      (this.streamType = 0),
                      (this.codecType = 0),
                      (this.sid = 0),
                      (this.startTs = 0),
                      (this.serverGenSeq = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new o.a(!1);
                          return (
                            e.pushUInt8(this.appid),
                            e.pushUInt8(this.streamType),
                            e.pushUInt16(this.codecType),
                            e.pushUInt64(this.sid),
                            e.pushUInt32(this.startTs),
                            e.pushUInt16(this.serverGenSeq),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          return (
                            (this.appid = e.popUInt8()),
                            (this.streamType = e.popUInt8()),
                            (this.codecType = e.popUInt16()),
                            (this.sid = e.popUInt64()),
                            (this.startTs = e.popUInt32()),
                            (this.serverGenSeq = e.popUInt16()),
                            this
                          );
                        },
                      },
                      {
                        key: 'text',
                        value: function () {
                          return (
                            this.appid +
                            '-' +
                            this.streamType +
                            '-' +
                            this.codecType +
                            '-' +
                            this.sid +
                            '-' +
                            this.startTs +
                            '-' +
                            this.serverGenSeq
                          );
                        },
                      },
                      {
                        key: 'equal',
                        value: function (e) {
                          return (
                            null !== e &&
                            this.appid === e.appid &&
                            this.streamType === e.streamType &&
                            this.codecType === e.codecType &&
                            this.sid === e.sid &&
                            this.startTs === e.startTs &&
                            this.serverGenSeq === e.serverGenSeq
                          );
                        },
                      },
                      {
                        key: 'isValidID',
                        get: function () {
                          return this.appid > 0;
                        },
                      },
                      {
                        key: 'isTransStream',
                        get: function () {
                          return 1 == (1 & this.streamType);
                        },
                      },
                      {
                        key: 'isAudioStream',
                        get: function () {
                          return this.streamType >= a.default.STRAEM_TYPE_AUDIO_START;
                        },
                      },
                      {
                        key: 'isVideoStream',
                        get: function () {
                          return this.streamType < a.default.STRAEM_TYPE_AUDIO_START;
                        },
                      },
                      {
                        key: 'isH264VideoStream',
                        get: function () {
                          return (
                            this.isVideoStream &&
                            this.codecType >= n.default.VIDEO_264_START &&
                            this.codecType <= n.default.VIDEO_H264_END
                          );
                        },
                      },
                      {
                        key: 'isH265VideoStream',
                        get: function () {
                          return (
                            this.isVideoStream &&
                            this.codecType >= n.default.VIDEO_265_START &&
                            this.codecType <= n.default.VIDEO_H265_END
                          );
                        },
                      },
                      {
                        key: 'videoTypeId',
                        get: function () {
                          return (this.appid << 24) | (this.streamType << 16) | this.codecType;
                        },
                      },
                      {
                        key: 'hashKey',
                        get: function () {
                          return (
                            4294967296 * this.sid +
                            ((this.codecType << 16) | (this.appid << 8) | this.streamType)
                          );
                        },
                      },
                      {
                        key: 'streamId',
                        get: function () {
                          return (
                            281474976710656 * this.streamType +
                            4294967296 * this.codecType +
                            this.startTs
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = h;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.ip = 0),
                      (this.tcpPorts = []),
                      (this.udpPorts = []),
                      (this.videoProxyInfo = new Map());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return (
                            'number' == typeof this.ip
                              ? e.pushUInt32(this.ip)
                              : e.pushUInt32(this.ip2uint(this.ip)),
                            e.pushUInt16Vector(this.tcpPorts),
                            e.pushUInt16Vector(this.udpPorts),
                            e.pushUInt32(this.videoProxyInfo.size),
                            this.videoProxyInfo.forEach(function (t, i) {
                              e.pushUInt8(i), e.pushUInt32(t);
                            }),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.ip = this.uint2ip(e.popUInt32())),
                            (this.tcpPorts = e.popUInt16Vector()),
                            (this.udpPorts = e.popUInt16Vector()),
                            this.videoProxyInfo.clear();
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = e.popUInt8(),
                              r = e.popUInt32();
                            this.videoProxyInfo.set(s, r);
                          }
                          return this;
                        },
                      },
                      {
                        key: 'ip2uint',
                        value: function (e) {
                          for (var t = 0, i = e.split('.'), s = 0; s < i.length; s++)
                            t |= Number(i[s]) << (8 * s);
                          return t < 0 && (t += 4294967296), t;
                        },
                      },
                      {
                        key: 'uint2ip',
                        value: function (e) {
                          return (
                            (255 & e) +
                            '.' +
                            ((e >> 8) & 255) +
                            '.' +
                            ((e >> 16) & 255) +
                            '.' +
                            ((e >> 24) & 255)
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              function s(e, t, i) {
                return (
                  t in e
                    ? Object.defineProperty(e, t, {
                        value: i,
                        enumerable: !0,
                        configurable: !0,
                        writable: !0,
                      })
                    : (e[t] = i),
                  e
                );
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              function s(e) {
                var t = {};
                function i(s) {
                  if (t[s]) return t[s].exports;
                  var r = (t[s] = { i: s, l: !1, exports: {} });
                  return e[s].call(r.exports, r, r.exports, i), (r.l = !0), r.exports;
                }
                (i.m = e),
                  (i.c = t),
                  (i.i = function (e) {
                    return e;
                  }),
                  (i.d = function (e, t, s) {
                    i.o(e, t) ||
                      Object.defineProperty(e, t, { configurable: !1, enumerable: !0, get: s });
                  }),
                  (i.r = function (e) {
                    Object.defineProperty(e, '__esModule', { value: !0 });
                  }),
                  (i.n = function (e) {
                    var t =
                      e && e.__esModule
                        ? function () {
                            return e.default;
                          }
                        : function () {
                            return e;
                          };
                    return i.d(t, 'a', t), t;
                  }),
                  (i.o = function (e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t);
                  }),
                  (i.p = '/'),
                  (i.oe = function (e) {
                    throw (console.error(e), e);
                  });
                var s = i((i.s = ENTRY_MODULE));
                return s.default || s;
              }
              function r(e) {
                return (e + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
              }
              function a(e, t, s) {
                var a = {};
                a[s] = [];
                var n = t.toString(),
                  o = n.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
                if (!o) return a;
                for (
                  var h,
                    u = o[1],
                    d = new RegExp(
                      '(\\\\n|\\W)' +
                        r(u) +
                        '\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',
                      'g',
                    );
                  (h = d.exec(n));

                )
                  'dll-reference' !== h[3] && a[s].push(h[3]);
                for (
                  d = new RegExp(
                    '\\(' +
                      r(u) +
                      '\\("(dll-reference\\s([\\.|\\-|\\+|\\w|/|@]+))"\\)\\)\\(\\s*(/\\*.*?\\*/)?\\s*.*?([\\.|\\-|\\+|\\w|/|@]+).*?\\)',
                    'g',
                  );
                  (h = d.exec(n));

                )
                  e[h[2]] || (a[s].push(h[1]), (e[h[2]] = i(h[1]).m)),
                    (a[h[2]] = a[h[2]] || []),
                    a[h[2]].push(h[4]);
                for (var c, l = Object.keys(a), p = 0; p < l.length; p++)
                  for (var f = 0; f < a[l[p]].length; f++)
                    (c = a[l[p]][f]), isNaN(1 * c) || (a[l[p]][f] = 1 * a[l[p]][f]);
                return a;
              }
              function n(e) {
                return Object.keys(e).reduce(function (t, i) {
                  return t || e[i].length > 0;
                }, !1);
              }
              e.exports = function (e, t) {
                t = t || {};
                var r = { main: i.m },
                  o = t.all
                    ? { main: Object.keys(r.main) }
                    : (function (e, t) {
                        for (var i = { main: [t] }, s = { main: [] }, r = { main: {} }; n(i); )
                          for (var o = Object.keys(i), h = 0; h < o.length; h++) {
                            var u = o[h],
                              d = i[u].pop();
                            if (((r[u] = r[u] || {}), !r[u][d] && e[u][d])) {
                              (r[u][d] = !0), (s[u] = s[u] || []), s[u].push(d);
                              for (
                                var c = a(e, e[u][d], u), l = Object.keys(c), p = 0;
                                p < l.length;
                                p++
                              )
                                (i[l[p]] = i[l[p]] || []), (i[l[p]] = i[l[p]].concat(c[l[p]]));
                            }
                          }
                        return s;
                      })(r, e),
                  h = '';
                Object.keys(o)
                  .filter(function (e) {
                    return 'main' !== e;
                  })
                  .forEach(function (e) {
                    for (var t = 0; o[e][t]; ) t++;
                    o[e].push(t),
                      (r[e][t] =
                        '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })'),
                      (h =
                        h +
                        'var ' +
                        e +
                        ' = (' +
                        s.toString().replace('ENTRY_MODULE', JSON.stringify(t)) +
                        ')({' +
                        o[e]
                          .map(function (t) {
                            return JSON.stringify(t) + ': ' + r[e][t].toString();
                          })
                          .join(',') +
                        '});\n');
                  }),
                  (h =
                    h +
                    'new ((' +
                    s.toString().replace('ENTRY_MODULE', JSON.stringify(e)) +
                    ')({' +
                    o.main
                      .map(function (e) {
                        return JSON.stringify(e) + ': ' + r.main[e].toString();
                      })
                      .join(',') +
                    '}))(self);');
                var u = new window.Blob([h], { type: 'text/javascript' });
                if (t.bare) return u;
                var d = (
                    window.URL ||
                    window.webkitURL ||
                    window.mozURL ||
                    window.msURL
                  ).createObjectURL(u),
                  c = new window.Worker(d);
                return (c.objectURL = d), c;
              };
            },
            function (e, t, i) {
              e.exports = i(82);
            },
            function (e, t, i) {
              e.exports = (function (e) {
                var t = {};
                function i(s) {
                  if (t[s]) return t[s].exports;
                  var r = (t[s] = { i: s, l: !1, exports: {} });
                  return e[s].call(r.exports, r, r.exports, i), (r.l = !0), r.exports;
                }
                return (
                  (i.m = e),
                  (i.c = t),
                  (i.d = function (e, t, s) {
                    i.o(e, t) || Object.defineProperty(e, t, { enumerable: !0, get: s });
                  }),
                  (i.r = function (e) {
                    'undefined' != typeof Symbol &&
                      Symbol.toStringTag &&
                      Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
                      Object.defineProperty(e, '__esModule', { value: !0 });
                  }),
                  (i.t = function (e, t) {
                    if ((1 & t && (e = i(e)), 8 & t)) return e;
                    if (4 & t && 'object' == typeof e && e && e.__esModule) return e;
                    var s = Object.create(null);
                    if (
                      (i.r(s),
                      Object.defineProperty(s, 'default', { enumerable: !0, value: e }),
                      2 & t && 'string' != typeof e)
                    )
                      for (var r in e)
                        i.d(
                          s,
                          r,
                          function (t) {
                            return e[t];
                          }.bind(null, r),
                        );
                    return s;
                  }),
                  (i.n = function (e) {
                    var t =
                      e && e.__esModule
                        ? function () {
                            return e.default;
                          }
                        : function () {
                            return e;
                          };
                    return i.d(t, 'a', t), t;
                  }),
                  (i.o = function (e, t) {
                    return Object.prototype.hasOwnProperty.call(e, t);
                  }),
                  (i.p = ''),
                  i((i.s = 0))
                );
              })([
                function (e, t, i) {
                  'use strict';
                  function s(e, t) {
                    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
                  }
                  function r(e, t) {
                    for (var i = 0; i < t.length; i++) {
                      var s = t[i];
                      (s.enumerable = s.enumerable || !1),
                        (s.configurable = !0),
                        'value' in s && (s.writable = !0),
                        Object.defineProperty(e, s.key, s);
                    }
                  }
                  function a(e, t, i) {
                    return t && r(e.prototype, t), i && r(e, i), e;
                  }
                  function n(e, t) {
                    (null == t || t > e.length) && (t = e.length);
                    for (var i = 0, s = new Array(t); i < t; i++) s[i] = e[i];
                    return s;
                  }
                  function o(e, t) {
                    var i = e.toString().length,
                      s = Math.max(0, t - i),
                      r = '';
                    if (s > 0) for (var a = 0; a < s; a++) r += '0';
                    return r + e;
                  }
                  function h() {
                    var e = new Date(),
                      t = e.getFullYear(),
                      i = o(e.getMonth() + 1, 2),
                      s = o(e.getDate(), 2),
                      r = o(e.getHours(), 2),
                      a = o(e.getMinutes(), 2),
                      n = o(e.getSeconds(), 2);
                    return (
                      '[' +
                      ''
                        .concat(t, '-')
                        .concat(i, '-')
                        .concat(s, ' ')
                        .concat(r, ':')
                        .concat(a, ':')
                        .concat(n) +
                      '.' +
                      o(e.getMilliseconds(), 3) +
                      '][w265]'
                    );
                  }
                  i.r(t);
                  var u = [];
                  function d() {
                    for (var e, t = h(), i = arguments.length, s = new Array(i), r = 0; r < i; r++)
                      s[r] = arguments[r];
                    (s[0] = t + s[0]),
                      self.logCallback
                        ? (e = self.logCallback).call.apply(e, [null].concat(s))
                        : u.push(s);
                  }
                  var c = (function () {
                      function e(t, i) {
                        s(this, e),
                          (this.width = t),
                          (this.height = i),
                          (this.stridey = this.width),
                          (this.strideu = this.stridey / 2),
                          (this.stridev = this.stridey / 2);
                      }
                      return (
                        a(e, [
                          {
                            key: 'calc',
                            value: function (e) {
                              for (
                                var t = new Uint8Array(this.stridey * this.height).fill(
                                    128,
                                    0,
                                    this.stridey * this.height,
                                  ),
                                  i = new Uint8Array(this.strideu * this.height).fill(
                                    128,
                                    0,
                                    this.strideu * this.height,
                                  ),
                                  s = new Uint8Array(this.stridev * this.height).fill(
                                    128,
                                    0,
                                    this.stridev * this.height,
                                  ),
                                  r = new Uint8Array(this.width * this.height * 4),
                                  a = 1e3 * window.performance.now(),
                                  n = 0;
                                n < e;
                                n++
                              )
                                this.convertYUV420(
                                  t,
                                  i,
                                  s,
                                  this.width,
                                  this.height,
                                  this.stridey,
                                  this.strideu,
                                  this.stridev,
                                  r,
                                );
                              return 1e3 * window.performance.now() - a;
                            },
                          },
                          {
                            key: 'convertYUV420',
                            value: function (e, t, i, s, r, a, n, o, h) {
                              for (
                                var u,
                                  d,
                                  c,
                                  l,
                                  p,
                                  f = 0,
                                  m = 0,
                                  _ = s >> 1,
                                  v = _ * r,
                                  y = 0,
                                  S = 0,
                                  g = 0,
                                  T = 0;
                                T < v;
                                T++
                              )
                                (p = T << 1),
                                  (u = 1.164 * (e[y + (l = f << 1)] - 16)),
                                  (d = t[S + f] - 128),
                                  (c = i[g + f] - 128),
                                  (h[0 + (p << 2)] = u + 1.596 * c),
                                  (h[1 + (p << 2)] = u - 0.813 * c - 0.391 * d),
                                  (h[2 + (p << 2)] = u + 2.018 * d),
                                  (h[3 + (p << 2)] = 255),
                                  (u = 1.164 * (e[y + l + 1] - 16)),
                                  (h[0 + ((p + 1) << 2)] = u + 1.596 * c),
                                  (h[1 + ((p + 1) << 2)] = u - 0.813 * c - 0.391 * d),
                                  (h[2 + ((p + 1) << 2)] = u + 2.018 * d),
                                  (h[3 + ((p + 1) << 2)] = 255),
                                  ++f === _ &&
                                    ((f = 0), (y += a), (S = (++m >> 1) * n), (g = (m >> 1) * o));
                            },
                          },
                        ]),
                        e
                      );
                    })(),
                    l = (function () {
                      function e() {
                        s(this, e);
                      }
                      return (
                        a(e, null, [
                          {
                            key: 'isSupportWasm',
                            value: function () {
                              return 'object' == typeof WebAssembly;
                            },
                          },
                          {
                            key: 'isSupportWasmThread',
                            value: function () {
                              if (
                                'undefined' == typeof SharedArrayBuffer ||
                                'undefined' == typeof Atomics
                              )
                                return (
                                  d('hevcd', 'SharedArrayBuffer undefined or Atomics undefined'), !1
                                );
                              var e =
                                new WebAssembly.Memory({ initial: 1, maximum: 1, shared: !0 })
                                  .buffer instanceof SharedArrayBuffer;
                              return self.SharedArrayBuffer && self.Atomics && e;
                            },
                          },
                        ]),
                        e
                      );
                    })(),
                    p = (function () {
                      function e() {
                        s(this, e),
                          (this.cla = 'hevcd'),
                          (this.configs = null),
                          (this.costUs = 0),
                          (this.reason = 0),
                          (this.cores = navigator.hardwareConcurrency),
                          (this.is64bit = this.is64bitSoftware()),
                          (this.enableCost = !0);
                      }
                      return (
                        a(e, [
                          {
                            key: 'parseConfigs',
                            value: function (e) {
                              (this.configs = e),
                                d(
                                  this.cla,
                                  'parse',
                                  JSON.stringify(e),
                                  'cfg',
                                  this.configs.enableWebH265,
                                );
                            },
                          },
                          {
                            key: 'isSupportH265',
                            value: function (e, t) {
                              if (null == this.configs)
                                return d(this.cla, 'isSupportH265 configs==null'), !1;
                              this.reason = 0;
                              var i =
                                this.isConfigEnable() &&
                                this.isCPUCoresSatisfy(t) &&
                                this.isWasm() &&
                                this.isBitrateInRange(t) &&
                                this.isCostInRange(t);
                              return (
                                d(
                                  this.cla,
                                  'isSupportH265',
                                  i,
                                  'kbps=',
                                  t,
                                  'costUs',
                                  this.costUs.toFixed(0),
                                  'cores',
                                  this.cores,
                                  '64b',
                                  this.is64bit,
                                  'reason',
                                  this.reason,
                                  'version',
                                  e,
                                  'cfg',
                                  JSON.stringify(this.configs),
                                ),
                                d('ua:', navigator.userAgent),
                                {
                                  isSupport: i,
                                  costUs: this.costUs.toFixed(0),
                                  reason: this.reason,
                                }
                              );
                            },
                          },
                          {
                            key: 'isWasm',
                            value: function () {
                              return !!l.isSupportWasm() || ((this.reason = 7), !1);
                            },
                          },
                          {
                            key: 'isConfigEnable',
                            value: function () {
                              return !(
                                !this.hasOwnProperty('enableWebH265') ||
                                (1 != this.configs.enableWebH265 && ((this.reason = 1), 1))
                              );
                            },
                          },
                          {
                            key: 'isCPUCoresSatisfy',
                            value: function (e) {
                              if (this.hasOwnProperty('core')) {
                                var t = this.configs.core[2e3];
                                if (
                                  (this.configs.core.hasOwnProperty(e) &&
                                    (t = this.configs.core[e]),
                                  this.cores > t)
                                )
                                  return !0;
                              } else if (this.cores > 4) return !0;
                              return (this.reason = 2), !1;
                            },
                          },
                          {
                            key: 'is64bitSoftware',
                            value: function () {
                              return (
                                -1 != navigator.userAgent.indexOf('Macintosh') ||
                                -1 != navigator.userAgent.indexOf('x64')
                              );
                            },
                          },
                          {
                            key: 'isBitrateInRange',
                            value: function (e) {
                              return l.isSupportWasmThread()
                                ? !(
                                    !this.hasOwnProperty('multiThreadBitKbps') ||
                                    ((e >= 4e3 || 0 == e) && !this.checkX86(e)
                                      ? ((this.reason = 4), 1)
                                      : (!Array.isArray(this.configs.multiThreadBitKbps) ||
                                          !this.configs.multiThreadBitKbps.includes(e)) &&
                                        ((this.reason = 3), 1))
                                  )
                                : ((this.reason = 6), !1);
                            },
                          },
                          {
                            key: 'checkX86',
                            value: function (e) {
                              if (this.is64bit) return !0;
                              if (!this.hasOwnProperty('x86')) return !1;
                              var t = !1;
                              return (
                                this.configs.x86.hasOwnProperty(e) &&
                                  (t = 1 == this.configs.x86[e]),
                                t
                              );
                            },
                          },
                          {
                            key: 'isCostInRange',
                            value: function (e) {
                              if (!this.enableCost) return !0;
                              if (!this.hasOwnProperty('baseCostUs')) return !1;
                              var t = this.configs.baseCostUs[2e3];
                              return (
                                this.configs.baseCostUs.hasOwnProperty(e) &&
                                  (t = this.configs.baseCostUs[e]),
                                (this.costUs = this.getCost()),
                                this.costUs <= t || ((this.reason = 5), !1)
                              );
                            },
                          },
                          {
                            key: 'getCost',
                            value: function () {
                              var e = this;
                              if (!this.hasOwnProperty('loopCount'))
                                return (
                                  d(this.cla, 'getCost configs==null or has no key=loopCount'), 0
                                );
                              var t = 0;
                              return (
                                localStorage.hasOwnProperty('w265LastCost') &&
                                  (t = Number(localStorage.w265LastCost)),
                                this.sid && clearTimeout(this.sid),
                                (this.sid = setTimeout(function () {
                                  var t = new c(120, 120);
                                  localStorage.w265LastCost = Math.floor(
                                    t.calc(e.configs.loopCount),
                                  );
                                }, 5e3)),
                                t
                              );
                            },
                          },
                          {
                            key: 'hasOwnProperty',
                            value: function (e) {
                              return !!this.configs.hasOwnProperty(e) || ((this.reason = 1), !1);
                            },
                          },
                        ]),
                        e
                      );
                    })(),
                    f = (function () {
                      function e() {
                        s(this, e), (this.configMgr = new p());
                      }
                      return (
                        a(
                          e,
                          [
                            {
                              key: 'parseConfigs',
                              value: function (e) {
                                this.configMgr.parseConfigs(e);
                              },
                            },
                            {
                              key: 'isSupportH265',
                              value: function (e) {
                                return this.configMgr.isSupportH265(this.version(), e);
                              },
                            },
                            {
                              key: 'version',
                              value: function () {
                                return '1.5.3';
                              },
                            },
                            {
                              key: 'setLogCallback',
                              value: function (e) {
                                var t;
                                (t = e),
                                  (self.logCallback = t),
                                  d('Logger setLogCallback'),
                                  u.length > 0 &&
                                    (u.forEach(function (e) {
                                      var t;
                                      (t = self.logCallback).call.apply(
                                        t,
                                        [null].concat(
                                          (function (e) {
                                            return (
                                              (function (e) {
                                                if (Array.isArray(e)) return n(e);
                                              })(e) ||
                                              (function (e) {
                                                if (
                                                  'undefined' != typeof Symbol &&
                                                  Symbol.iterator in Object(e)
                                                )
                                                  return Array.from(e);
                                              })(e) ||
                                              (function (e, t) {
                                                if (e) {
                                                  if ('string' == typeof e) return n(e, t);
                                                  var i = Object.prototype.toString
                                                    .call(e)
                                                    .slice(8, -1);
                                                  return (
                                                    'Object' === i &&
                                                      e.constructor &&
                                                      (i = e.constructor.name),
                                                    'Map' === i || 'Set' === i
                                                      ? Array.from(i)
                                                      : 'Arguments' === i ||
                                                        /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(
                                                          i,
                                                        )
                                                      ? n(e, t)
                                                      : void 0
                                                  );
                                                }
                                              })(e) ||
                                              (function () {
                                                throw new TypeError(
                                                  'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                                                );
                                              })()
                                            );
                                          })(e),
                                        ),
                                      );
                                    }),
                                    (u.length = 0));
                              },
                            },
                            {
                              key: 'isStripe',
                              value: function () {
                                return -1 !== navigator.userAgent.indexOf('Windows');
                              },
                            },
                          ],
                          [
                            {
                              key: 'getInstance',
                              value: function () {
                                return this.instance || (this.instance = new e()), this.instance;
                              },
                            },
                          ],
                        ),
                        e
                      );
                    })();
                  t.default = f;
                },
              ]).default;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(14),
                n = i(13),
                o = i(52),
                h = i(5),
                u = i(1),
                d = i(20),
                c = i(22),
                l = i(54),
                p = !!Number(localStorage._printProtocol),
                f = !!Number(localStorage._printGateway),
                m = (function (e) {
                  Object(a.a)(o, e);
                  var t = Object(n.a)(o);
                  function o() {
                    var e;
                    return (
                      Object(s.a)(this, o),
                      ((e = t.call(this)).WEBSOCKET_CONNECTED = 'WEBSOCKET_CONNECTED'),
                      (e.WEBSOCKET_CLOSED = 'WEBSOCKET_CLOSED'),
                      (e.WEBSOCKET_ERROR = 'WEBSOCKET_ERROR'),
                      (e.TAFLINK_INITED = 'TAFLINK_INITED'),
                      (e._taf = null),
                      (e.delayWup = []),
                      (e.delayListener = []),
                      (e.streamName = null),
                      (e.requestId = 1),
                      e
                    );
                  }
                  return (
                    Object(r.a)(o, [
                      {
                        key: 'getRequestId',
                        value: function () {
                          return (
                            this.requestId++,
                            1e5 === this.requestId && (this.requestId = 1),
                            this.requestId
                          );
                        },
                      },
                      {
                        key: 'getTaf',
                        value: function () {
                          return this._taf;
                        },
                      },
                      {
                        key: 'setTafHandler',
                        value: function (e) {
                          var t = h.a.now();
                          u.a.log('%c[TIME] initTafTime=' + t, 'color:#A23400;background:#FFF5C2'),
                            e.getTaf && d.default.setTaf(e.getTaf()),
                            e.registerUriMap(v.UriMapping),
                            e.registerWupMap(v.WupMapping),
                            (this._taf = e),
                            this._taf.connected
                              ? this._onConnected()
                              : this._taf.addListener(
                                  this.WEBSOCKET_CONNECTED,
                                  this._onConnected.bind(this),
                                ),
                            this.emit(this.TAFLINK_INITED);
                        },
                      },
                      {
                        key: '_onConnected',
                        value: function () {
                          u.a.log(
                            'TafLink._onConnected sendWup size='.concat(this.delayWup.length),
                          );
                          var e = this;
                          this.delayWup.forEach(function (t) {
                            var i = t.servantName,
                              s = t.funcName,
                              r = t.data,
                              a = t.callback,
                              n = t.once,
                              o = t.iRequestId,
                              h = t.noTid;
                            e.sendWup(i, s, r, a, n, o, h);
                          }),
                            (this.delayWup = []),
                            this.delayListener.forEach(function (t) {
                              var i = t.p0,
                                s = t.p1,
                                r = t.p2;
                              switch (i) {
                                case 'add':
                                  e.addListener(s, r);
                                  break;
                                case 'remove':
                                  e.removeListener(s, r);
                                  break;
                                case 'dispatch':
                                  e.dispatch(s, r);
                              }
                            }),
                            (this.delayListener = []);
                        },
                      },
                      {
                        key: 'getUserId',
                        value: function () {
                          return this._taf.getUserId();
                        },
                      },
                      {
                        key: 'sendWup',
                        value: function (e, t, i) {
                          var s =
                              arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                            r = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4],
                            a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : -1,
                            n = arguments.length > 6 && void 0 !== arguments[6] && arguments[6];
                          if (!this.connected)
                            return (
                              u.a.log('TafLink.sendWup connected=false', e, t),
                              void this.delayWup.push({
                                servantName: e,
                                funcName: t,
                                data: i,
                                callback: s,
                                once: r,
                                iRequestId: a,
                                noTid: n,
                              })
                            );
                          this._taf.sendWup2
                            ? this._taf.sendWup2(e, t, i, s, r, a, n)
                            : this._taf.sendWup(e, t, i, s, r, a, n);
                        },
                      },
                      {
                        key: 'getInfoFromVG',
                        value: function (e, t, i, s) {
                          if (this._taf) {
                            var r = this._taf.getTaf().BinBuffer,
                              a = new d.default.GetInfoFromVGReq();
                            (a.lUid = e),
                              (a.sMsg = new r(i.marshall().buffer)),
                              (a.sProtoName = 'yy'),
                              (a.iUri = t),
                              (a.tId = this.getUserId()),
                              this.sendWup(
                                'videogateway',
                                'getInfoFromVG',
                                a,
                                function (e) {
                                  s(e);
                                },
                                !0,
                              );
                          } else u.a.warn('TafLink.sendYY taf not init!');
                        },
                      },
                      {
                        key: 'sendYY',
                        value: function (e, t) {
                          var s =
                              arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                            r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3],
                            a = !(arguments.length > 4 && void 0 !== arguments[4]) || arguments[4];
                          if (this._taf) {
                            var n = e.constructor.name,
                              o = c.a[n];
                            o ||
                              'function' != typeof e.marshall ||
                              (o = new DataView(e.marshall().buffer).getUint32(4, !0)),
                              p && u.a.log('%c>>>>>>> ' + n, _('#009100'), 'uri=' + o, e);
                            var h = null,
                              m = 'mediaui',
                              v = 'getInfoFromVGM';
                            if ('function' == typeof this._taf.packVGInfo)
                              h = this._taf.packVGInfo(o, e, this.streamName);
                            else {
                              var y = this._taf.getTaf().BinBuffer;
                              (m = 'videogateway'),
                                (v = a ? 'getInfoFromCdnVG' : 'getInfoFromVG'),
                                ((h = new d.default.GetInfoFromVGReq()).lUid = s || 0),
                                (h.sMsg = new y(e.marshall().buffer)),
                                (h.sProtoName = 'yy'),
                                (h.iUri = o || 0),
                                (h.lSid = 0),
                                (h.tId = this.getUserId());
                            }
                            this.sendWup(
                              m,
                              v,
                              h,
                              function (s) {
                                if (0 != s.sMsg.len) {
                                  if (!s.lUid || !h.lUid || s.lUid == h.lUid) {
                                    var r = new DataView(s.sMsg.buffer),
                                      o = new l.a(r);
                                    if (!(n = c.a[o.uri]))
                                      throw (
                                        (f ||
                                          u.a.log(
                                            '%c<<<<<<< %crspWup:%c GetInfoFromVG',
                                            _('#0000E3'),
                                            _('black'),
                                            _('#0000E3'),
                                            'videogateway',
                                            s,
                                          ),
                                        new Error(
                                          '[x] Unmatched protocol, uri='
                                            .concat(o.uri >> 8, ' resCode=')
                                            .concat(o.resCode, ' len=')
                                            .concat(o.len),
                                        ))
                                      );
                                    var d = o,
                                      m = null;
                                    try {
                                      m = a ? i(77)('./' + n).default : i(78)('./' + n).default;
                                    } catch (e) {
                                      u.a.warn('[x] Unmatched protocol', o.uri >> 8, n);
                                    }
                                    m && (d = new m()).unmarshall(o),
                                      p && u.a.log('%c<<<<<<< ' + n, _('#0000E3'), d),
                                      'function' == typeof t ? t(d) : this.dispatch(o.uri, d);
                                  }
                                } else u.a.warn('GetInfoFromVG response an empty pkg.', e, h, s);
                              }.bind(this),
                              r,
                            );
                          } else u.a.warn('TafLink.sendYY taf not init!');
                        },
                      },
                      {
                        key: 'addListener',
                        value: function (e, t) {
                          this.connected
                            ? this._taf.addListener(e, t)
                            : this.delayListener.push({ p0: 'add', p1: e, p2: t });
                        },
                      },
                      {
                        key: 'removeListener',
                        value: function (e, t) {
                          this.connected
                            ? this._taf.removeListener(e, t)
                            : this.delayListener.push({ p0: 'remove', p1: e, p2: t });
                        },
                      },
                      {
                        key: 'dispatch',
                        value: function (e, t) {
                          this.connected
                            ? this._taf.dispatch(e, t)
                            : this.delayListener.push({ p0: 'dispatch', p1: e, p2: t });
                        },
                      },
                      {
                        key: 'inited',
                        get: function () {
                          return !!this._taf;
                        },
                      },
                      {
                        key: 'connected',
                        get: function () {
                          return this._taf && this._taf.connected;
                        },
                      },
                    ]),
                    o
                  );
                })(o.EventEmitter);
              function _(e, t, i) {
                var s = 'font-weight:900';
                return (
                  e && (s += ';color:' + e),
                  t && (s += ';background:' + t),
                  i && (s += ';border:3px solid ' + i),
                  s
                );
              }
              var v = {
                  UriMapping: {
                    8102: d.default.LivingStreamInfoNotice,
                    8103: d.default.LivingStreamEndNotice,
                    1025601: d.default.LiveMeetingSyncNotice,
                    1400200: d.default.ImgplusABTestNotice,
                  },
                  WupMapping: {
                    getInfoFromVG: d.default.GetInfoFromVGRsp,
                    GetInfoFromVG: d.default.GetInfoFromVGRsp,
                    getInfoFromCdnVG: d.default.GetInfoFromVGRsp,
                    getCdnTokenInfoEx: d.default.GetCdnTokenExRsp,
                    getLivingStreamInfo: d.default.GetLivingStreamInfoRsp,
                    getP2PStreamInfo: d.default.GetP2PStreamInfoRsp,
                    getP2PStreamTokenInfoEx: d.default.GetP2PStreamTokenExRsp,
                    queryHttpDns: d.default.QueryHttpDnsRsp,
                    loginVerify: d.default.LoginVerifyRsp,
                    joinGroup: d.default.JoinMediaGroupRsp,
                    quitGroup: d.default.QuitMediaGroupRsp,
                    wsTimeSync: d.default.WSTimeSyncRsp,
                    onClientGetStunAndPcdnProxyReq: d.default.ClientGetStunAndPcdnProxyRsp,
                    clientQueryPcdnSchedule: d.default.ClientQueryPcdnScheduleRsp,
                    onClientGetPcdnFlvOutsideSdkFullstreamInfo:
                      d.default.ClientGetPcdnFlvOutsideSdkFullstreamInfoRsp,
                    onClientGetPcdnFlvHttpFullstreamInfo:
                      d.default.ClientGetPcdnFlvHttpFullstreamInfoRsp,
                    onClientGetVodPcdnProxyReq: d.default.ClientGetVodPcdnProxyReqRsp,
                    getMediaRec: d.default.RecSysRsp,
                    getStreamInfoByRoomFake: d.default.GetStreamInfoByRoomFakeRsp,
                  },
                  NoLog: {
                    8102: 1,
                    8103: 1,
                    1025601: 1,
                    getInfoFromVG: 1,
                    GetInfoFromVG: 1,
                    getInfoFromCdnVG: 1,
                    getInfoFromVGM: 1,
                    getCdnTokenInfoEx: 1,
                    videoClientReport: 1,
                  },
                },
                y = new m();
              t.default = y;
            },
            function (e, t, i) {
              'use strict';
              i.r(t),
                (t.default = {
                  STREAM_VIDEO_RAW: 0,
                  STREAM_VIDEO_TRANSCODE: 1,
                  STREAM_VIDEO_RTMP_RAW: 2,
                  STREAM_VIDEO_RTMP_TRANSCODE: 3,
                  STRAEM_TYPE_AUDIO_START: 32,
                  STREAM_AUDIO_RAW: 32,
                  STREAM_AUDIO_TRANSCODE: 33,
                  STREAM_AUDIO_FLV_RAW: 34,
                  STREAM_AUDIO_FLV_TRANSCODE: 35,
                  STREAM_AUDIO_RTMP_RAW: 36,
                  STREAM_AUDIO_RTMP_TRANSCODE: 37,
                  STREAM_AUDIO_ALL_SID: 39,
                  STREAM_TYPE_UNKNOWN: 255,
                });
            },
            function (e, t, i) {
              'use strict';
              function s(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var i = 0, s = new Array(t); i < t; i++) s[i] = e[i];
                return s;
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              'use strict';
              var s = {
                buildAbsoluteURL: function (e, t) {
                  if (((t = t.trim()), /^[a-z]+:/i.test(t))) return t;
                  var i = null,
                    r = null,
                    a = /^([^#]*)(.*)$/.exec(t);
                  a && ((r = a[2]), (t = a[1]));
                  var n = /^([^\?]*)(.*)$/.exec(t);
                  n && ((i = n[2]), (t = n[1]));
                  var o = /^([^#]*)(.*)$/.exec(e);
                  o && (e = o[1]);
                  var h = /^([^\?]*)(.*)$/.exec(e);
                  h && (e = h[1]);
                  var u = /^((([a-z]+):)?\/\/[a-z0-9\.-]+(:[0-9]+)?\/)(.*)$/i.exec(e),
                    d = u[3],
                    c = u[1],
                    l = u[5],
                    p = null;
                  return (
                    (p = /^\/\//.test(t)
                      ? d + '://' + s.buildAbsolutePath('', t.substring(2))
                      : /^\//.test(t)
                      ? c + s.buildAbsolutePath('', t.substring(1))
                      : c + s.buildAbsolutePath(l, t)),
                    i && (p += i),
                    r && (p += r),
                    p
                  );
                },
                buildAbsolutePath: function (e, t) {
                  for (
                    var i,
                      s,
                      r = t,
                      a = '',
                      n = e.replace(/[^\/]*$/, r.replace(/(\/|^)(?:\.?\/+)+/g, '$1')),
                      o = 0;
                    (s = n.indexOf('/../', o)) > -1;
                    o = s + i
                  )
                    (i = /^\/(?:\.\.\/)*/.exec(n.slice(s))[0].length),
                      (a = (a + n.substring(o, s)).replace(
                        new RegExp('(?:\\/+[^\\/]*){0,' + (i - 1) / 3 + '}$'),
                        '/',
                      ));
                  var h = /\.\.\//g;
                  if (h.test(t)) {
                    var u = e.split('/'),
                      d = t.match(h).length;
                    a = u.splice(0, u.length - 1 - d);
                    var c = n.substr(o);
                    return c.startsWith('/') ? a.join('/') + c : a.join('/') + '/' + c;
                  }
                  return a + n.substr(o);
                },
                getTimeFromUrl: function (e, t) {
                  var i = t ? /\d+_(\d+)_\d+.ts?/ : /(\d+)_\d+_\d+.ts?/,
                    s = e.match(i);
                  return s ? (t ? s[1] : Math.round(s[1] / 1e3)) : -1;
                },
                getVodUrl: function (e, t, i, s) {
                  return (
                    'http://106.38.255.95:9123/xcrs/' + e + '_' + t + '_' + i + '.m3u8?btime=' + s
                  );
                },
              };
              e.exports = s;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(31),
                n = i(33),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.streamId = new a.default()),
                      (this.videoProxyInfos = []),
                      (this.token = ''),
                      (this.streamSeqSN = 0),
                      (this.quickAccessBeginIndex = 0),
                      (this.quickAccessEndIndex = 0),
                      (this.ip = 0),
                      (this.urlTokenTime = 0),
                      (this.urlToken = '');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          this.streamId.unmarshall(e), (this.videoProxyInfos = []);
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = new n.default();
                            this.videoProxyInfos.push(s.unmarshall(e));
                          }
                          return (
                            (this.token = e.popString()),
                            (this.streamSeqSN = e.popUInt64()),
                            (this.quickAccessBeginIndex = e.popUInt64()),
                            (this.quickAccessEndIndex = e.popUInt64()),
                            (this.ip = e.popUInt32()),
                            (this.urlTokenTime = e.popUInt32()),
                            (this.urlToken = e.popString()),
                            this
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = i(31),
                o = i(33),
                h = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.currentProxyInfos = new Map());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return (
                            e.pushUInt32(this.currentProxyInfos.size),
                            this.currentProxyInfos.forEach(function (t, i) {
                              e.pushUint8ArrayWithoutLen(i.marshall()),
                                e.pushUInt32(t.length),
                                t.forEach(function (t) {
                                  e.pushUint8ArrayWithoutLen(t.marshall());
                                });
                            }),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          this.currentProxyInfos.clear();
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = new n.default();
                            s.unmarshall(e);
                            for (var r = [], a = e.popUInt32(), h = 0; h < a; h++) {
                              var u = new o.default();
                              r.push(u.unmarshall(e));
                            }
                            this.currentProxyInfos.set(s, r);
                          }
                          return this;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = h;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = i(34),
                o = i(35),
                h = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.currentProxyInfos = new Map());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return (
                            e.pushUInt32(this.currentProxyInfos.size),
                            this.currentProxyInfos.forEach(function (t, i) {
                              e.pushUint8ArrayWithoutLen(i.marshall()),
                                e.pushUInt32(t.length),
                                t.forEach(function (t) {
                                  e.pushUint8ArrayWithoutLen(t.marshall());
                                });
                            }),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          this.currentProxyInfos.clear();
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = new n.default();
                            s.unmarshall(e);
                            for (var r = [], a = e.popUInt32(), h = 0; h < a; h++) {
                              var u = new o.default();
                              r.push(u.unmarshall(e));
                            }
                            this.currentProxyInfos.set(s, r);
                          }
                          return this;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = h;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.h264Only = !1),
                      (this.maxCodeRateH264 = 0),
                      (this.maxCodeRateH265 = 0),
                      (this.reserve = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return (
                            e.pushBool(this.h264Only),
                            e.pushUInt16(this.maxCodeRateH264),
                            e.pushUInt16(this.maxCodeRateH265),
                            e.pushUInt32(this.reserve),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          return (
                            (this.h264Only = e.popBool()),
                            (this.maxCodeRateH264 = e.popUInt16()),
                            (this.maxCodeRateH265 = e.popUInt16()),
                            (this.reserve = e.popUInt32()),
                            this
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(34),
                n = i(35),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.streamId = new a.default()),
                      (this.videoProxyInfos = []),
                      (this.token = '');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          this.streamId.unmarshall(e), (this.videoProxyInfos = []);
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = new n.default();
                            this.videoProxyInfos.push(s.unmarshall(e));
                          }
                          return (this.token = e.popString()), this;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.uid = 0),
                      (this.encoderSource = 0),
                      (this.uploadType = 0),
                      (this.frameDts = 0),
                      (this.caputureTime = 0),
                      (this.encodeEndTime = 0),
                      (this.sendFrameTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.uid = e.popUInt64()),
                            (this.encoderSource = e.popUInt8()),
                            (this.uploadType = e.popUInt8()),
                            (this.frameDts = e.popUInt64()),
                            (this.caputureTime = e.popUInt64()),
                            (this.encodeEndTime = e.popUInt64()),
                            (this.sendFrameTime = e.popUInt64());
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = a;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(51),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.dtsGapSum = 0),
                      (this.delaySum = 0),
                      (this.serverInfos = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.dtsGapSum = e.popInt64()), (this.delaySum = e.popUInt64());
                          for (var t = e.popUInt32(); t > 0; ) {
                            t--;
                            var i = new a.default();
                            i.unmarshall(e), this.serverInfos.push(i);
                          }
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.enable = 0),
                      (this.proxyIdLow = 0),
                      (this.proxyIdHigh = 0),
                      (this.proxyType = 0),
                      (this.serverDelay = 0),
                      (this.lastPeriodDelay = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.enable = e.popUInt8()),
                            (this.proxyIdLow = e.popUInt32()),
                            (this.proxyIdHigh = e.popUInt32()),
                            (this.proxyType = e.popUInt16()),
                            (this.serverDelay = e.popUInt32()),
                            (this.lastPeriodDelay = e.popUInt32());
                        },
                      },
                      {
                        key: 'getProxyIdStr',
                        value: function () {
                          return this.proxyIdHigh.toString(16) + this.proxyIdLow.toString(16);
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = a;
            },
            function (e, t, i) {
              'use strict';
              var s,
                r = 'object' == typeof Reflect ? Reflect : null,
                a =
                  r && 'function' == typeof r.apply
                    ? r.apply
                    : function (e, t, i) {
                        return Function.prototype.apply.call(e, t, i);
                      };
              s =
                r && 'function' == typeof r.ownKeys
                  ? r.ownKeys
                  : Object.getOwnPropertySymbols
                  ? function (e) {
                      return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
                    }
                  : function (e) {
                      return Object.getOwnPropertyNames(e);
                    };
              var n =
                Number.isNaN ||
                function (e) {
                  return e != e;
                };
              function o() {
                o.init.call(this);
              }
              (e.exports = o),
                (o.EventEmitter = o),
                (o.prototype._events = void 0),
                (o.prototype._eventsCount = 0),
                (o.prototype._maxListeners = void 0);
              var h = 10;
              function u(e) {
                if ('function' != typeof e)
                  throw new TypeError(
                    'The "listener" argument must be of type Function. Received type ' + typeof e,
                  );
              }
              function d(e) {
                return void 0 === e._maxListeners ? o.defaultMaxListeners : e._maxListeners;
              }
              function c(e, t, i, s) {
                var r, a, n, o;
                if (
                  (u(i),
                  void 0 === (a = e._events)
                    ? ((a = e._events = Object.create(null)), (e._eventsCount = 0))
                    : (void 0 !== a.newListener &&
                        (e.emit('newListener', t, i.listener ? i.listener : i), (a = e._events)),
                      (n = a[t])),
                  void 0 === n)
                )
                  (n = a[t] = i), ++e._eventsCount;
                else if (
                  ('function' == typeof n
                    ? (n = a[t] = s ? [i, n] : [n, i])
                    : s
                    ? n.unshift(i)
                    : n.push(i),
                  (r = d(e)) > 0 && n.length > r && !n.warned)
                ) {
                  n.warned = !0;
                  var h = new Error(
                    'Possible EventEmitter memory leak detected. ' +
                      n.length +
                      ' ' +
                      String(t) +
                      ' listeners added. Use emitter.setMaxListeners() to increase limit',
                  );
                  (h.name = 'MaxListenersExceededWarning'),
                    (h.emitter = e),
                    (h.type = t),
                    (h.count = n.length),
                    (o = h),
                    console && console.warn && console.warn(o);
                }
                return e;
              }
              function l() {
                if (!this.fired)
                  return (
                    this.target.removeListener(this.type, this.wrapFn),
                    (this.fired = !0),
                    0 === arguments.length
                      ? this.listener.call(this.target)
                      : this.listener.apply(this.target, arguments)
                  );
              }
              function p(e, t, i) {
                var s = { fired: !1, wrapFn: void 0, target: e, type: t, listener: i },
                  r = l.bind(s);
                return (r.listener = i), (s.wrapFn = r), r;
              }
              function f(e, t, i) {
                var s = e._events;
                if (void 0 === s) return [];
                var r = s[t];
                return void 0 === r
                  ? []
                  : 'function' == typeof r
                  ? i
                    ? [r.listener || r]
                    : [r]
                  : i
                  ? (function (e) {
                      for (var t = new Array(e.length), i = 0; i < t.length; ++i)
                        t[i] = e[i].listener || e[i];
                      return t;
                    })(r)
                  : _(r, r.length);
              }
              function m(e) {
                var t = this._events;
                if (void 0 !== t) {
                  var i = t[e];
                  if ('function' == typeof i) return 1;
                  if (void 0 !== i) return i.length;
                }
                return 0;
              }
              function _(e, t) {
                for (var i = new Array(t), s = 0; s < t; ++s) i[s] = e[s];
                return i;
              }
              Object.defineProperty(o, 'defaultMaxListeners', {
                enumerable: !0,
                get: function () {
                  return h;
                },
                set: function (e) {
                  if ('number' != typeof e || e < 0 || n(e))
                    throw new RangeError(
                      'The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' +
                        e +
                        '.',
                    );
                  h = e;
                },
              }),
                (o.init = function () {
                  (void 0 !== this._events &&
                    this._events !== Object.getPrototypeOf(this)._events) ||
                    ((this._events = Object.create(null)), (this._eventsCount = 0)),
                    (this._maxListeners = this._maxListeners || void 0);
                }),
                (o.prototype.setMaxListeners = function (e) {
                  if ('number' != typeof e || e < 0 || n(e))
                    throw new RangeError(
                      'The value of "n" is out of range. It must be a non-negative number. Received ' +
                        e +
                        '.',
                    );
                  return (this._maxListeners = e), this;
                }),
                (o.prototype.getMaxListeners = function () {
                  return d(this);
                }),
                (o.prototype.emit = function (e) {
                  for (var t = [], i = 1; i < arguments.length; i++) t.push(arguments[i]);
                  var s = 'error' === e,
                    r = this._events;
                  if (void 0 !== r) s = s && void 0 === r.error;
                  else if (!s) return !1;
                  if (s) {
                    var n;
                    if ((t.length > 0 && (n = t[0]), n instanceof Error)) throw n;
                    var o = new Error('Unhandled error.' + (n ? ' (' + n.message + ')' : ''));
                    throw ((o.context = n), o);
                  }
                  var h = r[e];
                  if (void 0 === h) return !1;
                  if ('function' == typeof h) a(h, this, t);
                  else {
                    var u = h.length,
                      d = _(h, u);
                    for (i = 0; i < u; ++i) a(d[i], this, t);
                  }
                  return !0;
                }),
                (o.prototype.addListener = function (e, t) {
                  return c(this, e, t, !1);
                }),
                (o.prototype.on = o.prototype.addListener),
                (o.prototype.prependListener = function (e, t) {
                  return c(this, e, t, !0);
                }),
                (o.prototype.once = function (e, t) {
                  return u(t), this.on(e, p(this, e, t)), this;
                }),
                (o.prototype.prependOnceListener = function (e, t) {
                  return u(t), this.prependListener(e, p(this, e, t)), this;
                }),
                (o.prototype.removeListener = function (e, t) {
                  var i, s, r, a, n;
                  if ((u(t), void 0 === (s = this._events))) return this;
                  if (void 0 === (i = s[e])) return this;
                  if (i === t || i.listener === t)
                    0 == --this._eventsCount
                      ? (this._events = Object.create(null))
                      : (delete s[e],
                        s.removeListener && this.emit('removeListener', e, i.listener || t));
                  else if ('function' != typeof i) {
                    for (r = -1, a = i.length - 1; a >= 0; a--)
                      if (i[a] === t || i[a].listener === t) {
                        (n = i[a].listener), (r = a);
                        break;
                      }
                    if (r < 0) return this;
                    0 === r
                      ? i.shift()
                      : (function (e, t) {
                          for (; t + 1 < e.length; t++) e[t] = e[t + 1];
                          e.pop();
                        })(i, r),
                      1 === i.length && (s[e] = i[0]),
                      void 0 !== s.removeListener && this.emit('removeListener', e, n || t);
                  }
                  return this;
                }),
                (o.prototype.off = o.prototype.removeListener),
                (o.prototype.removeAllListeners = function (e) {
                  var t, i, s;
                  if (void 0 === (i = this._events)) return this;
                  if (void 0 === i.removeListener)
                    return (
                      0 === arguments.length
                        ? ((this._events = Object.create(null)), (this._eventsCount = 0))
                        : void 0 !== i[e] &&
                          (0 == --this._eventsCount
                            ? (this._events = Object.create(null))
                            : delete i[e]),
                      this
                    );
                  if (0 === arguments.length) {
                    var r,
                      a = Object.keys(i);
                    for (s = 0; s < a.length; ++s)
                      'removeListener' !== (r = a[s]) && this.removeAllListeners(r);
                    return (
                      this.removeAllListeners('removeListener'),
                      (this._events = Object.create(null)),
                      (this._eventsCount = 0),
                      this
                    );
                  }
                  if ('function' == typeof (t = i[e])) this.removeListener(e, t);
                  else if (void 0 !== t)
                    for (s = t.length - 1; s >= 0; s--) this.removeListener(e, t[s]);
                  return this;
                }),
                (o.prototype.listeners = function (e) {
                  return f(this, e, !0);
                }),
                (o.prototype.rawListeners = function (e) {
                  return f(this, e, !1);
                }),
                (o.listenerCount = function (e, t) {
                  return 'function' == typeof e.listenerCount ? e.listenerCount(t) : m.call(e, t);
                }),
                (o.prototype.listenerCount = m),
                (o.prototype.eventNames = function () {
                  return this._eventsCount > 0 ? s(this._events) : [];
                });
            },
            function (e, t, i) {
              'use strict';
              function s(e) {
                if ('undefined' != typeof Symbol && Symbol.iterator in Object(e))
                  return Array.from(e);
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              'use strict';
              var s = i(2),
                r = i(3),
                a = (function () {
                  function e(t) {
                    var i = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                    Object(s.a)(this, e),
                      (this.view = t),
                      (this.pos = 0),
                      (this.len = 0),
                      (this.uri = 0),
                      (this.resCode = 0),
                      !0 === i &&
                        ((this.len = this.popUInt32()),
                        (this.uri = this.popUInt32()),
                        (this.resCode = this.popUInt16()));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'bytesAvailable',
                        value: function () {
                          return this.view.byteLength - this.pos;
                        },
                      },
                      {
                        key: 'popBool',
                        value: function () {
                          return 1 == this.popUInt8();
                        },
                      },
                      {
                        key: 'popUInt8',
                        value: function () {
                          if (this.pos + 1 > this.view.byteLength) return 0;
                          var e = this.view.getUint8(this.pos);
                          return this.pos++, e;
                        },
                      },
                      {
                        key: 'popUInt16',
                        value: function () {
                          if (this.pos + 2 > this.view.byteLength) return 0;
                          var e = this.view.getUint16(this.pos, !0);
                          return (this.pos += 2), e;
                        },
                      },
                      {
                        key: 'popUInt32',
                        value: function () {
                          if (this.pos + 4 > this.view.byteLength) return 0;
                          var e = this.view.getUint32(this.pos, !0);
                          return (this.pos += 4), e;
                        },
                      },
                      {
                        key: 'popUInt64',
                        value: function () {
                          if (this.pos + 8 > this.view.byteLength) return 0;
                          var e = this.view.getUint32(this.pos, !0);
                          this.pos += 4;
                          var t = this.view.getUint32(this.pos, !0);
                          return (this.pos += 4), 4294967296 * t + e;
                        },
                      },
                      {
                        key: 'popInt64',
                        value: function () {
                          for (
                            var e = 0,
                              t = (128 & this.view.getUint8(this.pos + 7)) > 0,
                              i = !0,
                              s = 0;
                            s < 8;
                            s++
                          ) {
                            var r = this.view.getUint8(this.pos + s);
                            t && (i ? 0 != r && ((r = 255 & ~(r - 1)), (i = !1)) : (r = 255 & ~r)),
                              (e += r * Math.pow(2, 8 * s));
                          }
                          return t && (e = -e), (this.pos += 8), e;
                        },
                      },
                      {
                        key: 'popUint8Array',
                        value: function () {
                          var e = this.popUInt16();
                          if (this.pos + e > this.view.byteLength) return null;
                          var t = new Uint8Array(this.view.buffer, this.pos, e);
                          return (this.pos += e), t.slice();
                        },
                      },
                      {
                        key: 'popUint8Array32',
                        value: function () {
                          var e = this.popUInt32();
                          if (this.pos + e > this.view.byteLength) return null;
                          var t = new Uint8Array(this.view.buffer, this.pos, e);
                          return (this.pos += e), t.slice();
                        },
                      },
                      {
                        key: 'popUInt64Vector',
                        value: function () {
                          var e = this.popUInt32();
                          if (this.pos + 8 * e > this.view.byteLength) return null;
                          for (var t = [], i = 0; i < e; i++) t.push(this.popUInt64());
                          return t;
                        },
                      },
                      {
                        key: 'popUInt32Vector',
                        value: function () {
                          var e = this.popUInt32();
                          if (this.pos + 4 * e > this.view.byteLength) return null;
                          for (var t = [], i = 0; i < e; i++) t.push(this.popUInt32());
                          return t;
                        },
                      },
                      {
                        key: 'popUInt16Vector',
                        value: function () {
                          var e = this.popUInt32();
                          if (this.pos + 2 * e > this.view.byteLength) return null;
                          for (var t = [], i = 0; i < e; i++) t.push(this.popUInt16());
                          return t;
                        },
                      },
                      {
                        key: 'popString',
                        value: function () {
                          var e = this.popUInt16();
                          if (this.pos + e > this.view.byteLength) return null;
                          for (var t = [], i = 0; i < e; ++i)
                            t[i] = String.fromCharCode(this.popUInt8());
                          return t.join('');
                        },
                      },
                      {
                        key: 'popMapKey8Val32',
                        value: function () {
                          for (var e = this.popUInt32(), t = new Map(), i = 0; i < e; i++) {
                            var s = this.popUInt8(),
                              r = this.popUInt32();
                            t.set(s, r);
                          }
                          return t;
                        },
                      },
                      {
                        key: 'popMapKey64Val64',
                        value: function () {
                          for (var e = this.popUInt32(), t = new Map(), i = 0; i < e; i++) {
                            var s = this.popUInt64(),
                              r = this.popUInt64();
                            t.set(s, r);
                          }
                          return t;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.a = a;
            },
            function (e, t, i) {
              'use strict';
              function s(e) {
                if (Array.isArray(e)) return e;
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              'use strict';
              function s() {
                throw new TypeError(
                  'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                );
              }
              i.d(t, 'a', function () {
                return s;
              });
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = i(47),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.sid = 0), (this.fuzzyParam = new n.default());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return (
                            e.pushUInt64(this.sid),
                            e.pushUint8ArrayWithoutLen(this.fuzzyParam.marshall()),
                            e.marshall()
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t) {
              e.exports = function (e) {
                console.log('[ Timer worker init ]');
                var t = null;
                function i() {
                  clearInterval(t), (t = null);
                }
                e.addEventListener('message', function (s) {
                  switch (s.data) {
                    case 'start':
                      i(),
                        (t = setInterval(function () {
                          e.postMessage({ type: 1 });
                        }, 10));
                      break;
                    case 'stop':
                      i();
                  }
                }),
                  e.addEventListener('messageerror', function (e) {
                    console.error('[TimerWorker.messageerror]', e);
                  });
                var s =
                    e.requestAnimationFrame ||
                    e.mozRequestAnimationFrame ||
                    e.webkitRequestAnimationFrame ||
                    e.msRequestAnimationFrame ||
                    e.oRequestAnimationFrame,
                  r = 0,
                  a = 0,
                  n = 0;
                s(function t() {
                  requestAnimationFrame(t),
                    (function () {
                      var t = null != typeof performance ? performance.now() : Date.now();
                      if ((r++, 0 === a)) a = t;
                      else {
                        var i = t - a;
                        if (i >= 1e3) {
                          a = t;
                          var s = Math.round(r / (i / 1e3));
                          (r = 0), (n = Math.max(s, n)), e.postMessage({ type: 2, data: n });
                        }
                      }
                    })();
                });
              };
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(27),
                r = i(2),
                a = i(3),
                n = i(22),
                o = i(19),
                h = (i(31), i(45)),
                u = (function () {
                  function e() {
                    Object(r.a)(this, e),
                      (this.uid = 0),
                      (this.version = 0),
                      (this.cdnGroupIdList = []),
                      (this.currentInfo = new h.default()),
                      (this.appid = 0),
                      (this.clientAppid = 0),
                      (this.clientType = 0),
                      (this.ip = 0),
                      (this.sendTime = 0),
                      (this.sdkVersion = 0),
                      (this.imsi = 0),
                      (this.appId = 0),
                      (this.anchorStreamNam2UId = new Map());
                  }
                  return (
                    Object(a.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new o.a();
                          e.setUri(n.a.PCDNGetProxyListReq),
                            e.pushUInt64(this.uid),
                            e.pushUInt8(this.version),
                            e.pushUInt32(this.cdnGroupIdList.length),
                            this.cdnGroupIdList.forEach(function (t) {
                              e.pushUint8ArrayWithoutLen(t.marshall());
                            }),
                            e.pushUint8ArrayWithoutLen(this.currentInfo.marshall()),
                            e.pushUInt8(this.appid),
                            e.pushUInt32(this.clientAppid),
                            e.pushUInt32(this.clientType),
                            e.pushUInt32(this.ip),
                            e.pushUInt32(this.sendTime),
                            e.pushUInt32(this.sdkVersion),
                            e.pushUInt64(this.imsi),
                            e.pushUInt32(this.appId),
                            e.pushUInt32(this.anchorStreamNam2UId.size);
                          var t,
                            i = Object(s.a)(this.anchorStreamNam2UId.keys());
                          try {
                            for (i.s(); !(t = i.n()).done; ) {
                              var r = t.value;
                              e.pushString(r), e.pushUInt64(this.anchorStreamNam2UId.get(r));
                            }
                          } catch (e) {
                            i.e(e);
                          } finally {
                            i.f();
                          }
                          return e.marshall();
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = u;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = (i(22), i(44)),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.uid = 0),
                      (this.allocatedStreams = []),
                      (this.clientAppid = 0),
                      (this.clientType = 0),
                      (this.sendTime = 0),
                      (this.userArea = 0),
                      (this.videoGroupId = 0),
                      (this.retryType = 0),
                      (this.retryFreq = 0),
                      (this.result = 0),
                      (this.proxyType = 0),
                      (this.tokenVersion = 0),
                      (this.sslUrl = ''),
                      (this.appId = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.uid = e.popUInt64()), (this.allocatedStreams = []);
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = new a.default();
                            this.allocatedStreams.push(s.unmarshall(e));
                          }
                          return (
                            (this.clientAppid = e.popUInt32()),
                            (this.clientType = e.popUInt32()),
                            (this.sendTime = e.popUInt32()),
                            (this.userArea = e.popUInt32()),
                            (this.videoGroupId = e.popUInt32()),
                            (this.retryType = e.popUInt8()),
                            (this.retryFreq = e.popUInt16()),
                            (this.result = e.popUInt32()),
                            (this.proxyType = e.popUInt32()),
                            (this.tokenVersion = e.popUInt32()),
                            (this.sslUrl = e.popString()),
                            (this.appId = e.popUInt32()),
                            this
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(22),
                n = i(19),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.seq = 0),
                      (this.checkSum = 0),
                      (this.codecType = 0),
                      (this.streamData = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new n.a();
                          return (
                            e.setUri(a.a.PP2pSliceAudioData),
                            e.pushUInt8(this.checkSum),
                            e.pushUInt16(this.codecType),
                            e.pushUint8Array(this.streamData),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          return (
                            (this.checkSum = e.popUInt8()),
                            (this.codecType = e.popUInt16()),
                            (this.streamData = e.popUint8Array()),
                            this
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = i(22),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.checkSum = 0),
                      (this.codecType = 0),
                      (this.seqNum = 0),
                      (this.frameNum = 0),
                      (this.frameId = 0),
                      (this.audioHeader = null),
                      (this.streamData = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a();
                          e.setUri(n.a.PP2pSliceAudioDataV2),
                            e.pushUInt8(this.checkSum),
                            e.pushUInt16(this.codecType),
                            e.pushUInt16(this.seqNum),
                            e.pushUInt16(this.frameNum),
                            e.pushUInt32(this.frameId),
                            e.pushUint8Array(this.audioHeader),
                            e.pushUint8Array(this.streamData);
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.checkSum = e.popUInt8()),
                            (this.codecType = e.popUInt16()),
                            (this.seqNum = e.popUInt16()),
                            (this.frameNum = e.popUInt16()),
                            (this.frameId = e.popUInt32()),
                            (this.audioHeader = e.popUint8Array()),
                            (this.streamData = e.popUint8Array());
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = i(22),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.checkSum = 0),
                      (this.codecType = 0),
                      (this.seqNum = 0),
                      (this.frameNum = 0),
                      (this.frameId = 0),
                      (this.audioHeader = null),
                      (this.streamData = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a();
                          return (
                            e.setUri(n.a.PP2pSliceAudioDataV3),
                            e.pushUInt8(this.checkSum),
                            e.pushUInt16(this.codecType),
                            e.pushUInt16(this.seqNum),
                            e.pushUInt16(this.frameNum),
                            e.pushUInt32(this.frameId),
                            e.pushUint8Array(this.audioHeader),
                            e.pushUint8Array(this.streamData),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.checkSum = e.popUInt8()),
                            (this.codecType = e.popUInt16()),
                            (this.seqNum = e.popUInt16()),
                            (this.frameNum = e.popUInt16()),
                            (this.frameId = e.popUInt32()),
                            (this.audioHeader = e.popUint8Array()),
                            (this.streamData = e.popUint8Array());
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(22),
                n = i(19),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.seq = 0), (this.strData = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new n.a();
                          return (
                            e.setUri(a.a.PP2pSliceControlData),
                            e.pushUint8Array(this.strData),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          return (this.strData = e.popUint8Array()), this;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(22),
                n = i(19),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.seq = 0),
                      (this.uri = 0),
                      (this.from = 0),
                      (this.uid = 0),
                      (this.streamSeqSN = 0),
                      (this.payload = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new n.a();
                          return (
                            e.setUri(a.a.PP2pSliceData),
                            e.pushUInt64(this.seq),
                            e.pushUInt32(this.uri),
                            e.pushUInt8(this.from),
                            e.pushUInt64(this.uid),
                            e.pushUInt64(this.streamSeqSN),
                            e.pushUint8Array(this.payload),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          return (
                            (this.seq = e.popUInt64()),
                            (this.uri = e.popUInt32()),
                            (this.from = e.popUInt8()),
                            (this.uid = e.popUInt64()),
                            (this.streamSeqSN = e.popUInt64()),
                            (this.payload = e.popUint8Array()),
                            this
                          );
                        },
                      },
                      {
                        key: 'isAudio',
                        get: function () {
                          return this.uri == a.a.PP2pSliceAudioData;
                        },
                      },
                      {
                        key: 'isVideo',
                        get: function () {
                          return this.uri == a.a.PP2pSliceVideoData;
                        },
                      },
                      {
                        key: 'isCtrlSlice',
                        get: function () {
                          return this.uri == a.a.PP2pSliceControlData;
                        },
                      },
                      {
                        key: 'isFullSlice',
                        get: function () {
                          return 1 == this.from;
                        },
                      },
                      {
                        key: 'isSubSlice',
                        get: function () {
                          return 2 == this.from;
                        },
                      },
                      {
                        key: 'isResend',
                        get: function () {
                          return 3 == this.from && 0 == this.uid;
                        },
                      },
                      {
                        key: 'isPatchSlice',
                        get: function () {
                          return 4 == this.from;
                        },
                      },
                      {
                        key: 'isFromPeer',
                        get: function () {
                          return 0 !== this.uid;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(22),
                n = i(19),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.seq = 0),
                      (this.uid = 0),
                      (this.isResend = !1),
                      (this.checkSum = 0),
                      (this.seqNum = 0),
                      (this.frameNum = 0),
                      (this.frameId = 0),
                      (this.config = new Map()),
                      (this.streamData = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new n.a();
                          return (
                            e.setUri(a.a.PP2pSliceVideoData),
                            e.pushUInt8(this.checkSum),
                            e.pushUInt16(this.seqNum),
                            e.pushUInt16(this.frameNum),
                            e.pushUInt32(this.frameId),
                            e.pushUInt32(this.config.size),
                            this.config.forEach(function (t, i) {
                              e.pushUInt8(i), e.pushUInt32(t);
                            }),
                            e.pushUint8Array(this.streamData),
                            e.marshall()
                          );
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.checkSum = e.popUInt8()),
                            (this.seqNum = e.popUInt16()),
                            (this.frameNum = e.popUInt16()),
                            (this.frameId = e.popUInt32()),
                            this.config.clear();
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            var s = e.popUInt8(),
                              r = e.popUInt32();
                            this.config.set(s, r);
                          }
                          return (this.streamData = e.popUint8Array()), this;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.strToken = '');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return e.pushString(this.strToken), e.marshall();
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.ip = 0), (this.tcpPorts = []), (this.udpPorts = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          return (
                            (this.ip = e.popUInt32()),
                            (this.tcpPorts = e.popUInt16Vector()),
                            (this.udpPorts = e.popUInt16Vector()),
                            this
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = a;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(22),
                n = i(19),
                o = (i(57), i(46)),
                h = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.uid = 0),
                      (this.version = 0),
                      (this.streamNames = []),
                      (this.fuzzyQueryKeys = []),
                      (this.currentInfo = new o.default()),
                      (this.appid = 0),
                      (this.clientAppid = 0),
                      (this.clientType = 0),
                      (this.ip = 0),
                      (this.sendTime = 0),
                      (this.sdkVersion = 0),
                      (this.imsi = 0),
                      (this.useCase = 0),
                      (this.appSysName = ''),
                      (this.appUA = ''),
                      (this.retryFailCount = 0),
                      (this.extInfo = new Map()),
                      (this.latencyModel = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new n.a();
                          return (
                            e.setUri(a.a.PAudienceGetProxyListReq),
                            e.pushUInt64(this.uid),
                            e.pushUInt8(this.version),
                            e.pushUInt32(this.streamNames.length),
                            this.streamNames.forEach(function (t) {
                              e.pushString(t);
                            }),
                            e.pushUInt32(this.fuzzyQueryKeys.length),
                            this.fuzzyQueryKeys.forEach(function (t) {
                              e.pushUint8ArrayWithoutLen(t.marshall());
                            }),
                            e.pushUint8ArrayWithoutLen(this.currentInfo.marshall()),
                            e.pushUInt8(this.appid),
                            e.pushUInt32(this.clientAppid),
                            e.pushUInt32(this.clientType),
                            e.pushUInt32(this.ip),
                            e.pushUInt32(this.sendTime),
                            e.pushUInt32(this.sdkVersion),
                            e.pushUInt64(this.imsi),
                            e.pushUInt8(this.useCase),
                            e.pushString(this.appSysName),
                            e.pushString(this.appUA),
                            e.pushUInt8(this.retryFailCount),
                            e.pushUInt32(this.extInfo.size),
                            this.extInfo.forEach(function (t, i) {
                              e.pushString(i), e.pushString(t);
                            }),
                            e.pushUInt16(this.latencyModel),
                            e.marshall()
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = h;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = (i(22), i(48)),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.uid = 0),
                      (this.allocatedStreams = new Map()),
                      (this.clientAppid = 0),
                      (this.clientType = 0),
                      (this.sendTime = 0),
                      (this.userArea = 0),
                      (this.videoGroupId = 0),
                      (this.retryType = 0),
                      (this.retryFreq = 0),
                      (this.result = 0),
                      (this.proxyType = 0),
                      (this.tokenVersion = 0),
                      (this.sslUrl = '');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.uid = e.popUInt64()), this.allocatedStreams.clear();
                          for (var t = e.popUInt32(), i = 0; i < t; i++) {
                            for (
                              var s = e.popString(), r = [], n = e.popUInt32(), o = 0;
                              o < n;
                              o++
                            ) {
                              var h = new a.default();
                              r.push(h.unmarshall(e));
                            }
                            this.allocatedStreams.set(s, r);
                          }
                          return (
                            (this.clientAppid = e.popUInt32()),
                            (this.clientType = e.popUInt32()),
                            (this.sendTime = e.popUInt32()),
                            (this.userArea = e.popUInt32()),
                            (this.videoGroupId = e.popUInt32()),
                            (this.retryType = e.popUInt8()),
                            (this.retryFreq = e.popUInt16()),
                            (this.result = e.popUInt32()),
                            (this.proxyType = e.popUInt32()),
                            (this.tokenVersion = e.popUInt32()),
                            (this.sslUrl = e.popString()),
                            this
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              i.r(t),
                (t.default = {
                  ACCEPT_SUBSCRIBE: 0,
                  EMPTY_UPLINK_BW: 1,
                  DETECT_SUBSCRIBE_CYCLE: 2,
                  EMPTY_PEER_INFO: 3,
                  SUBSCRIBE_UPLINK_NOT_ENOUGH: 4,
                  PUBLISHER_KICK_OFF: 5,
                  NOT_SUBSCRIBER: 6,
                  INVALID_SUB_STREAM: 7,
                  ACCEPT_BY_SUBSCRIBER_UPLINK: 9,
                  INVALID_STREAMID: 10,
                  SERVER_EMPTY_BW: 11,
                  PUBLISHER_LEAVE: 12,
                  DIFFERENT_VIDEO_PROXY: 13,
                  OLD_VERSION_REQ: 14,
                  SUBSCRIBER_NO_PERMISSION: 15,
                });
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.ssrc = 0),
                      (this.framenum = 0),
                      (this.type = 0),
                      (this.framebase = 0),
                      (this.critical = !1),
                      (this.payload = null),
                      (this.transMode = 0),
                      (this.packData = !1),
                      (this.bHasVideoSid = !1),
                      (this.byteVoiceMarks = 0),
                      (this.capTimeStamp = 0),
                      (this.m_isMarshalVoiceMarks = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (t) {
                          (this.capTimeStamp = t.popUInt32()), (this.ssrc = t.popUInt8());
                          var i = t.popUInt8();
                          return (
                            (this.type = t.popUInt16()),
                            (this.framebase = t.popUInt32()),
                            (this.payload = t.popUint8Array()),
                            t.bytesAvailable()
                              ? (this.byteVoiceMarks = t.popUInt8())
                              : (this.byteVoiceMarks = e.VOICE_MARK_KEY_BIT0),
                            (this.framenum = i & e.FRAMENUM_MASK),
                            (this.critical = !!(i & e.CRITICAL_MASK)),
                            (this.bHasVideoSid = !!(i & e.VIDEOSID_MASK)),
                            (this.transMode = 1 + ((i & e.FTMMODE_MASK) >> 4)),
                            this
                          );
                        },
                      },
                      {
                        key: 'setIsKeyVoice',
                        value: function (t) {
                          this.byteVoiceMarks |= t ? e.VOICE_MARK_KEY_BIT0 : 0;
                        },
                      },
                      {
                        key: 'isKeyVoice',
                        get: function () {
                          return this.byteVoiceMarks & e.VOICE_MARK_KEY_BIT0;
                        },
                      },
                    ]),
                    e
                  );
                })();
              (a.FRAMENUM_MASK = 15),
                (a.FTMMODE_MASK = 48),
                (a.VIDEOSID_MASK = 64),
                (a.CRITICAL_MASK = 128),
                (a.VOICE_MARK_KEY_BIT0 = 1),
                (t.default = a);
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(19),
                n = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.strToken = '');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'marshall',
                        value: function () {
                          var e = new a.a(!1);
                          return e.pushString(this.strToken), e.marshall();
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = n;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.systime = 0),
                      (this.encode_delay = 0),
                      (this.send_buffer = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          (this.systime = e.popUInt64()),
                            (this.encode_delay = e.popUInt32()),
                            (this.send_buffer = e.popUInt32());
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = a;
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(49),
                n = i(50),
                o = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.anchorSei = new a.default()),
                      (this.serverSei = new n.default());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'unmarshall',
                        value: function (e) {
                          this.anchorSei.unmarshall(e), this.serverSei.unmarshall(e);
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = o;
            },
            function (e, t, i) {
              e.exports = i(80)(
                '!function(t){var e={};function s(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)s.d(i,a,function(e){return t[e]}.bind(null,a));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}s.r(e);var a=function t(){i(this,t)};a.INIT="init",a.INITED="inited",a.STOP="stop",a.PAUSE="pause",a.RESUME="resume",a.PLAY="play",a.AUDIO_FRAME="audio_frame",a.UPDATE_CURRENT_TIME="update_current_time",a.TIME_STAMP="timestamp",a.VOLUME="volume",a.AUDIO_DATA_NAN="AUDIO_DATA_NAN",a.AUDIO_DATA_MUTE="AUDIO_DATA_MUTE",a.LOG_CFG="LOG_CFG",a.UPDATE_PLAYBACKRATE="UPDATE_PLAYBACKRATE",a.SEEK="SEEK",a.ON_VIDEO_SEEK="ON_VIDEO_SEEK";var r=a,h=12,o=13,n=31;function u(t,e){for(var s=0;s<e.length;s++){var i=e[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var m=function(){function t(){i(this,t),this.m_sampleRate=44100,this.MAX_WSOLA_DELAY_MS=80,this.MIN_32bit=-2147483648,this.m_DelaySamples=this.m_sampleRate*this.MAX_WSOLA_DELAY_MS/1e3,this.m_channels=2,this.m_leftSampleNum=0,this.m_speedWsola=1,this.m_tempoInstr=0,this.m_outBuffer=[],this.m_inBuffer=[],this.dataCallback=null,this.lastFrameTimeStamp=0}var e,s,a;return e=t,(s=[{key:"updateSpeed",value:function(t){t=(t=t<.2?.2:t)>2?2:t,this.m_speedWsola=t,1==this.m_speedWsola?this.m_tempoInstr=0:this.m_speedWsola>=1?this.m_speedWsola>=1.25?(this.m_speedWsola=this.m_speedWsola>2?2:this.m_speedWsola,this.m_tempoInstr=2):this.m_tempoInstr=1:this.m_speedWsola<.5?(this.m_speedWsola=this.m_speedWsola<.2?.2:this.m_speedWsola,this.m_tempoInstr=-2):this.m_tempoInstr=-1}},{key:"init",value:function(t,e,s,i){this.dataCallback=i,this.m_sampleRate=t,this.m_DelaySamples=this.m_sampleRate*this.MAX_WSOLA_DELAY_MS/1e3,this.m_channels=e,this.updateSpeed(s)}},{key:"clearInputBuffer",value:function(){this.m_leftSampleNum=0,this.lastFrameTimeStamp=0,this.m_inBuffer=[],this.m_outBuffer=[]}},{key:"tempo_processData",value:function(t,e,s){this.lastFrameTimeStamp=s;for(var i,a=this.m_sampleRate/100,r=0,h=0,o=0,n=0,u=0,m=0,l=0,f=0,p=0,d=0,_=0,c=1,A=0,N=0,S=0,D=0;D<t.length;D++)this.m_inBuffer.push(t[D]);if(this.m_leftSampleNum+=e,this.m_leftSampleNum<this.m_DelaySamples)return 0;switch(this.m_tempoInstr){case 2:case 1:r=4*a,h=u=2*a,o=Math.floor(a*(4*this.m_speedWsola-2)),n=a+1>>1;break;case-1:r=8*a,h=u=4*a,o=Math.floor(a*(8*this.m_speedWsola-4)),n=a+1>>1;break;case-2:e>this.m_leftSampleNum&&(e=this.m_leftSampleNum),this.m_leftSampleNum-=e,this.m_inBuffer.splice(0,e*this.m_channels);for(var T=[],y=e*this.m_channels/this.m_speedWsola,g=0;g<y;g++)T.push(0);var b=this.m_leftSampleNum/e*10,B=this.lastFrameTimeStamp-b;return this.dataCallback(T,B),e*this.m_channels;case 0:this.m_outBuffer=[];for(var E=0;E<e*this.m_channels;E++)this.m_outBuffer.push(this.m_inBuffer[E]);e>this.m_leftSampleNum&&(e=this.m_leftSampleNum),this.m_leftSampleNum-=e,this.m_inBuffer.splice(0,e*this.m_channels);for(var k=[],v=0;v<e*this.m_channels;v++)k.push(this.m_outBuffer.shift());var L=this.m_leftSampleNum/e*10,M=this.lastFrameTimeStamp-L;return this.dataCallback(k,M),e*this.m_channels}i=1/u;for(var C=(new Date).getTime();this.m_leftSampleNum>=this.m_DelaySamples;){if((new Date).getTime()-C>2e3)return;for(f=0;f<r*this.m_channels;f++)this.m_outBuffer[f]=this.m_inBuffer[f];if(l=this.MIN_32bit,2==this.m_channels){for(f=0;f<2*n;f++){m=0;for(var F=(r-u)*this.m_channels,O=0;O<u;O++)m+=Math.floor(this.m_outBuffer[F+2*O]*this.m_inBuffer[2*(o+f-n)+2*O]),m+=Math.floor(this.m_outBuffer[F+2*O+1]*this.m_inBuffer[2*(o+f-n)+2*O+1]);l<m&&(l=m,d=f)}for(_=d-n,c=1,A=0,f=0;f<u;f++)this.m_outBuffer[2*(f+h)]=c*this.m_outBuffer[2*(f+h)]+A*this.m_inBuffer[2*(f+o+_)],this.m_outBuffer[2*(f+h)+1]=c*this.m_outBuffer[2*(f+h)+1]+A*this.m_inBuffer[2*(f+o+_)+1],c-=i,A+=i}else{for(f=0;f<2*n;f++){for(m=0,p=0;p<u;p++)m+=Math.floor(psOutBuffer[r-u+p]*psInBuffer[o+f-n+p]);l<m&&(l=m,d=f)}for(_=d-n,c=1,A=0,f=0;f<u;f++)this.m_outBuffer[f+h]=c*this.m_outBuffer[f+h]+A*this.m_inBuffer[f+o+_],c-=i,A+=i}N+=r*this.m_channels,(S=o+_+u)>this.m_leftSampleNum&&(S=this.m_leftSampleNum),this.m_leftSampleNum-=S,this.m_inBuffer.splice(0,2*S)}for(var I=[],P=0;P<N;P++)I.push(this.m_outBuffer.shift());var w=this.m_leftSampleNum/e*10,U=this.lastFrameTimeStamp-w;this.dataCallback(I,U)}}])&&u(e.prototype,s),a&&u(e,a),t}();class l extends AudioWorkletProcessor{constructor(t){super(t),this.port.onmessage=this.onMessage.bind(this),this.audioList=[],this.channelDataLength=128,this.outputChannelNums=2,this.traceNums=0,this.currentTime=0,this.inited=!1,this.renderNums=0,this._id=0,this.postMessage(r.INITED),this.isAudioDataNaNCnt=0,this.isAudioDataZeroCnt=0,this.printProcess=!1,this.printAudioData=!1,this.overFlowTs=0,this.volume=1,this.simulateTempo=null,this.audioSampleRate=44100,this.playbackRate=1,this.playMode=0,this.isSeek=!1,this.recvNums=0,this.paused=!1}postMessage(t,e){this.port.postMessage({type:t,data:e})}onMessage(t){switch(t.data.type){case r.INIT:this.outputChannelNums=t.data.data.outputChannelCount,this.inited=!0,this._id=t.data.data.id,this.playMode=t.data.data.playMode,this.mainSharedArrayBuffer=t.data.data.mainSharedArrayBuffer,this.playbackRate=t.data.data.playbackRate,this.initSimulateTempo();break;case r.PAUSE:this.paused=!0;break;case r.STOP:this.audioList.length=0;break;case r.PLAY:case r.RESUME:this.paused=!1;break;case r.AUDIO_FRAME:if(this.recvNums++,this.isSeek)return;0==this.playMode?this.audioFrameTransToFloat32Array_new(t.data.data):this.audioFrameTransToFloat32Array_playbackrate(t.data.data);break;case r.VOLUME:this.volume=t.data.data;break;case r.LOG_CFG:this.printProcess=t.data.data.printProcess,this.printAudioData=t.data.data.printAudioData,this.printRenderSkipAudio=t.data.data.printRenderSkipAudio;break;case r.UPDATE_PLAYBACKRATE:this.playbackRate=t.data.data,this.simulateTempo.updateSpeed(this.playbackRate);break;case r.SEEK:this.printProcess&&console.log("AudioWorkletNodeRenderer web seek"),this.isSeek=!0,this.audioList.length=0,this.simulateTempo&&this.simulateTempo.clearInputBuffer();break;case r.ON_VIDEO_SEEK:this.printProcess&&console.log("AudioWorkletNodeRenderer web onVideoSeek"),this.isSeek=!1}}initSimulateTempo(){this.simulateTempo=new m,this.simulateTempo.init(this.audioSampleRate,this.outputChannelNums,this.playbackRate,this.simulateTempoDataCallback.bind(this))}setAudioCurrentDts(t){this.currentTime!=t&&(this.printProcess&&console.log("BypassProcessor.setAudioCurrentDts now",t,"diff",t-this.currentTime),this.currentTime=t,this.currentTime&&(this.renderNums+=1,this.mainSharedArrayBuffer&&Atomics.store(this.mainSharedArrayBuffer,h,this.currentTime),this.mainSharedArrayBuffer&&Atomics.store(this.mainSharedArrayBuffer,o,this.renderNums),this.mainSharedArrayBuffer&&Atomics.store(this.mainSharedArrayBuffer,n,this.recvNums-this.renderNums)),this.postMessage("timestamp",{timeStamp:t,renderNums:this.renderNums}))}handleOuputs(t,e){if(this.audioList.length<1||this.paused)return!0;const s=t[0];this.channelDataLength=s[0].length;let i=this.audioList.shift(),a=i.buffer,r=this.renderNums<5?0:this.volume;i.isEmptyAudioFrame&&(r=0);for(var h=0;h<a.byteLength;h++)for(var o=0;o<s.length;o++)s[o][h]=a[h*s.length+o]*r,this.traceNums++;return this.setAudioCurrentDts(i.timestamp),!0}handleOuputs_playbackrate(t,e){if(this.audioList.length<1||this.paused)return!0;const s=t[0];this.channelDataLength=s[0].length;let i=this.audioList[0],a=i.buffer,r=i.offset,h=this.renderNums<5?0:this.volume;for(var o=0;o<this.channelDataLength;o++)for(var n=0;n<s.length;n++)if(s[n][o]=a[r]*h,r++,r==a.length){if(this.audioList.shift(),this.audioList.length<1)return!0;r=0,i=this.audioList[0],a=i.buffer}return i.offset=r,this.setAudioCurrentDts(i.timestamp),!0}checkDrop(){let t=this.audioList.length;if(t>2){let e=this.audioList[0];if(this.audioList[t-1].timestamp-e.timestamp>80){let s=Date.now();if(0===this.overFlowTs)this.overFlowTs=s;else if(s-this.overFlowTs>4e3&&this.renderNums%10==0){let s=0,i=0,a=0;for(let r=0;r<t;r++){let t=this.audioList[r];if(0===s&&e.timestamp<t.timestamp)i=r,s=t.timestamp;else if(s>0&&t.timestamp>s){a=r;break}}let r=this.audioList.splice(i,a-i);if(this.printRenderSkipAudio){let t=[];r.forEach(e=>{t.push(e.timestamp)}),console.log(`BypassProcessor.checkDrop pts=${s} dropIndex=[${i},${a}] ${t.toString()}`)}}}else this.overFlowTs=0}}audioFrameTransToFloat32Array_new(t){if(!this.inited)return;t.frameBuffer;let e=!0,s=[];for(let e=0;e<t.frameBuffers.length;e++){let i=new Float32Array(t.frameBuffers[e],0,1024);s.push(i)}let i=[],a=s[0].length;for(var h=0;h<a;h++)for(let a=0;a<s.length;a++){if(Number.isNaN(s[a][h])&&(this.isAudioDataNaNCnt++,this.isAudioDataNaNCnt>=3)){this.postMessage(r.AUDIO_DATA_NAN);break}if(0!=s[a][h]&&(e=!1),i.push(s[a][h]),i.length===this.channelDataLength*this.outputChannelNums){let e=new Float32Array(this.channelDataLength*this.outputChannelNums);e.set(i.splice(0,this.channelDataLength*this.outputChannelNums)),this.audioList.push({timestamp:t.timeStamp,buffer:e,isEmptyAudioFrame:t.isEmptyAudioFrame})}}this.printAudioData&&console.log(`BypassProcessor.audioFrameTransToFloat32Array_new timeStamp=${t.timeStamp} audioList.length=${this.audioList.length}`),e&&0!=this.volume&&(this.isAudioDataZeroCnt++,this.isAudioDataZeroCnt>=100&&this.postMessage(r.AUDIO_DATA_MUTE))}simulateTempoDataCallback(t,e){let s=new Float32Array(t.length);s.set(t),this.audioList.push({timestamp:e,buffer:s,offset:0})}audioFrameTransToFloat32Array_playbackrate(t){if(!this.inited)return;t.frameBuffer;let e=!0,s=[];for(let e=0;e<t.frameBuffers.length;e++){let i=new Float32Array(t.frameBuffers[e],0,1024);s.push(i)}let i=[],a=s[0].length;for(var h=0;h<a;h++)for(let t=0;t<s.length;t++){if(Number.isNaN(s[t][h])&&(this.isAudioDataNaNCnt++,this.isAudioDataNaNCnt>=3)){this.postMessage(r.AUDIO_DATA_NAN);break}0!=s[t][h]&&(e=!1),i.push(s[t][h])}this.simulateTempo.tempo_processData(i,i.length/this.outputChannelNums,t.timeStamp),this.printAudioData&&console.log(`BypassProcessor.audioFrameTransToFloat32Array_new timeStamp=${t.timeStamp} audioList.length=${this.audioList.length}`),e&&0!=this.volume&&(this.isAudioDataZeroCnt++,this.isAudioDataZeroCnt>=100&&this.postMessage(r.AUDIO_DATA_MUTE))}audioFrameTransToFloat32Array(t){if(!this.inited)return;let e=t.frameBuffer,s=new Float32Array(e),i=[],a=!0;for(let e=0;e<s.length;e++){if(Number.isNaN(s[e])&&(this.isAudioDataNaNCnt++,this.isAudioDataNaNCnt>=3)){this.postMessage(r.AUDIO_DATA_NAN);break}if(0!=s[e]&&(a=!1),i.push(s[e]),i.length===this.channelDataLength*this.outputChannelNums){let e=new Float32Array(this.channelDataLength*this.outputChannelNums);e.set(i.splice(0,this.channelDataLength*this.outputChannelNums)),this.audioList.push({timestamp:t.timeStamp,buffer:e,isEmptyAudioFrame:t.isEmptyAudioFrame})}}a&&0!=this.volume&&(this.isAudioDataZeroCnt++,this.isAudioDataZeroCnt>=100&&this.postMessage(r.AUDIO_DATA_MUTE))}process(t,e){return 0==this.playMode?this.handleOuputs(e):this.handleOuputs_playbackrate(e)}}registerProcessor("bypass-processor",l)}]);',
              );
            },
            function (e, t, i) {
              var s = {
                './CdnAllocateInfo': 44,
                './CdnAllocateInfo.js': 44,
                './CdnGroupID': 31,
                './CdnGroupID.js': 31,
                './CurrentCdnProxyInfo': 45,
                './CurrentCdnProxyInfo.js': 45,
                './PCDNGetProxyListReq': 59,
                './PCDNGetProxyListReq.js': 59,
                './PCDNGetProxyListRsp': 60,
                './PCDNGetProxyListRsp.js': 60,
                './PP2pSliceAudioData': 61,
                './PP2pSliceAudioData.js': 61,
                './PP2pSliceAudioDataV2': 62,
                './PP2pSliceAudioDataV2.js': 62,
                './PP2pSliceAudioDataV3': 63,
                './PP2pSliceAudioDataV3.js': 63,
                './PP2pSliceControlData': 64,
                './PP2pSliceControlData.js': 64,
                './PP2pSliceData': 65,
                './PP2pSliceData.js': 65,
                './PP2pSliceVideoData': 66,
                './PP2pSliceVideoData.js': 66,
                './SlaveProxyInfo': 33,
                './SlaveProxyInfo.js': 33,
                './StreamCodecType': 29,
                './StreamCodecType.js': 29,
              };
              function r(e) {
                var t = a(e);
                return i(t);
              }
              function a(e) {
                if (!i.o(s, e)) {
                  var t = new Error("Cannot find module '" + e + "'");
                  throw ((t.code = 'MODULE_NOT_FOUND'), t);
                }
                return s[e];
              }
              (r.keys = function () {
                return Object.keys(s);
              }),
                (r.resolve = a),
                (e.exports = r),
                (r.id = 77);
            },
            function (e, t, i) {
              var s = {
                './ApToken': 67,
                './ApToken.js': 67,
                './CurrentProxyInfo': 46,
                './CurrentProxyInfo.js': 46,
                './FuzzyQueryKey': 57,
                './FuzzyQueryKey.js': 57,
                './FuzzyQueryParam': 47,
                './FuzzyQueryParam.js': 47,
                './IpInfo': 68,
                './IpInfo.js': 68,
                './PAudienceGetProxyListReq': 69,
                './PAudienceGetProxyListReq.js': 69,
                './PAudienceGetProxyListRsp': 70,
                './PAudienceGetProxyListRsp.js': 70,
                './SlaveProxyInfo': 35,
                './SlaveProxyInfo.js': 35,
                './StreamAllocateInfo': 48,
                './StreamAllocateInfo.js': 48,
                './StreamCodecType': 32,
                './StreamCodecType.js': 32,
                './StreamGroupID': 34,
                './StreamGroupID.js': 34,
                './StreamType': 41,
                './StreamType.js': 41,
                './SubscribeResCode': 71,
                './SubscribeResCode.js': 71,
                './VoiceChatEx': 72,
                './VoiceChatEx.js': 72,
                './VpToken': 73,
                './VpToken.js': 73,
              };
              function r(e) {
                var t = a(e);
                return i(t);
              }
              function a(e) {
                if (!i.o(s, e)) {
                  var t = new Error("Cannot find module '" + e + "'");
                  throw ((t.code = 'MODULE_NOT_FOUND'), t);
                }
                return s[e];
              }
              (r.keys = function () {
                return Object.keys(s);
              }),
                (r.resolve = a),
                (e.exports = r),
                (r.id = 78);
            },
            function (e, t, i) {
              var s = {
                './AnchorDtsSei': 49,
                './AnchorDtsSei.js': 49,
                './AnchorSeiInfo': 74,
                './AnchorSeiInfo.js': 74,
                './HuyaDelaySeiData': 75,
                './HuyaDelaySeiData.js': 75,
                './ServerDtsSei': 50,
                './ServerDtsSei.js': 50,
                './ServerNodeInfo': 51,
                './ServerNodeInfo.js': 51,
              };
              function r(e) {
                var t = a(e);
                return i(t);
              }
              function a(e) {
                if (!i.o(s, e)) {
                  var t = new Error("Cannot find module '" + e + "'");
                  throw ((t.code = 'MODULE_NOT_FOUND'), t);
                }
                return s[e];
              }
              (r.keys = function () {
                return Object.keys(s);
              }),
                (r.resolve = a),
                (e.exports = r),
                (r.id = 79);
            },
            function (e, t, i) {
              'use strict';
              var s = window.URL || window.webkitURL;
              e.exports = function (e) {
                try {
                  var t;
                  try {
                    (t = new (window.BlobBuilder ||
                      window.WebKitBlobBuilder ||
                      window.MozBlobBuilder ||
                      window.MSBlobBuilder)()).append(e),
                      (t = t.getBlob('application/javascript; charset=utf-8'));
                  } catch (i) {
                    t = new Blob([e], { type: 'application/javascript; charset=utf-8' });
                  }
                  return s.createObjectURL(t);
                } catch (t) {
                  return 'data:application/javascript,' + encodeURIComponent(e);
                }
              };
            },
            function (e, t, i) {
              'use strict';
              i.r(t),
                i.d(t, 'default', function () {
                  return r;
                });
              var s = i(26);
              function r(e) {
                var t = i(84).default,
                  r = i(6).default,
                  a = i(16),
                  n = a.ToMainMessageType,
                  o = a.ReceiveMessageType;
                r.postMessage(n.WOREKR_READY);
                var h = new t();
                function u() {
                  r.postMessage(n.VIDEORENDERERROR);
                }
                requestAnimationFrame(function e() {
                  h.rafHandler(r.getNow()), requestAnimationFrame(e);
                }),
                  e.addEventListener('message', function (t) {
                    var i = t.data,
                      a = i.data;
                    switch (i.type) {
                      case o.START:
                        h.startVideoRender(a, u),
                          (e.mainSharedArrayBuffer = a.mainSharedArrayBuffer);
                        break;
                      case o.POSTFRAME:
                        break;
                      case o.RESIZE:
                        h.updateRect(a.sizes.width, a.sizes.height);
                        break;
                      case o.CLOSE:
                        (e.audioSamples = []),
                          (e.isBrowserHidden = !1),
                          (e.userPaused = !1),
                          h.destroy();
                        break;
                      case o.VISIBILITYCHANGE:
                        (e.isBrowserHidden = 'hidden' == a.state),
                          h.setBrowserHidden(e.isBrowserHidden);
                        break;
                      case o.FAST_OVER:
                        h.fastOver();
                        break;
                      case o.VIDEOSAMPLES:
                        h.appendVideoFrame(a.videoSamples);
                        break;
                      case o.AUDIOSAMPLES:
                        h.appendAudioFrame(a.audioSamples);
                        break;
                      case o.AVCCONFIG:
                        h.updateAVCConfig(a);
                        break;
                      case o.AVCPPS:
                      case o.AVCSPS:
                      case o.AVCVPS:
                        break;
                      case o.AACCONFIG:
                        h.updateAudioConfig(a.codec, a.sampleRate, a.numberOfChannels, a.timestamp);
                        break;
                      case o.UPDATE_VIDEOFPS:
                        h.updateVideoFPS(a.fps, a.noReferFps);
                        break;
                      case o.SET_PLAY_MINBUFFER:
                        h.setPlayMinBuffer(a.bufferLen);
                        break;
                      case o.SET_JITTER:
                        h.setJitter(a);
                        break;
                      case o.SET_USE_SOFTACCELERATION:
                        h.setUseSoftAcceleration();
                        break;
                      case o.UPDATE_SOFTACCELERATION:
                        h.updateSoftAcceleration();
                        break;
                      case o.LOCAL_CONFIG:
                        r.log('ReceiveMessageType.LOCAL_CONFIG', a), h.setLocalConfig(a);
                        break;
                      case o.PAUSE_VIDEO_DECODE:
                        r.log('ReceiveMessageType.PAUSE_VIDEO_DECODE', a), h.setPauseVideoDecode(a);
                        break;
                      case o.PAUSE_AUDIO_DECODE:
                        r.log('ReceiveMessageType.PAUSE_AUDIO_DECODE', a), h.setPauseAudioDecode(a);
                        break;
                      case o.ENABLE_DISCARD_VIDEO:
                        r.log('ReceiveMessageType.ENABLE_DISCARD_VIDEO', a.enableDiscard),
                          h.setEnableDiscard(a);
                        break;
                      case o.SET_AUDIO_WRITER:
                        r.log('ReceiveMessageType.SET_AUDIO_WRITER'),
                          h.startAudioRender(a.ageneratorWriter);
                        break;
                      case o.UPDATE_CURBITRATE:
                        r.log('ReceiveMessageType.UPDATE_CURBITRATE', a.curBitrate),
                          h.updateCurBitrate(a.curBitrate);
                        break;
                      case o.INIT_CONFIG:
                        r.log('ReceiveMessageType.INIT_CONFIG', JSON.stringify(a));
                        var n = JSON.parse(a.config);
                        h.initWebcodecCfg(n);
                        break;
                      case o.RECV_FPS:
                        h.setRealFps(a.recvFps);
                        break;
                      case o.LOG_CFG:
                        r.log('ReceiveMessageType.LOG_CFG '.concat(JSON.stringify(a))),
                          s.a.setCfg(a);
                        break;
                      case o.SET_ENHANCE:
                        r.log('ReceiveMessageType.LOG_CFG '.concat(JSON.stringify(a))),
                          h.setEnhance(a);
                        break;
                      case o.SET_SEGMENTTION:
                        r.log(
                          'ReceiveMessageType.LOG_CFG setSegmenttion '.concat(JSON.stringify(a)),
                        ),
                          h.setSegmenttion(a);
                        break;
                      case o.RECV_FAST_OVER:
                        r.log('ReceiveMessageType.LOG_CFG onRevFastOver'), h.onRevFastOver();
                        break;
                      case o.AV1_INIT_SEG:
                        h.initAv1Seg(a);
                        break;
                      case o.SEEK_TIME:
                        h.seek(a);
                        break;
                      case o.SET_PLAYBACKRATE:
                        h.setPlaybackRate(a);
                        break;
                      case o.SET_VOD_AV1:
                        h.setVodAv1();
                    }
                  });
              }
            },
            function (e, t, i) {
              var s = (function (e) {
                'use strict';
                var t = Object.prototype,
                  i = t.hasOwnProperty,
                  s = 'function' == typeof Symbol ? Symbol : {},
                  r = s.iterator || '@@iterator',
                  a = s.asyncIterator || '@@asyncIterator',
                  n = s.toStringTag || '@@toStringTag';
                function o(e, t, i, s) {
                  var r = t && t.prototype instanceof d ? t : d,
                    a = Object.create(r.prototype),
                    n = new E(s || []);
                  return (
                    (a._invoke = (function (e, t, i) {
                      var s = 'suspendedStart';
                      return function (r, a) {
                        if ('executing' === s) throw new Error('Generator is already running');
                        if ('completed' === s) {
                          if ('throw' === r) throw a;
                          return { value: void 0, done: !0 };
                        }
                        for (i.method = r, i.arg = a; ; ) {
                          var n = i.delegate;
                          if (n) {
                            var o = S(n, i);
                            if (o) {
                              if (o === u) continue;
                              return o;
                            }
                          }
                          if ('next' === i.method) i.sent = i._sent = i.arg;
                          else if ('throw' === i.method) {
                            if ('suspendedStart' === s) throw ((s = 'completed'), i.arg);
                            i.dispatchException(i.arg);
                          } else 'return' === i.method && i.abrupt('return', i.arg);
                          s = 'executing';
                          var d = h(e, t, i);
                          if ('normal' === d.type) {
                            if (((s = i.done ? 'completed' : 'suspendedYield'), d.arg === u))
                              continue;
                            return { value: d.arg, done: i.done };
                          }
                          'throw' === d.type &&
                            ((s = 'completed'), (i.method = 'throw'), (i.arg = d.arg));
                        }
                      };
                    })(e, i, n)),
                    a
                  );
                }
                function h(e, t, i) {
                  try {
                    return { type: 'normal', arg: e.call(t, i) };
                  } catch (e) {
                    return { type: 'throw', arg: e };
                  }
                }
                e.wrap = o;
                var u = {};
                function d() {}
                function c() {}
                function l() {}
                var p = {};
                p[r] = function () {
                  return this;
                };
                var f = Object.getPrototypeOf,
                  m = f && f(f(C([])));
                m && m !== t && i.call(m, r) && (p = m);
                var _ = (l.prototype = d.prototype = Object.create(p));
                function v(e) {
                  ['next', 'throw', 'return'].forEach(function (t) {
                    e[t] = function (e) {
                      return this._invoke(t, e);
                    };
                  });
                }
                function y(e, t) {
                  var s;
                  this._invoke = function (r, a) {
                    function n() {
                      return new t(function (s, n) {
                        !(function s(r, a, n, o) {
                          var u = h(e[r], e, a);
                          if ('throw' !== u.type) {
                            var d = u.arg,
                              c = d.value;
                            return c && 'object' == typeof c && i.call(c, '__await')
                              ? t.resolve(c.__await).then(
                                  function (e) {
                                    s('next', e, n, o);
                                  },
                                  function (e) {
                                    s('throw', e, n, o);
                                  },
                                )
                              : t.resolve(c).then(
                                  function (e) {
                                    (d.value = e), n(d);
                                  },
                                  function (e) {
                                    return s('throw', e, n, o);
                                  },
                                );
                          }
                          o(u.arg);
                        })(r, a, s, n);
                      });
                    }
                    return (s = s ? s.then(n, n) : n());
                  };
                }
                function S(e, t) {
                  var i = e.iterator[t.method];
                  if (void 0 === i) {
                    if (((t.delegate = null), 'throw' === t.method)) {
                      if (
                        e.iterator.return &&
                        ((t.method = 'return'), (t.arg = void 0), S(e, t), 'throw' === t.method)
                      )
                        return u;
                      (t.method = 'throw'),
                        (t.arg = new TypeError("The iterator does not provide a 'throw' method"));
                    }
                    return u;
                  }
                  var s = h(i, e.iterator, t.arg);
                  if ('throw' === s.type)
                    return (t.method = 'throw'), (t.arg = s.arg), (t.delegate = null), u;
                  var r = s.arg;
                  return r
                    ? r.done
                      ? ((t[e.resultName] = r.value),
                        (t.next = e.nextLoc),
                        'return' !== t.method && ((t.method = 'next'), (t.arg = void 0)),
                        (t.delegate = null),
                        u)
                      : r
                    : ((t.method = 'throw'),
                      (t.arg = new TypeError('iterator result is not an object')),
                      (t.delegate = null),
                      u);
                }
                function g(e) {
                  var t = { tryLoc: e[0] };
                  1 in e && (t.catchLoc = e[1]),
                    2 in e && ((t.finallyLoc = e[2]), (t.afterLoc = e[3])),
                    this.tryEntries.push(t);
                }
                function T(e) {
                  var t = e.completion || {};
                  (t.type = 'normal'), delete t.arg, (e.completion = t);
                }
                function E(e) {
                  (this.tryEntries = [{ tryLoc: 'root' }]), e.forEach(g, this), this.reset(!0);
                }
                function C(e) {
                  if (e) {
                    var t = e[r];
                    if (t) return t.call(e);
                    if ('function' == typeof e.next) return e;
                    if (!isNaN(e.length)) {
                      var s = -1,
                        a = function t() {
                          for (; ++s < e.length; )
                            if (i.call(e, s)) return (t.value = e[s]), (t.done = !1), t;
                          return (t.value = void 0), (t.done = !0), t;
                        };
                      return (a.next = a);
                    }
                  }
                  return { next: D };
                }
                function D() {
                  return { value: void 0, done: !0 };
                }
                return (
                  (c.prototype = _.constructor = l),
                  (l.constructor = c),
                  (l[n] = c.displayName = 'GeneratorFunction'),
                  (e.isGeneratorFunction = function (e) {
                    var t = 'function' == typeof e && e.constructor;
                    return !!t && (t === c || 'GeneratorFunction' === (t.displayName || t.name));
                  }),
                  (e.mark = function (e) {
                    return (
                      Object.setPrototypeOf
                        ? Object.setPrototypeOf(e, l)
                        : ((e.__proto__ = l), n in e || (e[n] = 'GeneratorFunction')),
                      (e.prototype = Object.create(_)),
                      e
                    );
                  }),
                  (e.awrap = function (e) {
                    return { __await: e };
                  }),
                  v(y.prototype),
                  (y.prototype[a] = function () {
                    return this;
                  }),
                  (e.AsyncIterator = y),
                  (e.async = function (t, i, s, r, a) {
                    void 0 === a && (a = Promise);
                    var n = new y(o(t, i, s, r), a);
                    return e.isGeneratorFunction(i)
                      ? n
                      : n.next().then(function (e) {
                          return e.done ? e.value : n.next();
                        });
                  }),
                  v(_),
                  (_[n] = 'Generator'),
                  (_[r] = function () {
                    return this;
                  }),
                  (_.toString = function () {
                    return '[object Generator]';
                  }),
                  (e.keys = function (e) {
                    var t = [];
                    for (var i in e) t.push(i);
                    return (
                      t.reverse(),
                      function i() {
                        for (; t.length; ) {
                          var s = t.pop();
                          if (s in e) return (i.value = s), (i.done = !1), i;
                        }
                        return (i.done = !0), i;
                      }
                    );
                  }),
                  (e.values = C),
                  (E.prototype = {
                    constructor: E,
                    reset: function (e) {
                      if (
                        ((this.prev = 0),
                        (this.next = 0),
                        (this.sent = this._sent = void 0),
                        (this.done = !1),
                        (this.delegate = null),
                        (this.method = 'next'),
                        (this.arg = void 0),
                        this.tryEntries.forEach(T),
                        !e)
                      )
                        for (var t in this)
                          't' === t.charAt(0) &&
                            i.call(this, t) &&
                            !isNaN(+t.slice(1)) &&
                            (this[t] = void 0);
                    },
                    stop: function () {
                      this.done = !0;
                      var e = this.tryEntries[0].completion;
                      if ('throw' === e.type) throw e.arg;
                      return this.rval;
                    },
                    dispatchException: function (e) {
                      if (this.done) throw e;
                      var t = this;
                      function s(i, s) {
                        return (
                          (n.type = 'throw'),
                          (n.arg = e),
                          (t.next = i),
                          s && ((t.method = 'next'), (t.arg = void 0)),
                          !!s
                        );
                      }
                      for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                        var a = this.tryEntries[r],
                          n = a.completion;
                        if ('root' === a.tryLoc) return s('end');
                        if (a.tryLoc <= this.prev) {
                          var o = i.call(a, 'catchLoc'),
                            h = i.call(a, 'finallyLoc');
                          if (o && h) {
                            if (this.prev < a.catchLoc) return s(a.catchLoc, !0);
                            if (this.prev < a.finallyLoc) return s(a.finallyLoc);
                          } else if (o) {
                            if (this.prev < a.catchLoc) return s(a.catchLoc, !0);
                          } else {
                            if (!h) throw new Error('try statement without catch or finally');
                            if (this.prev < a.finallyLoc) return s(a.finallyLoc);
                          }
                        }
                      }
                    },
                    abrupt: function (e, t) {
                      for (var s = this.tryEntries.length - 1; s >= 0; --s) {
                        var r = this.tryEntries[s];
                        if (
                          r.tryLoc <= this.prev &&
                          i.call(r, 'finallyLoc') &&
                          this.prev < r.finallyLoc
                        ) {
                          var a = r;
                          break;
                        }
                      }
                      a &&
                        ('break' === e || 'continue' === e) &&
                        a.tryLoc <= t &&
                        t <= a.finallyLoc &&
                        (a = null);
                      var n = a ? a.completion : {};
                      return (
                        (n.type = e),
                        (n.arg = t),
                        a
                          ? ((this.method = 'next'), (this.next = a.finallyLoc), u)
                          : this.complete(n)
                      );
                    },
                    complete: function (e, t) {
                      if ('throw' === e.type) throw e.arg;
                      return (
                        'break' === e.type || 'continue' === e.type
                          ? (this.next = e.arg)
                          : 'return' === e.type
                          ? ((this.rval = this.arg = e.arg),
                            (this.method = 'return'),
                            (this.next = 'end'))
                          : 'normal' === e.type && t && (this.next = t),
                        u
                      );
                    },
                    finish: function (e) {
                      for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                        var i = this.tryEntries[t];
                        if (i.finallyLoc === e)
                          return this.complete(i.completion, i.afterLoc), T(i), u;
                      }
                    },
                    catch: function (e) {
                      for (var t = this.tryEntries.length - 1; t >= 0; --t) {
                        var i = this.tryEntries[t];
                        if (i.tryLoc === e) {
                          var s = i.completion;
                          if ('throw' === s.type) {
                            var r = s.arg;
                            T(i);
                          }
                          return r;
                        }
                      }
                      throw new Error('illegal catch attempt');
                    },
                    delegateYield: function (e, t, i) {
                      return (
                        (this.delegate = { iterator: C(e), resultName: t, nextLoc: i }),
                        'next' === this.method && (this.arg = void 0),
                        u
                      );
                    },
                  }),
                  e
                );
              })(e.exports);
              try {
                regeneratorRuntime = s;
              } catch (e) {
                Function('r', 'regeneratorRuntime = r')(s);
              }
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(52),
                n = i.n(a),
                o = {
                  PLAY_STATUS: 'PLAY_STATUS',
                  PLAY_CARTON: 'PLAY_CARTON',
                  PLAY_TIME_STATUS: 'PLAY_TIME_STATUS',
                  VIDEO_PLAY: 'VIDEO_PLAY',
                  VIDEO_NATIVE_PLAY: 'VIDEO_NATIVE_PLAY',
                  VIDEO_PLAYING: 'VIDEO_PLAYING',
                  VIDEO_PAUSE: 'VIDEO_PAUSE',
                  VIDEO_BAD_QUALITY: 'VIDEO_BAD_QUALITY',
                  METADATA: 'METADATA',
                  RECV_VIDEO_FRAME: 'RECV_VIDEO_FRAME',
                  VIDEO_STOP: 'VIDEO_STOP',
                  VIDEO_SEEK: 'VIDEO_SEEK',
                  BROWSER_PAUSE: 'BROWSER_PAUSE',
                  AUDIO_PLAY: 'AUDIO_PLAY',
                  AUDIO_SOUND: 'AUDIO_SOUND',
                  ANCHOR_STOP: 'ANCHOR_STOP',
                  VIDEO_LINK_CLOSE: 'VIDEO_LINK_CLOSE',
                  NO_VIDEO: 'NO_VIDEO',
                  HLS_URL_UNAVAILABLE: 'HLS_URL_UNAVAILABLE',
                  HLS_URL_LOAD_TIMEOUT: 'HLS_URL_LOAD_TIMEOUT',
                  HLS_MAINFEST_LOAD_TIMEOUT: 'HLS_MAINFEST_LOAD_TIMEOUT',
                  FLV_URL_UNAVAILABLE: 'FLV_URL_UNAVAILABLE',
                  FLV_CHANGE_LINE: 'FLV_CHANGE_LINE',
                  FLV_URL_LOAD_TIMEOUT: 'FLV_URL_LOAD_TIMEOUT',
                  H5_PLAYER_ERROR: 'H5_PLAYER_ERROR',
                  PAUSE_5S_RETRY: 'PAUSE_5S_RETRY',
                  NO_DATA_RECEIVED: 'NO_DATA_RECEIVED',
                  P2P_REPORT: 'P2P_REPORT',
                  AUTO_LOG: 'AUTO_LOG',
                  DATA_METRIC: 'DATA_METRIC',
                  DATA_METRIC2: 'DATA_METRIC2',
                  P2P_TIMEOUT: 'P2P_TIMEOUT',
                  FLV_TO_P2P: 'FLV_TO_P2P',
                  FLV_TRY_TO_P2P: 'FLV_TRY_TO_P2P',
                  FLAC_AUDIO_START: 'FLAC_AUDIO_START',
                  FLAC_AUDIO_ERROR: 'FLAC_AUDIO_ERROR',
                  FLAC_AUDIO_NEED_RETRY: 'FLAC_AUDIO_NEED_RETRY',
                  SIGNAL_PLAY: 'SIGNAL_PLAY',
                  SIGNAL_HEART: 'SIGNAL_HEART',
                  SIGNAL_DATA: 'SIGNAL_DATA',
                  SIGNAL_ERROR: 'SIGNAL_ERROR',
                  H264_SEI_PLAY: 'H264_SEI_PLAY',
                  TRANS_END: 'TRANS_END',
                  NEED_UPDATE_M3U8: 'NEED_UPDATE_M3U8',
                  PLAYBACK_UPDATE: 'PLAYBACK_UPDATE',
                  PLAYBACK_M3U8_UPDATED: 'PLAYBACK_M3U8_UPDATED',
                  PLAYBACK_DIF_CDN: 'PLAYBACK_DIF_CDN',
                  UPDATE_INTERSITY: 'UPDATE_INTERSITY',
                  PLAY_DOWNLINK_INFO: 'PLAY_DOWNLINK_INFO',
                  PLAY_FRAME_BUFFER: 'PLAY_FRAME_BUFFER',
                  WEBRTC_VIDEO_ERROR: 'WEBRTC_VIDEO_ERROR',
                  SWITCH_DONE: 'SWITCH_DONE',
                  AUTO_BITRATE_CHANGED: 'AUTO_BITRATE_CHANGED',
                  AUTO_FORCE_RSP: 'AUTO_FORCE_RSP',
                  VISIBILITY_CHANGE: 'VISIBILITY_CHANGE',
                  REPLAY_VIDEO: 'REPLAY_VIDEO',
                  P2P_PLAYING_EVENT: 'P2P_PLAYING_EVENT',
                  TURN_TO_H264: 'TURN_TO_H264',
                  H265_VIDEO_RETRY: 'H265_VIDEO_RETRY',
                  H265_PLAY: 'H265_PLAY',
                  PAUSE_5SEC_ERROR: 'PAUSE_5SEC_ERROR',
                  TRY_TO_AV1: 'TRY_TO_AV1',
                  M3U8_PLAY_ENDED: 'M3U8_PLAY_ENDED',
                  SEI_INFO: 'SEI_INFO',
                  VIDEO_RESOLUTION_CHANGE: 'VIDEO_RESOLUTION_CHANGE',
                  TURN_TO_MSE: 'TURN_TO_MSE',
                  TURN_TO_WEBCODECS_SOFT: 'TURN_TO_WEBCODECS_SOFT',
                  WEBCODECS_RETRY: 'WEBCODECS_RETRY',
                  TURN_TO_H265_WASM: 'TURN_TO_H265_WASM',
                  SHIELD_AUDIO_SWITCH_STATUS: 'SHIELD_AUDIO_SWITCH_STATUS',
                  RESET_PLAYER: 'RESET_PLAYER',
                  PLAY_TIMEOUT: 'PLAY_TIMEOUT',
                  SEEK_TIMEOUT: 'SEEK_TIMEOUT',
                  ON_VIDEO_ENHANCE_ERROR: 'ON_VIDEO_ENHANCE_ERROR',
                  ON_VIDEO_ENHANCE_SUCCESS: 'ON_VIDEO_ENHANCE_SUCCESS',
                  ON_VIDEO_ENHANCE_UNSUPPORT: 'ON_VIDEO_ENHANCE_UNSUPPORT',
                  VIDEO_AVCCFG_CHANGE: 'VIDEO_AVCCFG_CHANGE',
                  VIDEO_ENDED: 'VIDEO_ENDED',
                },
                h = 'VIDEO_PLAYING',
                u = 'VIDEO_STOP',
                d = 'VIDEO_CACHING',
                c = 'BROWSER_PAUSE',
                l = o,
                p = i(1),
                f = 'VIDEO_CANPLAY',
                m = 'VIDEO_TIMEUPDATE',
                _ = 'VIDEO_PROGRESS',
                v = 'VIDEO_ERROR',
                y = 'VIDEO_ENDED',
                S = 'VIDEO_LOAD_START',
                g = i(12),
                T = [
                  l.H264_SEI_PLAY,
                  l.AUDIO_SOUND,
                  l.SIGNAL_DATA,
                  l.UPDATE_INTERSITY,
                  l.SIGNAL_HEART,
                  l.METADATA,
                  l.TRANS_END,
                  l.PLAY_DOWNLINK_INFO,
                  l.PLAY_FRAME_BUFFER,
                  l.PLAY_TIME_STATUS,
                  l.PLAYBACK_UPDATE,
                  l.PLAYBACK_M3U8_UPDATED,
                  l.SEI_INFO,
                  m,
                  _,
                ];
              function E() {
                var e = new n.a();
                return (
                  e.setMaxListeners(0),
                  (e.trigger = function (t) {
                    for (
                      var i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), r = 1;
                      r < i;
                      r++
                    )
                      s[r - 1] = arguments[r];
                    var a = s;
                    if (
                      ('Array' === s.constructor.name && (a = s[0]),
                      t === l.PLAY_STATUS
                        ? p.a.log(
                            '%c' + t + ' %c' + a.status,
                            'color:#F9F900;background:gray',
                            'color:#53FF53;background:gray',
                          )
                        : -1 === T.indexOf(t) &&
                          p.a.log('%c' + t, 'color:#F9F900;background:gray', a),
                      t === l.DATA_METRIC2 && navigator)
                    ) {
                      var n = navigator.userAgent;
                      if (-1 != (n = n.toLowerCase()).indexOf('headlesschrome')) return;
                    }
                    e.emit.apply(e, [t, t].concat(s));
                  }),
                  (e.off = function (t) {
                    for (
                      var i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), r = 1;
                      r < i;
                      r++
                    )
                      s[r - 1] = arguments[r];
                    e.removeListener.apply(e, [t].concat(s));
                  }),
                  e
                );
              }
              var C = i(0),
                D = i(5),
                P = i(37),
                A = i.n(P),
                I = i(4),
                k = !1,
                R = [],
                O = 0,
                b = null;
              function w(e, t) {
                for (var i = 0, s = R.length; i < s; i++) {
                  var r = R[i];
                  if (r.callback == e && r.thisObj == t) return r;
                }
                return null;
              }
              function L(e, t, i) {
                var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                  r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                if ((i = 0 | (Number(i) || 0)) < 10 || i % 10 != 0 || !e)
                  return p.a.error('Timer.add Invalide interval value or callback function.'), !1;
                var a = w(e, t);
                return (
                  a ||
                    ((a = { callback: e, thisObj: t, bindCallback: t ? e.bind(t) : e, param: s }),
                    R.push(a)),
                  (a.times = r),
                  (a.tickCount = 0),
                  (a.interval = i / 10),
                  (a.delayDel = !1),
                  M(),
                  !0
                );
              }
              function M() {
                b && 1 == Number(I.a.isForceUseWorker)
                  ? b.postMessage('start')
                  : !O && R.length > 0 && (O = setInterval(V, 10));
              }
              function V() {
                if (0 != R.length) {
                  k = !0;
                  for (var e = D.a.now(), t = R.length - 1; t >= 0; t--) {
                    var i = R[t];
                    if (i && !i.delayDel) {
                      if (++i.tickCount % i.interval == 0) {
                        var s = i.bindCallback,
                          r = i.tickCount / i.interval;
                        s(e, r, i.param),
                          i.times > 0 && i.times <= r && i.tickCount > 0 && R.splice(t, 1);
                      }
                    } else R.splice(t, 1);
                  }
                  k = !1;
                } else
                  b && 1 == Number(I.a.isForceUseWorker)
                    ? b.postMessage('stop')
                    : (clearInterval(O), (O = 0));
              }
              var N,
                F = {
                  initWorker: function () {
                    (b = A()(58)).addEventListener('message', function (e) {
                      1 == e.data.type && V();
                    }),
                      b.addEventListener('error', function (e) {
                        p.a.error('TimerWorker.error:', e.lineno + ',' + e.colno, e.message),
                          b.terminate(),
                          (b = null),
                          p.a.warn('[ TimerWorker terminate ]'),
                          M();
                      });
                  },
                  has: function (e, t) {
                    return !!w(e, t);
                  },
                  add: L,
                  remove: function (e, t) {
                    for (var i = 0, s = R.length; i < s; i++) {
                      var r = R[i];
                      if (r.callback == e && r.thisObj == t)
                        return k ? (r.delayDel = !0) : R.splice(i, 1), !0;
                    }
                    return !1;
                  },
                  once: function (e, t, i, s) {
                    L(e, t, i + 10, s, 1);
                  },
                  getSize: function () {
                    return R.length;
                  },
                },
                B = i(11),
                U = i(18),
                x = i(10),
                H = function (e, t) {
                  var i = 'cdndomain',
                    s = (t = t || '').match(/\/\/(.+?)\//i);
                  s && s.length > 1 && (i = s[1]), e.setComDim(C.a.DIM_COM.CDNDOMAIN, i);
                },
                W = new ((function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._hlsPlayer = null),
                      (this._m3u8Status = 0),
                      (this._m3u8Loader = null),
                      (this._firstTs = null),
                      (this._firstFragStatus = 0),
                      (this._mp4Status = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setHlsPlayer',
                        value: function (e) {
                          this._hlsPlayer = e;
                        },
                      },
                      {
                        key: 'setM3u8Loader',
                        value: function (e) {
                          this._m3u8Loader = e;
                        },
                      },
                      {
                        key: 'setM3u8Status',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                          p.a.log('VodNoPictureHelper.setM3u8Status status: ', e),
                            (this._m3u8Status = e);
                        },
                      },
                      {
                        key: 'getM3u8Status',
                        value: function () {
                          if (0 !== this._m3u8Status || !this._m3u8Loader) return this._m3u8Status;
                          var e = this._m3u8Loader.getLoaderHandler();
                          return e
                            ? (e.status >= 200 && e.status < 300 && 4 === e.readyState
                                ? (this._m3u8Status = 1)
                                : e.status >= 200 && e.status < 300 && e.readyState < 4
                                ? (this._m3u8Status = -4)
                                : e.status >= 300
                                ? (this._m3u8Status = -1)
                                : 0 === e.status && 4 === e.readyState
                                ? (this._m3u8Status = -2)
                                : (this._m3u8Status = -3),
                              this._m3u8Status)
                            : this._m3u8Status;
                        },
                      },
                      {
                        key: 'getM3u8Reason',
                        value: function () {
                          var e = 0;
                          switch (this.getM3u8Status()) {
                            case -1:
                              e = 101;
                              break;
                            case -2:
                              e = 102;
                              break;
                            case -4:
                              e = 104;
                              break;
                            case -3:
                              e = 103;
                          }
                          return e;
                        },
                      },
                      {
                        key: 'setFirstTs',
                        value: function (e) {
                          this._firstTs = e;
                        },
                      },
                      {
                        key: 'setFirstFragStatus',
                        value: function (e) {
                          p.a.log('VodNoPictureHelper.setFirstFragStatus status: ', e),
                            (this._firstFragStatus = e);
                        },
                      },
                      {
                        key: 'getFirstFragStatus',
                        value: function () {
                          return this._firstFragStatus;
                        },
                      },
                      {
                        key: 'getTsReason',
                        value: function () {
                          var e = 0;
                          switch (this._firstFragStatus) {
                            case 1:
                              e = 106;
                              break;
                            case -1:
                              e = 105;
                              break;
                            case -2:
                              e = 106;
                              break;
                            case 2:
                              e = 107;
                              break;
                            case -3:
                              e = 108;
                              break;
                            case 3:
                            case 4:
                              this._hlsPlayer &&
                                (e = this._hlsPlayer.getBufferLen() <= 200 ? 109 : 110);
                              break;
                            case -4:
                              e = 111;
                          }
                          return e;
                        },
                      },
                      {
                        key: 'getHlsNoPictureReason',
                        value: function () {
                          var e = 0;
                          return (
                            (this._firstTs || 0 === (e = this.getM3u8Reason())) &&
                              (e = this.getTsReason()),
                            0 === e && (e = 112),
                            p.a.log('VodNoPictureHelper.getHlsNoPictureReason reason: ', e),
                            e
                          );
                        },
                      },
                      {
                        key: 'setMP4Status',
                        value: function (e) {
                          this._mp4Status = e;
                        },
                      },
                      {
                        key: 'getMP4NoPictureReason',
                        value: function () {
                          var e = 0;
                          switch (this._mp4Status) {
                            case 1:
                              e = 113;
                              break;
                            case -1:
                              e = 114;
                          }
                          return (
                            0 === e && (e = 115),
                            p.a.log('VodNoPictureHelper.getMP4NoPictureReason reason: ', e),
                            e
                          );
                        },
                      },
                    ]),
                    e
                  );
                })())(),
                G = i(17),
                j = (function () {
                  function e() {
                    Object(s.a)(this, e);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'create',
                        value: function (e) {
                          return (
                            e ||
                              (((e = document.createElement('video')).autoplay =
                                'safari' !== (g.a.name + '').toLowerCase()),
                              e.setAttribute('playsinline', !0),
                              e.setAttribute('webkit-playsinline', !0),
                              (e.muted = !1),
                              (e.id = '_video_'.concat(Math.floor(1e3 * Math.random())))),
                            e
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Y = { CODE: 1, PRIORITY: 11 },
                q = { CODE: 13, PRIORITY: 8 },
                K = { CODE: 14, PRIORITY: 9 },
                J = { CODE: 15, PRIORITY: 10 },
                z = { CODE: 18, PRIORITY: 5 },
                Q = { CODE: 19, PRIORITY: 3 },
                X = { CODE: 20, PRIORITY: 4 },
                $ = { CODE: 21, PRIORITY: 2 },
                Z = { CODE: 22, PRIORITY: 1 },
                ee = (function () {
                  function e(t, i) {
                    var r = i.stat,
                      a = i.statVod,
                      n = i.tsdb,
                      o = i.videoElement;
                    Object(s.a)(this, e),
                      (this.eventEmitter = t),
                      (this.stat = r),
                      (this.statVod = a),
                      (this.tsdb = n),
                      (this.started = !1),
                      (this.videoElement = j.create(o)),
                      (this.createVideoElmInner = !1),
                      (this.videoStatus = u),
                      (this.startTs = 0),
                      (this.lastCheckPlayTs = 0),
                      (this.lastPausePlayTs = 0),
                      (this.lastPauseTs = 0),
                      (this.resumeTs = 0),
                      (this.videoIsBadQuality = !1),
                      (this.pauseDuration = 0),
                      (this.pauseDurationReal = 0),
                      (this.pauseTimes = 0),
                      (this.pauseBuffer = []),
                      (this.pauseDownBuffer = []),
                      (this.pauseCurrentTime = []),
                      (this.seeking = !1),
                      (this.downTotalBufTs = 0),
                      (this.videoDuration = 0),
                      (this.videoLoadTime = 0),
                      (this.videoLoadTimeSent = !1),
                      (this.playTimeout = 5e3),
                      (this.lastInfo = null),
                      (this._onLoadedMetadataBind = this._onLoadedMetadata.bind(this)),
                      (this._onLoadedDataBind = this._onLoadedData.bind(this)),
                      (this._onVideoEndedBind = this._onVideoEnded.bind(this)),
                      (this._onVideoPlayingBind = this._onVideoPlaying.bind(this)),
                      (this._onVideoErrorBind = this._onVideoError.bind(this)),
                      (this._onVideoSeekBind = this._onVideoSeek.bind(this)),
                      (this._onVideoSeekingBind = this._onVideoSeeking.bind(this)),
                      (this._isEnded = !1),
                      (this._seekCnt = 0),
                      (this.vodBadReason = 0),
                      (this.videoErrorTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setVolume',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          this.videoElement && (this.videoElement.volume = e);
                        },
                      },
                      {
                        key: 'start',
                        value: function () {
                          var e = this,
                            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                          (this.lastInfo = t),
                            (this.resumeTs = 0),
                            (this.videoErrorTs = 0),
                            this.started && this.stop(),
                            p.a.log('MP4Player is started'),
                            (this.started = !0);
                          var i = t.url;
                          (i = this._addUrlParams(i)),
                            this._addVideoListeners(),
                            (this.videoElement.src = i),
                            this.videoElement.load(),
                            t.seekTime && this.seek(t.seekTime),
                            (this.startTs = D.a.now()),
                            W.setMP4Status(1),
                            this.stat.setComDim(C.a.DIM_COM.STREAM_URL, i),
                            this.stat.setComDim(C.a.DIM_COM.STREAM_TYPE, 6),
                            this.stat.setComDim(C.a.VOD_DIM_COM.VOD_MP4_SIZE, t.mp4Size || 0),
                            this.stat.setComDim(C.a.VOD_DIM_COM.VOD_DURATION, t.duration || 0),
                            this.stat.setComDim(C.a.DIM_COM.ANCHOR_UID, t.presenterUid || 0);
                          var s = t.vid || x.b.getQueryString('vid', this.url);
                          this.stat.setComDim(C.a.VOD_DIM_COM.VOD_VIDEOSOURCEID, s || ''),
                            H(this.stat, i),
                            this.statVod.setComDim(C.a.DIM_COM.STREAM_URL, i),
                            this.statVod.setComDim(C.a.DIM_COM.STREAM_TYPE, 6),
                            this.statVod.setComDim(C.a.VOD_DIM_COM.VOD_MP4_SIZE, t.mp4Size || 0),
                            this.statVod.setComDim(C.a.VOD_DIM_COM.VOD_DURATION, t.duration || 0),
                            this.statVod.setComDim(C.a.VOD_DIM_COM.VOD_VIDEOSOURCEID, s || ''),
                            this.statVod.setComDim(
                              C.a.VOD_DIM_COM.VODANCHORID,
                              t.presenterUid || 0,
                            ),
                            t.hasOwnProperty('guid') &&
                              this.statVod.setComDim(C.a.VOD_DIM_COM.BACKUP_FIELD3, t.guid),
                            H(this.statVod, i),
                            F.once(this._playVideoFailed, this, this.playTimeout);
                          var r = this.videoElement.play();
                          r &&
                            r
                              .then(function () {
                                p.a.log('MP4Player autoplay success');
                              })
                              .catch(function (t) {
                                p.a.warn(
                                  'MP4Player autoplay fail, change volume to 0 try play again,  error: '.concat(
                                    t.message,
                                  ),
                                ),
                                  e.eventEmitter.trigger(l.BROWSER_PAUSE);
                              });
                        },
                      },
                      {
                        key: '_playVideoFailed',
                        value: function () {
                          p.a.log('MP4Player _playVideoFailed'),
                            this.eventEmitter.trigger(l.H5_PLAYER_ERROR, {
                              code: B.a.H5_ERROR_CODE.PLAY_TIMEOUT,
                              error: 'play failed',
                            }),
                            F.remove(this._playVideoFailed, this);
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          (this.started = !1),
                            (this.videoStatus = u),
                            (this.videoElement.src = ''),
                            this._removeVideoListeners(),
                            this._removePlayTimer(),
                            this._statReport(!0),
                            F.remove(this._playVideoFailed, this),
                            p.a.log('MP4Player is stopped');
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          p.a.log('MP4Player pause'),
                            this.videoElement && this.videoElement.pause();
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          p.a.log('MP4Player.play'), this.videoElement && this.videoElement.play();
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          p.a.log('MP4Player seek', e),
                            (this.seeking = !0),
                            (this.videoElement.currentTime = e);
                        },
                      },
                      {
                        key: 'getDurationTime',
                        value: function () {
                          return this.videoElement.duration;
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this.videoElement.currentTime;
                        },
                      },
                      {
                        key: 'addNoPictureReason',
                        value: function () {
                          var e = W.getMP4NoPictureReason();
                          this.stat.setActDim(C.a.VOD_DIM_COM.VOD_NO_PICTURE_REASON, e),
                            this.statVod.setActDim(C.a.VOD_DIM_COM.VOD_NO_PICTURE_REASON, e);
                        },
                      },
                      {
                        key: 'sendNoPicture',
                        value: function (e) {
                          this._sendVideoLoadTime(e);
                        },
                      },
                      {
                        key: '_sendVideoLoadTime',
                        value: function (e) {
                          if (!this.videoLoadTimeSent) {
                            (this.videoLoadTimeSent = !0),
                              (e = e || D.a.now() - this.startTs),
                              this.statVod.setActDim(C.a.VOD_DIM_COM.CREATE_TIME, e);
                            var t = this.videoLoadTime;
                            this.hasPicture || (t = 99999);
                            var i = 0;
                            0 != this.videoErrorTs && (i = this.videoErrorTs - this.startTs),
                              p.a.log(
                                'MP4Player _sendVideoLoadTime, loadTime='
                                  .concat(t, ', errorLoadTime=')
                                  .concat(i),
                              ),
                              this.tsdb.sendVodMP4Time({ loadTime: t, errorLoadTime: i });
                          }
                        },
                      },
                      {
                        key: '_addUrlParams',
                        value: function (e) {
                          var t = I.a.platform,
                            i = B.a.PLATFORM_TYPE[t] || B.a.PLATFORM_TYPE.web;
                          e += -1 === e.indexOf('?') ? '?' : '&';
                          var s =
                            t === B.a.PLATFORM_TYPE_NAME.wap
                              ? '&uid='.concat(U.a.uid, '&uuid=').concat(U.a.uuid)
                              : '&u='.concat(U.a.convertUid);
                          return e + ''.concat(s, '&t=').concat(i, '&sv=').concat(2401251130);
                        },
                      },
                      {
                        key: '_checkVideoFreeze',
                        value: function () {
                          if (this.videoElement && !this.paused) {
                            var e = +Date.now(),
                              t = +Date.now() - this.lastPauseTs,
                              i = this.videoElement.currentTime;
                            if (
                              this.lastCheckPlayTs &&
                              this.lastCheckPlayTs === this.videoElement.currentTime
                            ) {
                              var s = this.lastPausePlayTs,
                                r = this.getBufferLen();
                              return (
                                p.a.log(
                                  'MP4._checkVideoFreeze,buffer='
                                    .concat(r, ',totalBuffer=')
                                    .concat(this.downTotalBufTs, ',pauseDuration=')
                                    .concat(t, ',curtime=')
                                    .concat(this.videoElement.currentTime, ',resumeTs=')
                                    .concat(this.resumeTs, ',delta=')
                                    .concat(e - this.resumeTs, ',seeking=')
                                    .concat(this.seeking),
                                ),
                                t >= 200 && s !== this.videoElement.currentTime
                                  ? (this.seeking ||
                                      ((this.videoIsBadQuality = !0),
                                      (this.pauseDuration += t),
                                      (this.pauseTimes += 1),
                                      t >= 200 &&
                                        (this.pauseBuffer.length < 20 && this.pauseBuffer.push(r),
                                        this.pauseDownBuffer.length < 20 &&
                                          this.pauseDownBuffer.push(~~this.downTotalBufTs),
                                        this.pauseCurrentTime.length < 20 &&
                                          this.pauseCurrentTime.push(~~i)),
                                      (this.vodBadReason = r < 2e3 ? K.CODE : X.CODE)),
                                    (this.pauseDurationReal += t),
                                    (this.lastPauseTs = +Date.now()),
                                    (this.lastPausePlayTs = this.videoElement.currentTime),
                                    (this.videoStatus = d),
                                    this.eventEmitter.trigger(l.PLAY_CARTON, {
                                      video: this.videoElement,
                                      pauseDuration: this.pauseDurationReal,
                                    }))
                                  : t >= 200 &&
                                    (this.seeking || (this.pauseDuration += t),
                                    (this.pauseDurationReal += t),
                                    (this.lastPauseTs = +Date.now()),
                                    (this.videoStatus = d),
                                    this.eventEmitter.trigger(l.PLAY_CARTON, {
                                      video: this.videoElement,
                                      pauseDuration: this.pauseDurationReal,
                                    })),
                                void (
                                  0 != this.resumeTs &&
                                  e - this.resumeTs >= 5e3 &&
                                  this.pause5sRestart(this.videoElement.currentTime)
                                )
                              );
                            }
                            (this.resumeTs = +Date.now()),
                              (this.lastCheckPlayTs = this.videoElement.currentTime),
                              (this.lastPauseTs = +Date.now());
                          }
                        },
                      },
                      {
                        key: '_checkBuffer',
                        value: function () {
                          if (this.downTotalBufTs !== this.videoDuration) {
                            for (
                              var e = this.videoElement.buffered, t = e.length, i = 0, s = 0;
                              s < t;
                              s++
                            ) {
                              var r = e.start(s);
                              i += e.end(s) - r;
                            }
                            this.downTotalBufTs = i;
                          }
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          var e = 0;
                          if (this.videoElement) {
                            var t = this.videoElement.buffered;
                            t.length > 0 &&
                              (e =
                                (1e3 * (t.end(t.length - 1) - this.videoElement.currentTime)) >> 0);
                          }
                          return e;
                        },
                      },
                      {
                        key: '_addVideoListeners',
                        value: function () {
                          this.videoElement.addEventListener(
                            'loadedmetadata',
                            this._onLoadedMetadataBind,
                          ),
                            this.videoElement.addEventListener(
                              'loadeddata',
                              this._onLoadedDataBind,
                            ),
                            this.videoElement.addEventListener('ended', this._onVideoEndedBind),
                            this.videoElement.addEventListener('playing', this._onVideoPlayingBind),
                            this.videoElement.addEventListener('error', this._onVideoErrorBind),
                            this.videoElement.addEventListener('seeking', this._onVideoSeekingBind),
                            this.videoElement.addEventListener('seeked', this._onVideoSeekBind);
                        },
                      },
                      {
                        key: '_removeVideoListeners',
                        value: function () {
                          this.videoElement.removeEventListener(
                            'loadedmetadata',
                            this._onLoadedMetadataBind,
                          ),
                            this.videoElement.removeEventListener(
                              'loadeddata',
                              this._onLoadedDataBind,
                            ),
                            this.videoElement.removeEventListener('ended', this._onVideoEndedBind),
                            this.videoElement.removeEventListener(
                              'playing',
                              this._onVideoPlayingBind,
                            ),
                            this.videoElement.removeEventListener('error', this._onVideoErrorBind),
                            this.videoElement.removeEventListener(
                              'seeking',
                              this._onVideoSeekingBind,
                            ),
                            this.videoElement.removeEventListener('seeked', this._onVideoSeekBind);
                        },
                      },
                      {
                        key: '_initPlayTimer',
                        value: function () {
                          F.add(this._checkVideoFreeze, this, 100),
                            F.add(this._checkBuffer, this, 100),
                            F.add(this._onHeart20sMetric, this, 1e3);
                        },
                      },
                      {
                        key: '_removePlayTimer',
                        value: function () {
                          F.remove(this._checkVideoFreeze, this),
                            F.remove(this._checkBuffer, this),
                            F.remove(this._onHeart20sMetric, this);
                        },
                      },
                      {
                        key: '_onLoadedMetadata',
                        value: function (e) {
                          p.a.log('MP4Player._onLoadedData'),
                            this.eventEmitter.trigger(l.VIDEO_PLAY, {
                              video: this.videoElement,
                              width: this.videoElement.videoWidth,
                              height: this.videoElement.videoHeight,
                            }),
                            F.remove(this._playVideoFailed, this);
                        },
                      },
                      {
                        key: '_onLoadedData',
                        value: function (e) {
                          var t = D.a.now();
                          (this.videoStatus = h),
                            (this.videoDuration = this.videoElement.duration),
                            p.a.log(
                              'MP4Player._onLoadedData, currentTime='
                                .concat(this.videoElement.currentTime, ', videoDuration=')
                                .concat(this.videoDuration),
                            ),
                            this.triggerPlayTimeStatus(),
                            this._initPlayTimer(),
                            0 !== this.startTs &&
                              ((this.videoLoadTime = t - this.startTs),
                              this.tsdb.sendMP4Time({ loadTime: this.videoLoadTime }),
                              !this.videoLoadTimeSent &&
                                this.videoLoadTime <= 1e4 &&
                                this._sendVideoLoadTime()),
                            this.stat.setComDim(
                              C.a.DIM_COM.STREAM_TOTAL_DURATION,
                              this.videoDuration,
                            );
                        },
                      },
                      {
                        key: '_onVideoEnded',
                        value: function (e) {
                          p.a.log('MP4Player._onVideoEnded'),
                            this.triggerPlayTimeStatus(),
                            this.eventEmitter.trigger(l.VIDEO_ENDED, { video: this.videoElement }),
                            (this._isEnded = !0),
                            this.started && this._statReport(!0);
                        },
                      },
                      {
                        key: '_onVideoPlaying',
                        value: function () {
                          p.a.log('MP4Player._onVideoPlaying'),
                            (this.seeking = !1),
                            (this._isEnded = !1);
                        },
                      },
                      {
                        key: '_onVideoError',
                        value: function (e) {
                          p.a.log('MP4Player._onVideoError', e),
                            (this.videoErrorTs = D.a.now()),
                            W.setMP4Status(-1);
                        },
                      },
                      {
                        key: '_onVideoSeeking',
                        value: function (e) {
                          var t = this.videoElement ? this.videoElement.currentTime : 0;
                          p.a.log('MP4Player._onVideoSeeking, cur='.concat(t), e),
                            (this.seeking = !0);
                        },
                      },
                      {
                        key: '_onVideoSeek',
                        value: function (e) {
                          var t = this.videoElement ? this.videoElement.currentTime : 0;
                          (this.seeking = !1),
                            p.a.log('MP4Player._onVideoSeek, cur='.concat(t), e),
                            t > 1 && this._seekCnt++;
                        },
                      },
                      {
                        key: '_onHeart20sMetric',
                        value: function (e, t) {
                          this.started &&
                            (t % 20 != 0 || this._isEnded || this._statReport(!1),
                            this.triggerPlayTimeStatus());
                        },
                      },
                      {
                        key: '_statReport',
                        value: function () {
                          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                          this.stat.setCoreDim(
                            C.a.DIM_CORE.VIDEO_BAD_QUALITY,
                            this.videoIsBadQuality ? 100 : 0,
                          ),
                            this.stat.setCore(C.a.CORE.VIDEO_BLOCK_COUNT, this.pauseTimes),
                            this.stat.setCore(C.a.CORE.VIDEO_BLOCK_DURATION, this.pauseDuration),
                            this.stat.setCore(C.a.CORE.STREAM_BUFFERED, this.downTotalBufTs),
                            this.statVod.setCore(C.a.VOD_CORE.VOD_BAD_REASON, this.vodBadReason),
                            this.statVod.setComDim(
                              C.a.VOD_DIM_COM.BACKUP_FIELD6,
                              this.getBufferLen(),
                            ),
                            this.statVod.setComDim(
                              C.a.VOD_DIM_COM.BACKUP_FIELD5,
                              Math.floor(this.downTotalBufTs),
                            );
                          var t =
                            this.pauseCurrentTime.join(',') +
                            '|' +
                            this.pauseBuffer.join(',') +
                            '|' +
                            this.pauseDownBuffer.join(',') +
                            '|' +
                            this._seekCnt;
                          this.statVod.setComDim(C.a.VOD_DIM_COM.BACKUP_FIELD2, t),
                            this.statVod.setCore(
                              C.a.VOD_CORE.VOD_BAD_QUALITY,
                              this.videoIsBadQuality ? 100 : 0,
                            ),
                            this.statVod.setCore(C.a.VOD_CORE.VOD_BLOCK_COUNT, this.pauseTimes),
                            this.statVod.setCore(
                              C.a.VOD_CORE.VOD_BLOCK_DURATION,
                              this.pauseDuration,
                            ),
                            this.statVod.setCore(C.a.CORE.STREAM_BUFFERED, this.downTotalBufTs),
                            (this.lastCheckPlayTs = 0),
                            (this.lastPausePlayTs = 0),
                            (this.lastPauseTs = 0),
                            (this.videoIsBadQuality = !1),
                            (this.pauseDuration = 0),
                            (this.pauseTimes = 0),
                            (this.pauseBuffer.length = 0),
                            (this.pauseDownBuffer.length = 0),
                            (this.pauseCurrentTime.length = 0),
                            (this._seekCnt = 0),
                            (this.vodBadReason = 0);
                          var i = [];
                          this.stat.fill(i, e), this.statVod.fill(i, e), this.tsdb.sendMetrics(i);
                        },
                      },
                      {
                        key: 'triggerPlayTimeStatus',
                        value: function () {
                          this.eventEmitter.trigger(l.PLAY_TIME_STATUS, {
                            current: this.getCurrentTime(),
                            total: this.getDurationTime(),
                          });
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          p.a.log('MP4Player.setVolume', e),
                            this.videoElement && (this.videoElement.volume = e);
                        },
                      },
                      {
                        key: 'getCodecType',
                        value: function () {
                          return G.a.H264;
                        },
                      },
                      {
                        key: 'getVideoWidth',
                        value: function () {
                          return this.videoElement && this.videoElement.videoWidth;
                        },
                      },
                      {
                        key: 'getVideoHeight',
                        value: function () {
                          return this.videoElement && this.videoElement.videoHeight;
                        },
                      },
                      {
                        key: 'getFps',
                        value: function () {
                          return -100;
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          p.a.log('MP4Player.setPlaybackRate', e),
                            this.videoElement && (this.videoElement.playbackRate = Number(e));
                        },
                      },
                      {
                        key: 'setLoop',
                        value: function (e) {
                          p.a.log('MP4Player.setLoop', e),
                            this.videoElement && (this.videoElement.loop = !!e);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          p.a.log('MP4Player.setMuted', e),
                            this.videoElement && (this.videoElement.muted = !!e);
                        },
                      },
                      {
                        key: 'pause5sRestart',
                        value: function () {
                          if ((p.a.log('MP4Player.pause5sRestart!'), this.videoElement)) {
                            var e = this.videoElement.currentTime;
                            this.start(this.lastInfo), this.seek(e);
                          }
                        },
                      },
                      {
                        key: 'isPlaying',
                        get: function () {
                          return this.videoStatus !== u;
                        },
                      },
                      {
                        key: 'hasPicture',
                        get: function () {
                          return this.isPlaying;
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this.isPlaying && this.videoElement.paused;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                te = (function () {
                  function e(t) {
                    Object(s.a)(this, e), t && t.xhrSetup && (this.xhrSetup = t.xhrSetup);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.abort(), (this.loader = null);
                        },
                      },
                      {
                        key: 'abort',
                        value: function () {
                          this.loader && ((this.stats.aborted = !0), this.loader.abort()),
                            this.timeoutHandle && window.clearTimeout(this.timeoutHandle);
                        },
                      },
                      {
                        key: 'load',
                        value: function (e, t, i, s, r, a, n, o) {
                          var h =
                            arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null;
                          (this.url = e),
                            (this.responseType = t),
                            (this.onSuccess = i),
                            (this.onError = s),
                            (this.onTimeout = r),
                            (this.onProgress = h),
                            (this.stats = { trequest: performance.now(), retry: 0 }),
                            (this.timeout = a),
                            (this.maxRetry = n),
                            (this.retryDelay = o),
                            (this.timeoutHandle = window.setTimeout(
                              this.loadtimeout.bind(this),
                              a,
                            )),
                            this.loadInternal();
                        },
                      },
                      {
                        key: 'loadBuffer',
                        value: function (e, t, i, s, r, a, n, o, h) {
                          (this.onOpen = t),
                            this.load(
                              e,
                              'arraybuffer',
                              function (e) {
                                var t = e.target;
                                return s(t.response);
                              },
                              r,
                              a,
                              n,
                              o,
                              h,
                            );
                        },
                      },
                      {
                        key: 'loadInternal',
                        value: function () {
                          var e = (this.loader = new XMLHttpRequest());
                          (e.onload = this.loadsuccess.bind(this)),
                            (e.onerror = this.loaderror.bind(this)),
                            (e.onprogress = this.loadprogress.bind(this)),
                            (e.onloadend = this.loadend.bind(this)),
                            (e.onloadstart = this.loadstart.bind(this)),
                            (e.responseType = this.responseType),
                            ('' !== this.responseType && 'text' !== this.responseType) ||
                              !e.overrideMimeType ||
                              e.overrideMimeType('text/plain; charset=utf-8'),
                            e.open('GET', this.url, !0),
                            null != this.fromByte &&
                              null != this.toByte &&
                              e.setRequestHeader(
                                'Range',
                                'bytes=' + this.fromByte + '-' + this.toByte,
                              ),
                            (this.stats.tstart = null),
                            (this.stats.loaded = 0),
                            this.xhrSetup && this.xhrSetup(e),
                            (this.stats.tstart = performance.now()),
                            e.send();
                        },
                      },
                      {
                        key: 'loadsuccess',
                        value: function (e) {
                          404 === e.currentTarget.status
                            ? this.onError(e)
                            : (window.clearTimeout(this.timeoutHandle),
                              (this.stats.tload = performance.now()),
                              (e.requestURL = this.url),
                              this.onSuccess(e, this.stats));
                        },
                      },
                      {
                        key: 'loaderror',
                        value: function (e) {
                          if (404 === e.currentTarget.status || 0 === e.currentTarget.status)
                            return window.clearTimeout(this.timeoutHandle), void this.onError(e);
                          this.stats.retry < this.maxRetry
                            ? (p.a.warn(
                                'XhrLoader.loaderror url=' +
                                  this.url +
                                  ' retryDelay=' +
                                  this.retryDelay,
                              ),
                              this.destroy(),
                              window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                              (this.retryDelay = Math.min(2 * this.retryDelay, 64e3)),
                              this.stats.retry++)
                            : (window.clearTimeout(this.timeoutHandle),
                              p.a.warn('XhrLoader.loaderror reach max retry url=' + this.url),
                              this.onError(e));
                        },
                      },
                      {
                        key: 'loadtimeout',
                        value: function () {
                          this.stats.retry < this.maxRetry
                            ? (p.a.warn(
                                'XhrLoader.loadtimeout url=' +
                                  this.url +
                                  ' retryDelay=' +
                                  this.retryDelay,
                              ),
                              this.destroy(),
                              window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                              (this.retryDelay = Math.min(2 * this.retryDelay, 64e3)),
                              this.stats.retry++)
                            : (window.clearTimeout(this.timeoutHandle),
                              p.a.warn('XhrLoader.loadtimeout max retry url=' + this.url),
                              this.onTimeout(this.loader));
                        },
                      },
                      {
                        key: 'loadstart',
                        value: function () {
                          this.onOpen && this.onOpen();
                        },
                      },
                      {
                        key: 'loadprogress',
                        value: function (e) {
                          var t = this.stats;
                          null === t.tfirst && (t.tfirst = performance.now()),
                            (t.loaded = e.loaded),
                            this.onProgress && this.onProgress(e, t);
                        },
                      },
                      {
                        key: 'loadend',
                        value: function (e) {
                          404 === e.currentTarget.status && this.loaderror(e);
                        },
                      },
                      {
                        key: 'getResponseHeader',
                        value: function (e) {
                          return (
                            this.loader &&
                            this.loader.getResponseHeader &&
                            this.loader.getResponseHeader(e)
                          );
                        },
                      },
                      {
                        key: 'getLoaderHandler',
                        value: function () {
                          return this.loader;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ie = i(43),
                se = i.n(ie),
                re = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.startSeq = 1e3),
                      (this.m3u8Len = 0),
                      (this.preTsArr = void 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'genSnFromM3u8',
                        value: function (e) {
                          var t = this.convertM3u8ToArray(e);
                          if (void 0 === this.preTsArr) this.preTsArr = t;
                          else {
                            var i = this.findSeq(this.preTsArr, t[0], this.startSeq);
                            -1 === i && (i = this.startSeq + this.preTsArr.length),
                              (this.preTsArr = t),
                              (this.startSeq = i);
                          }
                          return this.startSeq;
                        },
                      },
                      {
                        key: 'convertM3u8ToArray',
                        value: function (e) {
                          for (
                            var t, i = /#EXT(INF):([\d\.]+)[^\r\n]*[\r\n]+([^#|\r\n]+)?/gi, s = [];
                            null !== (t = i.exec(e));

                          )
                            t.shift(),
                              'INF' ===
                                (t = t.filter(function (e) {
                                  return void 0 !== e;
                                }))[0] && s.push(t[2]),
                              (t = []);
                          return s;
                        },
                      },
                      {
                        key: 'findSeq',
                        value: function (e, t, i) {
                          for (var s = e.length - 1; s >= 0; s--) {
                            var r = e[s],
                              a = r.split('?');
                            r = a.length > 1 ? a[0] : r;
                            var n = t.split('?');
                            if (r === (t = n.length > 1 ? n[0] : t)) return i + s;
                          }
                          return -1;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ae = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.url = ''),
                      (this.time = 0),
                      (this.duration = 0),
                      (this.start = 0),
                      (this.level = 0),
                      (this.sn = 0),
                      (this.discontinuity = !1),
                      (this.discontinuityCnt = 0),
                      (this.byteRangeStartOffset = 0),
                      (this.byteRangeEndOffset = 0),
                      (this.decryptdata = null),
                      (this.pcdnFreetime = !1),
                      (this.isPcdn = !1),
                      (this.tryCnt = 0),
                      (this.pcdnUrls = []),
                      (this.isLoadError = !1),
                      (this.statPcdn = !1),
                      (this.isFirstLoad = !1),
                      (this.pcdnStatus = 6),
                      (this.pcdnStatusBk1 = 6),
                      (this.pcdnStatusBk2 = 6);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setUrl',
                        value: function (e) {
                          this.url = e + '';
                        },
                      },
                      {
                        key: 'getUrl',
                        value: function (e) {
                          var t = e.useCdn,
                            i = e.bufferLen;
                          return this.pcdnUrls.length > 0 && i >= I.a.vodPcdnOpenBuffer && !t
                            ? ((this.isPcdn = !0), this.pcdnUrls.shift())
                            : ((this.isPcdn = !1), this.url);
                        },
                      },
                      {
                        key: 'hasPcdn',
                        value: function () {
                          return this.pcdnUrls.length > 0;
                        },
                      },
                      {
                        key: 'loadError',
                        value: function () {
                          this.isLoadError = !0;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ne = {
                  TS: 1,
                  M4S: 2,
                  getType: function (e) {
                    return -1 !== e.indexOf('.m4s') ? this.M4S : this.TS;
                  },
                },
                oe = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.isLive = t),
                      (this.seqGener = new re()),
                      (this.isSwitchSeamLessLine = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'resolve',
                        value: function (e, t) {
                          return e.indexOf('../') >= 0
                            ? se.a.buildAbsolutePath(t, e)
                            : se.a.buildAbsoluteURL(t, e);
                        },
                      },
                      {
                        key: 'resolveUrlQuery',
                        value: function (e, t) {
                          return (
                            '' !== t && (-1 === e.indexOf('?') ? (e += '?') : (e += '&'), (e += t)),
                            e
                          );
                        },
                      },
                      {
                        key: 'cloneObj',
                        value: function (e) {
                          return JSON.parse(JSON.stringify(e));
                        },
                      },
                      {
                        key: 'parseMasterPlaylist',
                        value: function (e, t) {
                          for (
                            var i,
                              s,
                              r,
                              a = [],
                              n = {},
                              o =
                                /#EXT-X-STREAM-INF:([^\n\r]*(BAND)WIDTH=(\d+))?([^\n\r]*(CODECS)=\"([^\"\n\r]*)\",?)?([^\n\r]*(RES)OLUTION=(\d+)x(\d+))?([^\n\r]*(NAME)=\"(.*)\")?[^\n\r]*[\r\n]+([^\r\n]+)/gi;
                            null != (i = o.exec(e));

                          ) {
                            for (
                              i.shift(),
                                i = i.filter(function (e) {
                                  return void 0 !== e;
                                }),
                                (n = {}).url = this.resolve(i.pop(), t);
                              i.length > 0;

                            )
                              switch (i.shift()) {
                                case 'RES':
                                  (n.width = parseInt(i.shift())), (n.height = parseInt(i.shift()));
                                  break;
                                case 'BAND':
                                  n.bitrate = parseInt(i.shift());
                                  break;
                                case 'NAME':
                                  n.name = i.shift();
                                  break;
                                case 'CODECS':
                                  for (s = i.shift().split(','); s.length > 0; )
                                    -1 !== (r = s.shift()).indexOf('avc1')
                                      ? (n.videoCodec = this.avc1toavcoti(r))
                                      : (n.audioCodec = r);
                              }
                            a.push(n);
                          }
                          return a;
                        },
                      },
                      {
                        key: 'avc1toavcoti',
                        value: function (e) {
                          var t,
                            i = e.split('.');
                          return (
                            i.length > 2
                              ? ((t = i.shift() + '.'),
                                (t += parseInt(i.shift()).toString(16)),
                                (t += ('00' + parseInt(i.shift()).toString(16)).substr(-4)))
                              : (t = e),
                            t
                          );
                        },
                      },
                      {
                        key: 'parseKeyParamsByRegex',
                        value: function (e, t) {
                          var i = t.exec(e);
                          return i &&
                            (i.shift(),
                            2 ===
                              (i = i.filter(function (e) {
                                return void 0 !== e;
                              })).length)
                            ? i[1]
                            : null;
                        },
                      },
                      {
                        key: 'parseLevelPlaylist',
                        value: function (e, t, i) {
                          return this._parseByLine(e, t, i);
                        },
                      },
                      {
                        key: '_getUrlQuery',
                        value: function () {
                          var e = (
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ''
                          ).split('?');
                          return e.length >= 2 && e.shift(), e.join('');
                        },
                      },
                      {
                        key: '_getValue',
                        value: function (e, t, i) {
                          for (var s = t + 1; s < i; s++)
                            if (!e[s].startsWith('#')) return [s, e[s]];
                          return !1;
                        },
                      },
                      {
                        key: '_getIv',
                        value: function (e) {
                          for (var t = new Uint8Array(16), i = 12; i < 16; i++)
                            t[i] = (e >> (8 * (15 - i))) & 255;
                          return t;
                        },
                      },
                      {
                        key: '_parseByLine',
                        value: function (e, t, i) {
                          var s,
                            r,
                            a,
                            n,
                            o,
                            h,
                            u = 0,
                            d = 0,
                            c = !1,
                            l = 0,
                            f = {
                              url: t,
                              initUrl: '',
                              fragments: [],
                              fileType: -1,
                              live: this.isLive,
                              startSN: 0,
                            },
                            m = !1,
                            _ = 0,
                            v = !1,
                            y = '';
                          this.isLive ||
                            ((v = !0),
                            (s = this.seqGener.genSnFromM3u8(e)),
                            (f.startSN = s),
                            (y = x.b.getQueryString('newmode', t) ? this._getUrlQuery(t) : ''));
                          for (
                            var S = { method: null, key: null, iv: null, uri: null },
                              g = e.replace('\r').split('\n'),
                              T = g.length,
                              E = 0;
                            E < T;
                            E++
                          ) {
                            var C = g[E];
                            if (-1 !== C.indexOf('#EXT-X-MEDIA-SEQUENCE'))
                              this.isLive && (d = f.startSN = parseInt(C.match(/\d+/g)[0]));
                            else if (-1 !== C.indexOf('#EXT-X-TARGETDURATION'))
                              f.targetduration = parseFloat(C.match(/[\d\.]+/g)[0]);
                            else if (-1 !== C.indexOf('#EXT-X-ENDLIST'))
                              (f.live = !1),
                                p.a.info('M3u8Parser.parseLevelPlaylist ENDLIST isLive=false');
                            else if (-1 !== C.indexOf('#EXT-X-MAP')) {
                              var D = C.match(/URI=\"(.+?)\"/);
                              if (
                                D[1] &&
                                ((f.initUrl = this.resolveUrlQuery(this.resolve(D[1], t), y)),
                                -1 == f.initUrl.indexOf('?'))
                              ) {
                                var P = t.split('?');
                                P.length > 1 && (f.initUrl += '?'.concat(P[1]));
                              }
                            } else if (-1 !== C.indexOf('#EXT-X-DISCONTINUITY')) (m = !0), _++;
                            else if (-1 !== C.indexOf('#EXT-X-BYTERANGE')) {
                              var A = C.match(/[\d@]+/g)[0].split('@');
                              if (
                                ((h = 1 === A.length ? o : parseInt(A[1])),
                                (o = parseInt(A[0]) + h),
                                (n = f.fragments.length
                                  ? f.fragments[f.fragments.length - 1]
                                  : null) &&
                                  ((n.byteRangeStartOffset = h),
                                  (n.byteRangeEndOffset = o),
                                  (r = this._getValue(g, E, T)) && !n.url))
                              ) {
                                var k = r[1];
                                n.setUrl(k ? this.resolve(k, t) : null);
                              }
                            } else if (-1 !== C.indexOf('#EXT-ALIGN-PTS'))
                              1 === I.a.switchSeamLessLine &&
                                ((u = Number(C.replace('#EXT-ALIGN-PTS:', ''))),
                                (c = !0),
                                (this.isSwitchSeamLessLine = !0));
                            else if (-1 !== C.indexOf('#EXTINF')) {
                              var R = parseFloat(C.match(/[\d\.]+/g)[0]);
                              if (!isNaN(R)) {
                                if (v && R < 1) continue;
                                var O;
                                if (
                                  ((v = !1),
                                  (a = c ? u : ++d),
                                  this.isLive || (a = s++),
                                  S.method && S.uri && !S.iv
                                    ? ((O = this.cloneObj(S)).iv = this._getIv(this.isLive ? d : a))
                                    : (O = S),
                                  (r = this._getValue(g, E, T)))
                                ) {
                                  var b = r[1];
                                  (n = new ae()).setUrl(
                                    b ? this.resolveUrlQuery(this.resolve(b, t), y) : null,
                                  ),
                                    (n.time = b ? se.a.getTimeFromUrl(b, this.isLive) : 0),
                                    (n.duration = R),
                                    (n.start = l),
                                    (n.level = i),
                                    (n.sn = a),
                                    (n.discontinuity = m),
                                    (n.discontinuityCnt = _),
                                    (n.byteRangeStartOffset = h),
                                    (n.byteRangeEndOffset = o),
                                    (n.decryptdata = O),
                                    f.fragments.push(n),
                                    -1 === f.fileType && (f.fileType = ne.getType(b)),
                                    m && (m = !1),
                                    (l += R),
                                    (h = null);
                                }
                              }
                            } else if (-1 !== C.indexOf('#EXT-X-KEY')) {
                              var w = C.replace('#EXT-X-KEY:', ''),
                                L = this.parseKeyParamsByRegex(w, /(METHOD)=([^,]*)/),
                                M = this.parseKeyParamsByRegex(w, /(URI)=["]([^,]*)["]/),
                                V = this.parseKeyParamsByRegex(w, /(IV)=([^,]*)/);
                              L &&
                                ((S = { method: null, key: null, iv: null, uri: null }),
                                M &&
                                  'AES-128' === L &&
                                  ((S.method = L),
                                  (S.uri = this.resolve(M, t)),
                                  (S.key = null),
                                  V &&
                                    ((S.iv = V),
                                    '0x' === S.iv.substring(0, 2) && (S.iv = S.iv.substring(2)),
                                    (S.iv = S.iv.match(/.{8}/g)),
                                    (S.iv[0] = parseInt(S.iv[0], 16)),
                                    (S.iv[1] = parseInt(S.iv[1], 16)),
                                    (S.iv[2] = parseInt(S.iv[2], 16)),
                                    (S.iv[3] = parseInt(S.iv[3], 16)),
                                    (S.iv = new Uint32Array(S.iv)))));
                            }
                          }
                          return (
                            (f.totalduration = l),
                            (f.endSN = u - 1),
                            this.isLive || (f.endSN = s - 1),
                            f
                          );
                        },
                      },
                      {
                        key: '_parseByReg',
                        value: function (e, t, i) {
                          var s,
                            r,
                            a,
                            n,
                            o,
                            h = 0,
                            u = 0,
                            d = { url: t, fragments: [], live: this.isLive, startSN: 0 },
                            c = !1;
                          this.isLive || ((s = this.seqGener.genSnFromM3u8(e)), (d.startSN = s));
                          for (
                            var l = { method: null, key: null, iv: null, uri: null },
                              f =
                                /(?:#EXT-X-(MEDIA-SEQUENCE):(\d+))|(?:#EXT-X-(TARGETDURATION):(\d+))|(?:#EXT-X-(KEY):(.*))|(?:#EXT(INF):([\d\.]+)[^\r\n]*([\r\n]+[^#|\r\n]+)?)|(?:#EXT-X-(BYTERANGE):([\d]+[@[\d]*)]*[\r\n]+([^#|\r\n]+)?|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DIS)CONTINUITY))/g;
                            null !== (r = f.exec(e));

                          )
                            switch (
                              (r.shift(),
                              (r = r.filter(function (e) {
                                return void 0 !== e;
                              }))[0])
                            ) {
                              case 'MEDIA-SEQUENCE':
                                this.isLive && (h = d.startSN = parseInt(r[1]));
                                break;
                              case 'TARGETDURATION':
                                d.targetduration = parseFloat(r[1]);
                                break;
                              case 'ENDLIST':
                                (d.live = !1),
                                  p.a.info('M3u8Parser.parseLevelPlaylist ENDLIST isLive=false');
                                break;
                              case 'DIS':
                                c = !0;
                                break;
                              case 'BYTERANGE':
                                var m = r[1].split('@');
                                (o = 1 === m.length ? n : parseInt(m[1])),
                                  (n = parseInt(m[0]) + o),
                                  (a = d.fragments.length
                                    ? d.fragments[d.fragments.length - 1]
                                    : null) &&
                                    !a.url &&
                                    ((a.byteRangeStartOffset = o),
                                    (a.byteRangeEndOffset = n),
                                    a.setUrl(this.resolve(r[2], t)));
                                break;
                              case 'INF':
                                var _ = parseFloat(r[1]);
                                if (!isNaN(_)) {
                                  var v,
                                    y = h++;
                                  if ((this.isLive || (y = s++), l.method && l.uri && !l.iv)) {
                                    v = this.cloneObj(l);
                                    for (var S = new Uint8Array(16), g = 12; g < 16; g++)
                                      S[g] = (y >> (8 * (15 - g))) & 255;
                                    v.iv = S;
                                  } else v = l;
                                  var T = r[2];
                                  d.fragments.push({
                                    url: T ? this.resolve(T, t) : null,
                                    time: T ? se.a.getTimeFromUrl(T, this.isLive) : 0,
                                    duration: _,
                                    start: u,
                                    level: i,
                                    sn: y,
                                    discontinuity: c,
                                    byteRangeStartOffset: o,
                                    byteRangeEndOffset: n,
                                    decryptdata: v,
                                  }),
                                    c && (c = !1),
                                    (u += _),
                                    (o = null);
                                }
                                break;
                              case 'KEY':
                                var E = r[1],
                                  C = this.parseKeyParamsByRegex(E, /(METHOD)=([^,]*)/),
                                  D = this.parseKeyParamsByRegex(E, /(URI)=["]([^,]*)["]/),
                                  P = this.parseKeyParamsByRegex(E, /(IV)=([^,]*)/);
                                C &&
                                  ((l = { method: null, key: null, iv: null, uri: null }),
                                  D &&
                                    'AES-128' === C &&
                                    ((l.method = C),
                                    (l.uri = this.resolve(D, t)),
                                    (l.key = null),
                                    P &&
                                      ((l.iv = P),
                                      '0x' === l.iv.substring(0, 2) && (l.iv = l.iv.substring(2)),
                                      (l.iv = l.iv.match(/.{8}/g)),
                                      (l.iv[0] = parseInt(l.iv[0], 16)),
                                      (l.iv[1] = parseInt(l.iv[1], 16)),
                                      (l.iv[2] = parseInt(l.iv[2], 16)),
                                      (l.iv[3] = parseInt(l.iv[3], 16)),
                                      (l.iv = new Uint32Array(l.iv)))));
                            }
                          return (
                            (d.totalduration = u),
                            (d.endSN = h - 1),
                            this.isLive || (d.endSN = s - 1),
                            d
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                he = i(20),
                ue = i(40),
                de = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._statVod = t),
                      (this._oldStat = i),
                      (this._open = !0),
                      (this._fragsMap = new Map()),
                      (this._subsUrlReqTs = 0),
                      (this.isLoading = !1),
                      (this.isAborted = !1),
                      (this._onGetVodPcdnProxyBind = this._onGetVodPcdnProxy.bind(this)),
                      (this._onGetVodPcdnProxyTimeoutBind =
                        this._onGetVodPcdnProxyTimeout.bind(this));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getVodPcdnProxy',
                        value: function (e, t) {
                          if (this._open && !this.isLoading) {
                            (this.isLoading = !0),
                              (this.isAborted = !1),
                              (this._subsUrlReqTs = D.a.now());
                            var i = U.a.uid;
                            Number(i) || (i = U.a.getAnonymouUid());
                            var s = new he.default.ClientGetVodPcdnProxyReq();
                            (s.appid = U.a.appid),
                              (s.lReqTs = Date.now()),
                              (s.lUid = i),
                              (s.sGuid = U.a.sGuid),
                              (s.iCliType = he.default.EM_CLINET_TYPE.E_CLIENT_WEB),
                              (s.lBucketPara = 0),
                              (s.sOrigUrl = e),
                              this._fragsMap.clear();
                            for (var r = t.length, a = 0; a < r; a++) {
                              var n = t[a],
                                o = n.url.replace(/http.*?\/\//, '');
                              this._fragsMap.set(n.sn, n);
                              var h = new he.default.VodUrlRange();
                              (h.sUrl = o),
                                n.byteRangeEndOffset &&
                                  (h.sRange = 'bytes='
                                    .concat(n.byteRangeStartOffset, '-')
                                    .concat(n.byteRangeEndOffset - 1)),
                                (h.index = n.sn),
                                s.vKeys.value.push(h);
                            }
                            Number(localStorage._print_pcdn_req) <= 1 &&
                              p.a.log('PcdnVodProxy.getVodPcdnProxy', s),
                              ue.default.sendWup(
                                'hypcdnvodgw',
                                'onClientGetVodPcdnProxyReq',
                                s,
                                this._onGetVodPcdnProxyBind,
                              ),
                              F.has(this._onGetVodPcdnProxyTimeoutBind, this) ||
                                F.once(this._onGetVodPcdnProxyTimeoutBind, this, 5e3);
                          }
                        },
                      },
                      {
                        key: '_onGetVodPcdnProxy',
                        value: function (e) {
                          if (
                            (Number(localStorage._print_pcdn_req) <= 1 &&
                              p.a.log('PcdnVodProxy._onGetVodPcdnProxy rsp:', e),
                            F.remove(this._onGetVodPcdnProxyTimeoutBind, this),
                            !this.isAborted)
                          )
                            if (
                              ((this.isLoading = !1),
                              this._subsUrlReqTs > 0 &&
                                (this._statVod.addCore(
                                  C.a.PCDN_DATA.GET_PCDN_SUBS_URL_TIME,
                                  D.a.now() - this._subsUrlReqTs,
                                ),
                                this._statVod.addCore(C.a.PCDN_DATA.GET_PCDN_SUBS_URL_TIME_CNT, 1),
                                (this._subsUrlReqTs = 0)),
                              e)
                            )
                              if (
                                (this._oldStat.setComDim(C.a.DIM_COM.PCDN_ORIGIN, e.pcdnName),
                                this._statVod.setComDim(C.a.DIM_COM.PCDN_ORIGIN, e.pcdnName),
                                this._statVod.setComDim(C.a.DIM_COM.CLI_ISP, e.cliIsp),
                                this._statVod.setComDim(C.a.DIM_COM.CLI_PROV, e.cliProv),
                                this._statVod.setCoreDim(C.a.DIM_CORE.PCDN_SVR_ISP, e.sPcdnIsp),
                                this._statVod.setCoreDim(C.a.DIM_CORE.PCDN_SVR_AREA, e.sPcdnArea),
                                e.iErrCode ===
                                  he.default.ERR_CODE_FOR_HY_PCDNGW_CLIENT_RSP.E_SUCCESS)
                              ) {
                                this._statVod.setComDim(C.a.PCDN_DATA.USE_PCDN, 1);
                                for (var t = e.vPcdnUrls.value.length, i = 0; i < t; i++) {
                                  var s = e.vPcdnUrls.value[i],
                                    r = this._fragsMap.get(s.reqKey.index);
                                  switch (
                                    (!r.statPcdn &&
                                      this._statVod.addCore(
                                        C.a.PCDN_DATA.GET_PCDN_URL_TOTAL_CNT,
                                        1,
                                      ),
                                    s.iStatusPcdn)
                                  ) {
                                    case 100:
                                      !r.statPcdn &&
                                        this._statVod.addCore(
                                          C.a.PCDN_DATA.GET_PCDN_URL_SUCCESS,
                                          1,
                                        ),
                                        this._updateFragPcdnState(1, s),
                                        this._rspVodPcdnProxyUrl(s);
                                      break;
                                    case 101:
                                      !r.statPcdn &&
                                        this._statVod.addCore(
                                          C.a.PCDN_DATA.GET_PCDN_ERR_NOT_REACHED,
                                          1,
                                        ),
                                        this._updateFragPcdnState(9, s);
                                      break;
                                    case 102:
                                      !r.statPcdn &&
                                        this._statVod.addCore(
                                          C.a.PCDN_DATA.GET_PCDN_ERR_OVER_RUN,
                                          1,
                                        ),
                                        this._updateFragPcdnState(10, s);
                                      break;
                                    case 200:
                                      !r.statPcdn &&
                                        this._statVod.addCore(
                                          C.a.PCDN_DATA.GET_PCDN_URL_SUC_FREETIME,
                                          1,
                                        ),
                                        this._updateFragPcdnState(2, s),
                                        this._rspVodPcdnProxyUrl(s);
                                      break;
                                    case 201:
                                      !r.statPcdn &&
                                        this._statVod.addCore(
                                          C.a.PCDN_DATA.GET_PCDN_ERR_OVER_RUN_FREETIME,
                                          1,
                                        ),
                                        this._updateFragPcdnState(11, s);
                                      break;
                                    case 301:
                                      !r.statPcdn &&
                                        this._statVod.addCore(
                                          C.a.PCDN_DATA.GET_PCDN_ERR_NOT_COVERD,
                                          1,
                                        ),
                                        this._updateFragPcdnState(12, s);
                                      break;
                                    case 302:
                                      !r.statPcdn &&
                                        this._statVod.addCore(C.a.PCDN_DATA.GET_PCDN_ERROR_REQ, 1),
                                        this._updateFragPcdnState(13, s);
                                      break;
                                    default:
                                      !r.statPcdn &&
                                        this._statVod.addCore(C.a.PCDN_DATA.GET_PCDN_ERR_OTHER, 1),
                                        this._updateFragPcdnState(14, s);
                                  }
                                  r.statPcdn = !0;
                                }
                              } else
                                e.iErrCode ===
                                he.default.ERR_CODE_FOR_HY_PCDNGW_CLIENT_RSP.E_PCDN_OFF
                                  ? ((this._open = !1),
                                    this._statVod.setComDim(C.a.PCDN_DATA.USE_PCDN, 0),
                                    this._updateFragPcdnState(3))
                                  : (this._statVod.addCore(C.a.PCDN_DATA.GET_PCDN_URL_TOTAL_CNT, 1),
                                    this._statVod.addCore(C.a.PCDN_DATA.GET_SUBS_URL_ERROR_CNT, 1),
                                    this._updateFragPcdnState(15));
                            else
                              this._statVod.addCore(C.a.PCDN_DATA.GET_PCDN_URL_TOTAL_CNT, 1),
                                this._statVod.addCore(C.a.PCDN_DATA.GET_SUBS_URL_ERROR_CNT, 1),
                                this._updateFragPcdnState(15);
                        },
                      },
                      {
                        key: '_onGetVodPcdnProxyTimeout',
                        value: function () {
                          p.a.warn('PcdnVodProxy._onGetVodPcdnProxyTimeout pcdn proxy time out'),
                            (this.isLoading = !1),
                            (this.isAborted = !0),
                            this._statVod.addCore(C.a.PCDN_DATA.GET_PCDN_URL_TOTAL_CNT, 1),
                            this._statVod.addCore(C.a.PCDN_DATA.GET_SUBS_URL_ERROR_CNT, 1),
                            this._updateFragPcdnState(15),
                            F.remove(this._onGetVodPcdnProxyTimeoutBind, this);
                        },
                      },
                      {
                        key: '_rspVodPcdnProxyUrl',
                        value: function (e) {
                          var t = this._fragsMap.get(e.reqKey.index);
                          t &&
                            ((t.pcdnUrls = e.vUrls.value.slice()),
                            (t.tryCnt = t.pcdnUrls.length),
                            (t.pcdnFreetime = 200 === e.iStatusPcdn));
                        },
                      },
                      {
                        key: '_updateFragPcdnState',
                        value: function (e) {
                          var t =
                            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;
                          if (e)
                            if (t) {
                              var i = this._fragsMap.get(t.reqKey.index);
                              i && (i.pcdnStatus = e);
                            } else
                              this._fragsMap.forEach(function (t, i) {
                                return (t.pcdnStatus = e);
                              });
                        },
                      },
                      {
                        key: 'isPcdnOpen',
                        get: function () {
                          return this._open;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ce = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._details = null),
                      (this._fragments = null),
                      (this._totalDuration = 0),
                      (this._idx = 0),
                      (this._lastFrag = null),
                      (this._curFrag = null),
                      (this._seekTime = 0),
                      (this._sOrigUrl = ''),
                      (this._initUrl = ''),
                      (this._fileType = 1),
                      (this._pcdnIdx = -1),
                      (this._pcdnVodProxy = new de(t, i));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setOrigUrl',
                        value: function (e) {
                          this._sOrigUrl = e;
                        },
                      },
                      {
                        key: 'setFileType',
                        value: function (e) {
                          this._fileType = e;
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this._details = null),
                            (this._fragments = null),
                            (this._totalDuration = 0),
                            (this._idx = 0),
                            (this._lastFrag = null),
                            (this._curFrag = null),
                            (this._seekTime = 0),
                            (this._pcdnIdx = -1),
                            (this._sOrigUrl = '');
                        },
                      },
                      {
                        key: 'isM4s',
                        value: function () {
                          return this._fileType === ne.M4S;
                        },
                      },
                      {
                        key: 'setInitUrl',
                        value: function (e) {
                          this._initUrl = e;
                        },
                      },
                      {
                        key: 'getInitUrl',
                        value: function () {
                          return this._initUrl;
                        },
                      },
                      {
                        key: 'setFirst',
                        value: function () {
                          this._idx++;
                        },
                      },
                      {
                        key: 'getNearFragStart',
                        value: function (e) {
                          var t = this._fragments;
                          if (t)
                            for (var i = null, s = 0, r = t.length - 1; s < r; s++)
                              if ((i = t[s]).start > e) return i.start;
                          return Math.ceil(e + 1);
                        },
                      },
                      {
                        key: 'getFrag',
                        value: function (e) {
                          var t = this._idx,
                            i = this._fragments,
                            s = null;
                          return (
                            e ? i.length > 0 && (s = i.shift()) : t < i.length && ((s = i[t]), t++),
                            s &&
                              ((this._idx = t),
                              (this._lastFrag = this._curFrag),
                              (this._curFrag = s)),
                            s
                          );
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          this._pcdnIdx = -1;
                          var t = this._fragments;
                          if (!t) return (this._seekTime = e), !1;
                          e = Math.min(e, this._totalDuration);
                          for (
                            var i = null, s = 0, r = 0, a = !1, n = this._fragments.length;
                            r < n;
                            r++
                          )
                            if (((s = (i = t[r]).start + i.duration), i.start <= e && e < s)) {
                              s - 0.2 < e && r < n - 1 && ((i = t[r + 1]), (r += 1)),
                                (i.seeking = !0),
                                (a = !0);
                              break;
                            }
                          return (
                            a
                              ? (p.a.info(
                                  'HlsPlaylist.seek suc seekTime='
                                    .concat(e, ' fragIdx=')
                                    .concat(this._idx, ', ')
                                    .concat(r),
                                  i.sn,
                                ),
                                (this._idx = r))
                              : p.a.info(
                                  'HlsPlaylist.seek fail seekTime='
                                    .concat(e, ' fragIdx=')
                                    .concat(this._idx),
                                ),
                            a
                          );
                        },
                      },
                      {
                        key: 'mergeDetails',
                        value: function (e) {
                          var t = null;
                          if (this._details) {
                            t = this._details;
                            var i,
                              s,
                              r = e,
                              a = 0,
                              n = 0;
                            (s =
                              t.fragments.length > 0
                                ? t.fragments[t.fragments.length - 1]
                                : this._curFrag),
                              (i = s.sn),
                              (n = s.start + s.duration),
                              r.fragments.forEach(function (e) {
                                e.sn > i && t.fragments.push(e);
                              }),
                              (t.endSN = r.endSN),
                              t.fragments.forEach(function (e) {
                                (a += e.duration), e.sn > i && ((e.start = n), (n += e.duration));
                              }),
                              (t.totalduration = a);
                          } else t = e;
                          this.details = t;
                        },
                      },
                      {
                        key: 'getVodPcdnProxy',
                        value: function () {
                          if (
                            1 !== I.a.isCloseVodPcdn &&
                            (-1 === this._pcdnIdx || this._pcdnIdx - this._idx <= 3)
                          ) {
                            -1 === this._pcdnIdx && (this._pcdnIdx = this._idx);
                            for (
                              var e = this._pcdnIdx + 10,
                                t = Math.min(this._fragments.length, e),
                                i = [],
                                s = [],
                                r = this._pcdnIdx;
                              r < t;
                              r++
                            ) {
                              var a = this._fragments[r];
                              i.push(a), s.push(a.sn);
                            }
                            i.length > 0 &&
                              (p.a.log(
                                'FragHelper.getVodPcdnProxy firstIdx='
                                  .concat(this._pcdnIdx, ' sn=')
                                  .concat(s.join(',')),
                              ),
                              this._pcdnVodProxy.getVodPcdnProxy(this._sOrigUrl, i),
                              (this._pcdnIdx = e));
                          }
                        },
                      },
                      {
                        key: 'getVodPcdnProxyCursor',
                        value: function () {
                          if (1 !== I.a.isCloseVodPcdn && this._pcdnVodProxy.isPcdnOpen) {
                            var e = [],
                              t = [],
                              i = this._idx;
                            if (
                              this._fragments.length - i >= 3 &&
                              this._fragments[i].pcdnUrls.length > 0 &&
                              this._fragments[i + 1].pcdnUrls.length > 0 &&
                              this._fragments[i + 2].pcdnUrls.length > 0
                            )
                              p.a.log(
                                'FragHelper.getVodPcdnProxy idx='
                                  .concat(this._idx - 1, ' curFrag.sn=')
                                  .concat(this._curFrag.sn, ' pcdn fragment is enough'),
                              );
                            else {
                              for (; i < this._fragments.length; ) {
                                var s = this._fragments[i];
                                if (
                                  (s.pcdnUrls.length <= 0 && (e.push(s), t.push(s.sn)),
                                  e.length >= 10)
                                )
                                  break;
                                i++;
                              }
                              e.length > 0 &&
                                (p.a.log(
                                  'FragHelper.getVodPcdnProxy idx='
                                    .concat(this._idx - 1, ' curFrag.sn=')
                                    .concat(this._curFrag.sn, ' req sn=')
                                    .concat(t.join(',')),
                                ),
                                this._pcdnVodProxy.getVodPcdnProxy(this._sOrigUrl, e));
                            }
                          }
                        },
                      },
                      {
                        key: 'details',
                        set: function (e) {
                          (this._details = e),
                            (this._fragments = e.fragments),
                            (this._totalDuration = e.totalduration),
                            (this._initUrl = e.initUrl),
                            (this._fileType = e.fileType),
                            this._seekTime > 0 && (this.seek(this._seekTime), (this._seekTime = 0));
                        },
                        get: function () {
                          return this._details;
                        },
                      },
                      {
                        key: 'currFragNum',
                        get: function () {
                          return this._fragments ? this._fragments.length : 0;
                        },
                      },
                      {
                        key: 'totalDuration',
                        get: function () {
                          return this._totalDuration;
                        },
                      },
                      {
                        key: 'lastFrag',
                        get: function () {
                          return this._lastFrag;
                        },
                        set: function (e) {
                          e && (this._lastFrag = e);
                        },
                      },
                      {
                        key: 'curFrag',
                        get: function () {
                          return this._curFrag;
                        },
                        set: function (e) {
                          e && ((this._lastFrag = this._curFrag), (this._curFrag = e));
                        },
                      },
                      {
                        key: 'isPcdnProxyOpen',
                        get: function () {
                          return this._pcdnVodProxy.isPcdnOpen;
                        },
                      },
                      {
                        key: 'isPcdnClientOpen',
                        get: function () {
                          return !I.a.isCloseVodPcdn;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                le = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.hls = t),
                      (this.isLive = t.isLive),
                      (this.config = t.config),
                      (this.m3u8Parser = new oe(t.isLive)),
                      (this.currLevelId = 0),
                      (this.m3u8FileSize = 0),
                      (this.levels = []),
                      (this.firstLevelLoaded = !1),
                      (this.m3u8Parsered = !1),
                      (this.loader = null),
                      (this.manifestLoadedTs = 0),
                      (this.isMasterPlayList = !1),
                      (this.currLevel = null),
                      (this.fragHelper = new ce(t.statVod, t.stat)),
                      (this.firstTsInfo = null),
                      (this.loadM3u8HttpCode = -1),
                      (this.m3u8ContentErrorCnt = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'destroy',
                        value: function () {
                          (this.m3u8Parser = null),
                            (this.currLevelId = 0),
                            (this.m3u8FileSize = 0),
                            (this.levels = null),
                            (this.currLevel = null),
                            (this.firstLevelLoaded = !1),
                            (this.m3u8Parsered = !1),
                            this.loader.abort(),
                            (this.loader = null),
                            (this.manifestLoadedTs = 0),
                            (this.isMasterPlayList = !1),
                            this.fragHelper.reset(),
                            (this.firstTsInfo = null),
                            (this.loadM3u8HttpCode = -1);
                        },
                      },
                      {
                        key: 'getNearFragStart',
                        value: function (e) {
                          return this.fragHelper.getNearFragStart(e);
                        },
                      },
                      {
                        key: 'setOrigUrl',
                        value: function (e) {
                          this.fragHelper.setOrigUrl(e);
                        },
                      },
                      {
                        key: 'setCurrentFrag',
                        value: function (e) {
                          e && ((this.lastFrag = this.currFrag), (this.currFrag = e));
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          return !this.isLive && this.fragHelper.seek(e);
                        },
                      },
                      {
                        key: 'loadFirstFragment',
                        value: function (e) {
                          e &&
                            e.tsUrl &&
                            !this.firstLevelLoaded &&
                            (p.a.log('HlsPlaylist.loadFirstFragment firstTsInfo = ', e),
                            this.fragHelper.setFileType(ne.getType(e.tsUrl)),
                            e.initUrl && this.fragHelper.setInitUrl(e.initUrl),
                            this.fragHelper.setFirst(),
                            (e.tsUrl = this.addUrlParams(e.tsUrl)),
                            (this.firstLevelLoaded = !0),
                            (this.firstTsInfo = e),
                            this.hls.loadFragment(!1, e),
                            W.setFirstTs(e));
                        },
                      },
                      {
                        key: 'loadManifest',
                        value: function (e) {
                          this.hls.vodSecHelper.setM3u8Start(),
                            (this.m3u8Parser.isSwitchSeamLessLine = !1),
                            this.loader && (this.loader.destroy(), (this.loader = null)),
                            (e = this.addUrlParams(e)),
                            (this.manifsetUrl = e),
                            this.hls.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.M3U8_CNT, 1),
                            (this.loader = new te(this.config)),
                            (this.loader.onOpen = this.onManiFestOpen.bind(this)),
                            this.loader.load(
                              e,
                              'text',
                              this.onManifestLoaded.bind(this),
                              this.loadManifestError.bind(this),
                              this.loadManifestTimeout.bind(this),
                              this.config.listLoadingTimeOut,
                              this.config.listLoadingMaxRetry,
                              this.config.listLoadingRetryDelay,
                            ),
                            W.setM3u8Loader(this.loader);
                        },
                      },
                      {
                        key: 'onManiFestOpen',
                        value: function () {
                          this.hls.vodSecHelper.setM3u8Open();
                        },
                      },
                      {
                        key: 'refreshManifsetUrl',
                        value: function (e) {
                          (e = this.addUrlParams(e)), (this.manifsetUrl = e);
                        },
                      },
                      {
                        key: 'addUrlParams',
                        value: function (e) {
                          if (
                            (-1 !== e.indexOf('hyscence=vodadv') &&
                              (e = e.replace('hyscence=vodadv', 'hyscence=vodbusiness')),
                            -1 !== e.indexOf('scene=vodadv') &&
                              (e = e.replace('scene=vodadv', 'scene=vodbusiness')),
                            -1 === e.indexOf('&sv='))
                          ) {
                            var t = I.a.platform,
                              i = B.a.PLATFORM_TYPE[t] || B.a.PLATFORM_TYPE.web;
                            e += -1 === e.indexOf('?') ? '?' : '&';
                            var s =
                              t === B.a.PLATFORM_TYPE_NAME.wap
                                ? 'uid='.concat(U.a.uid, '&uuid=').concat(U.a.uuid)
                                : 'u='.concat(U.a.convertUid);
                            (e += ''.concat(s, '&t=').concat(i, '&sv=').concat(2401251130)),
                              this.m3u8ContentErrorCnt > 0 &&
                                (e += '&mceCnt='.concat(this.m3u8ContentErrorCnt));
                          }
                          return x.b.checkDMod(e, this.hls.info._dMod, this.hls.info._sMod);
                        },
                      },
                      {
                        key: 'onManifestLoaded',
                        value: function (e, t) {
                          if (
                            (0 == this.manifestLoadedTs && (this.manifestLoadedTs = D.a.now()),
                            (this.loadM3u8HttpCode = e.currentTarget.status),
                            404 === this.loadM3u8HttpCode ||
                              0 === this.loadM3u8HttpCode ||
                              403 === this.loadM3u8HttpCode)
                          )
                            return (
                              p.a.warn(
                                'HlsPlaylist.onManifestLoaded status='.concat(
                                  this.loadM3u8HttpCode,
                                ),
                              ),
                              this.hls.stat.addComp(
                                C.a.HLS_INFO.name,
                                C.a.HLS_INFO.M3U8_FAIL_CNT,
                                1,
                              ),
                              void this.hls.setLoadStatus(
                                B.a.LoadVideoTimeoutReason.HLS_LOADMANIFEST_ERROR,
                              )
                            );
                          if ((W.setM3u8Status(1), !this.isLive)) {
                            var i = this.loader.getResponseHeader('Content-length') || 0;
                            (this.m3u8FileSize = 1 * i),
                              this.hls.statVod.setCore(
                                C.a.VOD_CORE.M3U8_FILE_BW,
                                this.m3u8FileSize,
                              ),
                              this.hls.statVod.addCore(C.a.CORE.CDN_TOTAL_BW, this.m3u8FileSize),
                              this.hls.stat.addCore(C.a.CORE.CDN_TOTAL_BW, this.m3u8FileSize);
                          }
                          var s,
                            r = e.currentTarget.response,
                            a = this.manifsetUrl,
                            n = null,
                            o = [];
                          if (-1 == r.indexOf('#EXTM3U'))
                            return (
                              this.hls.stat.addComp(
                                C.a.HLS_INFO.name,
                                C.a.HLS_INFO.M3U8_WRONG_CNT,
                                1,
                              ),
                              p.a.warn(
                                "HlsPlaylist.onManifestLoaded m3u8 doesn't match #EXTM3U\n",
                                r,
                              ),
                              this.hls.setLoadStatus(
                                B.a.LoadVideoTimeoutReason.HLS_LOADMANIFEST_ERROR,
                              ),
                              void (
                                this.m3u8ContentErrorCnt < 3 &&
                                (this.m3u8ContentErrorCnt++, this.hls.onM3u8ContentError())
                              )
                            );
                          this.hls.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.M3U8_SUC_CNT, 1);
                          var h = -1 == r.indexOf('#EXTINF:');
                          h
                            ? ((this.isMasterPlayList = !0),
                              (n = this.m3u8Parser.parseMasterPlaylist(r, a)))
                            : ((this.isMasterPlayList = !1), (n = [{ url: a }])),
                            (s = (o = n)[0].bitrate),
                            o.sort(function (e, t) {
                              return e.bitrate - t.bitrate;
                            }),
                            (this.levels = o);
                          for (var u = 0; u < o.length; u++)
                            if (o[u].bitrate === s) {
                              this.currLevelId = u;
                              break;
                            }
                          (this.currLevel = { bitrate: s }),
                            h
                              ? ((this.currLevel.url = o[this.currLevelId].url), this.loadLevel())
                              : ((this.currLevel.url = this.manifsetUrl), this.onLevelLoaded(e)),
                            this.hls.setLoadStatus(
                              B.a.LoadVideoTimeoutReason.HLS_LOADMANIFEST_SUCCESS,
                            );
                        },
                      },
                      {
                        key: 'loadManifestError',
                        value: function (e) {
                          this.hls.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.M3U8_FAIL_CNT, 1),
                            p.a.warn(
                              'HlsPlaylist.loadManifestError ' + e.currentTarget.status,
                              e.currentTarget.readyState,
                            ),
                            (this.loadM3u8HttpCode = e.currentTarget.status),
                            W.setM3u8Status(e.currentTarget.status > 0 ? -1 : -2),
                            (404 !== e.currentTarget.status && 0 !== e.currentTarget.status) ||
                              this.hls.onAnchorStop(),
                            this.hls.onLoadM3u8Error(e);
                        },
                      },
                      {
                        key: 'loadManifestTimeout',
                        value: function (e) {
                          this.hls.stat.addComp(
                            C.a.HLS_INFO.name,
                            C.a.HLS_INFO.M3U8_TIMEOUT_CNT,
                            1,
                          ),
                            e && e.readyState >= 2
                              ? (W.setM3u8Status(-4), this.hls.onLoadManifestTimeout())
                              : (W.setM3u8Status(-3), this.hls.onConnectManifestTimeout());
                        },
                      },
                      {
                        key: 'loadLevel',
                        value: function () {
                          if (this.currLevel) {
                            var e = this.currLevel.url;
                            if (!this.isLive && this.currDetails) {
                              var t = this.currDetails.fragments,
                                i = t[t.length - 1];
                              i ||
                                (p.a.log('HlsPlaylist.loadLevel: fragments run out'),
                                (i = this.fragHelper.curFrag)),
                                (e =
                                  t.length <= this.config.minFragBufferNum
                                    ? this.currLevel.url.replace(
                                        /\?btime=\d*$/,
                                        '?btime='.concat(i.time),
                                      )
                                    : null);
                            }
                            e && this._loadLevel(e);
                          }
                        },
                      },
                      {
                        key: 'updateLiveVodUrl',
                        value: function (e) {
                          this.currLevel &&
                            ((e = this.addUrlParams(e)),
                            (this.manifsetUrl = e),
                            (this.m3u8Updating = !0),
                            (this.currLevel.url = e),
                            this._loadLevel(e));
                        },
                      },
                      {
                        key: '_loadLevel',
                        value: function (e) {
                          this.loader && (this.loader.destroy(), (this.loader = null)),
                            this.anticode && (e += '?' + this.anticode),
                            this.hls.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.M3U8_CNT, 1),
                            (this.loader = new te(this.config)),
                            this.loader.load(
                              e,
                              '',
                              this.onLevelLoaded.bind(this),
                              this.loadLevelError.bind(this),
                              this.loadLevelTimeout.bind(this),
                              this.config.listLoadingTimeOut,
                              this.config.listLoadingMaxRetry,
                              this.config.listLoadingRetryDelay,
                            );
                        },
                      },
                      {
                        key: 'onLevelLoaded',
                        value: function (e, t) {
                          if (404 !== e.currentTarget.status && 0 !== e.currentTarget.status) {
                            var i = e.currentTarget.responseText,
                              s = this.manifsetUrl,
                              r = this.currLevel,
                              a = null;
                            if (
                              (s && (r.url = s),
                              0 === i.indexOf('#EXTM3U') && i.indexOf('#EXTINF:') > 0)
                            ) {
                              if (
                                (this.hls.stat.addComp(
                                  C.a.HLS_INFO.name,
                                  C.a.HLS_INFO.M3U8_SUC_CNT,
                                  1,
                                ),
                                (a = this.m3u8Parser.parseLevelPlaylist(
                                  i,
                                  r.url,
                                  this.currLevelId,
                                )),
                                this.fragHelper.mergeDetails(a),
                                (r.details = this.fragHelper.details),
                                this.isLive ||
                                  this.hls.eventEmitter.trigger(o.PLAYBACK_M3U8_UPDATED, {
                                    totalDuration: this.totalDuration,
                                  }),
                                (this.m3u8Parsered = !0),
                                this.isLive && r.details.fragments.length > 10)
                              )
                                return (
                                  p.a.info(
                                    'HlsPlaylist.onLevelLoaded fragments.length =',
                                    r.details.fragments.length,
                                  ),
                                  void this.hls.reconnectLive()
                                );
                              this.hls.setTargetDuration(this.currDetails.targetduration),
                                this.hls.vodSecHelper.setM3u8End(),
                                this.firstLevelLoaded ||
                                  ((this.firstLevelLoaded = !0), this.hls.loadFragment());
                            } else {
                              this.hls.stat.addComp(
                                C.a.HLS_INFO.name,
                                C.a.HLS_INFO.M3U8_EMPTY_CNT,
                                1,
                              );
                              var n = r.details.fragments.length;
                              p.a.warn(
                                'HlsPlaylist.onLevelLoaded no playlist. fragments.length='
                                  .concat(n, '\n')
                                  .concat(i),
                              );
                            }
                            this.hls.isSwitchSeamLessLine = this.m3u8Parser.isSwitchSeamLessLine;
                          } else
                            this.hls.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.M3U8_FAIL_CNT, 1);
                        },
                      },
                      {
                        key: 'loadLevelError',
                        value: function (e) {
                          this.hls.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.M3U8_FAIL_CNT, 1),
                            p.a.warn('HlsPlaylist.loadLevelError ' + e.currentTarget.status),
                            (404 !== e.currentTarget.status && 0 !== e.currentTarget.status) ||
                              this.hls.onAnchorStop();
                        },
                      },
                      {
                        key: 'loadLevelTimeout',
                        value: function () {
                          this.hls.stat.addComp(
                            C.a.HLS_INFO.name,
                            C.a.HLS_INFO.M3U8_TIMEOUT_CNT,
                            1,
                          ),
                            this.hls.reset();
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e) {
                          this.isLive && this.loadLevel();
                        },
                      },
                      {
                        key: 'currDetails',
                        get: function () {
                          return this.fragHelper.details;
                        },
                      },
                      {
                        key: 'currFragNum',
                        get: function () {
                          return this.fragHelper.currFragNum;
                        },
                      },
                      {
                        key: 'totalDuration',
                        get: function () {
                          return (
                            (this.firstTsInfo && this.firstTsInfo.totalDuration) ||
                            this.fragHelper.totalDuration
                          );
                        },
                      },
                      {
                        key: 'currFrag',
                        get: function () {
                          return this.fragHelper.curFrag;
                        },
                        set: function (e) {
                          e && ((this.lastFrag = this.currFrag), (this.fragHelper.curFrag = e));
                        },
                      },
                      {
                        key: 'lastFrag',
                        get: function () {
                          return this.fragHelper.lastFrag;
                        },
                        set: function (e) {
                          e && (this.fragHelper.lastFrag = e);
                        },
                      },
                      {
                        key: 'nextFrag',
                        get: function () {
                          return this.fragHelper.getFrag(this.isLive);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                pe = i(23),
                fe = i(15),
                me = i(9),
                _e = i(8),
                ve = i(14),
                ye = i(13),
                Se = i(27),
                ge = (function () {
                  function e() {
                    var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 10;
                    Object(s.a)(this, e),
                      (this.maxSize = t),
                      (this.sum = 0),
                      (this.list = []),
                      (this.idx = 0),
                      (this.cur = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this.sum = 0), (this.list = []), (this.idx = 0), (this.cur = 0);
                        },
                      },
                      {
                        key: 'addCur',
                        value: function (e) {
                          this.cur += e;
                        },
                      },
                      {
                        key: 'calculate',
                        value: function () {
                          this.add(this.cur);
                          var e = this.cur;
                          return (this.cur = 0), e;
                        },
                      },
                      {
                        key: 'add',
                        value: function (e) {
                          (this.sum += e),
                            this.list.length < this.maxSize
                              ? this.list.push(e)
                              : ((this.sum -= this.list[this.idx]), (this.list[this.idx] = e)),
                            this.idx++,
                            this.idx >= this.maxSize && (this.idx = 0);
                        },
                      },
                      {
                        key: 'average',
                        value: function () {
                          return 0 === this.list.length
                            ? x.b.UintMax
                            : Math.round(this.sum / this.list.length);
                        },
                      },
                      {
                        key: 'getSamples',
                        value: function () {
                          return this.list;
                        },
                      },
                      {
                        key: 'max',
                        value: function () {
                          if (0 === this.list.length) return x.b.UintMax;
                          var e,
                            t = 0,
                            i = Object(Se.a)(this.list);
                          try {
                            for (i.s(); !(e = i.n()).done; ) {
                              var s = e.value;
                              s > t && (t = s);
                            }
                          } catch (e) {
                            i.e(e);
                          } finally {
                            i.f();
                          }
                          return t;
                        },
                      },
                      {
                        key: 'min',
                        value: function () {
                          var e,
                            t = x.b.UintMax,
                            i = Object(Se.a)(this.list);
                          try {
                            for (i.s(); !(e = i.n()).done; ) {
                              var s = e.value;
                              s < t && (t = s);
                            }
                          } catch (e) {
                            i.e(e);
                          } finally {
                            i.f();
                          }
                          return t;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Te = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.data = t),
                      (this.bytesAvailable = this.data.byteLength),
                      (this.word = 0),
                      (this.bitsAvailable = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'loadWord',
                        value: function () {
                          var e = this.data.byteLength - this.bytesAvailable,
                            t = new Uint8Array(4),
                            i = Math.min(4, this.bytesAvailable);
                          if (0 === i) throw new Error('no bytes available');
                          t.set(this.data.subarray(e, e + i)),
                            (this.word = new DataView(t.buffer).getUint32(0)),
                            (this.bitsAvailable = 8 * i),
                            (this.bytesAvailable -= i);
                        },
                      },
                      {
                        key: 'skipBits',
                        value: function (e) {
                          var t;
                          this.bitsAvailable > e
                            ? ((this.word <<= e), (this.bitsAvailable -= e))
                            : ((e -= this.bitsAvailable),
                              (e -= (t = e >> 3) >> 3),
                              (this.bytesAvailable -= t),
                              this.loadWord(),
                              (this.word <<= e),
                              (this.bitsAvailable -= e));
                        },
                      },
                      {
                        key: 'readBits',
                        value: function (e) {
                          var t = Math.min(this.bitsAvailable, e),
                            i = this.word >>> (32 - t);
                          return (
                            e > 32 && p.a.error('Cannot read more than 32 bits at a time'),
                            (this.bitsAvailable -= t),
                            this.bitsAvailable > 0
                              ? (this.word <<= t)
                              : this.bytesAvailable > 0 && this.loadWord(),
                            (t = e - t) > 0 ? (i << t) | this.readBits(t) : i
                          );
                        },
                      },
                      {
                        key: 'skipLZ',
                        value: function () {
                          var e;
                          for (e = 0; e < this.bitsAvailable; ++e)
                            if (0 != (this.word & (2147483648 >>> e)))
                              return (this.word <<= e), (this.bitsAvailable -= e), e;
                          return this.loadWord(), e + this.skipLZ();
                        },
                      },
                      {
                        key: 'skipUEG',
                        value: function () {
                          this.skipBits(1 + this.skipLZ());
                        },
                      },
                      {
                        key: 'skipEG',
                        value: function () {
                          this.skipBits(1 + this.skipLZ());
                        },
                      },
                      {
                        key: 'readUEG',
                        value: function () {
                          var e = this.skipLZ();
                          return this.readBits(e + 1) - 1;
                        },
                      },
                      {
                        key: 'readEG',
                        value: function () {
                          var e = this.readUEG();
                          return 1 & e ? (1 + e) >>> 1 : -1 * (e >>> 1);
                        },
                      },
                      {
                        key: 'readBoolean',
                        value: function () {
                          return 1 === this.readBits(1);
                        },
                      },
                      {
                        key: 'readUByte',
                        value: function () {
                          return this.readBits(8);
                        },
                      },
                      {
                        key: 'skipScalingList',
                        value: function (e) {
                          var t,
                            i = 8,
                            s = 8;
                          for (t = 0; t < e; t++)
                            0 !== s && (s = (i + this.readEG() + 256) % 256), (i = 0 === s ? i : s);
                        },
                      },
                      {
                        key: 'readSPS',
                        value: function () {
                          var e,
                            t,
                            i,
                            s,
                            r,
                            a,
                            n,
                            o = 0,
                            h = 0,
                            u = 0,
                            d = 0,
                            c = 0;
                          if (
                            (this.readUByte(),
                            (e = this.readUByte()),
                            this.readBits(5),
                            this.skipBits(3),
                            this.readUByte(),
                            this.skipUEG(),
                            100 === e ||
                              110 === e ||
                              122 === e ||
                              144 === e ||
                              244 === e ||
                              44 === e ||
                              83 === e ||
                              86 === e ||
                              118 === e ||
                              128 === e ||
                              138 === e)
                          ) {
                            var l = this.readUEG();
                            if (
                              (3 === l && this.skipBits(1),
                              this.skipUEG(),
                              this.skipUEG(),
                              this.skipBits(1),
                              this.readBoolean())
                            )
                              for (a = 3 !== l ? 8 : 12, n = 0; n < a; n++)
                                this.readBoolean() &&
                                  (n < 6 ? this.skipScalingList(16) : this.skipScalingList(64));
                          }
                          this.skipUEG();
                          var p = this.readUEG();
                          if (0 === p) this.readUEG();
                          else if (1 === p)
                            for (
                              this.skipBits(1),
                                this.skipEG(),
                                this.skipEG(),
                                t = this.readUEG(),
                                n = 0;
                              n < t;
                              n++
                            )
                              this.skipEG();
                          if (
                            (this.skipUEG(),
                            this.skipBits(1),
                            (i = this.readUEG()),
                            (s = this.readUEG()),
                            0 === (r = this.readBits(1)) && this.skipBits(1),
                            this.skipBits(1),
                            this.readBoolean() &&
                              ((o = this.readUEG()),
                              (h = this.readUEG()),
                              (u = this.readUEG()),
                              (d = this.readUEG())),
                            this.readBoolean() &&
                              (this.readBoolean() &&
                                255 === this.readUByte() &&
                                (this.readBits(16), this.readBits(16)),
                              this.readBoolean() && this.skipBits(1),
                              this.readBoolean() &&
                                (this.readBits(3),
                                this.skipBits(1),
                                this.readBoolean() &&
                                  (this.readUByte(), this.readUByte(), this.readUByte())),
                              this.readBoolean() && (this.readUEG(), this.readUEG()),
                              this.readBoolean()))
                          ) {
                            var f = this.readBits(32);
                            (c = this.readBits(32) / f),
                              this.readBoolean() && (c = Math.ceil(c / 2));
                          }
                          return {
                            fps: c,
                            width: 16 * (i + 1) - 2 * o - 2 * h,
                            height: (2 - r) * (s + 1) * 16 - (u + d) * (r ? 2 : 4),
                          };
                        },
                      },
                      {
                        key: 'readSliceType',
                        value: function () {
                          return this.readUByte(), this.readUEG(), this.readUEG();
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ee = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.size = 0), (this.buffers = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.reset();
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          p.a.log('FlvCacher.reset', this.size),
                            (this.size = 0),
                            (this.buffers = []);
                        },
                      },
                      {
                        key: 'append',
                        value: function (e) {
                          0 !== e.length && (this.buffers.push(e), (this.size += e.length));
                        },
                      },
                      {
                        key: 'getByte',
                        value: function (e) {
                          for (var t = 0, i = 0; i < this.buffers.length; ++i) {
                            var s = this.buffers[i];
                            if (t + s.length > e) return s[e - t];
                            t += s.length;
                          }
                          return p.a.warn('FlvCacher.getByte has no offset=' + e), 0;
                        },
                      },
                      {
                        key: 'popFrame',
                        value: function () {
                          if (0 === this.size) return null;
                          if (0 === this.buffers.length)
                            return (
                              p.a.error(
                                'FlvCacher.popFront error no buffers, size:' +
                                  this.size +
                                  ' not eq 0',
                              ),
                              this.reset(),
                              null
                            );
                          if (this.size <= _t.TAG_HEADER_LEN + _t.PREV_TAG_SIZE_LEN) return null;
                          var e =
                              (this.getByte(1) << 16) + (this.getByte(2) << 8) + this.getByte(3),
                            t = _t.TAG_HEADER_LEN + e + _t.PREV_TAG_SIZE_LEN;
                          if (this.size < t) return null;
                          if (1 === this.buffers.length) {
                            if (this.buffers[0].length === t)
                              return (this.size -= t), this.buffers.shift();
                            var i = this.buffers[0].slice(0, t);
                            return (
                              (this.buffers[0] = this.buffers[0].slice(t)), (this.size -= t), i
                            );
                          }
                          for (var s, r = new Uint8Array(t), a = 0, n = 0; a < t; ) {
                            var o = t - a;
                            if (this.buffers[0].length > o) {
                              (s = this.buffers[0].slice(0, o)),
                                r.set(s, n),
                                (n += o),
                                (a += o),
                                (this.buffers[0] = this.buffers[0].slice(o)),
                                (this.size -= o);
                              break;
                            }
                            (s = this.buffers.shift()),
                              r.set(s, n),
                              (n += s.length),
                              (a += s.length),
                              (this.size -= s.length);
                          }
                          return r;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ce =
                  ((N = new ArrayBuffer(2)),
                  new DataView(N).setInt16(0, 256, !0),
                  256 === new Int16Array(N)[0]),
                De = (function () {
                  function e() {
                    Object(s.a)(this, e);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'parseObject',
                        value: function (t, i, s) {
                          var r = e.parseString(t, i),
                            a = e.parseScript(t, i + r.size);
                          return { data: { name: r.data, value: a.data }, size: a.size };
                        },
                      },
                      {
                        key: 'parseVariable',
                        value: function (t, i, s) {
                          return e.parseObject(t, i, s);
                        },
                      },
                      {
                        key: 'parseDate',
                        value: function (e, t, i) {
                          if (i < 10) throw new Error('Data size invalid when parse Date');
                          var s = new DataView(e, t),
                            r = s.getFloat64(0, !Ce),
                            a = s.getInt16(8, !Ce);
                          return { data: new Date((r += 60 * a * 1e3)), size: 10 };
                        },
                      },
                      {
                        key: 'parseString',
                        value: function (e, t) {
                          var i = new DataView(e, t),
                            s = i.getUint16(0, !Ce),
                            r = '';
                          if (s > 0)
                            for (var a = 0; a < s; a++) r += String.fromCharCode(i.getUint8(a + 2));
                          return { data: r, size: 2 + s };
                        },
                      },
                      {
                        key: 'parseMetadata',
                        value: function (t) {
                          var i = e.parseScript(t, 0);
                          return e.parseScript(t, i.size, t.length - i.size);
                        },
                      },
                      {
                        key: 'parseScript',
                        value: function (t, i, s) {
                          var r = i,
                            a = new Uint8Array(t).buffer,
                            n = new DataView(a, 0, s),
                            o = null,
                            h = n.getUint8(r);
                          switch (((r += 1), h)) {
                            case 0:
                              (o = n.getFloat64(r, !Ce)), (r += 8);
                              break;
                            case 1:
                              (o = !!n.getUint8(r)), (r += 1);
                              break;
                            case 2:
                              var u = e.parseString(a, r);
                              (o = u.data), (r += u.size);
                              break;
                            case 3:
                              for (o = {}; r < s - 3; ) {
                                var d = e.parseObject(a, r, s - i);
                                if (
                                  ((o[d.data.name] = d.data.value),
                                  (r = d.size),
                                  0 === n.getUint8(r) &&
                                    0 === n.getUint8(r + 1) &&
                                    9 === n.getUint8(r + 2))
                                ) {
                                  r += 3;
                                  break;
                                }
                              }
                              break;
                            case 8:
                              for (o = {}, r += 4; r < s - 8; ) {
                                var c = e.parseVariable(a, r);
                                (o[c.data.name] = c.data.value), (r = c.size);
                              }
                              r <= s - 3 && 9 == (16777215 & n.getUint32(r - 1, !Ce)) && (r += 3);
                              break;
                            case 10:
                              o = [];
                              var l = n.getUint32(r, !Ce);
                              r += 4;
                              for (var p = 0; p < l; p++) {
                                var f = e.parseScript(a, r);
                                o.push(f.data), (r = f.size);
                              }
                              break;
                            case 11:
                              var m = e.parseDate(a, r + 1, s - 1);
                              (o = m.data), (r += m.size);
                              break;
                            case 12:
                              var _ = e.parseString(a, r + 1);
                              (o = _.data), (r += _.size);
                              break;
                            default:
                              (r = s), console.log('AMF', 'Unsupported AMF value type ' + h);
                          }
                          return { data: o, size: r };
                        },
                      },
                      {
                        key: 'getStr',
                        value: function (e, t, i) {
                          for (var s = '', r = 0; r < i; r++) s += String.fromCharCode(e[t++]);
                          return s;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Pe = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.listeners = {});
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'clear',
                        value: function () {
                          this.listeners = {};
                        },
                      },
                      {
                        key: 'has',
                        value: function (e, t, i) {
                          var s = this.listeners[e];
                          if (!s) return !1;
                          for (var r = 0, a = s.length; r < a; r++) {
                            var n = s[r];
                            if (n.callback == t && n.thisObj == i) return !0;
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'on',
                        value: function (e, t, i, s) {
                          if (!this.has(e, t, i)) {
                            var r = this.listeners[e] || [];
                            r.push({
                              priority: s || 0,
                              callback: t,
                              thisObj: i,
                              bindCallback: i ? t.bind(i) : t,
                            }),
                              r.sort(function (e, t) {
                                return t.priority - e.priority;
                              }),
                              (this.listeners[e] = r);
                          }
                        },
                      },
                      {
                        key: 'off',
                        value: function (e, t, i) {
                          var s = this.listeners[e];
                          if (s)
                            for (var r = s.length - 1; r >= 0; r--) {
                              var a = s[r];
                              if (a.callback == t && a.thisObj == i) return void s.splice(r, 1);
                            }
                        },
                      },
                      {
                        key: 'trigger',
                        value: function (e, t) {
                          var i = this.listeners[e];
                          if (i) for (var s = i.length - 1; s >= 0; s--) (0, i[s].bindCallback)(t);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ae = i(54),
                Ie = i(22),
                ke = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).printProtocol = !!Number(localStorage._printProtocol)),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'onData',
                        value: function (e, t) {
                          var i = this.unmarshall(e, t);
                          this.trigger(e, i);
                        },
                      },
                      {
                        key: 'unmarshall',
                        value: function (e, t) {
                          var i = new Ae.a(t),
                            s = Ie.a[e],
                            r = i,
                            a = null;
                          try {
                            a = this.getClass(s);
                          } catch (t) {
                            p.a.warn(
                              '%c[x] Unmatched protocol '.concat(e >> 8, ' ').concat(s),
                              'color:red;background:#FFF0F0',
                            );
                          }
                          return (
                            a &&
                              (void 0 === (r = new a()).unmarshall
                                ? p.a.error('[x]' + s + '.unmarshall undefined!')
                                : r.unmarshall(i)),
                            this.printProtocol &&
                              !Re[s] &&
                              p.a.debug(
                                '%c<<<<< ' + s,
                                (function (e, t, i) {
                                  var s = 'font-weight:900';
                                  return (s += ';color:' + e);
                                })('#0000E3'),
                                r,
                              ),
                            r
                          );
                        },
                      },
                      {
                        key: 'getClass',
                        value: function (e) {
                          return null;
                        },
                      },
                    ]),
                    i
                  );
                })(Pe),
                Re = {
                  PCdnProxyPing: 1,
                  PCdnProxyPingRes: 1,
                  PP2pSliceAudioData: 1,
                  PP2pSliceVideoData: 1,
                  PP2pSliceControlData: 1,
                  PCdnP2pGetNode: 1,
                  PCdnP2pGetNodeRes: 1,
                  P2POffer: 1,
                  P2PAnswer: 1,
                  P2PCandidate: 1,
                  P2POfferReject: 1,
                  P2PRequestOffer: 1,
                  PCdnP2PWSForward: 1,
                  PCdnP2PWSForwardReject: 1,
                  PCdnP2pReportLog: 1,
                  PCDNSubscribeReq: 1,
                  PCDNSubscribeRes: 1,
                  PCDNCompeteSubscribeReq: 1,
                  PCDNCompeteSubscribeRes: 1,
                  P2PPunchBackReq: 1,
                  P2PPunchBackRsp: 1,
                  HuyaDelaySeiData: 1,
                },
                Oe = ke,
                be = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.osTime = 0),
                      (this.syncLocalTime = 0),
                      (this.rttList = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'convertToSrvTime',
                        value: function (e) {
                          if (0 === this.osTime) return 0;
                          var t = e - this.osTime;
                          return this.syncLocalTime + t;
                        },
                      },
                      {
                        key: 'isFinishNtp',
                        value: function () {
                          return 0 !== this.osTime;
                        },
                      },
                      {
                        key: 'ntpProcess',
                        value: function (e, t) {
                          var i = D.a.now(),
                            s = i - e,
                            r = Math.round(t + s / 2);
                          if (0 === this.osTime && 0 === this.syncLocalTime)
                            (this.osTime = i), (this.syncLocalTime = r), this.rttList.push(s);
                          else if (this.rttList.length < 10)
                            (this.osTime = i), (this.syncLocalTime = r), this.rttList.push(s);
                          else {
                            for (var a = [], n = 0; n < this.rttList.length; ++n)
                              a.push(this.rttList[n]);
                            a.sort(function (e, t) {
                              return e - t;
                            });
                            for (var o = 0, h = 0; h < 4; ++h) o += a[h];
                            var u = o >> 2;
                            ((4 * s > 3 * u && 4 * s < 5 * u) || s > 6e4) &&
                              ((this.osTime = i), (this.syncLocalTime = r)),
                              this.rttList.shift(),
                              this.rttList.push(s),
                              (a = null);
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                we = i(20).default,
                Le = i(40).default,
                Me = new ((function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._info = new be()),
                      (this._clientTime = 0),
                      (this._requestId = 0),
                      (this._onWsTimeSyncBind = this._onWsTimeSync.bind(this));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'start',
                        value: function () {
                          this.wsTimeSync(), F.add(this._onTimer, this, 1e3);
                        },
                      },
                      {
                        key: '_onTimer',
                        value: function (e, t) {
                          t % 60 == 0 && this.wsTimeSync();
                        },
                      },
                      {
                        key: 'wsTimeSync',
                        value: function () {
                          '' !== U.a.sGuid &&
                            (this._req || (this._req = new we.WSTimeSyncReq()),
                            (this._requestId = Le.getRequestId()),
                            (this._clientTime = D.a.now()),
                            (this._req.sGuid = U.a.sGuid),
                            (this._req.lClientTime = this._clientTime),
                            Le.sendWup(
                              'launch',
                              'wsTimeSync',
                              this._req,
                              this._onWsTimeSyncBind,
                              !0,
                              this._requestId,
                            ));
                        },
                      },
                      {
                        key: '_onWsTimeSync',
                        value: function (e) {
                          this._info.ntpProcess(this._clientTime, Number(e.lServerTime));
                        },
                      },
                      {
                        key: 'getSyncTime',
                        value: function () {
                          return this._info.convertToSrvTime(D.a.now());
                        },
                      },
                      {
                        key: 'isFinishNtp',
                        value: function () {
                          return this._info.isFinishNtp();
                        },
                      },
                    ]),
                    e
                  );
                })())(),
                Ve = (function () {
                  function e(t) {
                    Object(s.a)(this, e), (this._split = t), (this._str = '');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'isEmpty',
                        value: function () {
                          return '' === this._str;
                        },
                      },
                      {
                        key: 'addStr',
                        value: function (e) {
                          this._str.length > 0 && (this._str += this._split), (this._str += e);
                        },
                      },
                      {
                        key: 'getStr',
                        value: function () {
                          return this._str;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ne = [72, 85, 89, 65, 58],
                Fe = [44, 162, 222, 9, 181, 23, 71, 219, 187, 85, 164, 254, 127, 194, 252, 78],
                Be = {
                  HUMEN: '00000001',
                  DELAY: '00000200',
                  VOLUME: '00000400',
                  VOLUME1: '00000401',
                  IFRAME: '00000600',
                },
                Ue = (function (e) {
                  Object(ve.a)(a, e);
                  var t = Object(ye.a)(a);
                  function a() {
                    return Object(s.a)(this, a), t.call(this);
                  }
                  return (
                    Object(r.a)(a, [
                      {
                        key: 'getClass',
                        value: function (e) {
                          return i(79)('./' + e).default;
                        },
                      },
                    ]),
                    a
                  );
                })(Oe),
                xe = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._mse = t),
                      (this._protoHandler = new Ue()),
                      (this._proto = null),
                      (this._netDelaySum = 0),
                      (this._c2cDelaySum = 0),
                      (this._svrDelaySum = 0),
                      (this._delayCnt = 0),
                      (this._curAnchorDelay = 0),
                      (this._offset = 0),
                      (this.initDts = 0),
                      (this.initSeiDts = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getStat',
                        value: function () {
                          if (0 === this._delayCnt) return null;
                          var e = { fields: {}, dims: {} };
                          if (
                            this._delayCnt > 0 &&
                            ((e.fields[C.a.CORE.DELAY_ANCHOR] = Math.floor(
                              this._c2cDelaySum / this._delayCnt,
                            )),
                            (e.fields[C.a.CORE.DELAY_SERVER] = Math.floor(
                              this._svrDelaySum / this._delayCnt,
                            )),
                            (e.fields[C.a.CORE.DELAY_NET] = Math.floor(
                              this._netDelaySum / this._delayCnt,
                            )),
                            this._proto)
                          ) {
                            (e.dims[C.a.CORE.UPLOADER_TYPE] =
                              this._proto.anchorSei.uploadType + ''),
                              (e.dims[C.a.CORE.ENCODER_SOURCE] =
                                this._proto.anchorSei.encoderSource + '');
                            var t = new Ve(','),
                              i = new Ve(','),
                              s = new Ve(',');
                            this._proto.serverSei.serverInfos.forEach(function (e) {
                              e.enable > 0 &&
                                (t.addStr(e.getProxyIdStr() + '-' + e.proxyType),
                                e.serverDelay > 0 &&
                                  e.serverDelay < 1e4 &&
                                  i.addStr(e.proxyType + ':' + e.serverDelay),
                                e.lastPeriodDelay > 0 &&
                                  e.lastPeriodDelay < 1e4 &&
                                  s.addStr(e.proxyType + ':' + e.lastPeriodDelay));
                            }),
                              t.isEmpty() || (e.dims[C.a.CORE.DELAY_NODE_INFO] = t.getStr()),
                              i.isEmpty() || (e.dims[C.a.CORE.SVR_DELAY_INFOS] = i.getStr()),
                              s.isEmpty() || (e.dims[C.a.CORE.SVR_LAST_P_DELAY] = s.getStr());
                          }
                          return (
                            (this._netDelaySum = 0),
                            (this._c2cDelaySum = 0),
                            (this._svrDelaySum = 0),
                            (this._delayCnt = 0),
                            (this._proto = null),
                            e
                          );
                        },
                      },
                      {
                        key: '_record',
                        value: function (e, t) {
                          this._proto = t;
                          var i = Me.getSyncTime(),
                            s = e - t.serverSei.dtsGapSum - t.anchorSei.frameDts,
                            r = i - t.anchorSei.sendFrameTime - s;
                          if (
                            (this.initSeiDts != t.anchorSei.frameDts &&
                              (this._mse.offsetDts = e - t.anchorSei.frameDts),
                            (this.initSeiDts = t.anchorSei.frameDts),
                            0 < r && r < 3e4)
                          ) {
                            var a = i - t.anchorSei.caputureTime - s;
                            (this._netDelaySum += r),
                              (this._c2cDelaySum += a),
                              (this._svrDelaySum += r - t.serverSei.delaySum),
                              this._delayCnt++,
                              (this._curAnchorDelay = a || this._curAnchorDelay),
                              this._curAnchorDelay > 3e5 && (this._curAnchorDelay = 0),
                              this._mse.setSeiDelay(this._curAnchorDelay);
                          }
                        },
                      },
                      {
                        key: 'parseSei',
                        value: function (t, i, s, r) {
                          if (
                            ((t += this.initDts),
                            (this._offset = 0),
                            s == e.H265_CODEC_TYPE
                              ? ((i = this._nalUintExtractRbsp(i)), (this._offset += 2))
                              : s == e.AV1_CODEC_TYPE || (this._offset += 1),
                            this._getValue(i),
                            this._getValue(i),
                            this._getH265Len(i),
                            this._isHuya(i))
                          ) {
                            var a = i.subarray(this._offset),
                              n = this._getType(a);
                            if (((r[n] = 1), this._mse.saveSeiInfo(t, a, n), n === Be.DELAY))
                              this._parseDelay(t, a);
                            else if (n === Be.HUMEN) this._mse.saveH264SeiData(t, a);
                            else if (n === Be.VOLUME) {
                              var o = this._getStr(a);
                              this._mse.scriptVolumeInfos.addMixAudio(o, t);
                            } else if (n === Be.VOLUME1) {
                              var h = this._getStrVolume1(a);
                              this._mse.scriptVolumeInfos.addMixAudio(h, t);
                            }
                          }
                        },
                      },
                      {
                        key: '_nalUintExtractRbsp',
                        value: function (e) {
                          for (
                            var t = new Uint8Array(e.length), i = e.length, s = 0, r = 0;
                            s + 2 < i;

                          )
                            e[s] || e[s + 1] || 3 !== e[s + 2]
                              ? (t[r++] = e[s++])
                              : ((t[r++] = e[s++]), (t[r++] = e[s++]), s++);
                          for (; s < i; ) t[r++] = e[s++];
                          return t.subarray(0, r);
                        },
                      },
                      {
                        key: '_getStr',
                        value: function (e) {
                          for (var t = e.length, i = new Uint8Array(e.length), s = 0; s < t; s++)
                            i[s] = e[s];
                          t = this._getLength(e) + 8 + 16 + 2;
                          var r = new DataView(i.buffer);
                          return this._readVolume(r, t, 26);
                        },
                      },
                      {
                        key: '_readVolume',
                        value: function (e, t, i) {
                          for (var s = []; i + 9 <= t; ) {
                            var r = 4294967296 * e.getUint32(i, !1) + e.getUint32(i + 4, !1),
                              a = e.getUint8(i + 8);
                            s.push(r + '_' + a), (i += 9);
                          }
                          return s.join(',');
                        },
                      },
                      {
                        key: '_getStrVolume1',
                        value: function (e) {
                          var t = this._getStrChar(e),
                            i = this._getStrCode(t),
                            s = new DataView(i.buffer);
                          return this._readVolume(s, i.length, 0);
                        },
                      },
                      {
                        key: '_getStrChar',
                        value: function (e) {
                          for (var t = this._getLength(e) + 8 + 16 + 2, i = '', s = 26; s < t; s++)
                            i += String.fromCharCode(e[s]);
                          return atob(i);
                        },
                      },
                      {
                        key: '_getStrCode',
                        value: function (e) {
                          for (var t = new Uint8Array(e.length), i = 0; i < e.length; i++)
                            t[i] = e.charCodeAt(i);
                          return t;
                        },
                      },
                      {
                        key: '_getLength',
                        value: function (e) {
                          for (var t = '', i = 9; i < 26; i++) t += String.fromCharCode(e[i]);
                          return parseInt(t);
                        },
                      },
                      {
                        key: '_getValue',
                        value: function (e) {
                          for (var t = 0, i = e.length; this._offset < i; ) {
                            if (((t += e[this._offset]), 255 !== e[this._offset])) {
                              this._offset++;
                              break;
                            }
                            this._offset++;
                          }
                          return t;
                        },
                      },
                      {
                        key: '_parseDelay',
                        value: function (e, t) {
                          if (Me.isFinishNtp())
                            for (
                              var i = this._decodeData(t),
                                s = i.length,
                                r = new DataView(i.buffer),
                                a = 0;
                              a + 10 < s;

                            ) {
                              var n = r.getUint32(a, !0),
                                o = r.getUint32(a + 4, !0);
                              if (0 === n || n > s) break;
                              if (o === Ie.a.HuyaDelaySeiData) {
                                var h = new DataView(i.buffer, a, n),
                                  u = this._protoHandler.unmarshall(o, h);
                                this._record(e, u);
                              }
                              a += n;
                            }
                        },
                      },
                      {
                        key: '_decodeData',
                        value: function (e) {
                          for (
                            var t = this._decodeBase64(e),
                              i = t.length,
                              s = new Uint8Array(i),
                              r = 0;
                            r < i;
                            r++
                          )
                            s[r] = t.charCodeAt(r);
                          return s;
                        },
                      },
                      {
                        key: '_decodeBase64',
                        value: function (e) {
                          for (var t = '', i = this._getPayloadLen(e), s = 0; s < i; s++)
                            t += String.fromCharCode(e[s + 26]);
                          return atob(t);
                        },
                      },
                      {
                        key: '_getPayloadLen',
                        value: function (e) {
                          for (var t = '', i = 0; i < 16; i++) t += String.fromCharCode(e[i + 9]);
                          return parseInt(t);
                        },
                      },
                      {
                        key: '_getType',
                        value: function (e) {
                          for (var t = '', i = 0; i < 8; i++) t += String.fromCharCode(e[i]);
                          return t;
                        },
                      },
                      {
                        key: '_getH265Len',
                        value: function (e) {
                          for (var t = 0, i = 0; i < 16 && e[this._offset] === Fe[i]; i++)
                            this._offset++, t++;
                          return t;
                        },
                      },
                      {
                        key: '_isHuya',
                        value: function (e) {
                          for (var t = 0; t < 5; t++) {
                            if (e[this._offset] !== Ne[t]) return !1;
                            this._offset++;
                          }
                          return !0;
                        },
                      },
                    ]),
                    e
                  );
                })();
              (xe.H264_CODEC_TYPE = 0),
                (xe.H265_CODEC_TYPE = 1),
                (xe.AV1_CODEC_TYPE = 2),
                (xe.SEI_TYPES = Be);
              var He = xe,
                We = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._bytes = t),
                      (this._bitIndex = 0),
                      (this._bitLen = 8 * t.byteLength);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getBits',
                        value: function (e) {
                          var t = Math.floor(this._bitIndex / 8),
                            i = 8 - (this._bitIndex % 8),
                            s = this._bytes[t] & ((1 << i) - 1);
                          if (e <= i) return (this._bitIndex += e), s >>> (i - e);
                          var r = e - i;
                          return (this._bitIndex += i), ((s << r) | this.getBits(r)) >>> 0;
                        },
                      },
                      {
                        key: 'skipBits',
                        value: function (e) {
                          this._bitIndex += e;
                        },
                      },
                      {
                        key: 'getBytes',
                        value: function (e) {
                          if (this._bitIndex % 8 != 0)
                            throw new Error(
                              "can't get bytes from mid-byte: bit index=" + this._bitIndex,
                            );
                          var t = Math.floor(this._bitIndex / 8);
                          return (this._bitIndex += 8 * e), this._bytes.subarray(t, t + e);
                        },
                      },
                      {
                        key: 'bytePosition',
                        get: function () {
                          return Math.floor(this._bitIndex / 8);
                        },
                      },
                      {
                        key: 'bitposition',
                        get: function () {
                          return this._bitIndex;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ge = (function () {
                  function e() {
                    Object(s.a)(this, e);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'leb128',
                        value: function (e) {
                          for (var t = 0, i = 0; i < 8; i++) {
                            var s = e.getBits(8);
                            if (((t |= (127 & s) << (7 * i)), !(128 & s))) break;
                          }
                          return t;
                        },
                      },
                      {
                        key: 'parseOBUHeader',
                        value: function (e) {
                          var t = {},
                            i = e.bits;
                          return (
                            (t.obu_forbidden_bit = i.getBits(1)),
                            (t.obu_type = i.getBits(4)),
                            (t.obu_extension_flag = i.getBits(1)),
                            (t.obu_has_size_field = i.getBits(1)),
                            (t.obu_reserved_1bit = i.getBits(1)),
                            1 == t.obu_extension_flag &&
                              ((t.temporal_id = i.getBits(3)),
                              (t.spatial_id = i.getBits(2)),
                              (t.extension_header_reserved_3bits = i.getBits(3))),
                            t
                          );
                        },
                      },
                      {
                        key: 'uvlc',
                        value: function (e) {
                          for (var t = 0; !e.getBits(1); ) ++t;
                          return t >= 32 ? 0 : e.getBits(t) + (1 << t) - 1;
                        },
                      },
                      {
                        key: 'color_config',
                        value: function (t) {
                          var i = {};
                          return (
                            (i.high_bitdepth = t.getBits(1)),
                            2 == i.seq_profile && i.high_bitdepth
                              ? ((i.twelve_bit = t.getBits(1)),
                                (i.BitDepth = i.twelve_bit ? 12 : 10))
                              : (i.BitDepth = i.high_bitdepth ? 10 : 8),
                            1 == i.seq_profile
                              ? (i.mono_chrome = 0)
                              : (i.mono_chrome = t.getBits(1)),
                            (i.color_description_present_flag = t.getBits(1)),
                            i.color_description_present_flag
                              ? ((i.color_primaries = t.getBits(8)),
                                (i.transfer_characteristics = t.getBits(8)),
                                (i.matrix_coefficients = t.getBits(8)))
                              : ((i.color_primaries = e.CP_UNSPECIFIED),
                                (i.transfer_characteristics = e.TC_UNSPECIFIED),
                                (i.matrix_coefficients = e.MC_UNSPECIFIED)),
                            i.mono_chrome
                              ? ((i.color_range = t.getBits(1)),
                                (i.subsampling_x = 1),
                                (i.subsampling_y = 1),
                                (i.chroma_sample_position = e.CSP_UNKNOWN),
                                (i.separate_uv_delta_q = 0),
                                i)
                              : (i.color_primaries == e.CP_BT_709 &&
                                i.transfer_characteristics == e.TC_SRGB &&
                                i.matrix_coefficients == e.MC_IDENTITY
                                  ? ((i.color_range = 1),
                                    (i.subsampling_x = 0),
                                    (i.subsampling_y = 0))
                                  : ((i.color_range = t.getBits(1)),
                                    0 == i.seq_profile
                                      ? ((i.subsampling_x = 1), (i.subsampling_y = 1))
                                      : 1 == i.seq_profile
                                      ? ((i.subsampling_x = 0), (i.subsampling_y = 0))
                                      : 12 == i.BitDepth
                                      ? ((i.subsampling_x = t.getBits(1)),
                                        i.subsampling_x
                                          ? (i.subsampling_y = t.getBits(1))
                                          : (i.subsampling_y = 0))
                                      : ((i.subsampling_x = 1), (i.subsampling_y = 0)),
                                    i.subsampling_x &&
                                      i.subsampling_y &&
                                      (i.chroma_sample_position = t.getBits(2))),
                                (i.separate_uv_delta_q = t.getBits(1)),
                                i)
                          );
                        },
                      },
                      {
                        key: 'metadata_obu',
                        value: function (t, i) {
                          var s = {},
                            r = t.bits;
                          if (
                            ((s.metadata_type = e.leb128(r)),
                            s.metadata_type == e.METADATA_TYPE_ITUT_T35)
                          ) {
                            (s.itu_t_t35_country_code = r.getBits(8)),
                              255 == s.itu_t_t35_country_code &&
                                (s.itu_t_t35_country_code_extension_byte = r.getBits(8));
                            var a = (8 * i - r.bitposition) / 8;
                            s.itu_t_t35_payload_bytes = r.getBytes(a);
                          } else if (s.metadata_type == e.METADATA_TYPE_HDR_CLL)
                            (s.max_cll = r.getBits(16)), (s.max_fall = r.getBits(16));
                          else if (s.metadata_type == e.METADATA_TYPE_HDR_MDCV) {
                            (s.primary_chromaticity_x = []), (s.primary_chromaticity_y = []);
                            for (var n = 0; n < 3; n++)
                              (s.primary_chromaticity_x[n] = r.getBits(16)),
                                (s.primary_chromaticity_y[n] = r.getBits(16));
                            (s.white_point_chromaticity_x = r.getBits(16)),
                              (s.white_point_chromaticity_y = r.getBits(16)),
                              (s.luminance_max = r.getBits(32)),
                              (s.luminance_min = r.getBits(32));
                          } else if (s.metadata_type == e.METADATA_TYPE_SCALABILITY) {
                            if (
                              ((s.scalability_mode_idc = r.getBits(8)),
                              s.scalability_mode_idc == e.SCALABILITY_SS)
                            ) {
                              if (
                                ((s.spatial_layers_cnt_minus_1 = r.getBits(2)),
                                (s.spatial_layer_dimensions_present_flag = r.getBits(1)),
                                (s.spatial_layer_description_present_flag = r.getBits(1)),
                                (s.temporal_group_description_present_flag = r.getBits(1)),
                                (s.scalability_structure_reserved_3bits = r.getBits(3)),
                                s.spatial_layer_dimensions_present_flag)
                              )
                                for (var o = 0; o <= s.spatial_layers_cnt_minus_1; o++)
                                  (s.spatial_layer_max_width[o] = r.getBits(16)),
                                    (s.spatial_layer_max_height[o] = r.getBits(16));
                              if (s.spatial_layer_description_present_flag)
                                for (var h = 0; h <= s.spatial_layers_cnt_minus_1; h++)
                                  s.spatial_layer_ref_id[h] = r.getBits(8);
                              if (s.temporal_group_description_present_flag) {
                                s.temporal_group_size = r.getBits(8);
                                for (var u = 0; u < s.temporal_group_size; u++) {
                                  (s.temporal_group_temporal_id[u] = r.getBits(3)),
                                    (s.temporal_group_temporal_switching_up_point_flag[u] =
                                      r.getBits(1)),
                                    (s.temporal_group_spatial_switching_up_point_flag[u] =
                                      r.getBits(1)),
                                    (s.temporal_group_ref_cnt[u] = r.getBits(3));
                                  for (var d = 0; d < temporal_group_ref_cnt[u]; d++)
                                    s.temporal_group_ref_pic_diff[u][d] = r.getBits(8);
                                }
                              }
                            }
                          } else
                            s.metadata_type == e.METADATA_TYPE_TIMECODE &&
                              ((s.counting_type = r.getBits(5)),
                              (s.full_timestamp_flag = r.getBits(1)),
                              (s.discontinuity_flag = r.getBits(1)),
                              (s.cnt_dropped_flag = r.getBits(1)),
                              (s.n_frames = r.getBits(9)),
                              s.full_timestamp_flag
                                ? ((s.seconds_value = r.getBits(6)),
                                  (s.minutes_value = r.getBits(6)),
                                  (s.hours_value = r.getBits(5)))
                                : ((s.seconds_flag = r.getBits(1)),
                                  s.seconds_flag &&
                                    ((s.seconds_value = r.getBits(6)),
                                    (s.minutes_flag = r.getBits(1)),
                                    s.minutes_flag &&
                                      ((s.minutes_value = r.getBits(6)),
                                      (s.hours_flag = r.getBits(1)),
                                      s.hours_flag && (s.hours_value = r.getBits(5))))),
                              (s.time_offset_length = r.getBits(5)),
                              s.time_offset_length > 0 &&
                                (s.time_offset_value = r.getBits(s.time_offset_length)));
                          return s;
                        },
                      },
                      {
                        key: 'sequence_header_obu',
                        value: function (t) {
                          var i = {},
                            s = t.bits;
                          if (
                            ((i.seq_profile = s.getBits(3)),
                            (i.still_picture = s.getBits(1)),
                            (i.reduced_still_picture_header = s.getBits(1)),
                            i.reduced_still_picture_header)
                          )
                            (i.timing_info_present_flag = 0),
                              (i.decoder_model_info_present_flag = 0),
                              (i.initial_display_delay_present_flag = 0),
                              (i.operating_points_cnt_minus_1 = 0),
                              (i['operating_point_idc[0]'] = 0),
                              (i['seq_level_idx[0]'] = s.getBits(5)),
                              (i['seq_tier[0]'] = 0),
                              (i['decoder_model_present_for_this_op[0]'] = 0),
                              (i['initial_display_delay_present_for_this_op[0]'] = 0);
                          else {
                            (i.timing_info_present_flag = s.getBits(1)),
                              i.timing_info_present_flag
                                ? ((i.num_units_in_display_tick = s.getBits(32)),
                                  (i.time_scale = s.getBits(32)),
                                  (i.equal_picture_interval = s.getBits(1)),
                                  i.equal_picture_interval &&
                                    (i.num_ticks_per_picture_minus_1 = e.uvlc(s)),
                                  (i.decoder_model_info_present_flag = s.getBits(1)),
                                  i.decoder_model_info_present_flag &&
                                    (i.buffer_delay_length_minus_1 = s.getBits(5)),
                                  (i.num_units_in_decoding_tick = s.getBits(32)),
                                  (i.buffer_removal_time_length_minus_1 = s.getBits(5)),
                                  (i.frame_presentation_time_length_minus_1 = s.getBits(5)),
                                  (i.initial_display_delay_present_flag = s.getBits(1)),
                                  (i.operating_points_cnt_minus_1 = s.getBits(5)))
                                : ((i.decoder_model_info_present_flag = 0),
                                  (i.initial_display_delay_present_flag = s.getBits(1)),
                                  (i.operating_points_cnt_minus_1 = s.getBits(5)));
                            for (var r = 0; r <= i.operating_points_cnt_minus_1; r++) {
                              if (
                                ((i['operating_point_idc[' + r + ']'] = s.getBits(12)),
                                (i['seq_level_idx[' + r + ']'] = s.getBits(5)),
                                i['seq_level_idx[' + r + ']'] > 7
                                  ? (i['seq_tier[' + r + ']'] = s.getBits(1))
                                  : (i['seq_tier[' + r + ']'] = 0),
                                i.decoder_model_info_present_flag)
                              ) {
                                if (
                                  ((i['decoder_model_present_for_this_op[' + r + ']'] =
                                    s.getBits(1)),
                                  i['decoder_model_present_for_this_op[' + r + ']'])
                                ) {
                                  var a = i.buffer_delay_length_minus_1 + 1;
                                  (i['decoder_buffer_delay[' + r + ']'] = s.getBits(a)),
                                    (i['encoder_buffer_delay[' + r + ']'] = s.getBits(a)),
                                    (i['low_delay_mode_flag[' + r + ']'] = s.getBits(1));
                                }
                              } else i['decoder_model_present_for_this_op[' + r + ']'] = 0;
                              i.initial_display_delay_present_flag &&
                                (i['initial_display_delay_present_for_this_op[' + r + ']'] =
                                  s.getBits(1)),
                                i['initial_display_delay_present_for_this_op[' + r + ']'] &&
                                  (i['initial_display_delay_minus_1[' + r + ']'] = s.getBits(4));
                            }
                          }
                          return (
                            (i.frame_width_bits_minus_1 = s.getBits(4)),
                            (i.frame_height_bits_minus_1 = s.getBits(4)),
                            (i.max_frame_width_minus_1 = s.getBits(i.frame_width_bits_minus_1 + 1)),
                            (i.max_frame_height_minus_1 = s.getBits(
                              i.frame_height_bits_minus_1 + 1,
                            )),
                            i.reduced_still_picture_header
                              ? (i.frame_id_numbers_present_flag = 0)
                              : (i.frame_id_numbers_present_flag = s.getBits(1)),
                            i.frame_id_numbers_present_flag &&
                              ((i.delta_frame_id_length_minus_2 = s.getBits(4)),
                              (i.additional_frame_id_length_minus_1 = s.getBits(3))),
                            (i.use_128x128_superblock = s.getBits(1)),
                            (i.enable_filter_intra = s.getBits(1)),
                            (i.enable_intra_edge_filter = s.getBits(1)),
                            i.reduced_still_picture_header
                              ? ((i.enable_interintra_compound = 0),
                                (i.enable_masked_compound = 0),
                                (i.enable_warped_motion = 0),
                                (i.enable_dual_filter = 0),
                                (i.enable_order_hint = 0),
                                (i.enable_jnt_comp = 0),
                                (i.enable_ref_frame_mvs = 0),
                                (i.seq_force_screen_content_tools = e.SELECT_SCREEN_CONTENT_TOOLS),
                                (i.seq_force_integer_mv = 1),
                                (i['#OrderHintBits'] = 0))
                              : ((i.enable_interintra_compound = s.getBits(1)),
                                (i.enable_masked_compound = s.getBits(1)),
                                (i.enable_warped_motion = s.getBits(1)),
                                (i.enable_dual_filter = s.getBits(1)),
                                (i.enable_order_hint = s.getBits(1)),
                                i.enable_order_hint &&
                                  ((i.enable_jnt_comp = s.getBits(1)),
                                  (i.enable_ref_frame_mvs = s.getBits(1))),
                                (i.seq_choose_screen_content_tools = s.getBits(1)),
                                i.seq_choose_screen_content_tools
                                  ? (i.seq_force_screen_content_tools =
                                      e.SELECT_SCREEN_CONTENT_TOOLS)
                                  : (i.seq_force_screen_content_tools = s.getBits(1)),
                                i.seq_force_screen_content_tools > 0 &&
                                  ((i.seq_choose_integer_mv = s.getBits(1)),
                                  i.seq_choose_integer_mv
                                    ? (i.seq_force_integer_mv = 1)
                                    : (i.seq_force_integer_mv = s.getBits(1))),
                                i.enable_order_hint
                                  ? ((i.order_hint_bits_minus_1 = s.getBits(3)),
                                    (i['#OrderHintBits'] = i.order_hint_bits_minus_1 + 1))
                                  : (i['#OrderHintBits'] = 0),
                                (i.enable_superres = s.getBits(1)),
                                (i.enable_cdef = s.getBits(1)),
                                (i.enable_restoration = s.getBits(1)),
                                Object.assign(i, e.color_config(s)),
                                (i.film_grain_params_present = s.getBits(1))),
                            i
                          );
                        },
                      },
                      {
                        key: 'parseOBU',
                        value: function (t, i, s, r) {
                          for (var a = { bits: new We(t) }, n = 0; t.length - n > 1; ) {
                            var o;
                            1 == (o = e.parseOBUHeader(a)).obu_extension_flag && n++;
                            var h,
                              u = t.length - n;
                            if (
                              ((h = o.obu_has_size_field
                                ? e.leb128(a.bits)
                                : u - 1 - o.obu_extension_flag),
                              o.obu_type == e.OBU_SEQUENCE_HEADER && s)
                            )
                              s(e.sequence_header_obu(a));
                            else if (o.obu_type == e.OBU_METADATA && r) {
                              var d = e.metadata_obu(a, a.bits.bytePosition + h);
                              d.itu_t_t35_payload_bytes && r(i, d);
                            } else a.bits.skipBits(8 * h);
                            n = a.bits.bytePosition;
                          }
                        },
                      },
                      {
                        key: 'zeroPad',
                        value: function (e, t, i) {
                          e || (e = 0), void 0 === i && (i = 10);
                          for (var s = e.toString(i); s.length < t; ) s = '0' + s;
                          return s;
                        },
                      },
                    ]),
                    e
                  );
                })();
              (Ge.OBU_SEQUENCE_HEADER = 1),
                (Ge.OBU_TEMPORAL_DELIMITER = 2),
                (Ge.OBU_FRAME_HEADER = 3),
                (Ge.OBU_TILE_GROUP = 4),
                (Ge.OBU_METADATA = 5),
                (Ge.OBU_FRAME = 6),
                (Ge.OBU_REDUNDANT_FRAME_HEADER = 7),
                (Ge.OBU_TILE_LIST = 8),
                (Ge.OBU_PADDING = 15),
                (Ge.SELECT_SCREEN_CONTENT_TOOLS = 2),
                (Ge.CP_BT_709 = 1),
                (Ge.CP_UNSPECIFIED = 2),
                (Ge.TC_SRGB = 13),
                (Ge.TC_UNSPECIFIED = 2),
                (Ge.MC_IDENTITY = 0),
                (Ge.MC_UNSPECIFIED = 2),
                (Ge.CSP_UNKNOWN = 0),
                (Ge.METADATA_TYPE_HDR_CLL = 1),
                (Ge.METADATA_TYPE_HDR_MDCV = 2),
                (Ge.METADATA_TYPE_SCALABILITY = 3),
                (Ge.METADATA_TYPE_ITUT_T35 = 4),
                (Ge.METADATA_TYPE_TIMECODE = 5),
                (Ge.SCALABILITY_SS = 14);
              var je = Ge,
                Ye = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e,
                      r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 100;
                    return Object(s.a)(this, i), ((e = t.call(this, r)).lastTs = 0), e;
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'addCur',
                        value: function (e, t) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'addCur', this).call(this, e, t);
                          var s = parseInt(t / 1e3);
                          this.lastTs > 0 && this.lastTs !== s && this.samples.calculate(),
                            (this.lastTs = s),
                            this.samples.addCur(e);
                        },
                      },
                    ]),
                    i
                  );
                })(
                  (function () {
                    function e(t) {
                      Object(s.a)(this, e), (this.hasSample = !1), (this.samples = new ge(t));
                    }
                    return (
                      Object(r.a)(e, [
                        {
                          key: 'getSamples',
                          value: function () {
                            return this.samples.getSamples();
                          },
                        },
                        {
                          key: 'addCur',
                          value: function (e, t) {
                            this.hasSample = !0;
                          },
                        },
                        {
                          key: 'getResult',
                          value: function () {
                            var e = [],
                              t = this.samples.getSamples(),
                              i = t.length;
                            if (i > 0) {
                              e.push('size:' + i);
                              for (var s = 0; s < i; s++)
                                e.push(''.concat(i - s, ':').concat(t[s]));
                            }
                            return e.join(',');
                          },
                        },
                        {
                          key: 'reset',
                          value: function () {
                            var e = this.samples.cur;
                            this.samples.reset(), this.samples.addCur(e);
                          },
                        },
                      ]),
                      e
                    );
                  })(),
                ),
                qe = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.aSample = new Ye(20)),
                      (this.vSample = new Ye(20)),
                      (this.aAutoSample = new Ye(20)),
                      (this.vAutoSample = new Ye(20));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'addAudioSample',
                        value: function (e, t) {
                          this.aSample.addCur(e, t), this.aAutoSample.addCur(e, t);
                        },
                      },
                      {
                        key: 'addVideoSample',
                        value: function (e, t) {
                          this.vSample.addCur(e, t), this.vAutoSample.addCur(e, t);
                        },
                      },
                      {
                        key: 'getResult',
                        value: function () {
                          var e = [],
                            t = this.aSample.getSamples(),
                            i = this.vSample.getSamples(),
                            s = Math.min(i.length, t.length);
                          if (s > 0) {
                            e.push('size:'.concat(s));
                            for (var r = 0; r < s; r++)
                              e.push(''.concat(s - r, ':').concat(i[r] + t[r]));
                          }
                          return e.join(',');
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this.aSample.reset(), this.vSample.reset();
                        },
                      },
                      {
                        key: 'getAutoSamples',
                        value: function () {
                          var e = {
                            aSamples: this.aAutoSample.getSamples(),
                            vSamples: this.vAutoSample.getSamples(),
                          };
                          return this.aAutoSample.reset(), this.vAutoSample.reset(), e;
                        },
                      },
                      {
                        key: 'recordStat',
                        value: function (e) {
                          var t = this.getResult();
                          '' !== t && (this.reset(), e.setCoreDim(C.a.CORE.REAL_KBPS_SAMPLE, t));
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ke = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.realFps = 0),
                      (this.maxDropCnt = 0),
                      (this.curDropCnt = 0),
                      (this.startDropDts = 0),
                      (this.lastDropDts = 0),
                      (this.started = !1),
                      (this.discardGap = 0),
                      (this.minFps = 1e3),
                      (this.corePlayer = t),
                      (this.info = null),
                      (this.isRandom = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setConfig',
                        value: function (e) {
                          this.dropTime = e.dropTime || 0;
                          var t = e.minFps || 1e3;
                          this.minFps = Math.max(t, parseInt((2 * this.realFps) / 3));
                        },
                      },
                      {
                        key: 'setInfo',
                        value: function (e) {
                          this.info = e;
                          var t = !0;
                          this.info && (t = x.b.getSdkAbRandom(this.info, I.a.dropFrameAb)),
                            (this.isRandom = t);
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this.realFps = 0),
                            (this.maxDropCnt = 0),
                            (this.curDropCnt = 0),
                            (this.startDropDts = 0),
                            (this.lastDropDts = 0),
                            (this.started = !1),
                            (this.isRandom = !1);
                        },
                      },
                      {
                        key: 'start',
                        value: function () {
                          p.a.log('DropFrameController.start'), (this.started = !0);
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          this.started = !1;
                        },
                      },
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          e > 0 &&
                            0 === this.realFps &&
                            ((this.realFps = e),
                            (this.minFps = Math.max(this.minFps, parseInt((2 * e) / 3))),
                            (this.maxDropCnt = Math.max(0, e - this.minFps)),
                            p.a.log(
                              'DropFrameController.setRealFps fps='
                                .concat(e, ' minFps=')
                                .concat(this.minFps, ' maxDrop=')
                                .concat(this.maxDropCnt),
                            ));
                        },
                      },
                      {
                        key: 'isCanDrop',
                        value: function (e, t, i) {
                          if (
                            this.isRandom &&
                            this.corePlayer.webcodecType != B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                            !(
                              this.corePlayer.bitrate < I.a.perfBitrate ||
                              (this.corePlayer.h265Proxy && this.corePlayer.h265Proxy.isReady) ||
                              this.corePlayer.getBufferLen() <= 2e3
                            )
                          ) {
                            var s = this.corePlayer.renderList;
                            if (!(s.length < 10)) {
                              var r = 0;
                              s.forEach(function (e) {
                                r += e;
                              });
                              var a = Math.floor(r / s.length),
                                n = ~~((1e3 / this.realFps) * 2);
                              return (
                                a <= ~~(0.5 * this.realFps)
                                  ? (this.discardGap = n)
                                  : a <= ~~(0.6 * this.realFps)
                                  ? (this.discardGap = ~~(1.3 * n))
                                  : a <= ~~(0.7 * this.realFps)
                                  ? (this.discardGap = ~~(1.6 * n))
                                  : a <= ~~(0.8 * this.realFps)
                                  ? (this.discardGap = 2 * n)
                                  : a <= ~~(0.9 * this.realFps) && (this.discardGap = 3 * n),
                                !t &&
                                  0 == (96 & i) &&
                                  (0 === this.lastDropDts ||
                                    e - this.lastDropDts >= this.discardGap) &&
                                  ((this.lastDropDts = e), !0)
                              );
                            }
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Je = function e() {
                  Object(s.a)(this, e), (this.totalTime = 0), (this.frameNum = 0);
                },
                ze = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.started = !1),
                      (this.lastCheckTs = 0),
                      (this.seg = new Je()),
                      (this.segList = []),
                      (this.idx = 0),
                      (this.segSize = 10);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'addFrame',
                        value: function () {
                          var e = D.a.now();
                          this.started ||
                            ((this.started = !0),
                            (this.lastCheckTs = e),
                            F.add(this.onCheckFrameRate, this, 200)),
                            this.seg.frameNum++,
                            this.onCheckFrameRate(e);
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this.started = !1),
                            (this.lastCheckTs = 0),
                            (this.seg = new Je()),
                            (this.segList = []),
                            (this.idx = 0),
                            F.remove(this.onCheckFrameRate, this);
                        },
                      },
                      {
                        key: 'onCheckFrameRate',
                        value: function (e) {
                          if (this.lastCheckTs > 0 && this.seg) {
                            var t = e - this.lastCheckTs;
                            t >= 1e3 &&
                              ((this.seg.totalTime = t),
                              (this.segList[this.idx] = this.seg),
                              this.idx++,
                              this.idx >= this.segSize && (this.idx = 0),
                              (this.seg = new Je()),
                              (this.lastCheckTs = e));
                          }
                        },
                      },
                      {
                        key: 'isDownEnough',
                        value: function (e) {
                          return e > 0 && this.segList.length > 0 && this.getAvg() > 0.9 * e;
                        },
                      },
                      {
                        key: 'getAvg',
                        value: function () {
                          for (var e = 0, t = 0, i = this.segList.length, s = 0; s < i; s++) {
                            var r = this.segList[s];
                            (e += r.frameNum), (t += r.totalTime);
                          }
                          return (e / t) * 1e3;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Qe = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.m_idx = 0),
                      (this.m_data = null),
                      (this.m_len = 0),
                      (this.m_bits = 0),
                      (this.m_byte = 0),
                      (this.m_zeros = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'init',
                        value: function (e, t) {
                          (this.m_data = e),
                            (this.m_len = t),
                            (this.m_idx = 0),
                            (this.m_bits = 0),
                            (this.m_byte = 0),
                            (this.m_zeros = 0);
                        },
                      },
                      {
                        key: 'getByte',
                        value: function () {
                          if (this.m_idx >= this.m_len) return 0;
                          var e = this.m_data[this.m_idx++];
                          return (
                            0 == e
                              ? (this.m_zeros++,
                                this.m_idx < this.m_len &&
                                  2 == this.m_zeros &&
                                  3 == this.m_data[this.m_idx] &&
                                  (this.m_idx++, (this.m_zeros = 0)))
                              : (this.m_zeros = 0),
                            e
                          );
                        },
                      },
                      {
                        key: 'getBit',
                        value: function () {
                          return (
                            0 == this.m_bits && ((this.m_byte = this.getByte()), (this.m_bits = 8)),
                            this.m_bits--,
                            (this.m_byte >> this.m_bits) & 1
                          );
                        },
                      },
                      {
                        key: 'getWord',
                        value: function (e) {
                          for (var t = 0; e > 0; ) (t <<= 1), (t |= this.getBit()), e--;
                          return t;
                        },
                      },
                      {
                        key: 'getUe',
                        value: function () {
                          for (var e = 0; this.m_idx < this.m_len && 0 == this.getBit(); ) e++;
                          var t = (1 << e) - 1;
                          return 31 == e ? 0 : (e > 0 && (t += this.getWord(e)), t);
                        },
                      },
                      {
                        key: 'getSe',
                        value: function () {
                          var e = this.getUe(),
                            t = (e + 1) >> 1;
                          return 1 & e || (t = -t), t;
                        },
                      },
                      {
                        key: 'parseSequenceParameterSet',
                        value: function (e, t, i) {
                          if (t < 20) return !1;
                          this.init(e, t), this.getWord(16);
                          var s = this.getWord(4);
                          i.sps_video_parameter_set_id = s;
                          var r = this.getWord(3);
                          (i.sps_max_sub_layers_minus1 = r),
                            (s = this.getWord(1)),
                            (i.temporal_id_nesting_flag = s),
                            this.hevc_parse_profile_tier_level(i, r);
                          var a = this.getUe();
                          i.sps_seq_parameter_set_id = a;
                          var n = this.getUe();
                          i.chroma_format_idc = n;
                          var o = 0;
                          3 == n && (o = s = this.getWord(1)), (i.separate_colour_plane_flag = o);
                          var h = this.getUe(),
                            u = this.getUe();
                          p.a.log(
                            "HevcSpsParser.parseSequenceParameterSet', ue_width="
                              .concat(h, ', ue_height=')
                              .concat(u),
                          );
                          var d = 0,
                            c = 0,
                            l = 0,
                            f = 0;
                          this.getWord(1) &&
                            ((d = this.getUe()),
                            (c = this.getUe()),
                            (l = this.getUe()),
                            (f = this.getUe()));
                          var m = (1 != n && 2 != n) || 0 != o ? 1 : 2,
                            _ = 1 == n && 0 == o ? 2 : 1;
                          return (
                            (h -= m * c + m * d),
                            (u -= _ * f + _ * l),
                            (i.width = h),
                            (i.height = u),
                            this.getUe() == this.getUe()
                          );
                        },
                      },
                      {
                        key: 'hevc_parse_profile_tier_level',
                        value: function (e, t) {
                          if ((this.hevc_parse_profile_tier_level_common(e, 1, 1, 1), 0 != t)) {
                            var i = [],
                              s = [];
                            (i[6] = {}), (s[6] = {});
                            for (var r = 0; r < t; r++)
                              (i[r] = this.getWord(1)), (s[r] = this.getWord(1));
                            if (t > 0) for (var a = t; a < 8; a++) this.getWord(2);
                            e.sub_layer = [];
                            for (var n = 0; n < t; n++)
                              (e.sub_layer[n] = {}),
                                this.hevc_parse_profile_tier_level_common(
                                  e.sub_layer[n],
                                  i[n],
                                  s[n],
                                  0,
                                );
                          }
                        },
                      },
                      {
                        key: 'hevc_parse_profile_tier_level_common',
                        value: function (e, t, i, s) {
                          t &&
                            ((e.profile_space = this.getWord(2)),
                            (e.tier_flag = this.getWord(1)),
                            (e.profile_idc = this.getWord(5)),
                            (e.profile_compatibility_flags = this.getWord(32)),
                            (e.progressive_source_flag = this.getWord(1)),
                            (e.interlaced_source_flag = this.getWord(1)),
                            (e.non_packed_constraint_flag = this.getWord(1)),
                            (e.frame_only_constraint_flag = this.getWord(1)),
                            (e.reserved_zero_44bits = this.getWord(44))),
                            i && (e.level_idc = this.getWord(8));
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Xe = null,
                $e = function () {
                  if (null == Xe)
                    try {
                      var e = document.createElement('canvas').getContext('experimental-webgl'),
                        t = e.getExtension('WEBGL_debug_renderer_info');
                      (Xe = e.getParameter(t.UNMASKED_RENDERER_WEBGL)),
                        (localStorage._renderInfo = Xe);
                    } catch (e) {
                      (Xe = ''), p.a.log('RenderInfo.getRenderInfo', e.message);
                    }
                  return Xe;
                },
                Ze = i(21),
                et = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this.corePlayer = t),
                      (this.parser = i),
                      (this.dropLevel = 0),
                      (this.open = !1),
                      (this.started = !1),
                      (this.dropFrames = 0),
                      (this.lastDropFrames = 0),
                      (this.lastDropTs = 0),
                      (this.realFps = 0),
                      (this.discardGap = 0),
                      (this.lastDropDts = 0),
                      (this.dropRenderLevel = 0),
                      (this.lastCheckDisCardTs = 0),
                      (this.checkDiscardTimes = 0),
                      (this.dropRenderLevel = !1),
                      (this.isRenderDrop = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          e > 0 &&
                            0 === this.realFps &&
                            ((this.realFps = e),
                            p.a.log('DropFrameByDts.setRealFps fps='.concat(e)));
                        },
                      },
                      {
                        key: 'getRecrod',
                        value: function () {
                          var e = D.a.now() - this.lastDropTs,
                            t = Math.round(e / 1e3),
                            i = this.dropFrames - this.lastDropFrames,
                            s = Math.round(i / t);
                          return (
                            (this.lastDropFrames = this.dropFrames),
                            (this.lastDropTs = D.a.now()),
                            s < 0 ? 0 : s
                          );
                        },
                      },
                      {
                        key: 'start',
                        value: function () {
                          var e = (Ze.a.browser + '').toLowerCase();
                          'safari' === e
                            ? p.a.log('DropFrameDts.start fail browser='.concat(e))
                            : (p.a.log('DropFrameDts.start'),
                              (this.started = !0),
                              (this.lastDropTs = D.a.now()));
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          this.started = !1;
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this.dropLevel = 0),
                            (this.dropFrames = 0),
                            (this.lastDropFrames = 0),
                            (this.realFps = 0),
                            (this.lastDropDts = 0),
                            (this.dropRenderLevel = 0),
                            (this.discardGap = 0),
                            (this.lastCheckDisCardTs = 0),
                            (this.checkDiscardTimes = 0);
                        },
                      },
                      {
                        key: 'isCanDrop',
                        value: function (e, t, i) {
                          if (1 != I.a.isCloseMseDrop && 1 == I.a.isLimitNaluType) {
                            if (
                              !this.open ||
                              !this.started ||
                              this.corePlayer.webcodecType !== B.a.PLAYER_CORE_TYPE.MSE
                            )
                              return !1;
                            if (1 == localStorage._closeDrop) return !1;
                            var s = this.corePlayer.renderList;
                            if ((s.length >= 5 && this.getDisCardCfg(s), t))
                              0 !== this.dropLevel &&
                                p.a.log(
                                  'DropFrameByDts.dropFrames level='
                                    .concat(this.dropLevel, ' dromNum=')
                                    .concat(this.dropFrames),
                                ),
                                (this.dropLevel = 0);
                            else {
                              var r,
                                a = this.corePlayer.getBufferLen();
                              if (
                                ((r = I.a.dtsJumpOpen
                                  ? e - this.corePlayer.getCorrentCurrentDts()
                                  : e - this.corePlayer.getCurrentRealTime()),
                                this.dropLevel < 2 &&
                                r >= I.a.dropFrameDts[1] &&
                                a < 0.5 * I.a.dropFrameDts[1]
                                  ? ((this.dropLevel = 2),
                                    p.a.log(
                                      'DropFrameByDts.dropFrame level=2 buffer='
                                        .concat(a, ' gap=')
                                        .concat(r),
                                    ))
                                  : this.dropLevel < 1 &&
                                    r >= I.a.dropFrameDts[0] &&
                                    a < 0.7 * I.a.dropFrameDts[0] &&
                                    ((this.dropLevel = 1),
                                    p.a.log(
                                      'DropFrameByDts.dropFrame level=1 buffer='
                                        .concat(a, ' gap=')
                                        .concat(r),
                                    )),
                                2 === this.dropLevel)
                              )
                                return this.dropFrames++, (this.lastDropDts = e), !0;
                              if (1 === this.dropLevel && 0 == (96 & i))
                                return this.dropFrames++, (this.lastDropDts = e), !0;
                              if (a <= 1e3)
                                return (
                                  2 == localStorage._printMseDropInfo &&
                                    p.a.log('DropFrameByDts buffer <= 1000'),
                                  !1
                                );
                              if (!this.corePlayer.isSupportRequestVideoFrameCallback()) return !1;
                              if (
                                this.isRenderDrop &&
                                0 == (96 & i) &&
                                e - this.lastDropDts >= this.discardGap
                              )
                                return (
                                  (this.lastDropDts = e),
                                  this.dropFrames++,
                                  (this.dropLevel = 3),
                                  !0
                                );
                            }
                            return !1;
                          }
                        },
                      },
                      {
                        key: 'getDisCardCfg',
                        value: function (e) {
                          var t = D.a.now();
                          if (
                            !(0 != this.lastCheckDisCardTs && t - this.lastCheckDisCardTs < 1e3)
                          ) {
                            this.checkDiscardTimes++, (this.lastCheckDisCardTs = t);
                            var i,
                              s = 0,
                              r = 0,
                              a = !1,
                              n = 0,
                              o = 0;
                            if (0 != this.realFps) {
                              var h = this.parser.fps.getHeartReceiveFps();
                              e.forEach(function (e) {
                                s += e;
                              }),
                                (i = Math.floor(s / e.length)),
                                0 != h && (o = Math.floor((i / h) * 100) / 100),
                                (n = this.realFps),
                                Number(localStorage._forceDropFrame) > 0 &&
                                  (n = Number(localStorage._forceDropFrame));
                              var u = Math.floor((i / n) * 100) / 100,
                                d = ~~((1e3 / n) * 2),
                                c = 3 * d,
                                l = 2 * d,
                                f = ~~(1.6 * d),
                                m = ~~(1.3 * d),
                                _ = d,
                                v = ~~(0.9 * n),
                                y = ~~(0.8 * n),
                                S = ~~(0.7 * n),
                                g = ~~(0.6 * n),
                                T = ~~(0.5 * n);
                              o >= 0.9 && 1 != localStorage._forceMseDropReal
                                ? (o >= 0.95 && this.checkDiscardTimes % 10 == 0
                                    ? 1 == this.dropRenderLevel
                                      ? ((a = !1), (r = 0))
                                      : 2 == this.dropRenderLevel
                                      ? ((this.discardGap = c), (r = 1), (a = !0))
                                      : 3 == this.dropRenderLevel
                                      ? ((this.discardGap = l), (r = 2), (a = !0))
                                      : 4 == this.dropRenderLevel
                                      ? ((this.discardGap = f), (r = 3), (a = !0))
                                      : 5 == this.dropRenderLevel &&
                                        ((this.discardGap = m), (r = 4), (a = !0))
                                    : ((r = 0), (a = !1)),
                                  1 == localStorage._printMseDropInfo &&
                                    p.a.log(
                                      'DropFrameByDts.getDisCardCfg.realRate back,lastDropLevel='
                                        .concat(this.dropRenderLevel, ',isRenderDropLevel=')
                                        .concat(r, ',isRenderDrop=')
                                        .concat(a, ',realRenderRate=')
                                        .concat(o, ',fpsRenderRate=')
                                        .concat(u, ',renderSec=')
                                        .concat(i, ',heartReceiveFps=')
                                        .concat(h),
                                    ))
                                : (i <= v && i > y
                                    ? ((this.discardGap = c), (r = 1), (a = !0))
                                    : i <= y && i > S
                                    ? ((this.discardGap = l), (r = 2), (a = !0))
                                    : i <= S && i > g
                                    ? ((this.discardGap = f), (r = 3), (a = !0))
                                    : i <= g && i > T
                                    ? ((this.discardGap = m), (r = 4), (a = !0))
                                    : i <= T
                                    ? ((this.discardGap = _), (r = 5), (a = !0))
                                    : ((r = this.dropRenderLevel), (a = this.isRenderDrop)),
                                  1 == localStorage._printMseDropInfo &&
                                    p.a.log(
                                      'DropFrameByDts.getDisCardCfg.realFps,lastDropLevel='
                                        .concat(this.dropRenderLevel, ',isRenderDropLevel=')
                                        .concat(r, ',isRenderDrop=')
                                        .concat(a, ',realRenderRate=')
                                        .concat(o, ',fpsRenderRate=')
                                        .concat(u, ',renderSec=')
                                        .concat(i, ',heartReceiveFps=')
                                        .concat(h),
                                    )),
                                (this.dropRenderLevel = r),
                                (this.isRenderDrop = a);
                            }
                          }
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          (this.corePlayer = null), (this.parser = null), (this.isRenderDrop = !1);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                tt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.size = 0),
                      (this.head = null),
                      (this.freeChainSize = 0),
                      (this.freeChain = null),
                      (this.travelNode = null);
                  }
                  return (
                    Object(r.a)(
                      e,
                      [
                        {
                          key: 'resetTravel',
                          value: function () {
                            this.travelNode = this.head;
                          },
                        },
                        {
                          key: 'travel',
                          value: function () {
                            if (
                              null === this.travelNode &&
                              ((this.travelNode = this.head), null === this.travelNode)
                            )
                              return null;
                            var e = this.travelNode.data;
                            return (
                              (this.travelNode = this.travelNode.next),
                              this.travelNode === this.head || null === this.travelNode ? null : e
                            );
                          },
                        },
                        {
                          key: 'reset',
                          value: function () {
                            this.resetTravel();
                            var e = null,
                              t = null;
                            for (e = this.head; null != e; )
                              (t = e),
                                (e = e.next),
                                (t.data = null),
                                (t.prev = null),
                                (t.next = null),
                                e === this.head && (e = null);
                            for (this.head = null, e = this.freeChain; null != e; )
                              (t = e),
                                (e = e.next),
                                (t.data = null),
                                (t.prev = null),
                                (t.next = null);
                            (this.freeChain = null), (this.size = 0), (this.freeChainSize = 0);
                          },
                        },
                        {
                          key: 'put',
                          value: function (e) {
                            var t = this.getFree(e);
                            if ((this.size++, null === this.head))
                              (t.prev = t), (t.next = t), (this.head = t);
                            else if (t.data.key < this.head.data.key)
                              (t.prev = this.head.prev),
                                (t.next = this.head),
                                (t.prev.next = t),
                                (t.next.prev = t),
                                (this.head = t);
                            else {
                              for (var i = this.head.prev; t.data.key < i.data.key; ) i = i.prev;
                              if (t.data.key === i.data.key)
                                return this.size--, this.putFree(t), !1;
                              (t.prev = i), (t.next = i.next), (t.prev.next = t), (t.next.prev = t);
                            }
                            return !0;
                          },
                        },
                        {
                          key: 'put2',
                          value: function (e) {
                            var t = this.getFree(e);
                            if ((this.size++, null === this.head))
                              (t.prev = t), (t.next = t), (this.head = t);
                            else if (t.data.key < this.head.data.key)
                              (t.prev = this.head.prev),
                                (t.next = this.head),
                                (t.prev.next = t),
                                (t.next.prev = t),
                                (this.head = t);
                            else {
                              for (
                                var i = this.head;
                                t.data.key > i.data.key && (i = i.next) !== this.head;

                              );
                              if (t.data.key === i.data.key)
                                return this.size--, this.putFree(t), !1;
                              (t.prev = i.prev), (t.next = i), (i.prev.next = t), (i.prev = t);
                            }
                            return !0;
                          },
                        },
                        {
                          key: 'get',
                          value: function () {
                            if (null === this.head) return null;
                            var e = this.head,
                              t = e.data;
                            return (
                              this.size--,
                              0 === this.size
                                ? (this.head = null)
                                : ((e.prev.next = e.next),
                                  (e.next.prev = e.prev),
                                  (this.head = this.head.next)),
                              this.putFree(e),
                              t
                            );
                          },
                        },
                        {
                          key: 'peek',
                          value: function () {
                            return null === this.head ? null : this.head.data;
                          },
                        },
                        {
                          key: 'peekLast',
                          value: function () {
                            return null === this.head ? null : this.head.prev.data;
                          },
                        },
                        {
                          key: 'getOrNewNode',
                          value: function (e) {
                            var t = null;
                            if (null === this.head)
                              this.size++,
                                ((t = this.getFree(null)).prev = t),
                                (t.next = t),
                                (this.head = t);
                            else if (e < this.head.data.key)
                              this.size++,
                                ((t = this.getFree(null)).prev = this.head.prev),
                                (t.next = this.head),
                                (t.prev.next = t),
                                (t.next.prev = t),
                                (this.head = t);
                            else {
                              for (var i = this.head.prev; e < i.data.key; ) i = i.prev;
                              i.data.key === e
                                ? (t = i)
                                : (this.size++,
                                  ((t = this.getFree(null)).prev = i),
                                  (t.next = i.next),
                                  (t.prev.next = t),
                                  (t.next.prev = t));
                            }
                            return t;
                          },
                        },
                        {
                          key: 'putFree',
                          value: function (e) {
                            (e.data = null),
                              (e.next = this.freeChain),
                              (e.prev = null),
                              (this.freeChain = e),
                              this.freeChainSize++;
                          },
                        },
                        {
                          key: 'getFree',
                          value: function (e) {
                            if (null === this.freeChain) return new it(e);
                            var t = this.freeChain;
                            return (t.data = e), (this.freeChain = t.next), this.freeChainSize--, t;
                          },
                        },
                        {
                          key: 'getLast',
                          value: function () {
                            if (null == this.head) return null;
                            var e = this.head.prev,
                              t = e.data;
                            return (
                              this.size--,
                              0 === this.size
                                ? (this.head = null)
                                : ((e.prev.next = e.next), (e.next.prev = e.prev)),
                              this.putFree(e),
                              t
                            );
                          },
                        },
                      ],
                      [
                        {
                          key: 'addData',
                          value: function (e, t, i) {
                            e.put(t), e.size > i && e.get();
                          },
                        },
                      ],
                    ),
                    e
                  );
                })(),
                it = function e(t) {
                  Object(s.a)(this, e), (this.next = null), (this.prev = null), (this.data = t);
                },
                st = tt,
                rt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.beforeChangeVideo = new st()),
                      (this.beforeChangeAudio = new st()),
                      (this.afterChangeVideo = new st()),
                      (this.afterChangeAudio = new st()),
                      (this.avcChangeCnt = 0),
                      (this.avcChange = !1),
                      (this.duration = I.a.avHeaderChangeStatCfg[1] || 3e3),
                      (this.avcChangeInfo = '');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setAvcChange',
                        value: function () {
                          this.avcChangeCnt++,
                            this.avcChangeCnt > 1 &&
                              ((this.avcChange = !0),
                              this.afterChangeVideo.reset(),
                              this.afterChangeAudio.reset());
                        },
                      },
                      {
                        key: 'addVideo',
                        value: function (e) {
                          this.addChain(
                            this.avcChange ? this.afterChangeVideo : this.beforeChangeVideo,
                            e,
                          );
                        },
                      },
                      {
                        key: 'addAudio',
                        value: function (e) {
                          this.addChain(
                            this.avcChange ? this.afterChangeAudio : this.beforeChangeAudio,
                            e,
                          );
                        },
                      },
                      {
                        key: 'addChain',
                        value: function (e, t) {
                          e.put(t);
                          var i = e.peek();
                          i &&
                            t.key - i.key > this.duration &&
                            (this.avcChange ? this.recordAvcChangeInfo() : e.get());
                        },
                      },
                      {
                        key: 'recordAvcChangeInfo',
                        value: function () {
                          this.avcChange = !1;
                          var e = this.getInfo(this.beforeChangeVideo),
                            t = this.getInfo(this.afterChangeVideo),
                            i = this.getInfo(this.beforeChangeAudio),
                            s = this.getInfo(this.afterChangeAudio);
                          (this.avcChangeInfo = 'vDts=['
                            .concat(e.dtsArr.join('-'), '--')
                            .concat(t.dtsArr.join('-'), ']')),
                            (this.avcChangeInfo += '  vCts=['
                              .concat(e.ctsArr.join('-'), '--')
                              .concat(t.ctsArr.join('-'), ']')),
                            (this.avcChangeInfo += '  aDts=['
                              .concat(i.dtsArr.join('-'), '--')
                              .concat(s.dtsArr.join('-'), ']'));
                        },
                      },
                      {
                        key: 'getInfo',
                        value: function (e) {
                          var t = e.get(),
                            i = [],
                            s = [];
                          if (t)
                            for (
                              i.push(t.key), t.hasOwnProperty('cts') && s.push(t.cts);
                              e.size > 0;

                            ) {
                              var r = e.get();
                              i.push(r.key - t.key),
                                r.hasOwnProperty('cts') && s.push(r.cts),
                                (t = r),
                                0 === e.size && i.push(r.key);
                            }
                          return { dtsArr: i, ctsArr: s };
                        },
                      },
                      {
                        key: 'record',
                        value: function (e, t) {
                          '' !== this.avcChangeInfo &&
                            t &&
                            e.setComp(C.a.DIM_H265_SAM.name, 'avcChange', this.avcChangeInfo),
                            (this.avcChangeInfo = '');
                        },
                      },
                    ]),
                    e
                  );
                })(),
                at = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.type = t),
                      (this.totalDuration = 0),
                      (this.referDts = 0),
                      (this.firstDts = 0),
                      (this.lastDts = 0),
                      (this.durations = []),
                      (this.open = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          p.a.log('DtsTimeline.reset type='.concat(this.type)),
                            (this.totalDuration = 0),
                            (this.referDts = 0),
                            (this.firstDts = 0),
                            (this.lastDts = 0),
                            (this.durations = []);
                        },
                      },
                      {
                        key: 'isFirstDts',
                        value: function (e) {
                          return e === this.firstDts;
                        },
                      },
                      {
                        key: 'alignTimeline',
                        value: function (e) {
                          (this.firstDts = e.firstDts),
                            (this.referDts = e.firstDts),
                            (this.lastDts = e.firstDts);
                        },
                      },
                      {
                        key: 'correctDts',
                        value: function (e, t) {
                          if (!this.open) return e;
                          var i = 0;
                          if (0 === this.firstDts)
                            (this.firstDts = e), (this.referDts = e), (this.lastDts = e), (i = e);
                          else {
                            var s = this.lastDts;
                            this.lastDts = e;
                            var r = e - s;
                            if ((r < 0 && (r = -r), r > I.a.dtsJumpThreshold)) {
                              var a = s - this.referDts,
                                n = this.totalDuration + a;
                              this.durations.push({
                                startTime: this.totalDuration,
                                firstDts: this.referDts,
                                endTime: n,
                              }),
                                (this.totalDuration = n),
                                0 === t && (t = 'audio' === this.type ? 44 : 30);
                              var o = 1e3 / t;
                              (this.referDts = Math.floor(e - o)),
                                p.a.log(
                                  'DtsTimeline.setDts:dtsJump type='
                                    .concat(this.type, ' lastDts=')
                                    .concat(s, ', curDts=')
                                    .concat(e),
                                );
                            }
                            (i = this.firstDts + this.totalDuration + (e - this.referDts)),
                              1 == localStorage._printCorrectDts &&
                                p.a.log(
                                  'DtsTimeline.setDts:type='
                                    .concat(this.type, ' dts=')
                                    .concat(e, ', correctDts=')
                                    .concat(i),
                                );
                          }
                          return i;
                        },
                      },
                      {
                        key: 'getRealDtsByCurrentTime',
                        value: function (e) {
                          for (var t = this.durations.length - 1; t >= 0; t--) {
                            var i = this.durations[t],
                              s = i.startTime,
                              r = i.endTime,
                              a = i.firstDts;
                            if (e >= s && e < r)
                              return (
                                0 !== t && (this.durations = this.durations.slice(t)), a + (e - s)
                              );
                          }
                          return this.referDts + e - this.totalDuration;
                        },
                      },
                      {
                        key: 'getCorrentDtsByCurrentTime',
                        value: function (e) {
                          return this.firstDts + e;
                        },
                      },
                      {
                        key: 'getRealDtsByPts',
                        value: function (e) {
                          var t = e - this.firstDts - this.totalDuration;
                          return this.referDts + t;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                nt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._lastVideoDts = 0),
                      (this._lastAudioDts = 0),
                      (this._mode = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._lastVideoDts = 0), (this._lastAudioDts = 0), (this._mode = 0);
                        },
                      },
                      {
                        key: 'isSync',
                        value: function () {
                          return 0 === this._mode;
                        },
                      },
                      {
                        key: 'isVideoDtsDiffLarge',
                        value: function (e) {
                          return (this._lastVideoDts = e), this._isJump();
                        },
                      },
                      {
                        key: 'isAudioDtsDiffLarge',
                        value: function (e) {
                          return (this._lastAudioDts = e), this._isJump();
                        },
                      },
                      {
                        key: '_isJump',
                        value: function () {
                          return (
                            !!I.a.dtsJumpOpen &&
                            this._lastVideoDts > 0 &&
                            this._lastAudioDts > 0 &&
                            (this._lastVideoDts > this._lastAudioDts
                              ? this._lastVideoDts - this._lastAudioDts
                              : this._lastAudioDts - this._lastVideoDts) > I.a.dtsJumpThreshold &&
                            ((this._mode = 1), !0)
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ot = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._jitterLimit = t),
                      (this._type = i),
                      (this._lastFrameId = 0),
                      (this._lastDts = 0),
                      (this._jitters = 0),
                      (this._jitterMax = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._lastFrameId = 0),
                            (this._lastDts = 0),
                            (this._jitters = 0),
                            (this._jitterMax = 0);
                        },
                      },
                      {
                        key: 'addCapture',
                        value: function (e, t) {
                          if (0 === this._lastFrameId) (this._lastFrameId = e), (this._lastDts = t);
                          else {
                            if (e - this._lastFrameId == 1) {
                              var i = t - this._lastDts;
                              i > this._jitterLimit && this._jitters++,
                                i > this._jitterMax && (this._jitterMax = i);
                            }
                            (this._lastFrameId = e), (this._lastDts = t);
                          }
                        },
                      },
                      {
                        key: 'getStats',
                        value: function () {
                          var t =
                              !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                            i = {},
                            s =
                              this._type === e.Types.VIDEO
                                ? C.a.CORE.V_CAPTURE_JITTERS
                                : C.a.CORE.A_CAPTURE_JITTERS,
                            r =
                              this._type === e.Types.VIDEO
                                ? C.a.CORE.V_CAPTURE_JITTER_MAX
                                : C.a.CORE.A_CAPTURE_JITTER_MAX;
                          return (
                            (i[s] = this._jitters),
                            (i[r] = this._jitterMax),
                            t && ((this._jitters = 0), (this._jitterMax = 0)),
                            i
                          );
                        },
                      },
                    ]),
                    e
                  );
                })();
              ot.Types = { AUDIO: 'audio', VIDEO: 'video' };
              var ht = ot,
                ut = !!Number(localStorage._dropAudio),
                dt = !!Number(localStorage._dropVideo),
                ct = (Number(localStorage._dropGap), 'Hvcc'),
                lt = 'AnnexB',
                pt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.lastDts = 0),
                      (this.lastPts = 0),
                      (this.lastCts = 0),
                      (this.dtsStat = [0, 0, 0, 0, 0, 0]),
                      (this.ptsStat = [0, 0, 0, 0, 0, 0]),
                      (this.ctsStat = [0, 0, 0, 0, 0, 0]),
                      (this.playVideoFrameCnt = 0),
                      (this.playAudioFrameCnt = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this.lastDts = this.lastPts = this.lastCts = 0),
                            (this.playVideoFrameCnt = this.playAudioFrameCnt = 0),
                            (this.dtsStat = [0, 0, 0, 0, 0, 0]),
                            (this.ptsStat = [0, 0, 0, 0, 0, 0]),
                            (this.ctsStat = [0, 0, 0, 0, 0, 0]);
                        },
                      },
                      {
                        key: 'setTimeStamp',
                        value: function (e, t, i) {
                          this.addStat(this.dtsStat, this.lastDts, e),
                            this.addStat(this.ptsStat, this.lastPts, t),
                            this.addStat(this.ctsStat, this.lastCts, i),
                            (this.lastDts = e),
                            (this.lastPts = t),
                            (this.lastCts = i);
                        },
                      },
                      {
                        key: 'addStat',
                        value: function (e, t, i) {
                          if (t > 0 && i > t) {
                            var s = i - t;
                            s >= 1e3
                              ? e[4]++
                              : s >= 800
                              ? e[3]++
                              : s >= 600
                              ? e[2]++
                              : s >= 400
                              ? e[1]++
                              : s >= 200 && e[0]++;
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ft = [43, 138, 8, 0],
                mt = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e, r, a) {
                    var n;
                    return (
                      Object(s.a)(this, i),
                      ((n = t.call(this)).audioFrameId = 0),
                      (n.videoFrameId = 0),
                      (n.corePlayer = e),
                      (n.remuxer = r),
                      (n.flvCacher = new Ee()),
                      (n.fps = new yt()),
                      (n.downFrameRate = new ze()),
                      (n.audioFps = new yt()),
                      (n.sei = new He(e)),
                      (n.avSample = new qe()),
                      (n.hevcSpsParser = new Qe()),
                      (n.vCaptureJitterStat = new ht(200, ht.Types.VIDEO)),
                      (n.aCaptureJitterStat = new ht(200, ht.Types.AUDIO)),
                      (n.timeStampStat = new pt()),
                      (n.emptyFrames = 0),
                      (n.avcChangeStat = new rt()),
                      (n.dropFrameCtrl = new Ke(e)),
                      (n.dropFrameDts = new et(e, Object(fe.a)(n))),
                      (n.videoChain = new st()),
                      (n.audioChain = new st()),
                      (n.ctsMax = 0),
                      (n.ctsVideoChain = new st()),
                      (n.DEFAULT_GOP = 200),
                      (n.bufLen = 400),
                      (n.firstBufLen = 400),
                      (n.remuxLen = n.firstBufLen),
                      (n.maxWaitTime = 2e3),
                      (n.repairSameDts = !1),
                      (n.lastDtsDis = 0),
                      (n.pushGop = !1),
                      (n.parseFlvHead = !1),
                      (n.lengthSizeMinusOne = 0),
                      (n.recvVideoFrameTimeStamp = 0),
                      (n.recvVideoFrameNums = 0),
                      (n.videoFramePlayDelayTs = 0),
                      (n.videoFrameCalculatePlayDelayFrames = 0),
                      (n.recvAudioConfig = !1),
                      (n.audioConfig = ft.slice()),
                      (n.audioSampleRate = 22050),
                      (n.aacTimeLen = 1024e3 / n.audioSampleRate),
                      (n.validAacTime = 500 * n.aacTimeLen),
                      (n.audioChannelCount = 1),
                      (n.audioObjectType = 5),
                      (n.audioIncreaseTSMap = new Map()),
                      (n.firstDemuxAudioTS = -1),
                      (n.streamFormat = lt),
                      (n.spsUnit = null),
                      (n.ppsUnit = null),
                      (n.vpsUnit = null),
                      (n.videoConfig = {}),
                      (n.hasCtsZero = !1),
                      (n.paused = !1),
                      (n.hasEmptyFrames = !1),
                      (n.playVideoFrameCnt = 0),
                      (n.playVideoLength = 0),
                      (n.playAudioFrameCnt = 0),
                      (n.playAudioLength = 0),
                      (n.playEmptyAudioFrameCnt = 0),
                      (n.beginParseTs = 0),
                      (n.hasAudioTag = !1),
                      (n.lastAacTs = 0),
                      (n.hasKeyFrame = !1),
                      (n.lastAudioTs = 0),
                      (n.lastVideoTs = 0),
                      (n.lastParseDts = 0),
                      (n.maxaudioptsList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
                      (n.last10anduiptsList = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
                      (n.firstAudioTs = -1),
                      (n.showH265Tip = !1),
                      (n.appendHighQualityEmptyAudio = !0),
                      (n.deleteH264Aud = !1),
                      (n.incompleteFlvheaderLen = 0),
                      (n.videoFrames = 0),
                      (n.audioFrames = 0),
                      (n.headCache = null),
                      (n.useWebCodes = !0),
                      (n.decodeNums = 0),
                      (n.OBUParser = new je()),
                      (n.seiTypes = {}),
                      (n.av1Bytes = 0),
                      (n.lastDropDts = 0),
                      (n.PPS = []),
                      (n.SPS = []),
                      (n.VPS = []),
                      (n.videoCodec = ''),
                      (n.videoWidth = 1280),
                      (n.videoHeight = 720),
                      n.reset(),
                      (n.onAV1SequenceHeaderBind = n.onAV1SequenceHeader.bind(Object(fe.a)(n))),
                      (n.onAV1MetaDataBind = n.onAV1MetaData.bind(Object(fe.a)(n))),
                      (n.parseType = a),
                      (n.startAudioTs = 0),
                      (n.startVideoTs = 0),
                      (n.audioDropTs = 0),
                      (n.audioDropFrames = []),
                      (n.firstAudioDts = 0),
                      (n.firstAudioFrameId = 0),
                      (n.parseVideoTagCnt = 0),
                      (n.parseVideoSucCnt = 0),
                      (n.isFirstPrintVideoTs = !1),
                      (n.isFirstPrintAudioTs = !1),
                      (n.isSwap = !1),
                      (n.fromType = 1),
                      (n.startDtsType = 0),
                      (n.swapStartDts = 0),
                      (n.timelineVideo = new at('video')),
                      (n.timelineAudio = new at('audio')),
                      (n.dtsChecker = new nt()),
                      n
                    );
                  }
                  return (
                    Object(r.a)(
                      i,
                      [
                        {
                          key: 'setCorrentDtsOpen',
                          value: function (e) {
                            p.a.log('FlvParser.setCorrentDtsOpen: '.concat(e)),
                              (this.timelineVideo.open = e),
                              (this.timelineAudio.open = e);
                          },
                        },
                        {
                          key: 'getAudioFrameId',
                          value: function () {
                            return this.audioFrameId++, this.audioFrameId;
                          },
                        },
                        {
                          key: 'getVideoFrameId',
                          value: function () {
                            return this.videoFrameId++, this.videoFrameId;
                          },
                        },
                        {
                          key: 'printVideoInfo',
                          value: function () {
                            var e = this.videoChain;
                            if (e.size > 0) {
                              for (var t = e.get(), i = [t.key], s = [t.cts]; e.size > 0; ) {
                                var r = e.get();
                                i.push(r.key - t.key), s.push(r.cts), (t = r);
                              }
                              p.a.log('FlvParser video dtsList：'.concat(i.join(','))),
                                p.a.log('FlvParser video ctsList：'.concat(s.join(',')));
                            }
                          },
                        },
                        {
                          key: 'printAudioInfo',
                          value: function () {
                            var e = this.audioChain;
                            if (e.size > 0) {
                              for (var t = e.get(), i = [t.key]; e.size > 0; ) {
                                var s = e.get();
                                i.push(s.key - t.key), (t = s);
                              }
                              p.a.log('FlvParser audio dtsList：'.concat(i.join(',')));
                            }
                          },
                        },
                        {
                          key: 'getCodecType',
                          value: function () {
                            return 12 === this.codec
                              ? G.a.H265
                              : 13 === this.codec
                              ? G.a.AV1
                              : G.a.H264;
                          },
                        },
                        {
                          key: 'printPlayFrameInfo',
                          value: function () {
                            p.a.log(
                              'FlvParser.playFrameInfo',
                              this.timeStampStat.playVideoFrameCnt,
                              this.timeStampStat.playAudioFrameCnt,
                            );
                          },
                        },
                        {
                          key: 'getAudioFrames',
                          value: function () {
                            return this.audioFrames;
                          },
                        },
                        {
                          key: 'getVideoFrames',
                          value: function () {
                            return this.videoFrames;
                          },
                        },
                        {
                          key: 'getFps',
                          value: function () {
                            return this.fps.getFps();
                          },
                        },
                        {
                          key: 'getRealFps',
                          value: function () {
                            return this.fps.realFps;
                          },
                        },
                        {
                          key: 'getRealFpsAudio',
                          value: function () {
                            return this.audioFps.realFps;
                          },
                        },
                        {
                          key: 'isDownEnough',
                          value: function () {
                            return this.downFrameRate.isDownEnough(this.fps.realFps);
                          },
                        },
                        {
                          key: 'getAudioFps',
                          value: function () {
                            return this.audioFps && this.audioFps.getFps();
                          },
                        },
                        {
                          key: 'setDecoctorTimeAbnormal',
                          value: function () {
                            var e = localStorage.decodeabnormal;
                            if (e && e.split('_').length > 1) {
                              var t = parseInt(e.split('_')[1]),
                                i = new Date().getTime() - t;
                              i && i > 864e5
                                ? ((this.appendHighQualityEmptyAudio = !0),
                                  (localStorage.decodeabnormal = ''))
                                : (this.appendHighQualityEmptyAudio = !1);
                            }
                          },
                        },
                        {
                          key: 'destroy',
                          value: function () {
                            this.reset();
                          },
                        },
                        {
                          key: 'reset',
                          value: function (e) {
                            p.a.log('FlvParser.reset'),
                              (this.audioFrameId = 0),
                              (this.videoFrameId = 0),
                              (this.printFirstVideoTs = !1),
                              (this.printFirstAudioTs = !1),
                              (this.pfvTs = !1),
                              (this.pfaTs = !1),
                              this.fps.reset(),
                              this.audioFps.reset(),
                              this.flvCacher.destroy(),
                              this.timeStampStat.reset(),
                              this.dropFrameCtrl.reset(),
                              this.dropFrameDts.reset(),
                              this.videoChain.reset(),
                              this.audioChain.reset(),
                              (this.lastParseDts = 0),
                              (this.hasAudioTag = !1),
                              (this.lastAacTs = 0),
                              (this.hasKeyFrame = !1),
                              (this.lastAudioTs = 0),
                              (this.lastVideoTs = 0),
                              (this.lastDropDts = 0),
                              (this.showH265Tip = !1),
                              (this.bufLen = 400),
                              (this.remuxLen = this.firstBufLen),
                              (this.hasCtsZero = !1),
                              this.audioIncreaseTSMap.clear(),
                              (this.firstDemuxAudioTS = -1),
                              (this.recvVideoFrameTimeStamp = 0),
                              (this.recvVideoFrameNums = 0),
                              (this.videoFramePlayDelayTs = 0),
                              (this.videoFrameCalculatePlayDelayFrames = 0),
                              (this.incompleteFlvheaderLen = 0),
                              (this.parseFlvHead = !1),
                              (this.switchingUrl = !1),
                              (this.droppingSample = null),
                              (this.disError302 = null),
                              (this.decodeIFRTime = 0),
                              (this.waitRemuxTime = 0),
                              (this.isFirstRemux = !1),
                              (this.av1Bytes = 0),
                              (this.onAV1SequenceHeaderBind = null),
                              (this.onAV1MetaDataBind = null),
                              (this.startAudioTs = 0),
                              (this.startVideoTs = 0),
                              (this.PPS.length = 0),
                              (this.SPS.length = 0),
                              (this.VPS.length = 0),
                              (this.videoCodec = ''),
                              (this.videoWidth = 1280),
                              (this.videoHeight = 720);
                          },
                        },
                        {
                          key: 'getPlayStat',
                          value: function () {
                            var e = {
                              videoFrameCnt: this.playVideoFrameCnt,
                              videoLength: this.playVideoLength,
                              audioFrameCnt: this.playAudioFrameCnt,
                              audioLength: this.playAudioLength,
                              emptyAudioFrameCnt: this.playEmptyAudioFrameCnt,
                            };
                            return (
                              (this.playVideoFrameCnt = 0),
                              (this.playVideoLength = 0),
                              (this.playAudioFrameCnt = 0),
                              (this.playAudioLength = 0),
                              (this.playEmptyAudioFrameCnt = 0),
                              e
                            );
                          },
                        },
                        {
                          key: 'setPaused',
                          value: function (e) {
                            this.paused = e;
                          },
                        },
                        {
                          key: 'setPushGop',
                          value: function (e) {
                            (this.pushGop = e), p.a.log('FlvParser.setPushGop ' + e);
                          },
                        },
                        {
                          key: 'setDeleteH264Aud',
                          value: function (e) {
                            (this.deleteH264Aud = e), p.a.log('FlvParser.deleteH264Aud ' + e);
                          },
                        },
                        {
                          key: 'setDroppingSample',
                          value: function (e) {
                            this.droppingSample = e;
                          },
                        },
                        {
                          key: 'setDisError',
                          value: function (e) {
                            this.disError302 = e;
                          },
                        },
                        {
                          key: 'parseFlv',
                          value: function (e, t) {
                            var s = 0;
                            if (this.headCache) {
                              var r = new Uint8Array(e.length + this.headCache.length);
                              r.set(this.headCache, 0), r.set(e, this.headCache.length), (e = r);
                            }
                            var a,
                              n = e.length;
                            if (!1 === this.parseFlvHead) {
                              var o = i.FLV_HEADER_LEN + i.PREV_TAG_SIZE_LEN;
                              if (n < o)
                                return (
                                  p.a.warn('FlvParser.parseFlv flv has no header len=' + n),
                                  void (this.headCache = e.slice())
                                );
                              if (((this.headCache = null), (s += o), !i.probe(e))) return;
                              (this.parseFlvHead = !0), (this.beginParseTs = Date.now());
                            }
                            for (
                              0 === s
                                ? this.flvCacher.append(e)
                                : this.flvCacher.append(e.slice(s));
                              null !== (a = this.flvCacher.popFrame());

                            )
                              this.parseTag(a, t);
                          },
                        },
                        {
                          key: 'parseTag',
                          value: function (e, t, s) {
                            var r = e.length;
                            if (r < i.TAG_HEADER_LEN + i.PREV_TAG_SIZE_LEN)
                              p.a.warn(
                                'FlvParser.parseTag flv has no whole tag len=' + r + ' data=' + e,
                              );
                            else {
                              var a = 0,
                                n = e[a++],
                                o = (e[a++] << 16) + (e[a++] << 8) + e[a++];
                              if (r - (i.TAG_HEADER_LEN + i.PREV_TAG_SIZE_LEN) < o)
                                p.a.warn(
                                  'FlvParser.parseTag flv has no enough data dataLen=' +
                                    o +
                                    ' len=' +
                                    r,
                                );
                              else if (0 !== o) {
                                var h =
                                  (e[a++] << 16) +
                                  (e[a++] << 8) +
                                  e[a++] +
                                  parseInt(e[a++].toString(16) + '000000', 16);
                                if (((a += 3), n === i.VIDEO_TYPE))
                                  1 == localStorage._jumpV1
                                    ? (h += 1e6)
                                    : 2 == localStorage._jumpV1 && (h -= 1e6),
                                    this.avSample.addVideoSample(r, h),
                                    dt ||
                                      (this.parseVideo(e, 11, o, h, s),
                                      this.corePlayer.setExceptionStat(
                                        C.a.DIM_LINK_STA.VIDEO_FRAME,
                                        1,
                                      ));
                                else if (n === i.AUDIO_TYPE) {
                                  if (1 == localStorage._noAudio) return;
                                  1 == localStorage._jumpA1
                                    ? (h += 1e6)
                                    : 2 == localStorage._jumpA1 && (h -= 1e6),
                                    this.avSample.addAudioSample(r, h),
                                    ut ||
                                      this.corePlayer.isPureVideo ||
                                      (this.parseAudio(e, 11, o, h, s),
                                      this.corePlayer.setExceptionStat(
                                        C.a.DIM_LINK_STA.AUDIO_FRAME,
                                        1,
                                      ));
                                } else
                                  n === i.SCRIPT_TYPE
                                    ? this.parseScriptTag(e, 11, o, h)
                                    : (p.a.warn(
                                        '%cFlvParser.parseTag discard type=' + n + ' len=' + o,
                                        'color:white;background:black',
                                      ),
                                      this.corePlayer.onVideoParseInvalid &&
                                        this.corePlayer.onVideoParseInvalid());
                              } else p.a.warn('FlvParser.parseTag flvtag empty type=' + n);
                            }
                          },
                        },
                        {
                          key: 'parseScriptTag',
                          value: function (e, t, s, r) {
                            if (t + i.SCRIPT_AMF1_HEAD_LEN > s) p.a.log('script too small');
                            else {
                              e[t++];
                              var a = (e[t++] << 8) + e[t++],
                                n = De.getStr(e, t, a);
                              (t += a),
                                this.corePlayer &&
                                  ('onMetaData' === n
                                    ? Object.assign(
                                        this.corePlayer.metadata,
                                        De.parseScript(e, t, e.length).data,
                                      )
                                    : -1 !== n.indexOf('onMixAudio') &&
                                      this.corePlayer.scriptVolumeInfos.addMixAudio(
                                        n.replace('onMixAudio:', ''),
                                        r,
                                      ));
                            }
                          },
                        },
                        {
                          key: 'parseVideo',
                          value: function (e, t, s, r, a) {
                            var n = r;
                            if (
                              (this.isFirstPrintTs ||
                                (p.a.log('FlvParser.firstVideoTs='.concat(r)),
                                (this.isFirstPrintTs = !0)),
                              this.repairSameDts && r === this.lastVideoTs && this.lastDtsDis > 0)
                            ) {
                              var o = this.fps.realFps;
                              r += o > 0 ? parseInt(1e3 / o) : this.lastDtsDis;
                            }
                            if (
                              (this.lastVideoTs > 0 &&
                                this.lastVideoTs < r &&
                                (this.lastDtsDis = r - this.lastVideoTs),
                              s < 5)
                            )
                              p.a.warn('FlvParser.parseVideo avc videotag not enough dataLen=' + s);
                            else {
                              var h = e[t] >> 4;
                              this.codec = 15 & e[t++];
                              var u = e[t++];
                              if (5 !== s)
                                if (0 === u) this.parseVideoConfig(e, t, s, r);
                                else if (1 === u) {
                                  if (
                                    (a || (a = this.getVideoFrameId()),
                                    this.vCaptureJitterStat.addCapture(a, n),
                                    (r = this.timelineVideo.correctDts(r, this.fps.realFps)),
                                    this.dtsChecker.isVideoDtsDiffLarge(r) &&
                                      this.timelineVideo.isFirstDts(r) &&
                                      (this.corePlayer.resetAudioDts(),
                                      this.corePlayer.ctrlBuffer.avBuffer.dtsChecker.reset(),
                                      this.timelineAudio.reset()),
                                    this.parseVideoTagCnt++,
                                    h == i.IFRAME)
                                  )
                                    this.corePlayer &&
                                      this.corePlayer.setExceptionStat(
                                        C.a.DIM_LINK_STA.VIDEO_IFRAME,
                                        1,
                                      ),
                                      this.hasKeyFrame || (this.decodeIFRTime = D.a.now()),
                                      (this.hasKeyFrame = !0);
                                  else if (!this.hasKeyFrame)
                                    return void p.a.log('-------- drop video tag has no IFrame', r);
                                  if (!this.isFirstPrintVideoTs && 2 == this.fromType) {
                                    var d = r - this.swapStartDts;
                                    if (
                                      (p.a.log(
                                        'FlvParser.PCDN, firstVideoTs='
                                          .concat(r, ' dis=')
                                          .concat(d),
                                      ),
                                      (this.isFirstPrintVideoTs = !0),
                                      this.getPcdnDisError(d))
                                    )
                                      return;
                                  }
                                  if (
                                    (Number(localStorage._printVideoTs) &&
                                      p.a.debug(
                                        '%cFlvParser video ts',
                                        'color:green',
                                        r,
                                        r - this.lastVideoTs,
                                      ),
                                    localStorage.gap && (r += Number(localStorage.gap)),
                                    this.lastVideoTs > 0 &&
                                      (r - this.lastVideoTs > 200 || r - this.lastVideoTs < -200))
                                  ) {
                                    var c = r - this.lastVideoTs;
                                    p.a.warn(
                                      'FlvParser video dts jump lastDts='
                                        .concat(this.lastVideoTs, ' curDts=')
                                        .concat(r, ' gap=')
                                        .concat(c),
                                    ),
                                      (c >= I.a.videoMaxGap || c <= -I.a.videoMaxGap) &&
                                        this.resetPlayer();
                                  }
                                  if (1 == Number(localStorage._printAudioTsSec)) {
                                    var l = D.a.now();
                                    l - this.startVideoTs > 1e3 &&
                                      (p.a.debug(
                                        '%cFlvParser shield video sec ts',
                                        'color:blue',
                                        r,
                                      ),
                                      (this.startVideoTs = l));
                                  }
                                  (this.lastVideoTs = r), this.parseVideoNalu(e, t, s, r, h);
                                } else
                                  2 === u
                                    ? p.a.info(
                                        '%cFlvParser.parseVideo avc_end dataLen=' + s,
                                        'color:white;background:black',
                                      )
                                    : p.a.warn(
                                        '%cFlvParser.parseVideo error avc packet type=' + u,
                                        'color:white;background:black',
                                      );
                              else
                                p.a.log(
                                  'FlvParser.parseVideo avc_empty frameType=' +
                                    h +
                                    ' avcPacketType=' +
                                    u,
                                );
                            }
                          },
                        },
                        {
                          key: 'resetPlayer',
                          value: function () {
                            this.corePlayer.resetPlayer();
                          },
                        },
                        {
                          key: 'onAV1SequenceHeader',
                          value: function (e) {
                            var t =
                              'av01.' +
                              e.seq_profile +
                              '.' +
                              je.zeroPad(e['seq_level_idx[0]'], 2) +
                              (e['seq_tier[0]'] ? 'H' : 'M') +
                              '.' +
                              je.zeroPad(e.BitDepth, 2) +
                              '.' +
                              e.mono_chrome +
                              '.' +
                              e.subsampling_x +
                              e.subsampling_y +
                              (1 === e.subsampling_x && 1 === e.subsampling_y
                                ? e.chroma_sample_position
                                : 0);
                            e.color_description_present_flag &&
                              (t +=
                                '.' +
                                je.zeroPad(e.colorPrimaries, 2) +
                                '.' +
                                je.zeroPad(e.transferCharacteristics, 2) +
                                '.' +
                                je.zeroPad(e.matrixCoefficients, 2) +
                                '.' +
                                e.color_range);
                            var i = {
                              isHevc: !1,
                              isAV01: !0,
                              width: e.max_frame_width_minus_1 + 1,
                              height: e.max_frame_height_minus_1 + 1,
                              codec: t,
                            };
                            this.corePlayer.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_CONFIG, 1),
                              this.remuxer && this.remuxer.switchLevel(!1, !1),
                              this.corePlayer.updateVideoConfig(i, !1);
                          },
                        },
                        {
                          key: 'onAV1MetaData',
                          value: function (e, t) {
                            t.itu_t_t35_payload_bytes &&
                              this.sei.parseSei(
                                e,
                                t.itu_t_t35_payload_bytes,
                                He.AV1_CODEC_TYPE,
                                this.seiTypes,
                              );
                          },
                        },
                        {
                          key: 'parseVideoConfig',
                          value: function (e, t, s, r) {
                            var a,
                              n,
                              o = [],
                              h = [],
                              u = [],
                              d = [],
                              c = [],
                              l = [],
                              f = !1,
                              m = null,
                              _ = (t += 3) + s - 5;
                            if (this.isAv01()) {
                              this.av1Bytes = e.subarray(t, t + s - 5);
                              var v = e.subarray((t += 4), t + s);
                              je.parseOBU(v, 0, this.onAV1SequenceHeaderBind);
                            } else {
                              if (this.isHevc()) {
                                this.showH265Tip ||
                                  ((this.showH265Tip = !0), p.a.warn('This is a H265 video.')),
                                  this.corePlayer.setExceptionStat(C.a.DIM_LINK_STA.H265, 1);
                                var y = this.hevcFindNextStartCode(e, t);
                                if (y.found) {
                                  (this.streamFormat = lt),
                                    this.corePlayer.setStreamFormat(this.streamFormat),
                                    p.a.log('FlvParser.parseVideoConfig AnnexB');
                                  for (
                                    var S = (126 & e[(t += y.startCodeSize)]) >> 1, g = t;
                                    t < _;

                                  ) {
                                    if (
                                      (y = this.hevcFindNextStartCode(e, t)).found ||
                                      t + 1 === _
                                    ) {
                                      switch (S) {
                                        case i.NAL_VPS:
                                          var T = null;
                                          (T =
                                            t + 1 === _
                                              ? { data: e.subarray(g, t + 1), type: S }
                                              : { data: e.subarray(g, t), type: S }),
                                            this.vpsUnit &&
                                              this.vpsUnit.data.toString(16) !==
                                                T.data.toString(16) &&
                                              (p.a.log('FlvParser.parseVideoConfig vps changed'),
                                              (f = !0)),
                                            (this.vpsUnit = T),
                                            u.push(T.data),
                                            (l[l.length] = { length: T.data.length, nalu: T.data });
                                          break;
                                        case i.NAL_SPS:
                                          var E = null;
                                          (E =
                                            t + 1 === _
                                              ? { data: e.subarray(g, t + 1), type: S }
                                              : { data: e.subarray(g, t), type: S }),
                                            this.spsUnit &&
                                              this.spsUnit.data.toString(16) !==
                                                E.data.toString(16) &&
                                              (p.a.log('FlvParser.parseVideoConfig sps changed'),
                                              (f = !0)),
                                            (this.spsUnit = E),
                                            o.push(E.data),
                                            (d[d.length] = { length: E.data.length, nalu: E.data });
                                          break;
                                        case i.NAL_PPS:
                                          var D = null;
                                          (D =
                                            t + 1 === _
                                              ? { data: e.subarray(g, t + 1), type: S }
                                              : { data: e.subarray(g, t), type: S }),
                                            this.ppsUnit &&
                                              this.ppsUnit.data.toString(16) !==
                                                D.data.toString(16) &&
                                              (p.a.log('FlvParser.parseVideoConfig pps changed'),
                                              (f = !0)),
                                            (this.ppsUnit = D),
                                            h.push(D.data),
                                            (c[c.length] = { length: D.data.length, nalu: D.data });
                                      }
                                      if (t + y.startCodeSize < _) {
                                        (S = (126 & e[(t += y.startCodeSize)]) >> 1), (g = t);
                                        continue;
                                      }
                                    }
                                    t++;
                                  }
                                } else {
                                  if (!I.a.enableHvcc)
                                    return (
                                      p.a.warn('hevcFindNextStartCode failed! dataLen', s),
                                      void this.corePlayer.on265StartCodeError()
                                    );
                                  (this.streamFormat = ct),
                                    this.corePlayer.setStreamFormat(this.streamFormat),
                                    p.a.log('FlvParser.parseVideoConfig Hvcc'),
                                    (t += 21),
                                    (this.lengthSizeMinusOne = 3 & e[t++]);
                                  var P = e[t++];
                                  p.a.log(
                                    'FlvParser.parseVideoConfig Hvcc nNaluArrayCount='.concat(P),
                                  );
                                  for (var A = 0; A < P; A++) {
                                    var k = 99 & e[t++];
                                    if (k === i.NAL_VPS)
                                      for (
                                        var R = (e[t++] << 8) + e[t++], O = 0, b = 0;
                                        b < R;
                                        ++b
                                      ) {
                                        O = (e[t++] << 8) + e[t++];
                                        var w = { data: e.subarray(t, t + O), type: i.NAL_VPS };
                                        this.vpsUnit &&
                                          this.vpsUnit.data.toString(16) !== w.data.toString(16) &&
                                          (p.a.log('FlvParser.parseVideoConfig vps changed'),
                                          (f = !0)),
                                          (this.vpsUnit = w),
                                          (t += O),
                                          u.push(w.data),
                                          (l[l.length] = { length: w.data.length, nalu: w.data });
                                      }
                                    else if (k === i.NAL_SPS)
                                      for (var L = (e[t++] << 8) + e[t++], M = 0; M < L; ++M) {
                                        a = (e[t++] << 8) + e[t++];
                                        var V = { data: e.subarray(t, t + a), type: i.NAL_SPS };
                                        this.spsUnit &&
                                          this.spsUnit.data.toString(16) !== V.data.toString(16) &&
                                          (p.a.log('FlvParser.parseVideoConfig sps changed'),
                                          (f = !0)),
                                          (this.spsUnit = V),
                                          (t += a),
                                          o.push(V.data),
                                          (d[d.length] = { length: V.data.length, nalu: V.data });
                                      }
                                    else if (k === i.NAL_PPS)
                                      for (var N = (e[t++] << 8) + e[t++], F = 0; F < N; ++F) {
                                        n = (e[t++] << 8) + e[t++];
                                        var B = { data: e.subarray(t, t + n), type: i.NAL_PPS };
                                        this.ppsUnit &&
                                          this.ppsUnit.data.toString(16) !== B.data.toString(16) &&
                                          (p.a.log('FlvParser.parseVideoConfig pps changed'),
                                          (f = !0)),
                                          (this.ppsUnit = B),
                                          (t += n),
                                          h.push(B.data),
                                          (c[c.length] = { length: B.data.length, nalu: B.data });
                                      }
                                  }
                                }
                                (m = this.parseSps(this.spsUnit, u, o, h)),
                                  (this.hasCtsZero = !0),
                                  this.corePlayer.setAvcCfg(m.width, m.height);
                              } else {
                                (t += 4),
                                  (this.lengthSizeMinusOne = 3 & e[t++]),
                                  (this.streamFormat = 'Avcc'),
                                  p.a.log('FlvParser.parseVideoConfig Avcc'),
                                  this.corePlayer.setStreamFormat(this.streamFormat);
                                for (var U = 31 & e[t++], x = 0; x < U; ++x) {
                                  a = (e[t++] << 8) + e[t++];
                                  var H = { data: e.subarray(t, t + a), type: 7 };
                                  this.spsUnit &&
                                    this.spsUnit.data.toString(16) !== H.data.toString(16) &&
                                    (p.a.log(
                                      'FlvParser.parseVideoConfig sps changed',
                                      this.spsUnit.data.toString(16),
                                      H.data.toString(16),
                                    ),
                                    (f = !0)),
                                    (this.spsUnit = H),
                                    (t += a),
                                    o.push(H.data),
                                    (d[x] = { length: a, nalu: H.data });
                                }
                                for (var W = e[t++], G = 0; G < W; ++G) {
                                  n = (e[t++] << 8) + e[t++];
                                  var j = { data: e.subarray(t, t + n), type: 8 };
                                  this.ppsUnit &&
                                    this.ppsUnit.data.toString(16) !== j.data.toString(16) &&
                                    (p.a.log(
                                      'FlvParser.parseVideoConfig pps changed',
                                      this.ppsUnit.data.toString(16),
                                      j.data.toString(16),
                                    ),
                                    (f = !0)),
                                    (this.ppsUnit = j),
                                    (t += n),
                                    h.push(j.data),
                                    (c[G] = { length: n, nalu: j.data });
                                }
                                (m = this.parseSps(this.spsUnit, u, o, h)),
                                  this.corePlayer.setAvcCfg(m.width, m.height);
                              }
                              this.corePlayer.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_CONFIG, 1),
                                this.corePlayer.updateAVCConfig &&
                                  this.corePlayer.updateAVCConfig({
                                    pps: c,
                                    sps: d,
                                    vps: l,
                                    codec: m.codec,
                                    width: m.width,
                                    height: m.height,
                                    timestamp: r,
                                  }),
                                (this.PPS = c),
                                (this.SPS = d),
                                (this.VPS = l),
                                (this.videoCodec = m.codec),
                                (this.videoWidth = m.width),
                                (this.videoHeight = m.height),
                                this.avcChangeStat.setAvcChange(),
                                this.corePlayer.updateVideoConfig(m, f),
                                this.remuxer && this.remuxer.switchLevel(f, !1),
                                p.a.log(
                                  'FlvParser.parseVideoConfig avccfg dataLen=' +
                                    s +
                                    ' spsLen=' +
                                    a +
                                    ' ppsLen=' +
                                    n +
                                    ' w/h=' +
                                    m.width +
                                    '/' +
                                    m.height +
                                    ' codec=' +
                                    m.codec,
                                  'sps='.concat(JSON.stringify(d)),
                                  'pps='.concat(JSON.stringify(c)),
                                  'vps='.concat(JSON.stringify(l)),
                                );
                            }
                          },
                        },
                        {
                          key: 'parseSps',
                          value: function (e, t, i, s) {
                            var r = null,
                              a = '',
                              n = 0,
                              o = 0;
                            if (this.isHevc()) {
                              (this.spsConfig = {}),
                                this.hevcSpsParser.parseSequenceParameterSet(
                                  e.data,
                                  e.data.length,
                                  this.spsConfig,
                                );
                              var h = this.spsConfig.profile_space,
                                u = this.spsConfig.profile_idc,
                                d = this.spsConfig.profile_compatibility_flags;
                              d =
                                ((d =
                                  (((d =
                                    (((d =
                                      (((d = ((d >> 1) & 1431655765) | ((1431655765 & d) << 1)) >>
                                        2) &
                                        858993459) |
                                      ((858993459 & d) << 2)) >>
                                      4) &
                                      252645135) |
                                    ((252645135 & d) << 4)) >>
                                    8) &
                                    16711935) |
                                  ((16711935 & d) << 8)) >>
                                  16) |
                                (d << 16);
                              var c = this.spsConfig.tier_flag,
                                l = this.spsConfig.level_idc;
                              (a =
                                'hvc1.' +
                                ['', 'A', 'B', 'C'][h % 4] +
                                u.toString() +
                                '.' +
                                d.toString(16).toLowerCase() +
                                '.' +
                                ['L', 'H'][c % 2] +
                                l.toString()),
                                (n = this.spsConfig.width || this.corePlayer.width),
                                (o = this.spsConfig.height || this.corePlayer.height),
                                p.a.log(
                                  'FlvParser.parseVideoConfig.hevcSpsConfig',
                                  this.spsConfig,
                                  a,
                                ),
                                (r = {
                                  isHevc: !0,
                                  isAV01: !1,
                                  vps: t,
                                  sps: i,
                                  pps: s,
                                  codec: a,
                                  width: n,
                                  height: o,
                                });
                            } else {
                              (n = (r = new Te(e.data).readSPS()).width), (o = r.height);
                              for (var f = e.data.subarray(1, 4), m = 'avc1.', _ = 0; _ < 3; _++) {
                                var v = f[_].toString(16);
                                v.length < 2 && (v = '0' + v), (m += v);
                              }
                              r = {
                                isHevc: !1,
                                isAV01: !1,
                                sps: i,
                                pps: s,
                                width: n,
                                height: o,
                                codec: (a = m),
                              };
                            }
                            return r;
                          },
                        },
                        {
                          key: 'calcCtsMax',
                          value: function (e, t) {
                            if (t > 0) {
                              this.ctsVideoChain.put({ key: e, cts: t });
                              var i = 0,
                                s = this.ctsVideoChain.head.data.key;
                              if (
                                (this.ctsVideoChain.head.prev.data.key - s >= 1e4 &&
                                  ((i = this.ctsVideoChain.head.data.cts),
                                  this.ctsVideoChain.get()),
                                this.ctsMax < t)
                              )
                                this.ctsMax = t;
                              else if (this.ctsMax === i)
                                for (
                                  var r = this.ctsVideoChain.head, a = 0;
                                  a < r.data.cts && (a = r.data.cts),
                                    r.next !== this.ctsVideoChain.head;

                                )
                                  r = r.next;
                            }
                          },
                        },
                        {
                          key: 'parseVideoNalu',
                          value: function (e, t, s, r, a) {
                            var n,
                              o,
                              h = this,
                              u = [],
                              d = 0,
                              c = [],
                              l = [],
                              f = [],
                              m = null,
                              _ = !1,
                              v = a === i.IFRAME,
                              y = (e[t++] << 16) + (e[t++] << 8) + e[t++];
                            0 === y
                              ? this.hasCtsZero || (this.hasCtsZero = !0)
                              : y >= 8388608
                              ? (y -= 16777216)
                              : y > 2500 && y < 3500
                              ? (y = 0)
                              : y > 600 &&
                                p.a.warn('FlvParser.parseVideoNalu large cts=' + y + ' dts=' + r),
                              st.addData(
                                this.videoChain,
                                { key: r, cts: y },
                                Number(I.a.avHeaderChangeCfg[2]),
                              ),
                              this.avcChangeStat.addVideo({ key: r, cts: y }),
                              this.calcCtsMax(r, y);
                            var S = t + s - 5,
                              g = !1;
                            if (((this.seiTypes = {}), this.isAv01())) {
                              var T = e.subarray(t, t + s - 5);
                              u.push({ data: T, type: 1 === a ? 5 : 1 }),
                                je.parseOBU(T, r, null, this.onAV1MetaDataBind),
                                (d += T.length),
                                (n = 1);
                            } else if (this.isHevc()) {
                              if (this.streamFormat == lt) {
                                var E = this.hevcFindNextStartCode(e, t);
                                if (!E.found)
                                  return (
                                    p.a.error('hevcFindNextStartCode failed! dataLen', s),
                                    void this.corePlayer.on265StartCodeError()
                                  );
                                for (var P = (126 & e[(t += E.startCodeSize)]) >> 1, A = t; t < S; )
                                  ((E = this.hevcFindNextStartCode(e, t)).found || t + 1 === S) &&
                                  (P < 10 && (g = !((98 & P) >> 1)),
                                  (o =
                                    t + 1 === S
                                      ? { data: e.subarray(A, t + 1), type: P }
                                      : { data: e.subarray(A, t), type: P }),
                                  P === i.HEVC_NAL_SEI
                                    ? this.sei.parseSei(
                                        r,
                                        o.data,
                                        He.H265_CODEC_TYPE,
                                        this.seiTypes,
                                      )
                                    : P === i.HEVC_NAL_AUD ||
                                      (P === i.NAL_VPS
                                        ? (f.push({ length: o.data.length, nalu: o.data }),
                                          u.push(o),
                                          (d += o.data.length),
                                          this.corePlayer.updateAVCVPS &&
                                            this.corePlayer.updateAVCVPS(o.data, r))
                                        : P === i.NAL_SPS
                                        ? ((m = o),
                                          l.push({ length: o.data.length, nalu: o.data }),
                                          u.push(o),
                                          (d += o.data.length),
                                          this.corePlayer.updateAVCSPS &&
                                            this.corePlayer.updateAVCSPS(o.data, r))
                                        : P === i.NAL_PPS
                                        ? (c.push({ length: o.data.length, nalu: o.data }),
                                          u.push(o),
                                          (d += o.data.length),
                                          this.corePlayer.updateAVCPPS &&
                                            this.corePlayer.updateAVCPPS(o.data, r))
                                        : ((o.discardAllow = P < 10 && !(1 & P)),
                                          (o.isUnit = !0),
                                          u.push(o),
                                          (d += o.data.length))),
                                  t + E.startCodeSize < S)
                                    ? ((P = (126 & e[(t += E.startCodeSize)]) >> 1), (A = t))
                                    : t++;
                              } else if (this.streamFormat == ct)
                                for (var k = s - 5; k; ) {
                                  n = 0;
                                  for (var R = 0; R <= this.lengthSizeMinusOne; ++R)
                                    n += e[t++] << (8 * (this.lengthSizeMinusOne - R));
                                  if (((k -= this.lengthSizeMinusOne + 1), 0 !== n)) {
                                    if (n < 0 || n > s - 5) break;
                                    if (n > k) {
                                      t += k;
                                      break;
                                    }
                                    var O = (126 & e[t]) >> 1;
                                    (k -= n),
                                      ((o = { data: e.subarray(t, t + n), type: O }).naluType = O),
                                      O === i.HEVC_NAL_SEI
                                        ? this.sei.parseSei(
                                            r,
                                            o.data,
                                            He.H265_CODEC_TYPE,
                                            this.seiTypes,
                                          )
                                        : O === i.HEVC_NAL_AUD ||
                                          (O === i.NAL_VPS
                                            ? (f.push({ length: o.data.length, nalu: o.data }),
                                              u.push(o),
                                              (d += o.data.length),
                                              this.corePlayer.updateAVCVPS &&
                                                this.corePlayer.updateAVCVPS(o.data, r))
                                            : O === i.NAL_SPS
                                            ? ((m = o),
                                              l.push({ length: o.data.length, nalu: o.data }),
                                              u.push(o),
                                              (d += o.data.length),
                                              this.corePlayer.updateAVCSPS &&
                                                this.corePlayer.updateAVCSPS(o.data, r))
                                            : O === i.NAL_PPS
                                            ? (c.push({ length: o.data.length, nalu: o.data }),
                                              u.push(o),
                                              (d += o.data.length),
                                              this.corePlayer.updateAVCPPS &&
                                                this.corePlayer.updateAVCPPS(o.data, r))
                                            : ((o.discardAllow = O < 10 && !(1 & O)),
                                              (o.isUnit = !0),
                                              u.push(o),
                                              (d += o.data.length))),
                                      (t += n);
                                  }
                                }
                            } else
                              for (var b = s - 5; b; ) {
                                n = 0;
                                for (var w = e[t + 4], L = 0; L <= this.lengthSizeMinusOne; ++L)
                                  n += e[t++] << (8 * (this.lengthSizeMinusOne - L));
                                if (((b -= this.lengthSizeMinusOne + 1), 0 !== n)) {
                                  if (n < 0 || n > s - 5) break;
                                  if (n > b) {
                                    t += b;
                                    break;
                                  }
                                  b -= n;
                                  var M =
                                    31 &
                                    (o = { data: e.subarray(t, t + n), type: 1 === a ? 5 : 1 })
                                      .data[0];
                                  if (((o.naluType = M), this.isH264Sei(o.data)))
                                    this.sei.parseSei(r, o.data, He.H264_CODEC_TYPE, this.seiTypes);
                                  else if (this.isH264NALUPPS(o.data))
                                    c.push({ length: n, nalu: o.data }),
                                      u.push(o),
                                      (d += o.data.length),
                                      this.corePlayer.updateAVCPPS &&
                                        this.corePlayer.updateAVCPPS(o.data, r);
                                  else if (this.isH264NALUPSPS(o.data))
                                    (m = o),
                                      l.push({ length: n, nalu: o.data }),
                                      u.push(o),
                                      (d += o.data.length),
                                      this.corePlayer.updateAVCSPS &&
                                        this.corePlayer.updateAVCSPS(o.data, r);
                                  else if (
                                    this.corePlayer.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS
                                  ) {
                                    if (M >= 1 && M <= 5) {
                                      var V = !1;
                                      1 != a && 0 == (96 & w) && ((V = !0), (_ = !0)),
                                        (o.discardAllow = V),
                                        (o.isUnit = !0),
                                        u.push(o),
                                        (d += o.data.length);
                                    }
                                  } else
                                    1 == I.a.isLimitNaluType
                                      ? M >= 1 &&
                                        M <= 5 &&
                                        !this.dropFrameDts.isCanDrop(r, v, w) &&
                                        (u.push(o), (d += o.data.length))
                                      : (this.isH264Aud(o.data) && this.deleteH264Aud) ||
                                        (this.isH264Aud(o.data)
                                          ? (u.push(o), (d += o.data.length))
                                          : this.dropFrameDts.isCanDrop(r, v, w) ||
                                            (u.push(o), (d += o.data.length)));
                                  t += n;
                                }
                              }
                            if (
                              (v &&
                                !this.isAv01() &&
                                (this.vpsUnit &&
                                  0 == f.length &&
                                  (u.push(this.vpsUnit), (d += this.vpsUnit.data.length)),
                                this.spsUnit &&
                                  0 == l.length &&
                                  (u.push(this.spsUnit), (d += this.spsUnit.data.length)),
                                this.ppsUnit &&
                                  0 == c.length &&
                                  (u.push(this.ppsUnit), (d += this.ppsUnit.data.length))),
                              d > 0)
                            ) {
                              var N = !1,
                                F = [],
                                U = [],
                                x = [];
                              if (v) {
                                (U = l.length > 0 ? l : this.SPS),
                                  (F = f.length > 0 ? f : this.VPS),
                                  (x = c.length > 0 ? c : this.PPS);
                                var H = !1,
                                  W = !1,
                                  G = !1;
                                if (
                                  (l.length > 0 &&
                                    this.SPS.length > 0 &&
                                    l.forEach(function (e, t) {
                                      e.nalu.toString(16) != h.SPS[t].nalu.toString(16) &&
                                        ((N = !0), (H = !0));
                                    }),
                                  c.length > 0 &&
                                    this.PPS.length > 0 &&
                                    c.forEach(function (e, t) {
                                      e.nalu.toString(16) != h.PPS[t].nalu.toString(16) &&
                                        ((N = !0), (W = !0));
                                    }),
                                  f.length > 0 &&
                                    this.VPS.length > 0 &&
                                    f.forEach(function (e, t) {
                                      e.nalu.toString(16) != h.VPS[t].nalu.toString(16) &&
                                        ((N = !0), (G = !0));
                                    }),
                                  N && this.corePlayer.setIFrameAvcChageStat(),
                                  N)
                                ) {
                                  H &&
                                    this.SPS.length > 0 &&
                                    l.length > 0 &&
                                    p.a.log(
                                      'FlvParser.parseVideoNalu IFrame header != avcHeader,avcspsLen='
                                        .concat(this.SPS.length, ',spsLen=')
                                        .concat(l.length, ',sps=')
                                        .concat(l[0].nalu.toString(), ' && ')
                                        .concat(this.SPS[0].nalu.toString()),
                                    ),
                                    W &&
                                      this.PPS.length > 0 &&
                                      c.length > 0 &&
                                      p.a.log(
                                        'FlvParser.parseVideoNalu IFrame header != avcHeader,avcPPSLen='
                                          .concat(this.PPS.length, ',ppsLen=')
                                          .concat(c.length, ',pps=')
                                          .concat(c[0].nalu.toString(), ' && ')
                                          .concat(this.PPS[0].nalu.toString()),
                                      ),
                                    G &&
                                      this.VPS.length > 0 &&
                                      f.length > 0 &&
                                      p.a.log(
                                        'FlvParser.parseVideoNalu IFrame header != avcHeader,acvVPSLen='
                                          .concat(this.VPS.length, ',vpsLen=')
                                          .concat(f.length, ',vps=')
                                          .concat(f[0].nalu.toString(), ' && ')
                                          .concat(this.VPS[0].nalu.toString()),
                                      );
                                  var j = this.parseSps(m, F, U, x);
                                  this.corePlayer.setAvcCfg(j.width, j.height),
                                    this.corePlayer.setExceptionStat(
                                      C.a.DIM_LINK_STA.VIDEO_CONFIG,
                                      1,
                                    ),
                                    this.corePlayer.updateAVCConfig &&
                                      this.corePlayer.updateAVCConfig({
                                        pps: x,
                                        sps: U,
                                        vps: F,
                                        codec: j.codec,
                                        width: j.width,
                                        height: j.height,
                                        timestamp: r,
                                      }),
                                    (this.PPS = x),
                                    (this.SPS = U),
                                    (this.VPS = F),
                                    (this.videoCodec = j.codec),
                                    (this.videoWidth = j.width),
                                    (this.videoHeight = j.height),
                                    this.remuxer && this.remuxer.switchLevel(N, !1);
                                }
                              }
                              var Y = {
                                type: this.isAv01() ? 'av01' : 'avc',
                                units: u,
                                len: d,
                                ts: r,
                                cts: y,
                                dts: 90 * r,
                                pts: 90 * (r + y),
                                key: a === i.IFRAME,
                                origin_iframe: 1 === this.seiTypes[He.SEI_TYPES.IFRAME],
                                isBFrameType: g,
                                av1Bytes: this.av1Bytes,
                              };
                              if (
                                (1 == localStorage._printVideoFrameType &&
                                  p.a.log(
                                    'FlvParser.parseVideo FrameType='
                                      .concat(a, ' iFrameType=')
                                      .concat(i.IFRAME, ', dts=')
                                      .concat(r),
                                  ),
                                v &&
                                  (1 == localStorage._printIframeDetail &&
                                    p.a.log(
                                      'FlvParser.parseVideo iFrame,avcChange='
                                        .concat(N, ',dts=')
                                        .concat(r, ',vpslen=')
                                        .concat(f.length, ',vLen=')
                                        .concat(F.length, ',spsLen=')
                                        .concat(l.length, ',sLen=')
                                        .concat(U.length, ',ppsLen=')
                                        .concat(c.length, ',pLen=')
                                        .concat(x.length),
                                    ),
                                  (Y.spsUnit = U),
                                  (Y.ppsUnit = x),
                                  (Y.vpsUnit = F),
                                  (Y.videoCodec = this.videoCodec),
                                  (Y.videoWidth = this.videoWidth),
                                  (Y.videoHeight = this.videoHeight)),
                                this.corePlayer.isLive &&
                                  this.corePlayer.videoPlayConsuming &&
                                  this.corePlayer.videoPlayConsuming.addRecvFrameData(
                                    r,
                                    r + y,
                                    D.a.now(),
                                  ),
                                this.droppingSample && this.droppingSample(Y))
                              )
                                return;
                              if (
                                (this.printFirstVideoTs ||
                                  ((this.printFirstVideoTs = !0),
                                  p.a.log(
                                    'FlvParser.parseVideo dts='
                                      .concat(r, ' pts=')
                                      .concat(Y.pts / 90, ' isIFrame=')
                                      .concat(v),
                                  )),
                                this.pfvTs ||
                                  ((this.pfvTs = !0),
                                  p.a.log(
                                    'FlvParser.parseVideo11 dts='
                                      .concat(r, ' pts=')
                                      .concat(Y.pts / 90, ' isIFrame=')
                                      .concat(v),
                                  )),
                                this.corePlayer.webcodecType != B.a.PLAYER_CORE_TYPE.WEBCODECS ||
                                  this.isH264Aud(o.data))
                              )
                                this.fps.addDts(r, s);
                              else {
                                var q = v ? i.IFRAME : _ ? i.NO_REFERENCE_FRAME : 0;
                                this.fps.addDts(r, s, q);
                              }
                              this.downFrameRate.addFrame(),
                                this.dropFrameCtrl.setRealFps(this.fps.realFps),
                                this.dropFrameDts.setRealFps(this.fps.realFps),
                                this.corePlayer.setRealFps(this.fps.realFps),
                                (this.corePlayer.curVideoDts = r),
                                (this.lastParseDts = r),
                                this.videoFrames++,
                                this.timeStampStat.setTimeStamp(r, r + y, y),
                                this.parseVideoSucCnt++,
                                this.corePlayer.pushAvcSample(Y),
                                this.playVideoFrameCnt++,
                                this.timeStampStat.playVideoFrameCnt++,
                                (this.playVideoLength += s);
                            }
                          },
                        },
                        { key: 'addVideoSPS', value: function () {} },
                        { key: 'addVideoPPS', value: function () {} },
                        { key: 'addVideoVPS', value: function () {} },
                        {
                          key: 'parseAudio',
                          value: function (e, t, s, r, a) {
                            var n = r;
                            st.addData(
                              this.audioChain,
                              { key: r },
                              Number(I.a.avHeaderChangeCfg[2]),
                            ),
                              this.avcChangeStat.addAudio({ key: r });
                            var o = e[t++] >>> 4,
                              h = r;
                            10 != o &&
                              p.a.warn(
                                'FlvParser.parseAudio Unsupported audio codec, soundFormat=' + o,
                              ),
                              this.calcAudioFrameRate(r),
                              null != this.audioIncreaseTSMap.get(r) &&
                                (r = this.audioIncreaseTSMap.get(r));
                            var u = e[t++];
                            if (0 === u)
                              if (s >= 4) {
                                var d = e[t] >> 3;
                                this.audioObjectType = d;
                                var c = ((7 & e[t]) << 1) + ((128 & e[t + 1]) >> 7);
                                if (c >= i.AdtsSampleingRates.length)
                                  return void p.a.warn(
                                    'FlvParser.parseAudio SampleingRate out of bounds. samplingIndex=' +
                                      c,
                                  );
                                this.audioChannelCount = (120 & e[t + 1]) >> 3;
                                var l = this.getAdtsConfig(d, c, this.audioChannelCount);
                                (this.audioConfig = l),
                                  (this.recvAudioConfig = !0),
                                  this.corePlayer.updateAudioConfig(
                                    {
                                      audioConfig: l,
                                      codec: 'mp4a.40.5',
                                      audioSampleRate: this.audioSampleRate,
                                      aacTimeLen: this.aacTimeLen,
                                      audioObjectType: this.audioObjectType,
                                      audioChannelCount: this.audioChannelCount,
                                      timeStamp: r,
                                    },
                                    !1,
                                    this.parseType,
                                  ),
                                  (this.firstAudioTs = -1),
                                  (this.firstDemuxAudioTS = -1),
                                  (this.lastAudioTs = 0),
                                  (this.firstAudioDts = 0),
                                  (this.firstAudioFrameId = 0),
                                  this.corePlayer.resetAudioDts(),
                                  this.corePlayer.setExceptionStat(
                                    C.a.DIM_LINK_STA.AUDIO_CONFIG,
                                    1,
                                  );
                              } else
                                p.a.warn(
                                  'FlvParser.parseAudio adts error dataLen=' + s + ' ts=' + r,
                                );
                            else if (1 === u) {
                              if (
                                (this.audioFrames++,
                                !this.isFirstPrintAudioTs && 2 == this.fromType)
                              ) {
                                var f = r - this.swapStartDts;
                                if (
                                  (p.a.log(
                                    'FlvParser.PCDN, firstAudioTs='.concat(r, ' dis=').concat(f),
                                  ),
                                  (this.isFirstPrintAudioTs = !0),
                                  this.getPcdnDisError(f))
                                )
                                  return;
                              }
                              if (
                                (I.a.dtsJumpOpen &&
                                  ((r = this.timelineAudio.correctDts(r, this.audioFps.realFps)),
                                  this.dtsChecker.isAudioDtsDiffLarge(r) &&
                                    this.timelineAudio.isFirstDts(r) &&
                                    (this.timelineAudio.alignTimeline(this.timelineVideo),
                                    (r = this.timelineAudio.correctDts(r, this.audioFps.realFps)))),
                                !this.recvAudioConfig)
                              )
                                return;
                              a || (a = this.getAudioFrameId()),
                                this.aCaptureJitterStat.addCapture(a, n);
                              var m = 0;
                              if (I.a.audioDtsOpen)
                                if (0 === this.firstAudioDts)
                                  (this.lastAudioTs = r),
                                    (this.firstAudioDts = r),
                                    (this.firstAudioFrameId = a),
                                    this.corePlayer.resetAudioDts();
                                else {
                                  var _ =
                                    (m = Math.floor(
                                      this.firstAudioDts +
                                        (a - this.firstAudioFrameId) * this.aacTimeLen,
                                    )) - r;
                                  _ < 0 && (_ = -_),
                                    _ < 100
                                      ? (r = m)
                                      : _ > 300 &&
                                        ((this.lastAudioTs = r),
                                        (this.firstAudioDts = r),
                                        (this.firstAudioFrameId = a),
                                        this.corePlayer.resetAudioDts());
                                }
                              if (
                                (this.last10anduiptsList.shift(),
                                this.last10anduiptsList.push(r),
                                -1 == this.firstAudioTs && (this.firstAudioTs = r),
                                -1 == this.firstDemuxAudioTS)
                              )
                                this.firstDemuxAudioTS = r;
                              else if (r == this.firstDemuxAudioTS)
                                return void p.a.warn(
                                  'parseaudio audio too much audio in firstTs ts=' + r,
                                );
                              for (var v = 0; v < 10; v++)
                                this.maxaudioptsList[v] = this.last10anduiptsList[v];
                              if (this.lastAudioTs > 0 && this.lastAudioTs == r) {
                                var y = r + (0 | this.aacTimeLen);
                                this.audioIncreaseTSMap.set(h, y), (r = y);
                              }
                              if (
                                (Number(localStorage._printAudioTs) &&
                                  1 == this.parseType &&
                                  p.a.debug(
                                    '%cFlvParser audio ts',
                                    'color:red',
                                    r,
                                    r - this.lastAudioTs,
                                  ),
                                1 == Number(localStorage._printAudioTs2) &&
                                  2 == this.parseType &&
                                  p.a.debug(
                                    '%cFlvParser shield audio ts',
                                    'color:green',
                                    r,
                                    r - this.lastAudioTs,
                                  ),
                                1 == Number(localStorage._printAudioTsSec) && 2 == this.parseType)
                              ) {
                                var S = D.a.now();
                                S - this.startAudioTs > 1e3 &&
                                  (p.a.debug('%cFlvParser shield audio sec ts', 'color:green', r),
                                  (this.startAudioTs = S));
                              }
                              if (
                                ((this.lastAudioTs = r),
                                (this.hasAudioTag = !0),
                                !this.validAacSample(r))
                              )
                                return;
                              var g = s - 2,
                                T = {
                                  type: 'aac',
                                  unit: e.subarray(t, t + g),
                                  dts: 90 * r,
                                  pts: 90 * r,
                                  ts: r,
                                  sampleDuration: this.aacTimeLen,
                                };
                              if (
                                (this.corePlayer.isLive &&
                                  this.corePlayer.audioPlayConsuming &&
                                  this.corePlayer.audioPlayConsuming.addRecvFrameData(
                                    r,
                                    r,
                                    D.a.now(),
                                  ),
                                this.droppingSample && this.droppingSample(T))
                              )
                                return;
                              this.printFirstAudioTs ||
                                ((this.printFirstAudioTs = !0),
                                p.a.log('FlvParser.parseAudio' + this.parseType, r)),
                                this.pfaTs ||
                                  ((this.pfaTs = !0),
                                  p.a.log('FlvParser.parseAudio11' + this.parseType, r)),
                                this.audioFps.addDts(r),
                                (this.corePlayer.curAudioDts = r),
                                (this.lastParseDts = r),
                                this.corePlayer.pushAacSample(T, this.parseType);
                            } else p.a.warn('FlvParser.parseAudio error aac packet type=' + u);
                          },
                        },
                        {
                          key: 'validAacSample',
                          value: function (e) {
                            var t = [],
                              i = (t =
                                2 == this.parseType
                                  ? this.corePlayer.ctrlBuffer.avBuffer.aShieldBuffer.samples
                                  : this.corePlayer.ctrlBuffer.avBuffer.aBuffer.samples).length;
                            if (i > 0) {
                              var s = t[i - 1];
                              return 1 === i && s.ts > e && s.ts - e > this.validAacTime
                                ? (t.shift(), !0)
                                : e - s.ts < this.validAacTime;
                            }
                            return !0;
                          },
                        },
                        {
                          key: 'getAdtsConfig',
                          value: function (e, t, s) {
                            var r = 0,
                              a = null,
                              n = navigator.userAgent.toLowerCase();
                            return (
                              -1 !== n.indexOf('firefox')
                                ? t >= 6
                                  ? ((e = 5), (a = new Array(4)), (r = t - 3))
                                  : ((e = 2), (a = new Array(2)), (r = t))
                                : -1 !== n.indexOf('android')
                                ? -1 !== n.indexOf('mqqbrowser')
                                  ? ((e = 2), (a = new Array(2)), (r = t))
                                  : ((e = 5), (a = new Array(4)), (r = t))
                                : ((e = 5),
                                  (a = new Array(4)),
                                  (r = t),
                                  t >= 6
                                    ? (r = t - 3)
                                    : 1 === s && ((e = 2), (a = new Array(2)), (r = t))),
                              (this.audioSampleRate = i.AdtsSampleingRates[t]),
                              (this.aacTimeLen = 1024e3 / this.audioSampleRate),
                              p.a.log(
                                'FlvParser.getAdtsConfig audioSampleRate=' +
                                  this.audioSampleRate +
                                  ' aacTimeLen=' +
                                  this.aacTimeLen,
                              ),
                              (a[0] = e << 3),
                              (a[0] |= (14 & t) >> 1),
                              (a[1] = (1 & t) << 7),
                              (a[1] |= s << 3),
                              5 === e &&
                                ((a[1] |= (14 & r) >> 1),
                                (a[2] = (1 & r) << 7),
                                (a[2] |= 8),
                                (a[3] = 0)),
                              p.a.log(
                                'FlvParser.getAdtsConfig type=' +
                                  e +
                                  ' index=' +
                                  t +
                                  ' channel=' +
                                  s +
                                  ' exIndex=' +
                                  r +
                                  ' config=' +
                                  a,
                              ),
                              a
                            );
                          },
                        },
                        {
                          key: 'parseOBUHeader',
                          value: function (e) {
                            var t = {};
                            return (
                              (t.obu_forbidden_bit = e >> 7),
                              (t.obu_type = (120 & e) >> 3),
                              (t.obu_extension_flag = (4 & e) >> 2),
                              (t.obu_has_size_field = (2 & e) >> 1),
                              (t.obu_reserved_1bit = 1 & e),
                              t
                            );
                          },
                        },
                        {
                          key: 'isHevc',
                          value: function () {
                            return 12 == this.codec;
                          },
                        },
                        {
                          key: 'isAv01',
                          value: function () {
                            return 13 == this.codec;
                          },
                        },
                        {
                          key: 'hevcFindNextStartCode',
                          value: function (e, t) {
                            return 0 === e[t] && 0 === e[t + 1]
                              ? 1 === e[t + 2]
                                ? { found: !0, startCodeSize: 3 }
                                : 0 === e[t + 2] && 1 === e[t + 3]
                                ? { found: !0, startCodeSize: 4 }
                                : { found: !1 }
                              : { found: !1 };
                          },
                        },
                        {
                          key: 'isHevcNal',
                          value: function (e, t) {
                            return 0 === e[t] && 0 === e[t + 1] && 0 === e[t + 2] && 1 === e[t + 3];
                          },
                        },
                        {
                          key: 'isH264Sei',
                          value: function (e) {
                            return 6 == (31 & e[0]);
                          },
                        },
                        {
                          key: 'isH264Aud',
                          value: function (e) {
                            return 9 == (31 & e[0]);
                          },
                        },
                        {
                          key: 'isH264NALUPPS',
                          value: function (e) {
                            return (31 & e[0]) == i.NALU_TYPE_PPS;
                          },
                        },
                        {
                          key: 'isH264NALUPSPS',
                          value: function (e) {
                            return (31 & e[0]) == i.NALU_TYPE_SPS;
                          },
                        },
                        {
                          key: 'getCalculateVideoFramePlayDelay',
                          value: function () {
                            return 0;
                          },
                        },
                        {
                          key: 'calcAudioFrameRate',
                          value: function (e) {
                            this.audioFrameRateTs ||
                              ((this.audioFrameRateTs = e), (this.audioFrameCnt = 0)),
                              e - this.audioFrameRateTs < 1e3
                                ? this.audioFrameCnt++
                                : (Number(localStorage._printAudioFrameRate) &&
                                    p.a.log('@@@@@@@@ audioFrameRate=' + this.audioFrameCnt),
                                  (this.audioFrameRateTs = e),
                                  (this.audioFrameCnt = 0));
                          },
                        },
                        {
                          key: 'beforeSwap',
                          value: function (e, t, i) {
                            (this.startDtsType = t),
                              (this.isSwap = !0),
                              (this.fromType = e),
                              (this.isFirstPrintVideoTs = !1),
                              (this.isFirstPrintAudioTs = !1),
                              (this.swapStartDts = i);
                          },
                        },
                        {
                          key: 'getPcdnDisError',
                          value: function (e) {
                            return (e < -100 || e > 100) && (this.disError302(), !0);
                          },
                        },
                      ],
                      [
                        {
                          key: 'probe',
                          value: function (e) {
                            return !(70 !== e[0] || 76 !== e[1] || 86 !== e[2] || 1 !== e[3]);
                          },
                        },
                      ],
                    ),
                    i
                  );
                })(Pe);
              (mt.EVENTS = { META_DATA: 'meta_data', SWITCH_URL_DONE: 'switch_url_done' }),
                (mt.REMUX_TYPE_AUDIO = 0),
                (mt.REMUX_TYPE_VIDEO = 1),
                (mt.FLV_HEADER_LEN = 9),
                (mt.TAG_HEADER_LEN = 11),
                (mt.PREV_TAG_SIZE_LEN = 4),
                (mt.AUDIO_TYPE = 8),
                (mt.VIDEO_TYPE = 9),
                (mt.SCRIPT_TYPE = 18),
                (mt.SCRIPT_AMF1_HEAD_LEN = 13),
                (mt.SCRIPT_AMF2_HEAD_LEN = 5),
                (mt.IFRAME = 1),
                (mt.NO_REFERENCE_FRAME = 99),
                (mt.NAL_VPS = 32),
                (mt.NAL_SPS = 33),
                (mt.NAL_PPS = 34),
                (mt.HEVC_NAL_AUD = 35),
                (mt.HEVC_NAL_SEI = 39),
                (mt.NAL_RASL_N = 8),
                (mt.NAL_RASL_R = 9),
                (mt.NALU_TYPE_SLICE = 1),
                (mt.NALU_TYPE_DPA = 2),
                (mt.NALU_TYPE_DPB = 3),
                (mt.NALU_TYPE_DPC = 4),
                (mt.NALU_TYPE_IDR = 5),
                (mt.NALU_TYPE_SEI = 6),
                (mt.NALU_TYPE_SPS = 7),
                (mt.NALU_TYPE_PPS = 8),
                (mt.NALU_TYPE_AUD = 9),
                (mt.NALU_TYPE_EOSEQ = 10),
                (mt.NALU_TYPE_EOSTREAM = 11),
                (mt.NALU_TYPE_FILL = 12),
                (mt.H265_SEI_HEAD = [
                  44, 162, 222, 9, 181, 23, 71, 219, 187, 85, 164, 254, 127, 194, 252, 78,
                ]),
                (mt.AdtsSampleingRates = [
                  96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350,
                ]);
              var _t = mt,
                vt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.fpsIndex = 0),
                      (this.fpsArr = []),
                      (this.fpsMap = new Map()),
                      (this.started = !1),
                      (this.realFps = 0),
                      (this.recvFps = new ge(20)),
                      (this.jumpRecvFps = new ge(2)),
                      (this.perSecondIndex = 0),
                      (this.perSecondArr = []),
                      (this.perSecondMap = new Map()),
                      (this.recvFrames = 0),
                      (this.lastRecvFrames = 0),
                      (this.preRecvFrames = 0),
                      (this.gopSize = 0),
                      (this.noReferFrameNums = 0),
                      (this.preNoReferFrameNums = 0),
                      (this.noReferSize = 0),
                      (this.fpsList = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getRecord',
                        value: function () {
                          var e = this.recvFrames - this.lastRecvFrames;
                          return (this.lastRecvFrames = this.recvFrames), e;
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this.fpsArr = []),
                            this.fpsMap.clear(),
                            (this.started = !1),
                            (this.realFps = 0),
                            this.recvFps.reset(),
                            this.jumpRecvFps.reset(),
                            (this.recvFrames = 0),
                            (this.lastRecvFrames = 0),
                            (this.preRecvFrames = 0),
                            (this.gopSize = 0),
                            (this.noReferFrameNums = 0),
                            F.remove(this.onFrameTimer, this),
                            (this.perSecondIndex = 0),
                            (this.perSecondArr = []),
                            this.perSecondMap.clear(),
                            (this.fpsList.length = 0);
                        },
                      },
                      {
                        key: 'onFrameTimer',
                        value: function (e, t) {
                          this.recvFps.calculate(), this.jumpRecvFps.calculate();
                        },
                      },
                      {
                        key: 'addDts',
                        value: function (e) {
                          var t =
                              arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
                            i = arguments.length > 2 ? arguments[2] : void 0;
                          this.recvFrames++,
                            this.recvFps.addCur(1),
                            this.jumpRecvFps.addCur(1),
                            this.started ||
                              ((this.started = !0), F.add(this.onFrameTimer, this, 1e3));
                          var s = parseInt(e / 1e3);
                          if (this.fpsMap.has(s)) this.fpsMap.set(s, this.fpsMap.get(s) + 1);
                          else {
                            this.fpsIndex >= 10 && (this.fpsIndex = 0), this.calcRealFps();
                            var r = this.fpsArr[this.fpsIndex];
                            this.fpsList.length >= 5 && this.fpsList.shift(),
                              this.fpsMap.has(r) && this.fpsList.push(this.fpsMap.get(r)),
                              this.fpsMap.delete(r),
                              (this.fpsArr[this.fpsIndex] = s),
                              this.fpsMap.set(s, 1),
                              this.fpsIndex++;
                          }
                          t && this.addDataSize(s, t),
                            i === _t.IFRAME
                              ? (this.preRecvFrames > 0 &&
                                  (this.gopSize = this.recvFrames - this.preRecvFrames),
                                this.preNoReferFrameNums > 0 &&
                                  (this.noReferSize =
                                    this.noReferFrameNums - this.preNoReferFrameNums),
                                (this.preRecvFrames = this.recvFrames),
                                (this.preNoReferFrameNums = this.noReferFrameNums))
                              : i === _t.NO_REFERENCE_FRAME && this.noReferFrameNums++;
                        },
                      },
                      {
                        key: 'calcNoRefFps',
                        value: function () {
                          if (0 === this.noRefFps) {
                            var e = this.fpsArr[1];
                            this.noRefFps = this.noRefFpsMap.get(e);
                          }
                        },
                      },
                      {
                        key: 'calcRealFps',
                        value: function () {
                          if (this.fpsIndex > 1) {
                            var e = this.fpsArr[this.fpsIndex - 1];
                            this.realFps = this.fpsMap.get(e);
                          }
                        },
                      },
                      {
                        key: 'getRecvFps',
                        value: function () {
                          var e = this.recvFps.average();
                          return e === x.b.UintMax ? 0 : e;
                        },
                      },
                      {
                        key: 'getJumRecvFps',
                        value: function () {
                          var e = this.jumpRecvFps.average();
                          return e === x.b.UintMax ? 0 : e;
                        },
                      },
                      {
                        key: 'getFps',
                        value: function () {
                          if (this.fpsArr.length > 1) {
                            var t = this.fpsArr[1],
                              i = this.fpsMap.get(t),
                              s = 0,
                              r = i;
                            return (
                              e.FIXED_FPS.forEach(function (e) {
                                var t = e > i ? e - i : i - e;
                                t < 3 && (0 === s || t < s) && ((s = t), (r = e));
                              }),
                              r
                            );
                          }
                          return 0;
                        },
                      },
                      {
                        key: 'getCalculate',
                        value: function () {
                          this.recvFps.calculate();
                        },
                      },
                      {
                        key: 'getNoReferFps',
                        value: function () {
                          return this.noReferSize > 0 && this.gopSize > 0 && this.getFps() > 0
                            ? parseInt((this.noReferSize / this.gopSize) * this.getFps())
                            : 0;
                        },
                      },
                      {
                        key: 'addDataSize',
                        value: function (e, t) {
                          if (this.perSecondMap.has(e))
                            this.perSecondMap.set(e, this.perSecondMap.get(e) + t);
                          else {
                            this.perSecondIndex >= 10 && (this.perSecondIndex = 0);
                            var i = this.perSecondArr[this.perSecondIndex];
                            this.perSecondMap.delete(i),
                              (this.perSecondArr[this.perSecondIndex] = e),
                              this.perSecondMap.set(e, t),
                              this.perSecondIndex++;
                          }
                        },
                      },
                      {
                        key: 'getRealBitrate',
                        value: function () {
                          var e = 0,
                            t = this.perSecondArr.length;
                          if (t > 1) {
                            var i = this.perSecondArr[t - 2];
                            e = this.perSecondMap.get(i);
                          }
                          return parseInt((8 * e) / 1e3);
                        },
                      },
                      {
                        key: 'getGopSize',
                        value: function () {
                          return this.gopSize;
                        },
                      },
                      {
                        key: 'getHeartReceiveFps',
                        value: function () {
                          return this.fpsList.length >= 5
                            ? this.fpsList.reduce(function (e, t) {
                                return e + t;
                              }) / this.fpsList.length
                            : 0;
                        },
                      },
                    ]),
                    e
                  );
                })();
              vt.FIXED_FPS = [0, 15, 20, 24, 30, 40, 48, 60];
              var yt = vt,
                St = (function () {
                  function e() {
                    Object(s.a)(this, e);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'init',
                        value: function () {
                          var t;
                          for (t in ((e.types = {
                            av01: [],
                            av1C: [],
                            avc1: [],
                            avcC: [],
                            hvc1: [],
                            hvcC: [],
                            btrt: [],
                            dinf: [],
                            dref: [],
                            esds: [],
                            ftyp: [],
                            hdlr: [],
                            mdat: [],
                            mdhd: [],
                            mdia: [],
                            mfhd: [],
                            minf: [],
                            moof: [],
                            moov: [],
                            mp4a: [],
                            mvex: [],
                            mvhd: [],
                            sdtp: [],
                            stbl: [],
                            stco: [],
                            stsc: [],
                            stsd: [],
                            stsz: [],
                            stts: [],
                            tfdt: [],
                            tfhd: [],
                            traf: [],
                            trak: [],
                            trun: [],
                            trex: [],
                            tkhd: [],
                            vmhd: [],
                            smhd: [],
                          }),
                          e.types))
                            e.types.hasOwnProperty(t) &&
                              (e.types[t] = [
                                t.charCodeAt(0),
                                t.charCodeAt(1),
                                t.charCodeAt(2),
                                t.charCodeAt(3),
                              ]);
                          var i = new Uint8Array([
                              0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100, 108, 101, 114, 0,
                            ]),
                            s = new Uint8Array([
                              0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100, 108, 101, 114, 0,
                            ]);
                          e.HDLR_TYPES = { video: i, audio: s };
                          var r = new Uint8Array([
                              0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0, 0, 1,
                            ]),
                            a = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                          (e.STTS = e.STSC = e.STCO = a),
                            (e.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])),
                            (e.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])),
                            (e.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
                            (e.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
                          var n = new Uint8Array([105, 115, 111, 109]),
                            o = new Uint8Array([97, 118, 99, 49]),
                            h = new Uint8Array([0, 0, 0, 1]);
                          (e.FTYP = e.box(e.types.ftyp, n, h, n, o)),
                            (e.DINF = e.box(e.types.dinf, e.box(e.types.dref, r)));
                        },
                      },
                      {
                        key: 'box',
                        value: function (e) {
                          for (
                            var t,
                              i = Array.prototype.slice.call(arguments, 1),
                              s = 8,
                              r = i.length,
                              a = r;
                            r--;

                          )
                            s += i[r].byteLength;
                          for (
                            (t = new Uint8Array(s))[0] = (s >> 24) & 255,
                              t[1] = (s >> 16) & 255,
                              t[2] = (s >> 8) & 255,
                              t[3] = 255 & s,
                              t.set(e, 4),
                              r = 0,
                              s = 8;
                            r < a;
                            r++
                          )
                            t.set(i[r], s), (s += i[r].byteLength);
                          return t;
                        },
                      },
                      {
                        key: 'hdlr',
                        value: function (t) {
                          return e.box(e.types.hdlr, e.HDLR_TYPES[t]);
                        },
                      },
                      {
                        key: 'mdat',
                        value: function (t) {
                          return e.box(e.types.mdat, t);
                        },
                      },
                      {
                        key: 'mdhd',
                        value: function (t, i) {
                          return e.box(
                            e.types.mdhd,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              2,
                              0,
                              0,
                              0,
                              3,
                              (t >> 24) & 255,
                              (t >> 16) & 255,
                              (t >> 8) & 255,
                              255 & t,
                              i >> 24,
                              (i >> 16) & 255,
                              (i >> 8) & 255,
                              255 & i,
                              85,
                              196,
                              0,
                              0,
                            ]),
                          );
                        },
                      },
                      {
                        key: 'mdia',
                        value: function (t) {
                          return e.box(
                            e.types.mdia,
                            e.mdhd(t.timescale, t.duration),
                            e.hdlr(t.type),
                            e.minf(t),
                          );
                        },
                      },
                      {
                        key: 'mfhd',
                        value: function (t) {
                          return e.box(
                            e.types.mfhd,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              t >> 24,
                              (t >> 16) & 255,
                              (t >> 8) & 255,
                              255 & t,
                            ]),
                          );
                        },
                      },
                      {
                        key: 'minf',
                        value: function (t) {
                          return 'audio' === t.type
                            ? e.box(e.types.minf, e.box(e.types.smhd, e.SMHD), e.DINF, e.stbl(t))
                            : e.box(e.types.minf, e.box(e.types.vmhd, e.VMHD), e.DINF, e.stbl(t));
                        },
                      },
                      {
                        key: 'moof',
                        value: function (t, i, s) {
                          return e.box(e.types.moof, e.mfhd(t), e.traf(s, i));
                        },
                      },
                      {
                        key: 'moov',
                        value: function (t) {
                          for (var i = t.length, s = []; i--; ) s[i] = e.trak(t[i]);
                          return e.box.apply(
                            null,
                            [e.types.moov, e.mvhd(t[0].timescale, t[0].duration)]
                              .concat(s)
                              .concat(e.mvex(t)),
                          );
                        },
                      },
                      {
                        key: 'mvex',
                        value: function (t) {
                          for (var i = t.length, s = []; i--; ) s[i] = e.trex(t[i]);
                          return e.box.apply(null, [e.types.mvex].concat(s));
                        },
                      },
                      {
                        key: 'mvhd',
                        value: function (t, i) {
                          var s = new Uint8Array([
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            2,
                            (t >> 24) & 255,
                            (t >> 16) & 255,
                            (t >> 8) & 255,
                            255 & t,
                            (i >> 24) & 255,
                            (i >> 16) & 255,
                            (i >> 8) & 255,
                            255 & i,
                            0,
                            1,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            64,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            0,
                            255,
                            255,
                            255,
                            255,
                          ]);
                          return e.box(e.types.mvhd, s);
                        },
                      },
                      {
                        key: 'sdtp',
                        value: function (t) {
                          var i,
                            s,
                            r = t.samples || [],
                            a = new Uint8Array(4 + r.length);
                          for (s = 0; s < r.length; s++)
                            (i = r[s].flags),
                              (a[s + 4] =
                                (i.dependsOn << 4) | (i.isDependedOn << 2) | i.hasRedundancy);
                          return e.box(e.types.sdtp, a);
                        },
                      },
                      {
                        key: 'stbl',
                        value: function (t) {
                          return e.box(
                            e.types.stbl,
                            e.stsd(t),
                            e.box(e.types.stts, e.STTS),
                            e.box(e.types.stsc, e.STSC),
                            e.box(e.types.stsz, e.STSZ),
                            e.box(e.types.stco, e.STCO),
                          );
                        },
                      },
                      {
                        key: 'av01',
                        value: function (t) {
                          var i = t.bytes,
                            s = t.width,
                            r = t.height;
                          return e.box(
                            e.types.av01,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              (s >> 8) & 255,
                              255 & s,
                              (r >> 8) & 255,
                              255 & r,
                              0,
                              72,
                              0,
                              0,
                              0,
                              72,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              24,
                              255,
                              255,
                            ]),
                            e.box(e.types.av1C, i),
                          );
                        },
                      },
                      {
                        key: 'avc1',
                        value: function (t) {
                          var i,
                            s,
                            r,
                            a = [],
                            n = [];
                          for (i = 0; i < t.sps.length; i++)
                            (r = (s = t.sps[i]).byteLength),
                              a.push((r >>> 8) & 255),
                              a.push(255 & r),
                              (a = a.concat(Array.prototype.slice.call(s)));
                          for (i = 0; i < t.pps.length; i++)
                            (r = (s = t.pps[i]).byteLength),
                              n.push((r >>> 8) & 255),
                              n.push(255 & r),
                              (n = n.concat(Array.prototype.slice.call(s)));
                          var o = e.box(
                              e.types.avcC,
                              new Uint8Array(
                                [1, a[3], a[4], a[5], 255, 224 | t.sps.length]
                                  .concat(a)
                                  .concat([t.pps.length])
                                  .concat(n),
                              ),
                            ),
                            h = t.width,
                            u = t.height;
                          return e.box(
                            e.types.avc1,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              (h >> 8) & 255,
                              255 & h,
                              (u >> 8) & 255,
                              255 & u,
                              0,
                              72,
                              0,
                              0,
                              0,
                              72,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              24,
                              255,
                              255,
                            ]),
                            o,
                            e.box(
                              e.types.btrt,
                              new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192]),
                            ),
                          );
                        },
                      },
                      {
                        key: 'hvc1',
                        value: function (t) {
                          var i,
                            s,
                            r,
                            a = [],
                            n = [],
                            o = [];
                          for (
                            a.push(160),
                              a.push((t.vps.length >>> 8) & 255),
                              a.push(255 & t.vps.length),
                              i = 0;
                            i < t.vps.length;
                            i++
                          )
                            (r = (s = t.vps[i]).byteLength),
                              a.push((r >>> 8) & 255),
                              a.push(255 & r),
                              (a = a.concat(Array.prototype.slice.call(s)));
                          for (
                            n.push(161),
                              n.push((t.sps.length >>> 8) & 255),
                              n.push(255 & t.sps.length),
                              i = 0;
                            i < t.sps.length;
                            i++
                          )
                            (r = (s = t.sps[i]).byteLength),
                              n.push((r >>> 8) & 255),
                              n.push(255 & r),
                              (n = n.concat(Array.prototype.slice.call(s)));
                          var h = [],
                            u = 0;
                          for (i = 0; i < n.length; )
                            (s = n[i]),
                              2 !== u || 3 !== s
                                ? (0 === s ? u++ : (u = 0), h.push(s), ++i)
                                : (++i, (u = 0));
                          for (
                            o.push(162),
                              o.push((t.pps.length >>> 8) & 255),
                              o.push(255 & t.pps.length),
                              i = 0;
                            i < t.pps.length;
                            i++
                          )
                            (r = (s = t.pps[i]).byteLength),
                              o.push((r >>> 8) & 255),
                              o.push(255 & r),
                              (o = o.concat(Array.prototype.slice.call(s)));
                          var d = new Uint8Array(
                              [
                                1,
                                h[8],
                                h[9],
                                h[10],
                                h[11],
                                h[12],
                                h[13],
                                h[14],
                                h[15],
                                h[16],
                                h[17],
                                h[18],
                                h[19],
                                240,
                                0,
                                252,
                                253,
                                248,
                                248,
                                0,
                                0,
                                15,
                              ]
                                .concat([3])
                                .concat(a)
                                .concat(n)
                                .concat(o),
                            ),
                            c = e.box(e.types.hvcC, d),
                            l = t.width,
                            p = t.height;
                          return e.box(
                            e.types.hvc1,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              (l >> 8) & 255,
                              255 & l,
                              (p >> 8) & 255,
                              255 & p,
                              0,
                              72,
                              0,
                              0,
                              0,
                              72,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              24,
                              255,
                              255,
                            ]),
                            c,
                            e.box(
                              e.types.btrt,
                              new Uint8Array([0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192]),
                            ),
                          );
                        },
                      },
                      {
                        key: 'esds',
                        value: function (e) {
                          var t = e.config.length;
                          return new Uint8Array(
                            [
                              0,
                              0,
                              0,
                              0,
                              3,
                              23 + t,
                              0,
                              1,
                              0,
                              4,
                              15 + t,
                              64,
                              21,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              5,
                            ]
                              .concat([t])
                              .concat(e.config)
                              .concat([6, 1, 2]),
                          );
                        },
                      },
                      {
                        key: 'mp4a',
                        value: function (t) {
                          var i = t.audiosamplerate;
                          return e.box(
                            e.types.mp4a,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              t.channelCount,
                              0,
                              16,
                              0,
                              0,
                              0,
                              0,
                              (i >> 8) & 255,
                              255 & i,
                              0,
                              0,
                            ]),
                            e.box(e.types.esds, e.esds(t)),
                          );
                        },
                      },
                      {
                        key: 'stsd',
                        value: function (t) {
                          return 'audio' === t.type
                            ? e.box(e.types.stsd, e.STSD, e.mp4a(t))
                            : t.isHevc
                            ? e.box(e.types.stsd, e.STSD, e.hvc1(t))
                            : t.isAV01
                            ? e.box(e.types.stsd, e.STSD, e.av01(t))
                            : e.box(e.types.stsd, e.STSD, e.avc1(t));
                        },
                      },
                      {
                        key: 'tkhd',
                        value: function (t) {
                          var i = t.id,
                            s = t.duration,
                            r = t.width,
                            a = t.height;
                          return e.box(
                            e.types.tkhd,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              7,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              (i >> 24) & 255,
                              (i >> 16) & 255,
                              (i >> 8) & 255,
                              255 & i,
                              0,
                              0,
                              0,
                              0,
                              s >> 24,
                              (s >> 16) & 255,
                              (s >> 8) & 255,
                              255 & s,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              64,
                              0,
                              0,
                              0,
                              (r >> 8) & 255,
                              255 & r,
                              0,
                              0,
                              (a >> 8) & 255,
                              255 & a,
                              0,
                              0,
                            ]),
                          );
                        },
                      },
                      {
                        key: 'traf',
                        value: function (t, i) {
                          var s = e.sdtp(t),
                            r = t.id;
                          return e.box(
                            e.types.traf,
                            e.box(
                              e.types.tfhd,
                              new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                r >> 24,
                                (r >> 16) & 255,
                                (r >> 8) & 255,
                                255 & r,
                              ]),
                            ),
                            e.box(
                              e.types.tfdt,
                              new Uint8Array([
                                0,
                                0,
                                0,
                                0,
                                i >> 24,
                                (i >> 16) & 255,
                                (i >> 8) & 255,
                                255 & i,
                              ]),
                            ),
                            e.trun(t, s.length + 16 + 16 + 8 + 16 + 8 + 8),
                            s,
                          );
                        },
                      },
                      {
                        key: 'trak',
                        value: function (t) {
                          return (
                            (t.duration = t.duration || 4294967295),
                            e.box(e.types.trak, e.tkhd(t), e.mdia(t))
                          );
                        },
                      },
                      {
                        key: 'trex',
                        value: function (t) {
                          var i = t.id;
                          return e.box(
                            e.types.trex,
                            new Uint8Array([
                              0,
                              0,
                              0,
                              0,
                              i >> 24,
                              (i >> 16) & 255,
                              (i >> 8) & 255,
                              255 & i,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              1,
                            ]),
                          );
                        },
                      },
                      {
                        key: 'trun',
                        value: function (t, i) {
                          var s,
                            r,
                            a,
                            n,
                            o,
                            h,
                            u = t.samples || [],
                            d = u.length,
                            c = 12 + 16 * d,
                            l = new Uint8Array(c);
                          for (
                            i += 8 + c,
                              l.set(
                                [
                                  0,
                                  0,
                                  15,
                                  1,
                                  (d >>> 24) & 255,
                                  (d >>> 16) & 255,
                                  (d >>> 8) & 255,
                                  255 & d,
                                  (i >>> 24) & 255,
                                  (i >>> 16) & 255,
                                  (i >>> 8) & 255,
                                  255 & i,
                                ],
                                0,
                              ),
                              s = 0;
                            s < d;
                            s++
                          )
                            (a = (r = u[s]).duration),
                              (n = r.size),
                              (o = r.flags),
                              (h = r.cts),
                              l.set(
                                [
                                  (a >>> 24) & 255,
                                  (a >>> 16) & 255,
                                  (a >>> 8) & 255,
                                  255 & a,
                                  (n >>> 24) & 255,
                                  (n >>> 16) & 255,
                                  (n >>> 8) & 255,
                                  255 & n,
                                  (o.isLeading << 2) | o.dependsOn,
                                  (o.isDependedOn << 6) |
                                    (o.hasRedundancy << 4) |
                                    (o.paddingValue << 1) |
                                    o.isNonSync,
                                  61440 & o.degradPrio,
                                  15 & o.degradPrio,
                                  (h >>> 24) & 255,
                                  (h >>> 16) & 255,
                                  (h >>> 8) & 255,
                                  255 & h,
                                ],
                                12 + 16 * s,
                              );
                          return e.box(e.types.trun, l);
                        },
                      },
                      {
                        key: 'initSegment',
                        value: function (t) {
                          e.types || e.init();
                          var i,
                            s = e.moov(t);
                          return (
                            (i = new Uint8Array(e.FTYP.byteLength + s.byteLength)).set(e.FTYP),
                            i.set(s, e.FTYP.byteLength),
                            i
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                gt = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.mse = t),
                      (this.audioISGenerated = !1),
                      (this.videoISGenerated = !1),
                      (this.PES2MP4SCALEFACTOR = 1),
                      (this.PES_TIMESCALE = 9e4),
                      (this.MP4_TIMESCALE = this.PES_TIMESCALE / this.PES2MP4SCALEFACTOR),
                      (this._forceFirstIDR = !(
                        !g.a.chrome ||
                        !(
                          g.a.version.major < 50 ||
                          (50 === g.a.version.major && g.a.version.build < 2661)
                        )
                      ));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.reset();
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this.insertDiscontinuity(), this.switchLevel();
                        },
                      },
                      {
                        key: 'resetInitDts',
                        value: function () {
                          this._initPTS = this._initDTS = void 0;
                        },
                      },
                      {
                        key: 'insertDiscontinuity',
                        value: function () {
                          this.nextAacPts = this.nextAvcDts = void 0;
                        },
                      },
                      {
                        key: 'getInitDts',
                        value: function () {
                          return void 0 !== this._initDTS ? this._initDTS / 90 : void 0;
                        },
                      },
                      {
                        key: 'switchLevel',
                        value: function () {
                          var e =
                              !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
                            t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                          p.a.log('mp4-remuxer.switchLevel'),
                            e && (this.videoISGenerated = !1),
                            t && (this.audioISGenerated = !1);
                        },
                      },
                      {
                        key: 'remux',
                        value: function (e, t, i, s) {
                          Number(localStorage._printMp4Remux) &&
                            p.a.debug('\n### Audio', e, '\n### Video', t),
                            this.audioISGenerated || this.generateAudioIS(e, i),
                            this.videoISGenerated ||
                              this.isWebglRender ||
                              this.generateVideoIS(t, i),
                            this.initTs(e, t, i),
                            t.samples.length &&
                              (this.isWebglRender ? this.renderVideo(t, s) : this.remuxVideo(t, s)),
                            e.samples.length && this.remuxAudio(e, s),
                            this.mse.onFragParsed();
                        },
                      },
                      {
                        key: 'initTs',
                        value: function (e, t, i) {
                          if (null == this._initPTS) {
                            var s = e.samples,
                              r = t.samples,
                              a = s.length,
                              n = r.length,
                              o = this.PES_TIMESCALE;
                            0 === a && 0 === n
                              ? p.a.warn('mp4-remuxer.initTs have no nbAudio&nbVideo')
                              : 0 === n
                              ? ((this._initPTS = s[0].pts - o * i),
                                (this._initDTS = s[0].dts - o * i))
                              : 0 === a
                              ? ((this._initPTS = r[0].pts - o * i),
                                (this._initDTS = r[0].dts - o * i))
                              : ((this._initPTS = Math.min(r[0].pts, s[0].pts) - o * i),
                                (this._initDTS = Math.min(r[0].dts, s[0].dts) - o * i)),
                              p.a.log(
                                'mp4-remuxer initDTS/initPTS=['
                                  .concat(this._initDTS, ', ')
                                  .concat(this._initPTS, ']'),
                              );
                          }
                        },
                      },
                      {
                        key: 'generateAudioIS',
                        value: function (e, t) {
                          if (e.config) {
                            var i = {
                              audioMoov: St.initSegment([e]),
                              audioCodec: e.codec,
                              audioChannelCount: e.channelCount,
                            };
                            this.mse.onInitSegment(i), (this.audioISGenerated = !0);
                          }
                        },
                      },
                      {
                        key: 'generateVideoIS',
                        value: function (e, t) {
                          if (e.isAV01 || (e.sps && e.pps)) {
                            var i = {
                              videoMoov: St.initSegment([e]),
                              videoCodec: e.codec,
                              videoWidth: e.width,
                              videoHeight: e.height,
                            };
                            this.mse.onInitSegment(i), (this.videoISGenerated = !0);
                          }
                        },
                      },
                      {
                        key: 'remuxVideo',
                        value: function (e, t) {
                          var i,
                            s,
                            r,
                            a,
                            n,
                            o,
                            h,
                            u,
                            d,
                            c,
                            l,
                            f,
                            m,
                            _,
                            v = 8,
                            y = this.PES2MP4SCALEFACTOR,
                            S = [],
                            g = e.isAV01 ? 0 : 4 * e.naluCnt;
                          for (
                            h = new Uint8Array(e.len + g + 8),
                              (i = new DataView(h.buffer)).setUint32(0, h.byteLength),
                              h.set(St.types.mdat, 4);
                            e.samples.length;

                          ) {
                            for (r = e.samples.shift(), n = 0; r.units.length; )
                              (s = (o = r.units.shift()).data.byteLength),
                                'av01' != r.type && (i.setUint32(v, s), (v += 4), (n += 4)),
                                h.set(o.data, v),
                                (v += s),
                                (n += s);
                            if (
                              ((l = r.pts - this._initDTS),
                              ((f = r.dts - this._initDTS) < 0 || l < 0) &&
                                Number(localStorage._printMp4RemuxVideo) &&
                                p.a.log(
                                  'mp4-remuxer.remuxVideo warn dts='.concat(f, ', pts=').concat(l),
                                ),
                              void 0 !== c)
                            )
                              (m = this._PTSNormalize(l, c)),
                                (_ = this._PTSNormalize(f, c)),
                                (a.duration = (_ - c) / y),
                                a.duration < 0 &&
                                  (Number(localStorage._printMp4RemuxVideo) &&
                                    p.a.warn(
                                      'mp4-remuxer.remuxVideo invalid sample duration at pts=' +
                                        r.pts / 90 +
                                        ' dts=' +
                                        r.dts / 90 +
                                        ' duration=' +
                                        a.duration / 90,
                                    ),
                                  (a.duration = 0),
                                  (_ = c));
                            else {
                              var T,
                                E = this.nextAvcDts || f;
                              (m = this._PTSNormalize(l, E)),
                                (_ = this._PTSNormalize(f, E)),
                                (T = Math.round((_ - E) / 90)),
                                (t || Math.abs(T) < 600) &&
                                  T &&
                                  (T > 1 && Number(localStorage._printMp4RemuxVideo)
                                    ? p.a.warn('mp4-remuxer.remuxVideo hole=' + T + ' filling it')
                                    : T < -1 &&
                                      Number(localStorage._printMp4RemuxVideo) &&
                                      p.a.warn(
                                        'mp4-remuxer.remuxVideo overlapping=' + -T + ' detected',
                                      ),
                                  (_ = E),
                                  (m = Math.max(m - T, _))),
                                Math.max(0, m),
                                (d = Math.max(0, _));
                            }
                            var C = r.key;
                            (a = {
                              size: n,
                              duration: 0,
                              cts: (m - _) / y,
                              flags: {
                                isLeading: 0,
                                degradPrio: 0,
                                hasRedundancy: 0,
                                dependsOn: C ? 2 : 1,
                                isDependedOn: C ? 1 : 0,
                                isNonSync: C ? 0 : 1,
                              },
                            }),
                              S.push(a),
                              (c = _),
                              this.mse.isLive &&
                                this.mse.videoPlayConsuming.addRemuxFrameData(
                                  r.ts,
                                  r.ts + r.cts,
                                  D.a.now(),
                                );
                          }
                          this._forceFirstIDR &&
                            ((S[0].flags.dependsOn = 2), (S[0].flags.isNonSync = 0)),
                            void 0 !== e.endDts
                              ? ((a.duration = (90 * e.endDts - this._initDTS - _) / y),
                                a.duration < 0
                                  ? ((a.duration = 0), (this.nextAvcDts = _))
                                  : (this.nextAvcDts = 90 * e.endDts - this._initDTS))
                              : (S.length >= 2 && (a.duration = S[S.length - 2].duration),
                                (this.nextAvcDts = _ + a.duration * y)),
                            (e.len = 0),
                            (e.naluCnt = 0),
                            (e.samples = S),
                            (u = St.moof(e.sn, d / y, e)),
                            (e.samples = []);
                          var P = { type: 'video', data: this._mergeBoxes(u, h) };
                          this.mse.onFragParsing(P);
                        },
                      },
                      {
                        key: 'remuxAudio',
                        value: function (e, t) {
                          var i,
                            s,
                            r,
                            a,
                            n,
                            o,
                            h,
                            u,
                            d,
                            c,
                            l,
                            f = 8,
                            m = this.PES_TIMESCALE,
                            _ = this.PES2MP4SCALEFACTOR,
                            v = [];
                          for (
                            a = new Uint8Array(e.len + 8),
                              new DataView(a.buffer).setUint32(0, a.byteLength),
                              a.set(St.types.mdat, 4);
                            e.samples.length;

                          ) {
                            if (
                              ((r = (i = e.samples.shift()).unit),
                              a.set(r, f),
                              (f += r.byteLength),
                              (u = i.pts - this._initDTS),
                              (d = i.dts - this._initDTS),
                              void 0 !== h)
                            )
                              (c = this._PTSNormalize(u, h)),
                                (l = this._PTSNormalize(d, h)),
                                (s.duration = (l - h) / _),
                                I.a.popSize0Brows.map(function (e) {
                                  var t = e[0],
                                    r = e[1];
                                  g.a.name == t &&
                                    g.a.version.major >= r &&
                                    i.sampleDuration &&
                                    (s.duration = 90 * Math.ceil(i.sampleDuration));
                                }),
                                s.duration < 0 &&
                                  (Number(localStorage._printMp4RemuxAudio) &&
                                    p.a.warn(
                                      'mp4-remuxer.remuxAudio invalid AAC sample duration at PTS=' +
                                        i.pts +
                                        ' duration=' +
                                        s.duration,
                                    ),
                                  (s.duration = 0),
                                  (c = l = h));
                            else {
                              var y,
                                S = this.nextAacPts || u;
                              (c = this._PTSNormalize(u, S)),
                                (l = this._PTSNormalize(d, S)),
                                (y = Math.round((1e3 * (c - S)) / m)),
                                (t || Math.abs(y) < 600) && y && (c = l = S),
                                Math.max(0, c),
                                (o = Math.max(0, l));
                            }
                            (s = {
                              size: r.byteLength,
                              cts: 0,
                              duration: 0,
                              flags: {
                                isLeading: 0,
                                isDependedOn: 0,
                                hasRedundancy: 0,
                                degradPrio: 0,
                                dependsOn: 1,
                              },
                            }),
                              v.push(s),
                              (h = l),
                              this.mse.isLive &&
                                this.mse.audioPlayConsuming.addRemuxFrameData(
                                  i.ts,
                                  i.ts,
                                  D.a.now(),
                                );
                          }
                          v.length >= 2 && (s.duration = v[v.length - 2].duration),
                            (this.nextAacPts = c + s.duration * _),
                            (e.len = 0),
                            (e.samples = v),
                            (n = St.moof(e.sn, o / _, e)),
                            (e.samples = []);
                          var T = { type: 'audio', data: this._mergeBoxes(n, a) };
                          this.mse.onFragParsing(T);
                        },
                      },
                      {
                        key: 'renderVideo',
                        value: function (e, t) {
                          if (this.mse.isLive)
                            for (var i = 0; i < e.samples.length; i++) {
                              var s = e.samples[i];
                              this.mse.videoPlayConsuming.addRemuxFrameData(
                                s.ts,
                                s.ts + s.cts,
                                D.a.now(),
                              );
                            }
                          this.mse.h265Proxy.pushVideoFrame(e, t);
                        },
                      },
                      {
                        key: '_mergeBoxes',
                        value: function (e, t) {
                          var i = new Uint8Array(e.byteLength + t.byteLength);
                          return i.set(e, 0), i.set(t, e.byteLength), i;
                        },
                      },
                      {
                        key: '_PTSNormalize',
                        value: function (e, t) {
                          var i;
                          if (void 0 === t) return e;
                          for (i = t < e ? -8589934592 : 8589934592; Math.abs(e - t) > 4294967296; )
                            e += i;
                          return e;
                        },
                      },
                      {
                        key: 'timescale',
                        get: function () {
                          return this.MP4_TIMESCALE;
                        },
                      },
                      {
                        key: 'isWebglRender',
                        get: function () {
                          return this.mse.h265Proxy && this.mse.h265Proxy.renderInited;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Tt = (function () {
                  function e() {
                    Object(s.a)(this, e);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'getSilentFrame',
                        value: function (e, t) {
                          if (2 === e) {
                            if (1 === t) return new Uint8Array([0, 200, 0, 128, 35, 128]);
                            if (2 === t) return new Uint8Array([33, 0, 73, 144, 2, 25, 0, 35, 128]);
                            if (3 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 142,
                              ]);
                            if (4 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 128, 44, 128, 8, 2,
                                56,
                              ]);
                            if (5 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0,
                                33, 144, 2, 56,
                              ]);
                            if (6 === t)
                              return new Uint8Array([
                                0, 200, 0, 128, 32, 132, 1, 38, 64, 8, 100, 0, 130, 48, 4, 153, 0,
                                33, 144, 2, 0, 178, 0, 32, 8, 224,
                              ]);
                          } else {
                            if (1 === t)
                              return new Uint8Array([
                                1, 64, 34, 128, 163, 78, 230, 128, 186, 8, 0, 0, 0, 28, 6, 241, 193,
                                10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 94,
                              ]);
                            if (2 === t)
                              return new Uint8Array([
                                1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6,
                                241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 94,
                              ]);
                            if (3 === t)
                              return new Uint8Array([
                                1, 64, 34, 128, 163, 94, 230, 128, 186, 8, 0, 0, 0, 0, 149, 0, 6,
                                241, 161, 10, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                                90, 90, 90, 90, 90, 90, 90, 90, 94,
                              ]);
                          }
                          return null;
                        },
                      },
                      {
                        key: 'setWebcodeccEmptyFrame',
                        value: function (t) {
                          e.webcodeccEmptyFrame = t.toLocaleString().split(',');
                        },
                      },
                    ]),
                    e
                  );
                })();
              (Tt.emptyAacFrameAdts = [
                255, 241, 92, 64, 18, 64, 252, 0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0,
                26, 37, 65, 0, 13, 237, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
              ]),
                (Tt.emptyAacFrame = [
                  0, 208, 32, 6, 238, 90, 119, 128, 0, 128, 0, 0, 0, 0, 26, 37, 65, 0, 13, 237, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 28,
                ]),
                (Tt.emptyAacFrame_44_1 = [
                  1, 64, 34, 128, 163, 78, 129, 64, 0, 0, 0, 0, 4, 96, 6, 246, 81, 10, 90, 90, 90,
                  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
                  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 94,
                ]),
                (Tt.webcodeccEmptyFrame = null);
              var Et = Tt,
                Ct = {
                  ptsJumpTest: !1,
                  jumpConfigs: null,
                  initPts: 0,
                  audioTimeOffset: 0,
                  videoTimeOffset: 0,
                },
                Dt = (function () {
                  function e(t) {
                    Object(s.a)(this, e), (this.tsParser = t), this._init();
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: '_init',
                        value: function () {
                          (this._preAudioDts = 0),
                            (this._preVideoDts = 0),
                            (this._audioDtsVec = []),
                            (this._videoDtsVec = []),
                            (this.aJumpDtsVec = []),
                            (this.vJumpDtsVec = []),
                            (this.audioFixTimes = 0),
                            (this.videoFixTimes = 0),
                            (this._aFrameDuration = 0),
                            (this._vFrameDuration = 0);
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this._init();
                        },
                      },
                      {
                        key: 'getFrameDuration',
                        value: function (e) {
                          var t = 'video' === e ? this._videoDtsVec : this._audioDtsVec;
                          if (t.length < 4) return t[0] || 0;
                          var i = 0,
                            s = [];
                          t.forEach(function (e, t) {
                            t > 0 && s.push(Math.abs(e - i)), (i = e);
                          }),
                            s.sort(function (e, t) {
                              return e - t;
                            }),
                            s.pop(),
                            s.shift();
                          var r = s.reduce(function (e, t) {
                            return t + e;
                          });
                          return Math.ceil(r / s.length);
                        },
                      },
                      {
                        key: 'setPreAudioDts',
                        value: function (e) {
                          this._preAudioDts = e;
                        },
                      },
                      {
                        key: 'setPreVideoDts',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                          this._preVideoDts = e;
                        },
                      },
                      {
                        key: 'checkAudioDts',
                        value: function (t) {
                          this._preAudioDts || (this._preAudioDts = t),
                            Math.abs(t - this._preAudioDts) / 90 > e.ErrorDtsThreshold &&
                              (1 === Number(localStorage._print_dts_fix) &&
                                p.a.log(
                                  '%cVodDtsJumpHelper.checkAudioDts audio dts jump dts='
                                    .concat(t, ', preDts=')
                                    .concat(this._preAudioDts),
                                  'color:#50c1d8',
                                ),
                              this.aJumpDtsVec.push(this._preAudioDts)),
                            (this._preAudioDts = t),
                            this._audioDtsVec.length <= 11 &&
                              (this._audioDtsVec.push(t),
                              (this._aFrameDuration = this.getFrameDuration('audio') || 0));
                        },
                      },
                      {
                        key: 'checkVideoDts',
                        value: function (t) {
                          this._preVideoDts || (this._preVideoDts = t),
                            Math.abs(t - this._preVideoDts) / 90 > e.ErrorDtsThreshold &&
                              (1 === Number(localStorage._print_dts_fix) &&
                                p.a.log(
                                  '%cVodDtsJumpHelpercheckVideoDts video dts jump dts='
                                    .concat(t, ', preDts=')
                                    .concat(this._preVideoDts),
                                  'color:#50c1d8',
                                ),
                              this.vJumpDtsVec.push(this._preVideoDts)),
                            (this._preVideoDts = t),
                            this._videoDtsVec.length <= 11 &&
                              (this._videoDtsVec.push(t),
                              (this._vFrameDuration = this.getFrameDuration('video') || 0));
                        },
                      },
                      {
                        key: 'dtsJumpFix',
                        value: function (t, i) {
                          var s = 0,
                            r = 0;
                          this.aJumpDtsVec.length > 0 &&
                            this.vJumpDtsVec.length > 0 &&
                            ((s = this.aJumpDtsVec[0]), (r = this.vJumpDtsVec[0]));
                          for (var a = t.samples, n = 0, o = 0, h = 0; h < a.length; h++) {
                            var u = a[h];
                            if ('video' === i) {
                              if (((o = this._vFrameDuration), (n = this._preVideoDts), r && n > r))
                                break;
                            } else if (
                              ((o = this._aFrameDuration), (n = this._preAudioDts), s && n > s)
                            )
                              break;
                            if (Math.abs(u.dts - n) / 90 > e.ErrorDtsThreshold) {
                              var d = parseInt(n + o),
                                c = u.dts - d;
                              if (
                                ((u.dts = u.dts - c),
                                (u.pts = u.pts - c),
                                1 === Number(localStorage._print_dts_fix))
                              ) {
                                var l = d - n;
                                p.a.log(
                                  'VodDtsJumpHelper.dtsJumpFix fixed type='
                                    .concat(i, ' pts=')
                                    .concat(u.pts, ' dts=')
                                    .concat(u.dts, ' cts=')
                                    .concat(u.pts - u.dts, ' gap=')
                                    .concat(l, ' delta=')
                                    .concat(c),
                                );
                              }
                              'video' === i ? this.videoFixTimes++ : this.audioFixTimes++;
                            }
                            'video' === i
                              ? (this._preVideoDts = u.dts)
                              : (this._preAudioDts = u.dts);
                          }
                        },
                      },
                      {
                        key: 'dtsAmend',
                        value: function (t, i) {
                          var s = e.FrameThreshold,
                            r = this.aJumpDtsVec.length,
                            a = this.vJumpDtsVec.length;
                          if (r > 0 && a > 0)
                            for (
                              var n = this.aJumpDtsVec.shift(),
                                o = this.vJumpDtsVec.shift(),
                                h = n - this.audioDtsDelta,
                                u = o - this.videoDtsDelta;
                              r > 0 && a > 0;

                            ) {
                              var d = (h - u) / 90;
                              if (d < -s) h = (n = this.aJumpDtsVec.shift()) - this.audioDtsDelta;
                              else if (d > s)
                                u = (o = this.vJumpDtsVec.shift()) - this.videoDtsDelta;
                              else if (d >= -s && d <= s) {
                                this.setPreAudioDts(n),
                                  this.setPreVideoDts(o),
                                  this.dtsJumpFix(t, 'audio'),
                                  this.dtsJumpFix(i, 'video'),
                                  1 === Number(localStorage._print_dts_fix) &&
                                    p.a.log(
                                      '%cTsParse._dtsJumpFix fix pts jump',
                                      'color:#8d3333;background:#FFF5C2',
                                    );
                                break;
                              }
                              (r = this.aJumpDtsVec.length), (a = this.vJumpDtsVec.length);
                            }
                          else if (r > 0) {
                            if (i.samples.length <= 0) return !0;
                            var c = this.aJumpDtsVec[0],
                              l = i.samples[i.samples.length - 1].dts;
                            if (c > l)
                              return (
                                1 === Number(localStorage._print_dts_fix) &&
                                  p.a.log('TsParser._dtsJumpFix waiting avc jump dts'),
                                !0
                              );
                            if (c <= l && (l - c) / 90 < s) return !0;
                          } else if (a > 0) {
                            if (t.samples.length <= 0) return !0;
                            var f = this.vJumpDtsVec[0],
                              m = t.samples[t.samples.length - 1].dts;
                            if (f > m)
                              return (
                                1 === Number(localStorage._print_dts_fix) &&
                                  p.a.log('TsParser._dtsJumpFix waiting aac jump dts'),
                                !0
                              );
                            if (f <= m && (m - f) / 90 < s) return !0;
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'audioDtsDelta',
                        get: function () {
                          return this._aFrameDuration * this.audioFixTimes;
                        },
                      },
                      {
                        key: 'videoDtsDelta',
                        get: function () {
                          return this._vFrameDuration * this.videoFixTimes;
                        },
                      },
                      {
                        key: 'aFrameDuration',
                        get: function () {
                          return this._vFrameDuration;
                        },
                      },
                      {
                        key: 'vFrameDuration',
                        get: function () {
                          return this._aFrameDuration;
                        },
                      },
                      {
                        key: 'frameDuration',
                        get: function () {
                          return Math.max(this.aFrameDuration, this.vFrameDuration);
                        },
                      },
                    ]),
                    e
                  );
                })();
              (Dt.ErrorDtsThreshold = 1e3), (Dt.FrameThreshold = 200);
              var Pt = Dt,
                At = 98,
                It = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this.mse = t),
                      (this.remuxer = i),
                      (this.width = 0),
                      (this.height = 0),
                      (this.lastSN = 0),
                      (this.lastLevel = 0),
                      (this.PES_TIMESCALE = 9e4),
                      (this.lastTsData = null),
                      (this.lastPos = 0),
                      (this.hasRemux = !1),
                      (this.fragStartTs = 0),
                      (this.ignoreSei = !1),
                      (this.closeFetch = !1),
                      (this.vFps = new yt()),
                      (this.aFps = new yt()),
                      (this._initPts = 0),
                      (this.nextAudioPts = 0),
                      (this.isHevc = !1),
                      (this.codec = G.a.H264),
                      (this.vodDtsJumpHelper = new Pt(this)),
                      (this.isNoAudio = !0),
                      (this.hevcSpsParser = new Qe()),
                      (this.hevcCodec = ''),
                      (this.avcCodec = ''),
                      (this.lastTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getCodecType',
                        value: function () {
                          return this.codec;
                        },
                      },
                      {
                        key: 'getFps',
                        value: function () {
                          return this.vFps && this.vFps.getFps();
                        },
                      },
                      {
                        key: 'getAudioFps',
                        value: function () {
                          return this.aFps && this.aFps.getFps();
                        },
                      },
                      {
                        key: 'getStartTs',
                        value: function () {
                          return this.fragStartTs;
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this.switchLevel(), (this.duration = 0);
                        },
                      },
                      {
                        key: 'probe',
                        value: function (e) {
                          return e.length >= 564 && 71 === e[0] && 71 === e[188] && 71 === e[376];
                        },
                      },
                      {
                        key: 'resetAVData',
                        value: function () {
                          this._avcTrack &&
                            ((this._avcTrack.len = 0),
                            (this._avcTrack.naluCnt = 0),
                            (this._avcTrack.samples = [])),
                            this._aacTrack &&
                              ((this._aacTrack.len = 0), (this._aacTrack.samples = []));
                        },
                      },
                      {
                        key: 'pushAllData',
                        value: function () {
                          this._avcTrack &&
                            this._avcTrack.sn > 0 &&
                            this.remuxTs(this._aacTrack, this._avcTrack, this._avcTrack.sn);
                        },
                      },
                      {
                        key: 'parseAllData',
                        value: function () {
                          var e = !1;
                          if (this._avcTrack) {
                            var t = this._avcTrack.pesData,
                              i = this._aacTrack.pesData,
                              s = this._id3Track.pesData;
                            t && (this._parseAVCPES(this._parsePES(t)), (e = !0)),
                              i && this._parseAACPES(this._parsePES(i)),
                              s && this._parseID3PES(this._parsePES(s)),
                              (this._avcTrack.pesData = void 0),
                              (this._aacTrack.pesData = void 0),
                              (this._id3Track.pesData = void 0);
                          }
                          return e;
                        },
                      },
                      {
                        key: 'switchLevel',
                        value: function () {
                          var e = this.createTrack;
                          !this._avcTrack && (this._avcTrack = e('video')),
                            !this._aacTrack && (this._aacTrack = e('audio')),
                            !this._id3Track && (this._id3Track = e('id3')),
                            (this.pmtParsed = !1),
                            (this._pmtId = -1),
                            (this.isHevc = !1),
                            this.remuxer.switchLevel();
                        },
                      },
                      {
                        key: 'createTrack',
                        value: function (e) {
                          return { type: e, id: -1, sn: 0, samples: [], len: 0, naluCnt: 0 };
                        },
                      },
                      {
                        key: 'insertDiscontinuity',
                        value: function (e) {
                          p.a.log('TsParser.insertDiscontinuity timeOffset='.concat(e)),
                            this.resetTsData(),
                            this.switchLevel(),
                            this.remuxer.insertDiscontinuity(),
                            this.mse.insertDiscontinuity && this.mse.insertDiscontinuity(e);
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this.vFps.reset(),
                            this.aFps.reset(),
                            this.resetTsData(),
                            (this.hasRemux = !1),
                            (this.lastTsData = null),
                            this._avcTrack &&
                              ((this._avcTrack.sps = null),
                              (this._avcTrack.pps = null),
                              (this._avcTrack.len = 0),
                              (this._avcTrack.naluCnt = 0),
                              (this._avcTrack.samples = [])),
                            this._aacTrack &&
                              ((this._aacTrack.len = 0),
                              (this._aacTrack.naluCnt = 0),
                              (this._aacTrack.samples = [])),
                            this.vodDtsJumpHelper.reset();
                        },
                      },
                      {
                        key: 'resetTsData',
                        value: function () {
                          var e = this._avcTrack,
                            t = this._aacTrack,
                            i = this._id3Track;
                          t &&
                            ((e.pesData = null),
                            (t.pesData = null),
                            (i.pesData = null),
                            (this.lastTsData = null)),
                            (this.fragStartTs = 0);
                        },
                      },
                      {
                        key: 'appendTsData',
                        value: function (e, t) {
                          var i;
                          t && this.resetTsData(),
                            e instanceof Uint8Array || (e = new Uint8Array(e));
                          var s = this.lastTsData,
                            r = this.lastPos;
                          if (s) {
                            var a = s.byteLength - r,
                              n = a + e.byteLength;
                            (i = new Uint8Array(n)).set(s.slice(r), 0), i.set(e, a);
                          } else i = e;
                          return (this.lastPos = 0), (this.lastTsData = i), i;
                        },
                      },
                      {
                        key: 'syncOffset',
                        value: function (e) {
                          for (var t = Math.min(188, e.length - 564), i = 0; i < t; ) {
                            if (71 === e[i] && 71 === e[i + 188] && 71 === e[i + 376]) return i;
                            i++;
                          }
                          return -1;
                        },
                      },
                      {
                        key: 'parseTs',
                        value: function (e) {
                          var t = e.data,
                            i = e.audioCodec,
                            s = e.videoCodec,
                            r = e.timeOffset,
                            a = e.duration,
                            n = e.discontinuity,
                            o = e._discontinuity,
                            h = e.level,
                            u = e.sn,
                            d = e.seeking,
                            c = e.hlsDT,
                            l = e.tsDT;
                          (this.contiguous = !1),
                            n || o
                              ? (p.a.log(
                                  'TsParser.parseTs discontinuity detected timeOffset='.concat(r),
                                ),
                                this.insertDiscontinuity(r))
                              : h !== this.lastLevel
                              ? (p.a.log('TsParser.parseTs level switch detected'),
                                this.switchLevel(),
                                (this.lastLevel = h))
                              : u === this.lastSN + 1 && (this.contiguous = !0);
                          var f = (t = this.appendTsData(t, d, u)).length;
                          (this.audioCodec = i),
                            (this.videoCodec = s),
                            (this.timeOffset = r),
                            (this.duration = a),
                            (this.lastSN = u),
                            this.contiguous || (this.aacOverFlow = null),
                            this._avcTrack || this.insertDiscontinuity(r);
                          var m = this.syncOffset(t);
                          if (!(m < 0)) {
                            (this.lastPos = f -= (f + m) % 188),
                              f === t.length && (this.lastTsData = null);
                            var _,
                              v,
                              y,
                              S,
                              T,
                              E = this._avcTrack,
                              C = this._aacTrack,
                              D = this._id3Track,
                              P = this.pmtParsed,
                              A = E.pesData,
                              I = C.pesData,
                              k = D.pesData,
                              R = E.id,
                              O = C.id,
                              b = D.id;
                            try {
                              for (var w = m; w < f; w += 188)
                                if (71 === t[w]) {
                                  if (
                                    ((_ = !!(64 & t[w + 1])),
                                    (v = ((31 & t[w + 1]) << 8) + t[w + 2]),
                                    (48 & t[w + 3]) >> 4 > 1)
                                  ) {
                                    if ((y = w + 5 + t[w + 4]) === w + 188) continue;
                                  } else y = w + 4;
                                  if (P)
                                    if (((S = (T = w + 188) - y), v === R)) {
                                      if (this.mse.isPureAudio) continue;
                                      _ &&
                                        (A && this._parseAVCPES(this._parsePES(A, r, c, l)),
                                        (A = { data: [], size: 0 })),
                                        A && (A.data.push(t.subarray(y, T)), (A.size += S));
                                    } else if (v === O) {
                                      if (this.mse.isPureVideo) continue;
                                      _ &&
                                        (I &&
                                          (this._parseAACPES(this._parsePES(I, r, c, l)),
                                          !this.closeFetch &&
                                            !this.hasRemux &&
                                            E.samples.length > 1 &&
                                            this.remuxTs(C, E, u)),
                                        (I = { data: [], size: 0 })),
                                        I && (I.data.push(t.subarray(y, T)), (I.size += S));
                                    } else
                                      v === b &&
                                        (_ &&
                                          (k && this._parseID3PES(this._parsePES(k, r, c, l)),
                                          (k = { data: [], size: 0 })),
                                        k && (k.data.push(t.subarray(y, T)), (k.size += S)));
                                  else
                                    _ && (y += t[y] + 1),
                                      0 === v
                                        ? this._parsePAT(t, y)
                                        : v === this._pmtId &&
                                          (this._parsePMT(t, y),
                                          (P = this.pmtParsed = !0),
                                          (R = this._avcTrack.id),
                                          (O = this._aacTrack.id),
                                          (b = this._id3Track.id));
                                } else
                                  p.a.error(
                                    'TsParser.parseTs ERROR: TS packet did not start with 0x47',
                                  ),
                                    this.mse && this.mse.onParseError(At);
                            } catch (e) {
                              p.a.error('TsParser.parseTs error:', e);
                            }
                            if (
                              (A && (E.pesData = A),
                              I && (C.pesData = I),
                              k && (D.pesData = k),
                              C.samples.length > 1 ||
                                this.maxVideo() ||
                                (this.mse.isPureAudio && C.samples.length > 0) ||
                                (this.mse.isPureVideo && E.samples.length > 0))
                            ) {
                              if (
                                0 === C.samples.length &&
                                'firefox' === g.a.name &&
                                this.mse.reloadInError &&
                                !this.mse.isLive
                              )
                                return void this.mse.reloadInError();
                              (E.width = this.width),
                                (E.height = this.height),
                                this.remuxTs(C, E, u);
                            }
                          }
                        },
                      },
                      {
                        key: 'maxVideo',
                        value: function () {
                          var e = this._avcTrack;
                          if (e.samples.length > 1) {
                            var t = e.samples[0];
                            return (e.samples[e.samples.length - 1].dts - t.dts) / 90 > 2e3;
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'remuxTs',
                        value: function (e, t, i) {
                          (t.codec = this.isHevc ? this.hevcCodec : this.avcCodec),
                            (t.width = this.width),
                            (t.height = this.height),
                            (t.isHevc = this.isHevc),
                            (e.sn = t.sn = i),
                            (this.hasRemux = !0),
                            e.samples &&
                              e.samples.length > 0 &&
                              ((this.isNoAudio = !1), this.mse.setNoAuido(!1));
                          try {
                            if (!this.mse.isLive) {
                              if (I.a.vodDtsFixCfg[1] && this.vodDtsJumpHelper.dtsAmend(e, t))
                                return void p.a.log('Tsparser.remuxTs found pts jump, waiting fix');
                              this.remuxAudio(e, t.samples.length > 0);
                            }
                            this.mse.webcodecType == B.a.PLAYER_CORE_TYPE.MSE
                              ? this.remuxer.remux(e, t, this.timeOffset, this.contiguous)
                              : (this.mse.initTs && this.mse.initTs(t, e, this.timeOffset),
                                this.mse.appendAvcTrack(t),
                                this.mse.appendAacSample(e)),
                              this.mse.isLive ||
                                (3 === W.getFirstFragStatus() && W.setFirstFragStatus(4));
                          } catch (e) {
                            p.a.error('remux ts error: ', e), this.mse && this.mse.onParseError(At);
                          }
                        },
                      },
                      {
                        key: 'remuxAudio',
                        value: function (e, t) {
                          var i = 9216e4 / e.audiosamplerate;
                          0 == this.nextAudioPts && (this.nextAudioPts = this._initPts);
                          for (
                            var s = this.nextAudioPts, r = e.samples, a = 0, n = s;
                            a < r.length;
                            a++
                          ) {
                            var o = r[a].pts,
                              h = o - n,
                              u = Math.abs((1e3 * h) / e.timescale);
                            if (h <= -i && t)
                              0 === a &&
                                (p.a.warn(
                                  'Audio frame @ '
                                    .concat(
                                      (o / e.timescale).toFixed(3),
                                      's \n                        overlaps nextAudioPts by ',
                                    )
                                    .concat(Math.round((1e3 * h) / e.timescale), ' ms.'),
                                ),
                                (this.nextAudioPts = s = n = o));
                            else if (h > i && u < 1e4 && t) {
                              var d = Math.round(h / i);
                              (n = o - d * i) < 0 && (d--, (n += i)),
                                0 === a && (this.nextAudioPts = s = n),
                                p.a.warn(
                                  '[mp4-remuxer]: Injecting '
                                    .concat(d, ' audio frame nextPts=')
                                    .concat(n, ' @ ')
                                    .concat(
                                      (n / e.timescale).toFixed(3),
                                      's \n                    due to ',
                                    )
                                    .concat(Math.round((1e3 * h) / e.timescale), ' ms gap.'),
                                );
                              for (var c = 0; c < d; c++) {
                                var l = Math.max(n, 0),
                                  f = Et.getSilentFrame(e.config[0], e.channelCount),
                                  m = { unit: f, pts: Math.round(l), dts: Math.round(l) };
                                r.splice(a, 0, m), (e.len += f.length), (n += i), a++;
                              }
                            }
                            (n += i), (this.nextAudioPts = n);
                          }
                        },
                      },
                      {
                        key: '_updateInitPts',
                        value: function (e) {
                          this._initPts ||
                            ((this._initPts = e),
                            Ct.initPts || (Ct.initPts = this._initPts),
                            p.a.log(
                              'Tsparser.remuxTs initPts='
                                .concat(this._initPts, ' Global initPts=')
                                .concat(Ct.initPts),
                            ));
                        },
                      },
                      {
                        key: '_parsePAT',
                        value: function (e, t) {
                          var i = (e[t + 8] << 8) | e[t + 9];
                          1 == i && (this._pmtId = ((31 & e[t + 10]) << 8) | e[t + 11]),
                            p.a.log(
                              'TsParser._parsePAT program_number='
                                .concat(i, ' pmtId=')
                                .concat(this._pmtId),
                            );
                        },
                      },
                      {
                        key: '_parsePMT',
                        value: function (e, t) {
                          var i = t + 3 + (((15 & e[t + 1]) << 8) | e[t + 2]) - 4;
                          for (t += 12 + (((15 & e[t + 10]) << 8) | e[t + 11]); t < i; ) {
                            var s = e[t],
                              r = ((31 & e[t + 1]) << 8) | e[t + 2];
                            switch (s) {
                              case 15:
                                this._aacTrack.id = r;
                                break;
                              case 21:
                                this._id3Track.id = r;
                                break;
                              case 27:
                                this._avcTrack.id = r;
                                break;
                              case 36:
                                (this._avcTrack.id = r),
                                  (this.isHevc = !0),
                                  (this.codec = G.a.H265);
                                break;
                              default:
                                p.a.log('unkown stream type:' + e[t]);
                            }
                            t += 5 + (((15 & e[t + 3]) << 8) | e[t + 4]);
                          }
                          p.a.log(
                            'TsParser._parsePMT aacTrack.id='
                              .concat(this._aacTrack.id, ' avcTrack.id=')
                              .concat(this._avcTrack.id),
                          );
                        },
                      },
                      {
                        key: '_parsePES',
                        value: function (e) {
                          var t =
                              arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
                            i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                            r = e.data[0];
                          if (1 != (r[0] << 16) + (r[1] << 8) + r[2]) return null;
                          var a,
                            n,
                            o = (r[4] << 8) + r[5],
                            h = r[7];
                          192 & h &&
                            ((a =
                              536870912 * (14 & r[9]) +
                              4194304 * (255 & r[10]) +
                              16384 * (254 & r[11]) +
                              128 * (255 & r[12]) +
                              (254 & r[13]) / 2),
                            (n =
                              64 & h
                                ? 536870912 * (14 & r[14]) +
                                  4194304 * (255 & r[15]) +
                                  16384 * (254 & r[16]) +
                                  128 * (255 & r[17]) +
                                  (254 & r[18]) / 2
                                : a));
                          var u = r[8] + 9;
                          (e.data[0] = e.data[0].subarray(u)), (e.size -= u);
                          for (var d = 0, c = new Uint8Array(e.size); e.data.length; )
                            (r = e.data.shift()), c.set(r, d), (d += r.byteLength);
                          return (
                            s > i &&
                              s - i - 1e3 * t > 0 &&
                              ((a -= 90 * (s - i - 1e3 * t)), (n -= 90 * (s - i - 1e3 * t))),
                            { data: c, pts: a, dts: n, len: o }
                          );
                        },
                      },
                      {
                        key: '_parseAVCPES',
                        value: function (t) {
                          if (null == t)
                            return (
                              p.a.error('TsParser._parseAVCPES pes is null.'),
                              void (this.mse && this.mse.onParseError(At))
                            );
                          !this.mse.isLive && Ct.ptsJumpTest && this._dtsJumpSimulate(t, 'video'),
                            0 === this.fragStartTs &&
                              (this.fragStartTs = t.pts / this.PES_TIMESCALE);
                          var i,
                            s = this._avcTrack,
                            r = s.samples,
                            a = this._parseAVCNALu(t.data),
                            n = [],
                            o = 0;
                          0 === a.length && r.length > 0 && this._pushToPreUnit(t.data),
                            (t.data = null);
                          var h = !1,
                            u = !1,
                            d = '';
                          if (this.isHevc) {
                            var c,
                              l = Object(Se.a)(a);
                            try {
                              for (l.s(); !(c = l.n()).done; ) {
                                var f = c.value;
                                switch (f.type) {
                                  case e.HEVC_NAL_VPS:
                                    (u = !0), s.vps || (s.vps = [f.data]);
                                    break;
                                  case e.HEVC_NAL_SPS:
                                    if (((u = !0), !s.sps)) {
                                      (s.sps = [f.data]),
                                        (s.timescale = this.remuxer.timescale),
                                        (s.duration = this.remuxer.timescale * this.duration),
                                        (this.spsConfig = {}),
                                        this.hevcSpsParser.parseSequenceParameterSet(
                                          f.data,
                                          f.data.length,
                                          this.spsConfig,
                                        );
                                      var m = this.spsConfig.profile_space,
                                        _ = this.spsConfig.profile_idc,
                                        v = this.spsConfig.profile_compatibility_flags;
                                      v =
                                        ((v =
                                          (((v =
                                            (((v =
                                              (((v =
                                                ((v >> 1) & 1431655765) |
                                                ((1431655765 & v) << 1)) >>
                                                2) &
                                                858993459) |
                                              ((858993459 & v) << 2)) >>
                                              4) &
                                              252645135) |
                                            ((252645135 & v) << 4)) >>
                                            8) &
                                            16711935) |
                                          ((16711935 & v) << 8)) >>
                                          16) |
                                        (v << 16);
                                      var y = this.spsConfig.tier_flag,
                                        S = this.spsConfig.level_idc;
                                      (this.hevcCodec =
                                        'hvc1.' +
                                        ['', 'A', 'B', 'C'][m % 4] +
                                        _.toString() +
                                        '.' +
                                        v.toString(16).toLowerCase() +
                                        '.' +
                                        ['L', 'H'][y % 2] +
                                        S.toString()),
                                        (this.width == this.spsConfig.width &&
                                          this.height == this.spsConfig.height) ||
                                          (this.mse.updateAVCConfig &&
                                            this.mse.updateAVCConfig({
                                              width: this.spsConfig.width,
                                              height: this.spsConfig.height,
                                            })),
                                        (this.width = s.width = this.spsConfig.width),
                                        (this.height = s.height = this.spsConfig.height),
                                        this.mse.setAvcCfg(this.width, this.height);
                                    }
                                    break;
                                  case e.HEVC_NAL_PPS:
                                    (u = !0), s.pps || (s.pps = [f.data]);
                                    break;
                                  case 19:
                                  case 20:
                                    (u = !0), (h = !0), (s.idr = !0);
                                    break;
                                  case e.HEVC_NAL_AUD:
                                    u = !1;
                                    break;
                                  case 39:
                                  case 40:
                                    (u = !0),
                                      (this.ignoreSei || 1 == localStorage._noSei) && (u = !1);
                                    break;
                                  case 0:
                                  case 1:
                                    u = !0;
                                    break;
                                  default:
                                    (u = !1), (d += 'unknown NAL ' + f.type + ' ');
                                }
                                u && (n.push(f), (o += f.data.byteLength));
                              }
                            } catch (e) {
                              l.e(e);
                            } finally {
                              l.f();
                            }
                            if (
                              (d.length,
                              s.idr && this.mse.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_IFRAME, 1),
                              s.codec &&
                                this.mse.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_CONFIG, 1),
                              n.length && (!0 === h || s.sps))
                            ) {
                              if (
                                ((i = {
                                  type: 'hvc',
                                  units: n,
                                  dts: t.dts,
                                  pts: t.pts,
                                  key: h,
                                  ts: t.dts / 90,
                                  cts: (t.pts - t.dts) / 90,
                                  videoCodec: this.hevcCodec,
                                  videoWidth: this.width,
                                  videoHeight: this.height,
                                }),
                                h &&
                                  ((i.ppsUnit = [{ length: s.pps[0].length, nalu: s.pps[0] }]),
                                  (i.spsUnit = [{ length: s.sps[0].length, nalu: s.sps[0] }]),
                                  (i.vpsUnit = [{ length: s.vps[0].length, nalu: s.vps[0] }])),
                                r.push(i),
                                (s.len += o),
                                (s.naluCnt += n.length),
                                this._updateInitPts(i.pts),
                                this.vodDtsJumpHelper.checkVideoDts(i.dts),
                                1 == localStorage._printVideoTs)
                              ) {
                                var g = parseInt(t.dts - 90 * this.mse.curVideoDts),
                                  T = parseInt((t.pts - Ct.initPts) / 90);
                                p.a.debug(
                                  '%cTsParser.parseAvcPes ts='
                                    .concat(t.dts / 90, ' dts=')
                                    .concat(t.dts, ' pts=')
                                    .concat(t.pts, ' cts=')
                                    .concat(t.pts - t.dts, ' gap=')
                                    .concat(g, ' timeoffset=')
                                    .concat(T),
                                  'color:green',
                                );
                              }
                              this.mse &&
                                ((this.mse.curVideoDts = t.dts / 90),
                                this.mse.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_FRAME, 1)),
                                this.vFps.addDts(t.dts / 90);
                            }
                          } else {
                            var E,
                              D = Object(Se.a)(a);
                            try {
                              for (D.s(); !(E = D.n()).done; ) {
                                var P = E.value;
                                switch (P.type) {
                                  case 1:
                                    u = !0;
                                    break;
                                  case 5:
                                    (u = !0), (h = !0), (s.idr = !0);
                                    break;
                                  case 6:
                                    (u = !0),
                                      (this.ignoreSei || 1 == localStorage._noSei) && (u = !1);
                                    break;
                                  case 7:
                                    if (((u = !0), !s.sps)) {
                                      (s.sps = [P.data]),
                                        (s.timescale = this.remuxer.timescale),
                                        (s.duration = this.remuxer.timescale * this.duration);
                                      var A = new Te(P.data).readSPS();
                                      (this.width == A.width && this.height == A.height) ||
                                        (this.mse.updateAVCConfig &&
                                          this.mse.updateAVCConfig({
                                            width: A.width,
                                            height: A.height,
                                          })),
                                        (this.width = s.width = A.width),
                                        (this.height = s.height = A.height),
                                        this.mse.setAvcCfg(this.width, this.height);
                                      for (
                                        var I = P.data.subarray(1, 4), k = 'avc1.', R = 0;
                                        R < 3;
                                        R++
                                      ) {
                                        var O = I[R].toString(16);
                                        O.length < 2 && (O = '0' + O), (k += O);
                                      }
                                      (s.codec = k), (this.avcCodec = k);
                                    }
                                    break;
                                  case 8:
                                    (u = !0), s.pps || (s.pps = [P.data]);
                                    break;
                                  case 9:
                                    (u = !0),
                                      (1 != localStorage._noAud &&
                                        this.mse.getCodecType() !=
                                          B.a.PLAYER_CORE_TYPE.WEBCODECS) ||
                                        (u = !1);
                                    break;
                                  default:
                                    (u = !1), (d += 'unknown NAL ' + P.type + ' ');
                                }
                                u && (n.push(P), (o += P.data.byteLength));
                              }
                            } catch (e) {
                              D.e(e);
                            } finally {
                              D.f();
                            }
                            if (
                              (d.length,
                              s.idr && this.mse.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_IFRAME, 1),
                              s.codec &&
                                this.mse.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_CONFIG, 1),
                              s.sps && s.pps && !s.idr)
                            )
                              return;
                            if (n.length && !0 === u) {
                              var b = t.dts / 90;
                              if (
                                ((i = {
                                  type: 'avc',
                                  units: n,
                                  dts: t.dts,
                                  pts: t.pts,
                                  key: h,
                                  ts: b,
                                  cts: (t.pts - t.dts) / 90,
                                  videoCodec: this.avcCodec,
                                  videoWidth: this.width,
                                  videoHeight: this.height,
                                }),
                                (this.lastTs = b),
                                h &&
                                  ((i.ppsUnit = [{ length: s.pps[0].length, nalu: s.pps[0] }]),
                                  (i.spsUnit = [{ length: s.sps[0].length, nalu: s.sps[0] }])),
                                r.push(i),
                                (s.len += o),
                                (s.naluCnt += n.length),
                                this._updateInitPts(i.pts),
                                this.vodDtsJumpHelper.checkVideoDts(i.dts),
                                1 == localStorage._printVideoTs)
                              ) {
                                var w = parseInt(t.dts - 90 * this.mse.curVideoDts),
                                  L = parseInt((t.pts - Ct.initPts) / 90);
                                p.a.debug(
                                  '%cTsParser.parseAvcPes ts='
                                    .concat(t.dts / 90, ' dts=')
                                    .concat(t.dts, ' pts=')
                                    .concat(t.pts, ' cts=')
                                    .concat(t.pts - t.dts, ' gap=')
                                    .concat(w, ' timeoffset=')
                                    .concat(L),
                                  'color:green',
                                );
                              }
                              this.mse &&
                                ((this.mse.curVideoDts = t.dts / 90),
                                this.mse.setExceptionStat(C.a.DIM_LINK_STA.VIDEO_FRAME, 1)),
                                this.vFps.addDts(t.dts / 90);
                            }
                          }
                        },
                      },
                      {
                        key: '_parseAVCNALu',
                        value: function (e) {
                          for (
                            var t, i, s, r, a, n, o = 0, h = e.byteLength, u = 0, d = [];
                            o < h;

                          )
                            switch (((t = e[o++]), u)) {
                              case 0:
                                0 === t && (u = 1);
                                break;
                              case 1:
                                u = 0 === t ? 2 : 0;
                                break;
                              case 2:
                              case 3:
                                0 === t
                                  ? (u = 3)
                                  : 1 === t
                                  ? ((r = this.isHevc ? (126 & e[o]) >> 1 : 31 & e[o]),
                                    a
                                      ? ((s = { data: e.subarray(a, o - u - 1), type: n }),
                                        d.push(s))
                                      : (i = o - u - 1) && this._pushToPreUnit(e.subarray(0, i)),
                                    o < h ? ((a = o), (n = r), (u = 0)) : (u = -1))
                                  : (u = 0);
                            }
                          return a && ((s = { data: e.subarray(a, h), type: n }), d.push(s)), d;
                        },
                      },
                      {
                        key: '_pushToPreUnit',
                        value: function (e) {
                          var t = this._avcTrack.samples.length;
                          if (0 != t) {
                            var i = this._avcTrack.samples[t - 1],
                              s = i.units[i.units.length - 1],
                              r = new Uint8Array(s.data.byteLength + e.byteLength);
                            r.set(s.data, 0),
                              r.set(e, s.data.byteLength),
                              (s.data = r),
                              (this._avcTrack.len += e.byteLength);
                          }
                        },
                      },
                      {
                        key: '_parseAACPES',
                        value: function (e) {
                          var t = this;
                          if (null == e)
                            return (
                              p.a.error('TsParser._parseAACPES pes is null.'),
                              void (this.mse && this.mse.onParseError(At))
                            );
                          var i,
                            s,
                            r,
                            a,
                            n,
                            o,
                            h,
                            u,
                            d = this._aacTrack,
                            c = e.data,
                            l = c.length,
                            f = 0;
                          if (this.aacOverFlow) {
                            var m = new Uint8Array(this.aacOverFlow.byteLength + c.byteLength);
                            m.set(this.aacOverFlow, 0),
                              m.set(c, this.aacOverFlow.byteLength),
                              (c = m),
                              (this.aacOverFlow = null);
                          }
                          for (s = 0; s < l - 1 && (255 !== c[s] || 240 != (240 & c[s + 1])); s++);
                          if (
                            s &&
                            (s < l - 1
                              ? ((h = 'AAC PES did not start with ADTS header, offset:'.concat(s)),
                                (u = !1))
                              : ((h = 'no ADTS header found in AAC PES'), (u = !0)),
                            p.a.error('TsParser._parseAACPES ERROR:'.concat(h)),
                            u)
                          )
                            this.mse && this.mse.onParseError(At);
                          else {
                            var _ = function (e) {
                              (d.config = e.config),
                                (d.audiosamplerate = e.samplerate),
                                (d.channelCount = e.channelCount),
                                (d.codec = e.codec),
                                (d.timescale = t.remuxer.timescale),
                                (d.duration = t.remuxer.timescale * t.duration),
                                t.mse && t.mse.setExceptionStat(C.a.DIM_LINK_STA.AUDIO_CONFIG, 1),
                                p.a.log(
                                  'TsParser._parseAACPES parsed codec:'
                                    .concat(d.codec, ',rate:')
                                    .concat(e.samplerate, ',nb channel:')
                                    .concat(e.channelCount),
                                );
                              var i = 1024e3 / e.samplerate;
                              t.mse.updateAudioConfig(
                                {
                                  audioConfig: e,
                                  codec: 'mp4a.40.5',
                                  audioSampleRate: e.samplerate,
                                  aacTimeLen: i,
                                  audioObjectType: e.adtsObjectType,
                                  audioChannelCount: e.channelCount,
                                },
                                !1,
                              );
                            };
                            if (this.mse && this.mse.isLive)
                              d.audiosamplerate ||
                                _(this._ADTStoAudioConfig(c, s, this.audioCodec));
                            else {
                              var v = this._ADTStoAudioConfig(c, s, this.audioCodec);
                              d.audiosamplerate
                                ? d.audiosamplerate !== v.samplerate &&
                                  this.mse &&
                                  this.mse.onParseError(99)
                                : _(v);
                            }
                            for (; s + 5 < l; ) {
                              if (
                                ((r = 1 & c[s + 1] ? 7 : 9),
                                (a = (3 & c[s + 3]) << 11),
                                (a |= c[s + 4] << 3),
                                (a |= (224 & c[s + 5]) >>> 5),
                                (a -= r) < 0)
                              )
                                return (
                                  p.a.error(
                                    'TsParser._parseAACPES adtsFrameSize:'
                                      .concat(a, ', adtsStartOffset:')
                                      .concat(s, ', len:')
                                      .concat(l),
                                  ),
                                  void (this.mse && this.mse.onParseError(At))
                                );
                              if (0 != a) {
                                if (!((n = s + r) + a <= l)) break;
                                for (
                                  o = Math.round(
                                    e.pts + (1024 * f * this.PES_TIMESCALE) / d.audiosamplerate,
                                  ),
                                    i = { unit: c.subarray(n, n + a), pts: o, dts: o, ts: o / 90 },
                                    !this.mse.isLive &&
                                      Ct.ptsJumpTest &&
                                      this._dtsJumpSimulate(i, 'audio'),
                                    d.samples.push(i),
                                    d.len += a,
                                    s += r + a,
                                    f++;
                                  s < l - 1 && (255 !== c[s] || 240 != (240 & c[s + 1]));
                                  s++
                                );
                                if (
                                  (this._updateInitPts(i.pts),
                                  this.vodDtsJumpHelper.checkAudioDts(i.dts),
                                  1 == localStorage._printAudioTs)
                                ) {
                                  var y = parseInt(i.dts - 90 * this.mse.curAudioDts),
                                    S = parseInt((i.dts - Ct.initPts) / 90);
                                  p.a.debug(
                                    '%cTsParser.parseAacPes dts='
                                      .concat(i.dts, ' pts=')
                                      .concat(i.dts, ' cts=')
                                      .concat(i.dts - i.dts, ' gap=')
                                      .concat(y, ' timeoffset=')
                                      .concat(S),
                                    'color:red',
                                  );
                                }
                                this.mse &&
                                  ((this.mse.curAudioDts = i.dts / 90),
                                  this.mse.setExceptionStat(C.a.DIM_LINK_STA.AUDIO_FRAME, 1)),
                                  this.aFps.addDts(o / 90);
                              } else s += r;
                            }
                            s < l && (this.aacOverFlow = c.subarray(s, l));
                          }
                        },
                      },
                      {
                        key: '_ADTStoAudioConfig',
                        value: function (t, i, s) {
                          var r = e.AdtsSampleingRates,
                            a = 1 + ((192 & t[i + 2]) >>> 6),
                            n = (60 & t[i + 2]) >>> 2;
                          if (n > r.length - 1)
                            return (
                              p.a.error(
                                'TsParser._ADTStoAudioConfig ERROR:invalid ADTS sampling index:'.concat(
                                  n,
                                ),
                              ),
                              void (this.mse && this.mse.onParseError(At))
                            );
                          var o,
                            h,
                            u = ((1 & t[i + 2]) << 2) | ((192 & t[i + 3]) >>> 6),
                            d = navigator.userAgent.toLowerCase();
                          return (
                            -1 !== d.indexOf('firefox')
                              ? n >= 6
                                ? ((a = 5), (h = new Array(4)), (o = n - 3))
                                : ((a = 2), (h = new Array(2)), (o = n))
                              : -1 !== d.indexOf('android')
                              ? -1 !== d.indexOf('mqqbrowser')
                                ? ((a = 2), (h = new Array(2)), (o = n))
                                : ((a = 5), (h = new Array(4)), (o = n))
                              : ((a = 5),
                                (h = new Array(4)),
                                (s &&
                                  (-1 !== s.indexOf('mp4a.40.29') ||
                                    -1 !== s.indexOf('mp4a.40.5'))) ||
                                (!s && n >= 6)
                                  ? (o = n - 3)
                                  : (s &&
                                      -1 !== s.indexOf('mp4a.40.2') &&
                                      (n >= 6 || 1 === u) &&
                                      ((a = 2), (h = new Array(2))),
                                    (o = n))),
                            (h[0] = a << 3),
                            (h[0] |= (14 & n) >> 1),
                            (h[1] |= (1 & n) << 7),
                            (h[1] |= u << 3),
                            5 === a &&
                              ((h[1] |= (14 & o) >> 1),
                              (h[2] = (1 & o) << 7),
                              (h[2] |= 8),
                              (h[3] = 0)),
                            {
                              config: h,
                              samplerate: r[n],
                              channelCount: u,
                              adtsObjectType: a,
                              codec: 'mp4a.40.' + a,
                            }
                          );
                        },
                      },
                      {
                        key: '_parseID3PES',
                        value: function (e) {
                          this._id3Track.samples.push(e);
                        },
                      },
                      {
                        key: '_dtsJumpSimulate',
                        value: function (e, t) {
                          if (!Ct.jumpConfig) {
                            try {
                              var i = JSON.parse(localStorage.jumpConfig);
                              if (!i.jumpTime || !i.jumpPts)
                                throw new Error('jumpConfig jumpTime is empty or jumpPts is empty');
                              Ct.jumpConfig = i;
                            } catch (e) {
                              return (
                                (Ct.ptsJumpTest = !1),
                                localStorage.removeItem('ptsJumpTest'),
                                void p.a.error('jumpConfig error', e && e.message)
                              );
                            }
                            p.a.log(
                              '%cjump time='
                                .concat(Ct.jumpConfig.jumpTime, ' jumpPts=')
                                .concat(Ct.jumpConfig.jumpPts),
                              'color:#A23400;background:#FFF5C2',
                            );
                          }
                          if (e) {
                            var s = Math.ceil((e.dts - Ct.initPts) / 9e4);
                            if (
                              ('video' === t
                                ? (s < Ct.videoTimeOffset && (s = Ct.videoTimeOffset),
                                  (Ct.videoTimeOffset = s))
                                : (s < Ct.audioTimeOffset && (s = Ct.audioTimeOffset),
                                  (Ct.audioTimeOffset = s)),
                              s < Number(Ct.jumpConfig.jumpTime))
                            )
                              return;
                            var r = Number(Ct.jumpConfig.jumpPts);
                            (e.dts += r), (e.pts += r);
                          }
                        },
                      },
                    ]),
                    e
                  );
                })();
              (It.AdtsSampleingRates = [
                96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3, 11025, 8e3, 7350,
              ]),
                (It.HEVC_NAL_VPS = 32),
                (It.HEVC_NAL_SPS = 33),
                (It.HEVC_NAL_PPS = 34),
                (It.HEVC_NAL_AUD = 35);
              var kt = It,
                Rt = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this.mse = t),
                      (this.video = i),
                      (this.playing = !1),
                      (this.seekTime = 0),
                      (this.isMuffled = !1),
                      (this.cacheVolume = 1),
                      (this.seekSuc = !1),
                      (this.seeking = !1),
                      (this.isSupportRVCB = !1),
                      i.addEventListener('pause', t.onVideoPauseBind),
                      i.addEventListener('error', t.onVideoErrorBind),
                      i.addEventListener('play', t.onVideoPlayBind),
                      i.addEventListener('playing', t.onVideoPlayingBind),
                      i.addEventListener('loadeddata', t.onVideoLoadedBind),
                      i.addEventListener('resize', t.onVideoResizeBind),
                      (this.requestVideoFrameCallbackBind =
                        this.requestVideoFrameCallback.bind(this)),
                      (this.callBackId = -1),
                      'safari' !== g.a.name &&
                        this.video &&
                        this.video.requestVideoFrameCallback &&
                        ((this.callBackId = this.video.requestVideoFrameCallback(
                          this.requestVideoFrameCallbackBind,
                        )),
                        (this.isSupportRVCB = !0));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'isSupportRequestVideoFrameCallback',
                        value: function () {
                          return this.video && this.video.requestVideoFrameCallback;
                        },
                      },
                      {
                        key: 'isSupportRequestVideoFrameCallback',
                        value: function () {
                          return this.video && this.video.requestVideoFrameCallback;
                        },
                      },
                      {
                        key: 'requestVideoFrameCallback',
                        value: function () {
                          this.mse &&
                            this.mse.requestVideoFrameCallback &&
                            this.mse.requestVideoFrameCallback(),
                            (this.callBackId = this.video.requestVideoFrameCallback(
                              this.requestVideoFrameCallbackBind,
                            ));
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          (this.seekTime = e), (this.seeking = !0);
                        },
                      },
                      {
                        key: 'realSeek',
                        value: function () {
                          if (this.seeking && this.video && this.video.buffered.length > 0) {
                            for (
                              var e = !1, t = this.video.buffered, i = this.seekTime, s = 0;
                              s < t.length;
                              s++
                            ) {
                              var r = t.start(s),
                                a = t.end(s);
                              r >= i && r - i < 1
                                ? ((i = r),
                                  (e = !0),
                                  p.a.log('MseVideo._checkSeek out off buffer, reseek='.concat(i)))
                                : i > r &&
                                  i < a &&
                                  ((e = !0),
                                  p.a.log('MseVideo._checkSeek in buffer, reseek='.concat(i)));
                            }
                            e &&
                              (this.printBuffered(),
                              (this.seeking = !1),
                              (this.video.currentTime = i),
                              p.a.log(
                                'MSEVideo.seek currentTime='
                                  .concat(this.video.currentTime, ' seekTime=')
                                  .concat(i),
                              ));
                          }
                        },
                      },
                      {
                        key: 'checkCurrentTime',
                        value: function () {
                          this.video && (this.video.currentTime = this.video.currentTime);
                        },
                      },
                      {
                        key: '_checkPlay',
                        value: function () {
                          p.a.log(
                            'MSEVideo.checkPlay seekTime='
                              .concat(this.seekTime, ' playing=')
                              .concat(this.playing, ' currentTime=')
                              .concat(this.video && this.video.currentTime),
                          ),
                            this.video && 0 === this.video.currentTime && !this.playing
                              ? (this.seekTime > 0
                                  ? (this.seekTime++, (this.video.currentTime = this.seekTime))
                                  : (this.video.currentTime += 1),
                                this._play())
                              : F.remove(this._checkPlay, this);
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          'safari' !== g.a.name || this.mse.isLive
                            ? (this._play(), F.add(this._checkPlay, this, 1e3))
                            : F.add(this._checkPlay, this, 1e3);
                        },
                      },
                      {
                        key: '_play',
                        value: function () {
                          var e = this;
                          if (this.video) {
                            var t = this.video.play();
                            t
                              ? t
                                  .then(function () {
                                    F.remove(e._checkPlay, e),
                                      p.a.log(
                                        'MSEVideo._play suc currentTime='.concat(
                                          e.video && e.video.currentTime,
                                        ),
                                      ),
                                      e.mse &&
                                        e.mse.handler._hyPlayer &&
                                        e.mse.handler._hyPlayer.roomRecordStat &&
                                        e.mse.handler._hyPlayer.roomRecordStat.roomNoRenderStat.resume(),
                                      I.a.platform === B.a.PLATFORM_TYPE_NAME.wap &&
                                        !e.playing &&
                                        e.mse &&
                                        e.mse.triggerH5PlayVideo(),
                                      (e.playing = !0);
                                  })
                                  .catch(function (t) {
                                    e.playing = !1;
                                    var i = t.toString();
                                    p.a.warn('MSEVideo.play error: '.concat(i)),
                                      e.mse &&
                                        (i.indexOf('NotAllowedError') >= 0 ||
                                          i.indexOf('request was interrupted') >= 0 ||
                                          e.video.paused) &&
                                        (e.mse && e.mse.onPauseByBrowser(),
                                        I.a.platform === B.a.PLATFORM_TYPE_NAME.wap &&
                                          F.remove(e._checkPlay, e));
                                  })
                              : (this.playing = !1);
                          } else F.remove(this._checkPlay, this);
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          this.video.pause();
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          var e = 0;
                          if (this.video) {
                            var t = this.video.buffered;
                            t.length > 0 &&
                              (e = (1e3 * (t.end(t.length - 1) - this.video.currentTime)) >> 0);
                          }
                          return e;
                        },
                      },
                      {
                        key: 'printBuffered',
                        value: function () {
                          for (var e = this.video.buffered, t = [], i = 0; i < e.length; i++)
                            t.push('['.concat(e.start(i), ', ').concat(e.end(i), ']'));
                          p.a.log(
                            'video.buffered',
                            t.join(' '),
                            'video.currentTime=',
                            this.video.currentTime,
                          );
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this.seeking && this.seekTime > 0
                            ? 1e3 * this.seekTime
                            : 1e3 * this.video.currentTime;
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          this.isMuffled ? (this.video.volume = 0) : (this.video.volume = e),
                            (this.cacheVolume = e);
                        },
                      },
                      {
                        key: 'setMuffledVolume',
                        value: function (e) {
                          (this.isMuffled = e),
                            this.isMuffled
                              ? (this.video.volume = 0)
                              : this.setVolume(this.cacheVolume);
                        },
                      },
                      {
                        key: 'getVolume',
                        value: function () {
                          return this.video.volume;
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          this.video &&
                            ((this.video.muted = e),
                            p.a.log(
                              'MSEVideo.setMuted '
                                .concat(e, ' hasVideo=')
                                .concat(!!this.videoSourceBuffer, ' hasAudio=')
                                .concat(!!this.audioSourceBuffer),
                            ));
                        },
                      },
                      {
                        key: 'getMuted',
                        value: function () {
                          return this.video ? this.video.muted : -1;
                        },
                      },
                      {
                        key: 'getVideoWidth',
                        value: function () {
                          return this.video ? this.video.videoWidth : 0;
                        },
                      },
                      {
                        key: 'getVideoHeight',
                        value: function () {
                          return this.video ? this.video.videoHeight : 0;
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this.video.removeEventListener('error', this.mse.onVideoErrorBind),
                            this.video.removeEventListener('pause', this.mse.onVideoPauseBind),
                            this.video.removeEventListener('play', this.mse.onVideoPlayBind),
                            this.video.removeEventListener('playing', this.mse.onVideoPlayingBind),
                            this.video.removeEventListener(
                              'loadeddata',
                              this.mse.onVideoLoadedBind,
                            ),
                            this.video.removeEventListener('resize', this.mse.onVideoResizeBind),
                            this.pause(),
                            this.video.removeAttribute('src'),
                            'function' == typeof this.video.load &&
                              (function () {
                                try {
                                  this.video.load();
                                } catch (e) {}
                              })(),
                            this.video &&
                              this.video.cancelVideoFrameCallback &&
                              -1 != this.callBackId &&
                              this.video.cancelVideoFrameCallback(this.callBackId),
                            (this.callBackId = -1),
                            (this.video = null),
                            (this.mse = null);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ot = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._mse = t),
                      (this._callbacks = i),
                      (this._paused = !1),
                      (this._playedTime = 0),
                      (this._pausedTs = 0),
                      (this._lastPausedTs = 0),
                      (this._lastCheckTime = 0),
                      (this._lastCheck500Time = 0),
                      (this._lastCheck500CurrntTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._paused = !1),
                            (this._playedTime = 0),
                            (this._pausedTs = 0),
                            (this._lastPausedTs = 0),
                            (this._lastCheckTime = 0),
                            (this._lastCheck500Time = 0);
                        },
                      },
                      {
                        key: 'check',
                        value: function () {
                          var e = D.a.now(),
                            t = this._mse.video.video;
                          0 != this._lastCheckTime &&
                            1 == Number(localStorage._printPauseCheck) &&
                            p.a.log('MSEPause.check', e - this._lastCheckTime, t.currentTime),
                            (!this._mse.isLive && t.currentTime <= 1) ||
                              ((this._mse.isLive ||
                                !this._mse.handler ||
                                this._mse.handler.started) &&
                                (0 !== this._playedTime &&
                                  (t.currentTime === this._playedTime
                                    ? this._paused
                                      ? this._fixedCurrentTime(e, t)
                                      : this._setPaused(e, t)
                                    : this._paused && this._setResume(e, t)),
                                (this._playedTime = t.currentTime),
                                (this._lastCheckTime = e)));
                        },
                      },
                      {
                        key: '_setPaused',
                        value: function (e, t) {
                          (this._paused = !0),
                            (this._pausedTs = e),
                            (this._lastPausedTs = e),
                            this._log('_setPaused', t),
                            this._callbacks.pause(e);
                        },
                      },
                      {
                        key: '_setResume',
                        value: function (e, t) {
                          var i = e - this._pausedTs;
                          (this._paused = !1),
                            (this._pausedTs = 0),
                            (this._lastPausedTs = 0),
                            this._log('_setResume', t),
                            this._callbacks.resume(e, i);
                        },
                      },
                      {
                        key: '_fixedCurrentTime',
                        value: function (e, t) {
                          e - this._lastPausedTs > 500 &&
                            (this._fixedByBuffered(t) || this._fixedByDts(t)) &&
                            (this._lastPausedTs = e);
                        },
                      },
                      {
                        key: '_fixedByBuffered',
                        value: function (e) {
                          if ('flv' === this._mse.videoType) {
                            var t = e.buffered.length;
                            if (t > 0) {
                              var i = e.buffered.start(t - 1),
                                s = e.buffered.end(t - 1);
                              if (i > e.currentTime && s - i > 1)
                                return this._log('_fixedByBuffered', e), (e.currentTime = i), !0;
                            }
                          } else if ('ts' === this._mse.videoType && !this._mse.isLive) {
                            var r = ((this._mse.handler || {}).playlist || {}).currFrag,
                              a = 2;
                            r && (a = r.duration);
                            for (var n = e.buffered.length, o = 0; o < n; o++) {
                              var h = e.buffered.start(o),
                                u = e.buffered.end(o);
                              if (
                                o >= 1 &&
                                e.buffered.end(o - 1) - e.currentTime <= 1 &&
                                h > e.currentTime &&
                                h <= e.currentTime + a &&
                                u - h > 1
                              )
                                return (
                                  p.a.log(
                                    '%cMSEPause.fixedByBuffered currentTime='
                                      .concat(e.currentTime, ' fixed time=')
                                      .concat(h),
                                    'color:#A23400;background:#FFF5C2',
                                  ),
                                  (e.currentTime = h),
                                  !0
                                );
                            }
                          }
                          return !1;
                        },
                      },
                      {
                        key: '_fixedByDts',
                        value: function (e) {
                          return (
                            !!(this._mse.getBufferLen() > 2e3 && this._mse.isLive) &&
                            (this._log('_fixedByDts', e), (e.currentTime += 1), !0)
                          );
                        },
                      },
                      {
                        key: '_log',
                        value: function (e, t, i) {
                          this._mse.video.printBuffered();
                          var s = this._mse.getBufferLen();
                          'ts' === this._mse.videoType &&
                            !this._mse.isLive &&
                            this._mse.handler &&
                            (s = this._mse.handler.getBufferLen()),
                            p.a.log(
                              'MSEPause('
                                .concat(this._mse._num_, ').')
                                .concat(e, ' readyState=')
                                .concat(t.readyState, ' currentTime=')
                                .concat(t.currentTime, ' buf=')
                                .concat(s, ' dts=')
                                .concat(this._mse.getCurrentDts(), ' ')
                                .concat(i || ''),
                            );
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this._paused;
                        },
                      },
                      {
                        key: 'pausedTs',
                        get: function () {
                          return this._pausedTs;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                bt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.emptyTs = 0),
                      (this.emptyTime = 0),
                      (this.emptyCnt = 0),
                      (this.aiEmptyTime = 0),
                      (this.aiEmptyCnt = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this.emptyTs = 0), (this.emptyTime = 0), (this.emptyCnt = 0);
                        },
                      },
                      {
                        key: 'getStats',
                        value: function () {
                          var e = { emptyTime: this.emptyTime, emptyCnt: this.emptyCnt };
                          return (this.emptyTime = 0), (this.emptyCnt = 0), e;
                        },
                      },
                      {
                        key: 'getAiStats',
                        value: function () {
                          var e = { aiEmptyTime: this.aiEmptyTime, aiEmptyCnt: this.aiEmptyCnt };
                          return (this.aiEmptyTime = 0), (this.aiEmptyCnt = 0), e;
                        },
                      },
                      {
                        key: 'checkBuffer',
                        value: function (e, t) {
                          t < 200 && 0 === this.emptyTs
                            ? (this.emptyTs = e)
                            : t > 500 &&
                              this.emptyTs > 0 &&
                              ((this.emptyTime += e - this.emptyTs),
                              (this.aiEmptyTime += e - this.emptyTs),
                              (this.emptyTs = 0),
                              this.emptyCnt++,
                              this.aiEmptyCnt++);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                wt = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._handler = t),
                      (this._cnt = 0),
                      (this._duration = 0),
                      (this._pauseTs = 0),
                      (this._aiCnt = 0),
                      (this._aiDuration = 0),
                      (this._aiAutoCnt = 0),
                      (this._aiAutoDuration = 0),
                      (this._videoBlockBufferList = []),
                      (this._videoBlockContinueList = []),
                      (this._blockBadDurationList = []),
                      (this._blockBadContinueBufferList = []),
                      (this._autoReportProps = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          this.resetStat(),
                            this.resetAiStat(),
                            this.resetAutoAiStat(),
                            (this._pauseTs = 0),
                            (this._autoReportProps = null);
                        },
                      },
                      {
                        key: 'getCnt',
                        value: function () {
                          return this._cnt;
                        },
                      },
                      {
                        key: 'resetStat',
                        value: function () {
                          (this._cnt = 0),
                            (this._duration = 0),
                            (this._videoBlockBufferList.length = 0),
                            (this._videoBlockContinueList.length = 0);
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          0 === this._pauseTs && (this._pauseTs = D.a.now()),
                            this.getAutoReportProps(),
                            this._handler &&
                              (this._videoBlockBufferList.push(this._handler.getBufferLen()),
                              this._videoBlockContinueList.push(
                                this._handler.getVideoContinueBuffer(),
                              ));
                        },
                      },
                      {
                        key: 'resume',
                        value: function () {
                          this.calc(!0);
                        },
                      },
                      {
                        key: 'calc',
                        value: function (e) {
                          if (this._pauseTs > 0) {
                            var t = D.a.now(),
                              i = t - this._pauseTs;
                            i >= 200 &&
                              (this._cnt++,
                              this._aiCnt++,
                              this._aiAutoCnt++,
                              (this._duration += i),
                              (this._aiDuration += i),
                              (this._aiAutoDuration += i),
                              this._blockBadDurationList.push(i),
                              this._blockBadContinueBufferList.push(this._handler.getBufferLen())),
                              i >= I.a.blockBadCfg[0] && this.setBlockBad(i),
                              e
                                ? (this._pauseTs = 0)
                                : ((this._pauseTs = t), this.getAutoReportProps());
                          }
                        },
                      },
                      {
                        key: 'resetAiStat',
                        value: function () {
                          (this._aiCnt = 0), (this._aiDuration = 0);
                        },
                      },
                      {
                        key: 'resetAutoAiStat',
                        value: function () {
                          (this._aiAutoCnt = 0),
                            (this._aiAutoDuration = 0),
                            (this._blockBadDurationList.length = 0),
                            (this._blockBadContinueBufferList.length = 0);
                        },
                      },
                      {
                        key: 'getAiStat',
                        value: function () {
                          var e = { aiCnt: this._aiCnt, aiDuration: this._aiDuration };
                          return this.resetAiStat(), e;
                        },
                      },
                      {
                        key: 'getAiAutoStat',
                        value: function () {
                          var e = {
                            aiAutoCnt: this._aiAutoCnt,
                            aiAutoDuration: this._aiAutoDuration,
                            aiAutoBlockBadDurationList: Object(pe.a)(this._blockBadDurationList),
                            aiAutoBlockBadContinueBufferList: Object(pe.a)(
                              this._blockBadContinueBufferList,
                            ),
                          };
                          return this.resetAutoAiStat(), e;
                        },
                      },
                      {
                        key: 'record',
                        value: function (e) {
                          this.calc(!1),
                            e.setCore(C.a.CORE.VIDEO_BLOCK_COUNT, this._cnt),
                            e.setCore(C.a.CORE.VIDEO_BLOCK_DURATION, this._duration),
                            this.performanceCalc(e),
                            this.resetStat();
                        },
                      },
                      {
                        key: 'performanceCalc',
                        value: function (e) {
                          var t = this,
                            i = I.a.perfBlockCfg[0],
                            s = 0,
                            r = 0;
                          this._videoBlockBufferList.map(function (e, a) {
                            var n = t._videoBlockContinueList[a];
                            e > i ? (n > i && r++, s++) : n > I.a.perfBlockCfg[1] && (s++, r++);
                          }),
                            p.a.log(
                              'PauseStat.performanceCalc, continueBufferCnt='
                                .concat(r, ',bufferCnt=')
                                .concat(s, ',perfBlockCnt=')
                                .concat(this._handler.perfBlockCnt),
                            ),
                            this._handler.perfBlockCnt > 0 &&
                              ((r += this._handler.perfBlockCnt),
                              (s += this._handler.perfBlockCnt)),
                            e.setCore(C.a.CORE.VIDEO_PERFPAUSE_CONTINUE_CNT, r),
                            e.setCore(C.a.CORE.VIDEO_PERFPAUSE_CNT, s),
                            this._handler.resetPerfBlockCnt();
                        },
                      },
                      {
                        key: 'recordSam',
                        value: function (e) {
                          var t = e.length,
                            i = [];
                          if (t > 0) {
                            i.push('size:'.concat(t));
                            for (var s = 0; s < t; s++) i.push('k'.concat(t - s, ':').concat(e[s]));
                          }
                          return i.join(',');
                        },
                      },
                      {
                        key: 'getAutoReportProps',
                        value: function () {
                          this._handler.handler &&
                            this._handler.handler.getAutoProps &&
                            (this._autoReportProps = this._handler.handler.getAutoProps());
                        },
                      },
                      {
                        key: 'setBlockBad',
                        value: function (e) {
                          var t = Math.floor(100 * I.a.blockBadCfg[1]);
                          if (!(Math.floor(100 * Math.random()) > t)) {
                            var i = this._handler.handler._hyPlayer.stat,
                              s = this._handler.handler._hyPlayer.tsdbUtil,
                              r = this._autoReportProps;
                            if (r) {
                              var a = [e],
                                n = [
                                  '',
                                  r.videoBuffers,
                                  '',
                                  r.blockDurationSample,
                                  r.continueBufferSample,
                                  r.realKbpsSample,
                                  '',
                                  r.recvFps,
                                ],
                                o = i.createAct(C.a.ACT.BLOCK_BAD, { value: a, str: n });
                              p.a.log('PauseStat.setBlockBad getAutoProps metric=', o),
                                s.sendMetrics([o]);
                            }
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Lt = i(55),
                Mt = i(30),
                Vt = i(56);
              function Nt(e, t) {
                return (
                  Object(Lt.a)(e) ||
                  (function (e, t) {
                    if ('undefined' != typeof Symbol && Symbol.iterator in Object(e)) {
                      var i = [],
                        s = !0,
                        r = !1,
                        a = void 0;
                      try {
                        for (
                          var n, o = e[Symbol.iterator]();
                          !(s = (n = o.next()).done) && (i.push(n.value), !t || i.length !== t);
                          s = !0
                        );
                      } catch (e) {
                        (r = !0), (a = e);
                      } finally {
                        try {
                          s || null == o.return || o.return();
                        } finally {
                          if (r) throw a;
                        }
                      }
                      return i;
                    }
                  })(e, t) ||
                  Object(Mt.a)(e, t) ||
                  Object(Vt.a)()
                );
              }
              var Ft = [95, 112, 101, 114, 102],
                Bt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.bitrate = 4e3),
                      (this.blockCount = 1),
                      (this.continueBuffer = 2e3),
                      (this.map = new Map()),
                      (this.key = ''),
                      this._initKey(),
                      this._initLocal();
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: '_initKey',
                        value: function () {
                          for (var e = 0; e < Ft.length; e++)
                            this.key += String.fromCharCode(Ft[e]);
                        },
                      },
                      {
                        key: 'setConfig',
                        value: function (e) {
                          (this.bitrate = e.perfBitrate || 4e3),
                            (this.blockCount = e.perfCnt || 1),
                            (this.continueBuffer = e.perfBuf || 2e3);
                        },
                      },
                      {
                        key: '_initLocal',
                        value: function () {
                          if (localStorage.hasOwnProperty(this.key)) {
                            for (
                              var e = localStorage[this.key].split(','), t = '', i = !0, s = 0;
                              s < e.length;
                              s++
                            ) {
                              var r = Number(e[s]);
                              if (isNaN(r)) {
                                i = !1;
                                break;
                              }
                              t += String.fromCharCode(Number(e[s]));
                            }
                            i && t.length > 0 && this._parseLocal(t);
                          }
                        },
                      },
                      {
                        key: '_parseLocal',
                        value: function (e) {
                          for (var t = e.split('|'), i = 0; i < t.length; i++) {
                            var s = t[i].split(':'),
                              r = Number(s[0]),
                              a = s[1].split(',');
                            this.map.set(r, a);
                          }
                        },
                      },
                      {
                        key: 'checkLocal',
                        value: function (e, t) {
                          if (((e = Number(e)), this.map.has(e))) {
                            var i = this.map.get(e);
                            return this._hasBitrate(i, t);
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'checkLive',
                        value: function (e, t, i, s) {
                          if (
                            ((e = Number(e)),
                            t >= this.bitrate && i > this.blockCount && s > this.continueBuffer)
                          ) {
                            var r = this.map.get(e);
                            if ((r || ((r = []), this.map.set(e, r)), !this._hasBitrate(r, t)))
                              return (
                                r.push(t),
                                this._saveMap(),
                                p.a.log(
                                  'PausePerformance.checkLive pid='
                                    .concat(e, ' bitrate=')
                                    .concat(t),
                                ),
                                !0
                              );
                          }
                          return !1;
                        },
                      },
                      {
                        key: '_hasBitrate',
                        value: function (e, t) {
                          for (var i = 0; i < e.length; i++)
                            if (Number(t) === Number(e[i])) return !0;
                          return !1;
                        },
                      },
                      {
                        key: '_saveMap',
                        value: function () {
                          var e,
                            t = [],
                            i = Object(Se.a)(this.map.entries());
                          try {
                            for (i.s(); !(e = i.n()).done; ) {
                              var s = Nt(e.value, 2),
                                r = s[0],
                                a = s[1];
                              t.push(r + ':' + a.join(','));
                            }
                          } catch (e) {
                            i.e(e);
                          } finally {
                            i.f();
                          }
                          if (t.length > 0) {
                            for (var n = t.join('|'), o = [], h = 0; h < n.length; h++)
                              o.push(n.charCodeAt(h));
                            localStorage[this.key] = o.join(',');
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ut = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.startDts = 0),
                      (this.endDts = 0),
                      (this.endFrameId = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'isDisconnectDts',
                        value: function (e) {
                          return this.endDts > 0 && e - this.endDts > 200;
                        },
                      },
                      {
                        key: 'isDisconnectFrame',
                        value: function (e) {
                          return this.endFrameId > 0 && e - this.endFrameId != 1;
                        },
                      },
                      {
                        key: 'getContinueBuffer',
                        value: function (e) {
                          return e >= this.startDts && e <= this.endDts ? this.endDts - e : 0;
                        },
                      },
                      {
                        key: 'addBuffer',
                        value: function (e, t) {
                          0 === this.startDts && (this.startDts = t),
                            (this.endDts = t),
                            (this.endFrameId = e);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                xt = 'timer',
                Ht = 'record',
                Wt = 'resume',
                Gt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._frameId = 0),
                      (this._lastFrameId = 0),
                      (this._startFrameId = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._frameId = 0), (this._lastFrameId = 0), (this._startFrameId = 0);
                        },
                      },
                      {
                        key: 'setStartFrameId',
                        value: function (e) {
                          (this._startFrameId = e), (this._lastFrameId = this._frameId);
                        },
                      },
                      {
                        key: 'getFrameId',
                        value: function (e, t) {
                          return (
                            0 === e
                              ? (this._frameId++, t > 0 && this._frameId++)
                              : (t > 0 && this._lastFrameId++,
                                (this._frameId = this._lastFrameId + (e - this._startFrameId + 1))),
                            this._frameId
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                jt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._mse = null),
                      (this._list = []),
                      (this._dtsList = []),
                      (this._tsList = []),
                      (this._currentBuffered = null),
                      (this._continueBuffer = -1),
                      (this._lastFrameTs = 0),
                      (this._startTs = 0),
                      (this._started = !1),
                      (this._lastRemoveTs = 0),
                      (this._deltaStart = Number(I.a.continueBufferDeltaStart) || 6e3),
                      (this._deltaEnd = Number(I.a.continueBufferDeltaEnd) || 3e3),
                      (this._localFrameId = new Gt()),
                      (this._printContinueBuffer = 1 == localStorage._printContinueBuffer);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setMse',
                        value: function (e) {
                          this._mse = e;
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          p.a.log('VideoBufferedList.stop'),
                            (this._startTs = 0),
                            (this._list.length = 0),
                            (this._dtsList.length = 0),
                            (this._continueBuffer = -1),
                            (this._currentBuffered = null),
                            this._localFrameId.reset(),
                            F.remove(this.onCheckFastTimer, this);
                        },
                      },
                      {
                        key: 'printInfo',
                        value: function (e) {
                          var t = [];
                          this._list.forEach(function (e) {
                            t.push('['.concat(e.startDts, ', ').concat(e.endDts, ']'));
                          }),
                            p.a.log(
                              'VideoBufferedList.print dts='
                                .concat(e, ' buffered=')
                                .concat(t.join(' ')),
                            );
                        },
                      },
                      {
                        key: 'record',
                        value: function (e) {
                          this._calc(D.a.now(), Ht),
                            e.setCore(
                              C.a.CORE.VIDEO_CONTINUE_BUFFER,
                              this.getVideoContinueBuffer(),
                            ),
                            (this._continueBuffer = -1);
                        },
                      },
                      {
                        key: 'start',
                        value: function () {
                          0 === this._startTs &&
                            (p.a.log('VideoBufferList.start'),
                            (this._startTs = D.a.now()),
                            F.add(this.onCheckFastTimer, this, 50));
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function (e) {
                          if (0 === this._lastRemoveTs) this._lastRemoveTs = e;
                          else if (this._lastRemoveTs > 0 && e - this._lastRemoveTs > 5e3) {
                            this._lastRemoveTs = e;
                            for (
                              var t = this._mse.getCurrentDts() - 2e4, i = this._dtsList.length - 1;
                              i >= 0;
                              i--
                            )
                              if (this._dtsList[i] < t) {
                                (this._dtsList = this._dtsList.slice(i)),
                                  (this._tsList = this._tsList.slice(i));
                                break;
                              }
                          }
                          var s = e - this._lastFrameTs;
                          this._lastFrameTs > 0 &&
                            s > 100 &&
                            (this._calc(e, xt), (this._lastFrameTs = e));
                        },
                      },
                      {
                        key: 'addSample',
                        value: function (e, t, i, s) {
                          var r = D.a.now();
                          this._tsList.push(r),
                            this._dtsList.push(t),
                            (0 === this._lastFrameTs || i) && this._localFrameId.setStartFrameId(e),
                            (this._lastFrameTs = r);
                          var a = this._localFrameId.getFrameId(e, s);
                          (this._currentBuffered && !this._currentBuffered.isDisconnectFrame(a)) ||
                            ((this._currentBuffered = new Ut()),
                            this._list.push(this._currentBuffered),
                            this._list.length > 10 &&
                              t - this._list[0].endDts > 3e5 &&
                              this._list.shift()),
                            this._currentBuffered.addBuffer(a, t);
                        },
                      },
                      {
                        key: '_calc',
                        value: function (e, t) {
                          var i = e - this._deltaStart,
                            s = e - this._deltaEnd;
                          if ((t === Ht || t === Wt) && -1 === this._continueBuffer)
                            return (
                              (this._continueBuffer = this._getContinueBuffer(
                                this._mse.getCurrentDts(),
                              )),
                              void (
                                this._printContinueBuffer &&
                                this.printInfo(
                                  this._mse.getCurrentDts() +
                                    ' continueBuffer='
                                      .concat(this._continueBuffer, ' from=')
                                      .concat(t, ' '),
                                )
                              )
                            );
                          if (!(0 === this._startTs || i < this._startTs)) {
                            for (
                              var r = this._getDtsBound(i, s),
                                a = r.startDts,
                                n = r.endDts,
                                o = Number.MAX_SAFE_INTEGER,
                                h = this._dtsList.length,
                                u = 0;
                              u < h;
                              u++
                            ) {
                              var d = this._dtsList[u];
                              if (d > n) break;
                              if (
                                (d >= a && d <= n && (o = Math.min(o, this._getContinueBuffer(d))),
                                0 === o)
                              )
                                break;
                            }
                            o === Number.MAX_SAFE_INTEGER && (o = 0),
                              (-1 === this._continueBuffer || this._continueBuffer > o) &&
                                ((this._continueBuffer = o),
                                this._printContinueBuffer &&
                                  this.printInfo(
                                    this._mse.getCurrentDts() +
                                      ' now='
                                        .concat(e, ' startDts=')
                                        .concat(a, ' endDts=')
                                        .concat(n, ' continueBuffer=')
                                        .concat(o, ' from=')
                                        .concat(t),
                                  ));
                          }
                        },
                      },
                      {
                        key: '_getDtsBound',
                        value: function (e, t) {
                          for (
                            var i = this._tsList.length, s = Number.MAX_SAFE_INTEGER, r = 0, a = 0;
                            a < i;
                            a++
                          ) {
                            var n = this._tsList[a];
                            if (n >= e && n <= t) {
                              var o = this._dtsList[a];
                              o < s && (s = o), o > r && (r = o);
                            } else if (n > t) break;
                          }
                          return { startDts: s, endDts: r };
                        },
                      },
                      {
                        key: '_getContinueBuffer',
                        value: function (e) {
                          for (
                            var t = 0, i = 0;
                            i < this._list.length && 0 === (t = this._list[i].getContinueBuffer(e));
                            i++
                          );
                          return t;
                        },
                      },
                      {
                        key: 'getVideoContinueBuffer',
                        value: function () {
                          var e = 0;
                          if (this._mse && this._mse.getCurrentDts) {
                            var t = this._mse.getCurrentDts();
                            e = this._getContinueBuffer(t);
                          }
                          return e;
                        },
                      },
                      {
                        key: 'continueBuffer',
                        get: function () {
                          return this._continueBuffer;
                        },
                        set: function (e) {
                          this._continueBuffer = e;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Yt = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.seiList = []),
                      (this.player = t),
                      (this.lastTs = -1),
                      (this.internal = 10),
                      (this.timerStart = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'add',
                        value: function (e, t) {
                          var i = this.seiList.length;
                          if (this.seiList.length > 0)
                            for (
                              i = this.seiList.length - 1;
                              i > 0 && !(e > this.seiList[i].timeStamp);
                              i--
                            );
                          this.seiList.splice(i + 1, 0, { timeStamp: e, data: t }),
                            this.timerStart ||
                              ((this.timerStart = !0),
                              setTimeout(this.checkDispatchSei.bind(this), this.internal));
                        },
                      },
                      {
                        key: 'checkDispatchSei',
                        value: function () {
                          if (this.timerStart) {
                            for (
                              var e = this.player.getCurrentRealTime(), t = 0, i = null;
                              t < this.seiList.length - 2;

                            ) {
                              if (
                                e >= this.seiList[t].timeStamp &&
                                this.seiList[t + 1].timeStamp > e
                              ) {
                                (i = this.seiList[t + 1].data),
                                  this.player.onH264Sei(i, this.seiList[t + 1].timeStamp),
                                  this.seiList.splice(0, t + 1);
                                break;
                              }
                              t++;
                            }
                            setTimeout(this.checkDispatchSei.bind(this), this.internal);
                          }
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this.seiList = []),
                            (this.player = null),
                            (this.lastTs = -1),
                            (this.timerStart = !1);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                qt = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.volumeList = []),
                      (this.player = t),
                      (this.lastTs = -1),
                      (this.internal = 100),
                      (this.timerStart = !1),
                      (this.dispatchMap = new Map());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'addMixAudio',
                        value: function (e, t) {
                          if (e.length > 0)
                            for (var i = e.split(','), s = 0; s < i.length; s++) this.add(t, i[s]);
                        },
                      },
                      {
                        key: 'add',
                        value: function (e, t) {
                          var i = this.volumeList.length;
                          if (this.volumeList.length > 0)
                            for (
                              i = this.volumeList.length - 1;
                              i > 0 && !(e > this.volumeList[i].timeStamp);
                              i--
                            );
                          this.volumeList.splice(i + 1, 0, { timeStamp: e, data: t }),
                            this.timerStart ||
                              ((this.timerStart = !0),
                              setTimeout(this.checkDispatchVolume.bind(this), this.internal));
                        },
                      },
                      {
                        key: 'checkDispatchVolume',
                        value: function () {
                          var e = this;
                          if (this.timerStart) {
                            var t = this.player.getCurrentRealTime(),
                              i = 0;
                            for (
                              this.dispatchMap.clear();
                              this.volumeList[i] && this.volumeList[i].timeStamp < t;

                            ) {
                              var s = this.volumeList[i].data.split('_');
                              s.length > 1 && this.dispatchMap.set(s[0], s[1]), i++;
                            }
                            this.dispatchMap.forEach(function (t, i, s) {
                              e.player.onScriptVolumeInfo(i, t);
                            }),
                              this.dispatchMap.clear(),
                              this.volumeList.splice(0, i),
                              this.volumeList.length > 0
                                ? setTimeout(this.checkDispatchVolume.bind(this), this.internal)
                                : (this.timerStart = !1);
                          }
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this.volumeList = []),
                            (this.player = null),
                            (this.lastTs = -1),
                            (this.timerStart = !1);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Kt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.type = -1),
                      (this.sn = 0),
                      (this.samples = []),
                      (this.firstDts = -1e4),
                      (this.playDts = 0),
                      (this.lastSampleDts = 0),
                      (this.setPlayDtsCallback = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getInfo',
                        value: function () {
                          return 'size='
                            .concat(this.samples.length, '=[')
                            .concat(this.samples.length > 0 ? this.samples[0].ts : 0, ', ')
                            .concat(
                              this.samples.length > 0
                                ? this.samples[this.samples.length - 1].ts
                                : 0,
                              ']',
                            );
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this.samples = [];
                        },
                      },
                      {
                        key: 'clear',
                        value: function () {
                          (this.samples = []),
                            (this.firstDts = -1e4),
                            (this.playDts = 0),
                            (this.lastSampleDts = 0);
                        },
                      },
                      {
                        key: 'addSample',
                        value: function (e, t) {
                          if (this.lastSampleDts > 0) {
                            var i = e.ts - this.lastSampleDts;
                            (i > 100 || i < -100) &&
                              p.a.warn(
                                'BufferFrame.addSample type='
                                  .concat(this.type, ' isShield=')
                                  .concat(t, ' dis=')
                                  .concat(i, ' lastDts=')
                                  .concat(this.lastSampleDts, ' curDts=')
                                  .concat(e.ts),
                              );
                          }
                          return (
                            (this.lastSampleDts = e.ts),
                            this.samples.push(e),
                            this._setFirstDts(e.ts),
                            e.ts - this.playDts
                          );
                        },
                      },
                      {
                        key: '_setFirstDts',
                        value: function (e) {
                          -1e4 === this.firstDts &&
                            ((this.firstDts = e),
                            (this.playDts = e),
                            this.setPlayDtsCallback && this.setPlayDtsCallback());
                        },
                      },
                      {
                        key: '_createTrack',
                        value: function (t) {
                          return {
                            type: t,
                            id: t === e.TYPES.video ? 1 : 2,
                            sn: 0,
                            samples: [],
                            len: 0,
                            duration: 0,
                            startDts: -1,
                            endDts: 0,
                            naluCnt: 0,
                          };
                        },
                      },
                      {
                        key: 'getTrack',
                        value: function (e) {
                          var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                            i = this._createTrack(this.type),
                            s = this._fillTrack(i, e, t);
                          return (
                            s > 0 && this.samples.splice(0, s),
                            i.endDts > 0 &&
                              ((i.playDts = this.playDts), (i.sn = this.sn), this.sn++),
                            i
                          );
                        },
                      },
                      {
                        key: '_fillTrack',
                        value: function (e, t, i) {
                          return 0;
                        },
                      },
                      {
                        key: '_addTrack',
                        value: function (e, t) {
                          e.samples.push(t),
                            -1 === e.startDts && (e.startDts = t.ts),
                            (e.endDts = t.ts),
                            t.av1Bytes && (e.bytes = t.av1Bytes);
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          var e = this.samples.length;
                          if (e > 1) {
                            var t = this.samples[0];
                            return this.samples[e - 1].ts - t.ts;
                          }
                          return 0;
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return this.samples.length;
                        },
                      },
                      {
                        key: 'removeExpireBuffer',
                        value: function (e, t) {
                          var i = this;
                          (this.samples = this.samples.filter(function (s) {
                            if (s.ts >= e - i.aacTimeLen) return s;
                            1 === Number(localStorage._printAVTrack) &&
                              2 == t &&
                              p.a.log(
                                'BufferFrame.removeExpireBuffer, sample.ts='
                                  .concat(s.ts, ', videoDts=')
                                  .concat(e),
                              );
                          })),
                            this.samples.length > 0 && (this.playDts = this.samples[0].ts);
                        },
                      },
                      {
                        key: 'recoverBuffer',
                        value: function () {
                          var e,
                            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                          t.length <= 0 ||
                            ((this.playDts = t[0].ts),
                            (e = this.samples).splice.apply(e, [0, 0].concat(Object(pe.a)(t))));
                        },
                      },
                    ]),
                    e
                  );
                })();
              Kt.TYPES = { video: 'video', audio: 'audio' };
              var Jt = Kt,
                zt = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return Object(s.a)(this, i), ((e = t.call(this)).type = Jt.TYPES.video), e;
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: '_setFirstDts',
                        value: function (e) {
                          -1e4 === this.firstDts &&
                            p.a.log('BufferFrameVideo._setFirstDts='.concat(e)),
                            Object(me.a)(Object(_e.a)(i.prototype), '_setFirstDts', this).call(
                              this,
                              e,
                            );
                        },
                      },
                      {
                        key: '_fillTrack',
                        value: function (e, t, i) {
                          for (
                            var s = 0, r = this.samples.length, a = this.playDts + t, n = 0;
                            n < r;
                            n++
                          ) {
                            var o = this.samples[n];
                            if (o.ts >= a) {
                              e.endDts = o.ts;
                              break;
                            }
                            s++, this._addTrack(e, o);
                          }
                          return e.endDts > 0 && (this.playDts = e.endDts), s;
                        },
                      },
                      {
                        key: '_addTrack',
                        value: function (e, t) {
                          Object(me.a)(Object(_e.a)(i.prototype), '_addTrack', this).call(
                            this,
                            e,
                            t,
                          ),
                            (e.naluCnt += t.units.length),
                            (e.len += t.len);
                        },
                      },
                    ]),
                    i
                  );
                })(Jt),
                Qt = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e, r) {
                    var a;
                    return (
                      Object(s.a)(this, i),
                      ((a = t.call(this)).shieldType = e),
                      (a.type = Jt.TYPES.audio),
                      (a.needEmptyAudioFrame = !0),
                      (a.isPureAudio = !1),
                      (a.lastAacTs = 0),
                      (a.webcodecType = r),
                      (a.webcodecsEmptyFrameInited = !1),
                      (a.audioObjectType = 5),
                      (a.audioChannelCount = 1),
                      (a.audioSampleRate = 22050),
                      (a.aacTimeLen = 1024e3 / a.audioSampleRate),
                      (a.aacEmptyDuration = 0),
                      (a.emptyDuration = 0),
                      a
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'resetAudioDts',
                        value: function () {
                          this.clear();
                        },
                      },
                      {
                        key: 'addSample',
                        value: function (e, t) {
                          return (
                            this.webcodecType != B.a.PLAYER_CORE_TYPE.WEBCODECS ||
                              this.webcodecsEmptyFrameInited ||
                              ((this.webcodecsEmptyFrameInited = !0),
                              Et.setWebcodeccEmptyFrame(e.unit)),
                            (e.empty = 0),
                            Object(me.a)(Object(_e.a)(i.prototype), 'addSample', this).call(
                              this,
                              e,
                              t,
                            )
                          );
                        },
                      },
                      {
                        key: '_setFirstDts',
                        value: function (e) {
                          0 === this.firstDts &&
                            p.a.log('BufferFrameAudio._setFirstDts='.concat(e)),
                            this.playDts > 0 &&
                              0 === this.firstDts &&
                              e > this.playDts &&
                              e - this.playDts < this.aacTimeLen &&
                              (p.a.log(
                                'BufferFrameAudio._setFirstDts resetPlayDts '
                                  .concat(this.playDts, ' to ')
                                  .concat(e),
                              ),
                              (this.playDts = e)),
                            Object(me.a)(Object(_e.a)(i.prototype), '_setFirstDts', this).call(
                              this,
                              e,
                            );
                        },
                      },
                      {
                        key: 'alignPlayDts',
                        value: function (e) {
                          if (0 === this.playDts)
                            p.a.log('BufferFrameAudio.alignPlayDts videoPlayDts='.concat(e)),
                              (this.playDts = e);
                          else if (e > this.playDts) {
                            var t = this.playDts;
                            this.playDts = e;
                            for (var i = 0; this.samples.length > 0 && this.samples[0].ts < e; )
                              i++, this.samples.shift();
                            p.a.log(
                              'BufferFrameAudio.alignPlayDts audioPlayDts='
                                .concat(t, ' to ')
                                .concat(e, ', clear samples=')
                                .concat(i),
                            );
                          }
                        },
                      },
                      {
                        key: '_fillTrack',
                        value: function (e, t, i) {
                          if (0 === this.playDts) return 0;
                          for (
                            var s = t,
                              r = this.playDts + this.aacTimeLen,
                              a = r,
                              n = 0,
                              o = 0,
                              h = 0,
                              u = 0,
                              d = this.samples.length,
                              c = 0,
                              l = { startDts: 0, endDts: 0 };
                            r < s;

                          ) {
                            var f = this.samples[n];
                            if (((c = Math.round(r)), I.a.dtsJumpOpen && f)) {
                              var m = c - f.ts;
                              if ((m < 0 && (m = -m), m > I.a.dtsJumpThreshold)) {
                                r = f.ts;
                                break;
                              }
                            }
                            if (f && f.ts <= c)
                              0 === l.startDts && (l.startDts = f.ts),
                                (l.endDts = f.ts),
                                n++,
                                u++,
                                this._fixDts(f, c),
                                this._addTrack(e, f),
                                this._recordEmptyDuration(h),
                                (h = 0);
                            else if (!this.isPureAudio && this.needEmptyAudioFrame) {
                              if ((o++, 1 == I.a.isAudioEmptyLimit && o >= 200)) break;
                              var _ = { unit: null, pts: 0, dts: 0, ts: 0, empty: 1 };
                              this.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                              null != Et.webcodeccEmptyFrame
                                ? (_.unit = new Uint8Array(Et.webcodeccEmptyFrame))
                                : 22050 === this.audioSampleRate && 2 === this.audioObjectType
                                ? (_.unit = new Uint8Array(Et.emptyAacFrame))
                                : (_.unit = Et.getSilentFrame(
                                    this.audioObjectType,
                                    this.audioChannelCount,
                                  )),
                                this._fixDts(_, c),
                                this._addTrack(e, _),
                                (this.aacEmptyDuration += this.aacTimeLen),
                                (h += this.aacTimeLen);
                            }
                            if ((!i && d > 1 && n >= d) || r + this.aacTimeLen >= s) break;
                            r += this.aacTimeLen;
                          }
                          return (
                            this._recordEmptyDuration(h),
                            (e.emptyFrames = o),
                            (this.playDts = r),
                            o > 0 &&
                              p.a.log(
                                'BufferFrameAudio add empty frames '
                                  .concat(o, ', objectType=')
                                  .concat(this.audioObjectType, ' channelCount=')
                                  .concat(this.audioChannelCount, ' shieldType=')
                                  .concat(this.shieldType, ' playDts=')
                                  .concat(this.playDts, ' sampleTs=')
                                  .concat(
                                    this.samples[n - 1] ? this.samples[n - 1].ts : 0,
                                    ' pick=[',
                                  )
                                  .concat(l.startDts, ',')
                                  .concat(l.endDts, '] play=[')
                                  .concat(a, ', ')
                                  .concat(s, ']'),
                              ),
                            u
                          );
                        },
                      },
                      {
                        key: '_recordEmptyDuration',
                        value: function (e) {
                          e >= I.a.audioEmptyDur && (this.emptyDuration += e);
                        },
                      },
                      {
                        key: 'hasPushBuffer',
                        value: function (e) {
                          return !(e - this.playDts > I.a.shieldAudioCfg[4]);
                        },
                      },
                      {
                        key: '_fixDts',
                        value: function (e, t) {
                          (e.pts = e.dts = 90 * t), (e.ts = t);
                        },
                      },
                      {
                        key: '_addTrack',
                        value: function (e, t) {
                          t.unit &&
                            (Object(me.a)(Object(_e.a)(i.prototype), '_addTrack', this).call(
                              this,
                              e,
                              t,
                            ),
                            (e.len += t.unit.length));
                        },
                      },
                      {
                        key: 'getEmptyeDuration',
                        value: function () {
                          var e = this.aacEmptyDuration;
                          return (this.aacEmptyDuration = 0), e;
                        },
                      },
                      {
                        key: 'getEmptyDurationHeart',
                        value: function () {
                          var e = this.emptyDuration;
                          return (this.emptyDuration = 0), Math.floor(e);
                        },
                      },
                    ]),
                    i
                  );
                })(Jt),
                Xt = (function () {
                  function e(t, i, r) {
                    Object(s.a)(this, e),
                      (this.popSize = t.bufferSize + t.popDuration),
                      (this.waitSize = t.waitSize || 2e3),
                      (this.popDuration = t.popDuration),
                      (this.timescale = t.timescale),
                      (this.isPureAudio = t.isPureAudio),
                      (this.isPureVideo = t.isPureVideo),
                      (this.webcodecType = t.webcodecType),
                      (this.remuxCb = i),
                      (this.ctrlBuffer = r),
                      (this.popMode = 0),
                      (this.dtsChecker = new nt()),
                      (this.avcChange = !1),
                      (this.inited = !0),
                      (this.hasOriginIFrame = !1),
                      (this.hasRemux = !1),
                      (this.gop = I.a.maxGop),
                      (this.lastKeyFrameDts = 0),
                      (this.paused = !1),
                      (this.switchedShieldAudio = !1),
                      (this.isShieldAudio = !1),
                      (this.isAShieldFirstPop = !1),
                      (this.shieldAudioWaitSize = 200),
                      (this.startShieldTs = 0),
                      (this.firstVideoTs = 0),
                      (this.firstAudioTs = 0),
                      (this.firstShieldAudioTs = 0),
                      (this.isShieldFastToAlign = 0),
                      (this.firstPrintVideo = !1),
                      (this.firstPrintAudio = !1),
                      (this.isSwitchShieldFailed = !1),
                      (this.videoConfig = {
                        isHevc: !1,
                        vps: null,
                        sps: null,
                        pps: null,
                        codec: '',
                        width: 0,
                        height: 0,
                      }),
                      (this.audioConfig = {
                        config: null,
                        codec: 'mp4a.40.5',
                        audioSampleRate: 22050,
                        aacTimeLen: 1024e3 / 22050,
                        audioObjectType: 5,
                        audioChannelCount: 1,
                      }),
                      (this.shieldAudioConfig = {
                        config: null,
                        codec: 'mp4a.40.5',
                        audioSampleRate: 22050,
                        aacTimeLen: 1024e3 / 22050,
                        audioObjectType: 5,
                        audioChannelCount: 1,
                      }),
                      (this.vBuffer = new zt()),
                      (this.vBuffer.setPlayDtsCallback = this.setVideoPlayDts.bind(this)),
                      (this.aBuffer = new Qt(1, this.webcodecType)),
                      (this.aShieldBuffer = new Qt(2, this.webcodecType)),
                      (this.aBuffer.isPureAudio = this.isPureAudio),
                      (this.aShieldBuffer.isPureAudio = this.isPureAudio),
                      (this._switchShieldTimeoutBind = this._switchShieldTimout.bind(this));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'resetAudioDts',
                        value: function () {
                          this.aBuffer.resetAudioDts();
                        },
                      },
                      {
                        key: '_updateGop',
                        value: function (e) {
                          !e.key ||
                            (this.hasOriginIFrame && !e.origin_iframe) ||
                            (this.lastKeyFrameDts > 0 &&
                              ((this.gop = Math.min(I.a.maxGop, e.ts - this.lastKeyFrameDts)),
                              1 == localStorage._printGop &&
                                p.a.log('BufferAV._updateGop webcodecs', this.gop)),
                            (this.lastKeyFrameDts = e.ts));
                        },
                      },
                      {
                        key: 'updateVideoConfig',
                        value: function (e, t) {
                          (this.videoConfig = e),
                            (this.avcChange = t),
                            (this.firstPrintVideo = !1),
                            (this.firstPrintAudio = !1);
                        },
                      },
                      {
                        key: 'updateAudioConfig',
                        value: function (e, t, i) {
                          1 == t
                            ? (p.a.log(
                                'BufferAV.updateAudioConfig.common, first='.concat(i),
                                JSON.stringify(e),
                              ),
                              (this.audioConfig = e),
                              (this.aBuffer.audioSampleRate = e.audiosamplerate),
                              (this.aBuffer.aacTimeLen = e.aacTimeLen),
                              (this.aBuffer.audioObjectType = e.audioObjectType),
                              (this.aBuffer.audioChannelCount = e.audioChannelCount))
                            : (t = 2) &&
                              (p.a.log(
                                'BufferAV.updateAudioConfig.shield, first='.concat(i),
                                JSON.stringify(e),
                              ),
                              (this.shieldAudioConfig = e),
                              (this.aShieldBuffer.audioSampleRate = e.audiosamplerate),
                              (this.aShieldBuffer.aacTimeLen = e.aacTimeLen),
                              (this.aShieldBuffer.audioObjectType = e.audioObjectType),
                              (this.aShieldBuffer.audioChannelCount = e.audioChannelCount));
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          (this.firstVideoTs = 0),
                            (this.firstAudioTs = 0),
                            (this.firstShieldAudioTs = 0),
                            (this.remuxCb = null),
                            (this.hasRemux = !1),
                            (this.switchedShieldAudio = !1),
                            (this.isAShieldFirstPop = !1),
                            (this.isShieldFastToAlign = !1),
                            this.vBuffer.destroy(),
                            this.aBuffer.destroy(),
                            this.aShieldBuffer.destroy(),
                            F.remove(this._switchShieldTimeoutBind, this);
                        },
                      },
                      {
                        key: 'clearShieldAudio',
                        value: function () {
                          this.aShieldBuffer.clear(), (this.switchedShieldAudio = !1);
                        },
                      },
                      {
                        key: 'addSample',
                        value: function (t) {
                          (this.inited = !1),
                            t.type === e.TYPES.avc || t.type === e.TYPES.av01
                              ? (this.dtsChecker.isVideoDtsDiffLarge(t.ts), this._addSampleVideo(t))
                              : t.type === e.TYPES.aac &&
                                (this.dtsChecker.isAudioDtsDiffLarge(t.ts),
                                this._addSmapleAudio(t));
                        },
                      },
                      {
                        key: 'switchShieldAudio',
                        value: function (e) {
                          p.a.log('BufferAV.switchShieldAudio, yes='.concat(e)),
                            (this.isShieldAudio = e),
                            e
                              ? ((this.isStartShieldAudio = !1),
                                (this.startShieldTs = 0),
                                (this.isFirstShieldAvc = !1),
                                (this.isFirstDelteShieldAac = !1),
                                (this.isAShieldFirstPop = !1),
                                (this.isShieldFastToAlign = !1),
                                (this.isSwitchShieldFailed = !1),
                                F.once(this._switchShieldTimeoutBind, this, I.a.shieldAudioCfg[2]))
                              : (F.remove(this._switchShieldTimeoutBind, this),
                                this.switchedShieldAudio && this.clearShieldAudio());
                        },
                      },
                      {
                        key: '_switchShieldTimout',
                        value: function () {
                          this._switchShieldAudioFailed(1);
                          var e = this.aShieldBuffer.samples.length,
                            t = this.vBuffer.samples.length;
                          p.a.warn(
                            'BufferAv._switchShieldTimout, shieldBuffelen='
                              .concat(e, ', vBufferLen=')
                              .concat(t, ', firstVideoTs=')
                              .concat(this.firstVideoTs, ', firstAudioTs=')
                              .concat(this.firstAudioTs, ', firstShieldAudioTs=')
                              .concat(this.firstShieldAudioTs),
                          ),
                            e > 0 &&
                              p.a.warn(
                                'BufferAv._switchShieldTimout, aStart='
                                  .concat(this.aShieldBuffer.samples[0].ts, ', aEnd=')
                                  .concat(this.aShieldBuffer.samples[e - 1].ts),
                              ),
                            t > 0 &&
                              p.a.warn(
                                'BufferAv._switchShieldTimout, vStart='
                                  .concat(this.vBuffer.samples[0].ts, ', vEnd=')
                                  .concat(this.vBuffer.samples[t - 1].ts),
                              );
                        },
                      },
                      {
                        key: '_getFirstShieldAVDelta',
                        value: function () {
                          var e = this.firstVideoTs,
                            t = this.firstShieldAudioTs,
                            i = 0;
                          return 0 != e && 0 != this.firstAudioTs && (i = e - t), i;
                        },
                      },
                      {
                        key: '_switchShieldAudioFailed',
                        value: function (e) {
                          p.a.warn(
                            'BufferAv._switchShieldAudioFailed switch shield audio failed, reason='
                              .concat(e, ', firstVideoTs=')
                              .concat(this.firstVideoTs, ', firstAudioTs=')
                              .concat(this.firstAudioTs, ', firstShieldAudioTs=')
                              .concat(this.firstShieldAudioTs),
                          ),
                            (this.isSwitchShieldFailed = !0),
                            this.switchedShieldAudio && this.clearShieldAudio();
                          var t = Math.abs(this._getFirstShieldAVDelta());
                          this.ctrlBuffer.onSwitchShieldAudioFail(e, t);
                        },
                      },
                      {
                        key: '_switchShieldAudioSuc',
                        value: function () {
                          if (!this.isSwitchShieldFailed) {
                            p.a.log(
                              'BufferAv._switchShieldAudioSuc switch shield audio successfully, firstVideoTs='
                                .concat(this.firstVideoTs, ', firstAudioTs=')
                                .concat(this.firstAudioTs, ', firstShieldAudioTs=')
                                .concat(this.firstShieldAudioTs),
                            );
                            var e = this._getFirstShieldAVDelta();
                            this.ctrlBuffer.onSwitchShieldAudioSuc(e);
                          }
                        },
                      },
                      {
                        key: '_shieldAuidoMute',
                        value: function (e, t) {
                          this.ctrlBuffer.shieldAuidoMute(e, t);
                        },
                      },
                      {
                        key: '_setShieldBuffer',
                        value: function (e) {
                          if (!this.isFirstShieldAvc) {
                            p.a.log(
                              'BufferAv.popBuffer.firstShieldBuffer.length',
                              this.aShieldBuffer.samples && this.aShieldBuffer.samples.length,
                            ),
                              (this.isFirstShieldAvc = !0);
                            var t = this.aShieldBuffer.samples[0].ts,
                              i = e,
                              s = e - t;
                            if (
                              (p.a.log(
                                'BufferAv.popBuffer.shield.firstDts avcFirstTs='
                                  .concat(i, ' aacFirstTs=')
                                  .concat(t, ' delta=')
                                  .concat(e - t),
                              ),
                              s < 0 && s > -I.a.shieldAudioCfg[3])
                            )
                              return (
                                this._switchShieldAudioSuc(), (this.switchedShieldAudio = !0), !0
                              );
                            if (s < -I.a.shieldAudioCfg[3])
                              return (
                                p.a.log('BufferAv.popBuffer.shield audio to fast'),
                                this._switchShieldAudioFailed(3),
                                !1
                              );
                          }
                          return !0;
                        },
                      },
                      {
                        key: '_addSampleVideo',
                        value: function (e) {
                          0 == this.firstVideoTs && (this.firstVideoTs = e.ts),
                            this.firstPrintVideo ||
                              ((this.firstPrintVideo = !0),
                              p.a.log(
                                'BufferAv.addSampleVideo firstPrint dts='
                                  .concat(e.ts, ' isKey=')
                                  .concat(e.key),
                              )),
                            e.key &&
                              e.origin_iframe &&
                              !this.hasOriginIFrame &&
                              (p.a.log(
                                'BufferAv.addSampleVideo find origin_iframe! isIframe='.concat(
                                  e.key,
                                ),
                              ),
                              (this.hasOriginIFrame = !0)),
                            !e.key &&
                              e.origin_iframe &&
                              p.a.warn(
                                'BufferAv.addSampleVideo find origin_iframe sei not in iframe',
                              ),
                            this._updateGop(e);
                          var t = this.vBuffer.addSample(e, !1);
                          if (this.isShieldAudio) {
                            var i = this.vBuffer.samples.length;
                            0 != this.firstAudioTs &&
                              0 != this.firstVideoTs &&
                              this.firstVideoTs - this.firstAudioTs >= I.a.shieldAudioCfg[4] &&
                              this._switchShieldAudioFailed(4),
                              !this.isFirstDelteShieldAac &&
                                i > 0 &&
                                this.aShieldBuffer.removeExpireBuffer(
                                  this.vBuffer.samples[0].ts,
                                  2,
                                );
                            var s = this.aShieldBuffer.getBufferLen();
                            !this.paused &&
                              t >= this.popSize &&
                              s >= this.popSize &&
                              (this.popBuffer(this.popDuration), (this.isFirstDelteShieldAac = !0));
                          } else
                            !this.paused &&
                              t > this.popSize &&
                              (0 === this.popMode
                                ? this.aBuffer.getBufferLen() > this.popSize
                                  ? this.popBuffer(this.popDuration)
                                  : t > this.waitSize &&
                                    (this.popBuffer(this.waitSize),
                                    e.ts - this.firstVideoTs > 1e4 &&
                                      0 === this.aBuffer.firstDts &&
                                      (this.popMode = 1))
                                : 1 === this.popMode && this.popBuffer(this.popDuration));
                        },
                      },
                      {
                        key: 'setVideoPlayDts',
                        value: function () {
                          this.aBuffer.alignPlayDts(this.vBuffer.playDts);
                        },
                      },
                      {
                        key: '_addSmapleAudio',
                        value: function (e) {
                          0 == this.firstAudioTs && (this.firstAudioTs = e.ts),
                            this.firstPrintAudio ||
                              ((this.firstPrintAudio = !0),
                              p.a.log('BufferAv._addSmapleAudio firstPrint dts='.concat(e.ts)));
                          var t = this.aBuffer.addSample(e, !1);
                          this.isShieldAudio ||
                            (!this.isShieldAudio &&
                              !this.paused &&
                              this.isPureAudio &&
                              t > this.popSize &&
                              this.popBuffer(this.popDuration));
                        },
                      },
                      {
                        key: 'addShieldAudioSample',
                        value: function (e) {
                          0 == this.firstShieldAudioTs && (this.firstShieldAudioTs = e.ts);
                          var t = this.aShieldBuffer.addSample(e, !0);
                          this.isShieldAudio &&
                            !this.paused &&
                            this.isPureAudio &&
                            t > this.popSize &&
                            this.popBuffer(this.popDuration);
                        },
                      },
                      {
                        key: 'getShieldWait',
                        value: function () {
                          if (this.isShieldAudio) {
                            var e = this.aShieldBuffer.getSize();
                            if (e <= 0) return !1;
                            var t = this.aShieldBuffer.samples[0].ts,
                              i = this.aShieldBuffer.samples[e - 1].ts;
                            if (!this.isAShieldFirstPop) {
                              if (i - t < I.a.shieldAudioCfg[5])
                                return p.a.log('BufferAv.popBuffer.waitShield', i - t), !1;
                              p.a.log('BufferAv.popBuffer.waitShield success', i - t),
                                (this.isAShieldFirstPop = !0);
                            }
                          }
                          return !0;
                        },
                      },
                      {
                        key: 'popBuffer',
                        value: function (e) {
                          var t = 0,
                            i = 0;
                          if (
                            (this.isStartShieldAudio ||
                              ((this.startShieldTs = D.a.now()), (this.isStartShieldAudio = !0)),
                            this.getShieldWait())
                          ) {
                            0 != this.startShieldTs && (t = D.a.now() - this.startShieldTs);
                            var s = null,
                              r = null,
                              a = !1;
                            ((r = this.vBuffer.getTrack(e)).timescale = this.timescale),
                              (r.duration = Math.round(
                                (r.endDts - r.startDts) * (this.timescale / 1e3),
                              ));
                            var n = 0 == r.sn;
                            r && (n || this.avcChange) && Object.assign(r, this.videoConfig);
                            var o = this.dtsChecker.isSync(),
                              h = this.isPureAudio ? this.aBuffer.playDts + e : r.endDts;
                            if (
                              (o || (h = this.aBuffer.playDts + this.aBuffer.getBufferLen()),
                              this.isShieldAudio)
                            ) {
                              var u = this._setShieldBuffer(this.vBuffer.firstDts),
                                d = this.firstVideoTs,
                                c = this.firstShieldAudioTs,
                                l = d - c;
                              if (u)
                                if (
                                  l < 0 &&
                                  l > -I.a.shieldAudioCfg[3] &&
                                  !this.isShieldFastToAlign
                                )
                                  if (h <= c + this.popSize)
                                    (s = this.aBuffer.getTrack(h)), (a = !1);
                                  else {
                                    var f = this.aShieldBuffer.samples[0].ts;
                                    this.aShieldBuffer.removeExpireBuffer(r.startDts, 2),
                                      this.aShieldBuffer.samples.length > 0 &&
                                        p.a.log(
                                          'BufferAv.popBuffer.shield to align, aRemoveShieldFirstTs='
                                            .concat(f, ', vshieldAlignTs=')
                                            .concat(r.startDts, ',ashieldAlignTs=')
                                            .concat(
                                              this.aShieldBuffer.samples[0].ts,
                                              ', removeDelta=',
                                            )
                                            .concat(this.aShieldBuffer.samples[0].ts - f),
                                        ),
                                      (s = this.aShieldBuffer.getTrack(h)),
                                      (a = !0),
                                      this.aBuffer.removeExpireBuffer(h, 1),
                                      (this.isShieldFastToAlign = !0);
                                  }
                                else
                                  this.isSwitchShieldFailed
                                    ? ((s = this.aBuffer.getTrack(h)), (a = !1))
                                    : this.switchedShieldAudio
                                    ? ((a = !0),
                                      (s = this.aShieldBuffer.getTrack(h)),
                                      this.aBuffer.removeExpireBuffer(h, 1))
                                    : ((this.switchedShieldAudio = !0),
                                      this.aShieldBuffer.removeExpireBuffer(r.startDts, 2),
                                      this.aShieldBuffer.hasPushBuffer(h)
                                        ? ((s = this.aShieldBuffer.getTrack(h)),
                                          (a = !0),
                                          this.aBuffer.removeExpireBuffer(h, 1),
                                          this._switchShieldAudioSuc())
                                        : 0 == this.aShieldBuffer.playDts
                                        ? p.a.log(
                                            'BufferAv.popBuffer.shield audio curDts='.concat(
                                              this.aShieldBuffer.playDts,
                                              ', dts = 0, switch failed',
                                            ),
                                          )
                                        : (this._switchShieldAudioFailed(4),
                                          p.a.warn(
                                            'BufferAv.popBuffer.shield audio curDts='
                                              .concat(
                                                this.aShieldBuffer.playDts,
                                                ' far less than curDts=',
                                              )
                                              .concat(h, ', delta = ')
                                              .concat(
                                                h - this.aShieldBuffer.playDts,
                                                ', switch failed',
                                              ),
                                          ),
                                          (s = this.aBuffer.getTrack(h))));
                              else (s = this.aBuffer.getTrack(h)), (a = !1);
                              1 === Number(localStorage._printShield) &&
                                p.a.log(
                                  'BufferAv.popBuffer.shield: aac startDts='
                                    .concat(s.startDts, ' endDts=')
                                    .concat(s.endDts, ' avc startDts=')
                                    .concat(r.startDts, ' endDts=')
                                    .concat(r.endDts),
                                  'gap:',
                                  r.endDts - s.endDts,
                                ),
                                F.remove(this._switchShieldTimeoutBind, this);
                            } else
                              (a = !1),
                                (s = this.aBuffer.getTrack(
                                  h,
                                  e === Number.MAX_SAFE_INTEGER || e === this.waitSize,
                                )),
                                this.switchedShieldAudio && this.clearShieldAudio();
                            0 != this.startShieldTs &&
                              ((i = D.a.now() - this.startShieldTs),
                              p.a.log(
                                'BufferAv.popBuffer.shield: waitTime1 = '
                                  .concat(t, ' waitTime2=')
                                  .concat(i),
                              ),
                              (this.startShieldTs = 0)),
                              a
                                ? ((s.config = this.shieldAudioConfig.config),
                                  (s.audiosamplerate = this.shieldAudioConfig.audiosamplerate),
                                  (s.channelCount = this.shieldAudioConfig.channelCount),
                                  (s.codec = this.shieldAudioConfig.codec))
                                : ((s.config = this.audioConfig.config),
                                  (s.audiosamplerate = this.audioConfig.audiosamplerate),
                                  (s.channelCount = this.audioConfig.channelCount),
                                  (s.codec = this.audioConfig.codec)),
                              (s.isSync = o),
                              (s.timescale = this.timescale),
                              (s.duration = Math.round(
                                (s.endDts - s.startDts) * (this.timescale / 1e3),
                              )),
                              e === Number.MAX_SAFE_INTEGER &&
                                p.a.log(
                                  'BufferAV.popAllBuffer video=['
                                    .concat(r.startDts, ', ')
                                    .concat(r.endDts, '] audio=[')
                                    .concat(s.startDts, ', ')
                                    .concat(s.endDts, '] audioNum=')
                                    .concat(this.aBuffer.getSize(), ' audioEndDts=')
                                    .concat(this.aBuffer.lastSampleDts),
                                ),
                              1 === Number(localStorage._printAVTrack) &&
                                p.a.log(
                                  'BufferAV.popBuffer.shield vaStartDelta='
                                    .concat(r.startDts - s.startDts, ',vaEndDelta=')
                                    .concat(r.endDts - s.endDts, ',avcDelta=')
                                    .concat(r.endDts - r.startDts, ',aacDelta=')
                                    .concat(s.endDts - s.startDts, ',avcStartDts= ')
                                    .concat(r.startDts, ',aacStartDts=')
                                    .concat(s.startDts, ',avcEndDts=')
                                    .concat(r.endDts, ',aacEndDts=')
                                    .concat(s.endDts),
                                ),
                              (this.hasRemux = !0),
                              this.remuxCb && this.remuxCb(r, s);
                          }
                        },
                      },
                      {
                        key: 'clearBuffer',
                        value: function () {
                          this.vBuffer.clear(), this.aBuffer.clear(), this.aShieldBuffer.clear();
                        },
                      },
                      {
                        key: 'setNeedEmptyAudioFrame',
                        value: function (e) {
                          this.aBuffer.needEmptyAudioFrame = e;
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this.isPureAudio
                            ? this.aBuffer.getBufferLen()
                            : this.vBuffer.getBufferLen();
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return this.vBuffer.getSize();
                        },
                      },
                    ]),
                    e
                  );
                })();
              Xt.TYPES = { avc: 'avc', av01: 'av01', aac: 'aac' };
              var $t = Xt,
                Zt = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.list = []),
                      (this.switchIFrameDts = 0),
                      (this.switchIFramePts = 0),
                      (this.lastIFrameDts = 0),
                      (this.lastIFRamePts = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getDts',
                        value: function () {
                          return this.switchIFrameDts || this.lastIFrameDts;
                        },
                      },
                      {
                        key: 'getPts',
                        value: function () {
                          return this.switchIFramePts || this.lastIFRamePts;
                        },
                      },
                      {
                        key: 'setSwitchTs',
                        value: function (e, t) {
                          (this.switchIFrameDts = e), (this.switchIFramePts = t);
                        },
                      },
                      {
                        key: 'setLastTs',
                        value: function (e, t) {
                          (this.lastIFrameDts = e), (this.lastIFRamePts = t);
                        },
                      },
                      {
                        key: 'resetPtsSample',
                        value: function () {
                          this.list = [];
                        },
                      },
                      {
                        key: 'addPtsSample',
                        value: function (e, t, i, s, r, a) {
                          this.list.push({
                            dts: e,
                            pts: t,
                            dtsGap: i,
                            ptsGap: s,
                            hasOrigin: r,
                            isOrigin: a,
                          });
                        },
                      },
                      {
                        key: 'getMetric',
                        value: function () {
                          var e = [0, 0, 0],
                            t = [0, 0];
                          if (this.list.length > 0) {
                            var i = this.list[0],
                              s = this.list[this.list.length - 1];
                            (e[0] = i.dtsGap),
                              (e[1] = i.ptsGap),
                              (e[2] = this.list.length),
                              (e[3] = 0),
                              (e[4] = s.ptsGap),
                              (t[0] = s.hasOrigin ? 1 : 2),
                              (t[1] = s.isOrigin ? 1 : 2),
                              (t[2] = 0);
                          }
                          return { values: e, strs: t };
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ei = 0,
                ti = (function () {
                  function e(t, i, r) {
                    Object(s.a)(this, e),
                      (this.config = t),
                      (this.remuxCb = i),
                      (this.mse = r),
                      (this.hasVideoConfig = !1),
                      (this.needEmptyAudioFrame = !0),
                      (this.timescale = 9e4),
                      (this.hasFrame = !1),
                      (this.state = 0),
                      (this.switchTs = new Zt()),
                      (this.avBuffer = this._createBuffer()),
                      (this.evalBw = null),
                      (this.callbacks = null),
                      (this._buffered = null),
                      (this.id = ei++),
                      p.a.log('CtrlBuffer.constructor('.concat(this.id, ')')),
                      (this._curFrameId = 0),
                      (this.avcChangeTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setCurFrameId',
                        value: function (e) {
                          this._curFrameId = e;
                        },
                      },
                      {
                        key: 'setBuffered',
                        value: function (e) {
                          this._buffered = e;
                        },
                      },
                      {
                        key: 'addBuffered',
                        value: function (e, t, i) {
                          (e.type === $t.TYPES.avc ||
                            (e.type === $t.TYPES.av01 && this._buffered)) &&
                            this._buffered.addSample(this._curFrameId, e.ts, t, i);
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          (this.remuxCb = null), (this.callbacks = null), this._destroyBuffer();
                        },
                      },
                      {
                        key: '_destroyBuffer',
                        value: function () {
                          this.avBuffer && (this.avBuffer.destroy(), (this.avBuffer = null));
                        },
                      },
                      {
                        key: '_createBuffer',
                        value: function () {
                          this._destroyBuffer();
                          var e = new $t(this.config, this.remuxCb, this);
                          return (
                            (e.timescale = this.timescale),
                            e.setNeedEmptyAudioFrame(this.needEmptyAudioFrame),
                            e
                          );
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          this.avBuffer.paused = !0;
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          this.avBuffer.paused = !1;
                        },
                      },
                      {
                        key: 'isPaused',
                        value: function () {
                          return this.avBuffer.paused;
                        },
                      },
                      {
                        key: 'isWaitForIFrame',
                        value: function () {
                          return 1 === this.state;
                        },
                      },
                      {
                        key: 'switchBitrate',
                        value: function (e, t, i) {
                          p.a.log(
                            'CtrlBuffer('.concat(this.id, ').switchBitrate isDown=').concat(e),
                          ),
                            (this._lastBitrate = t),
                            (this._curBitrate = i),
                            (this.state = 1);
                        },
                      },
                      {
                        key: 'switchBack',
                        value: function () {
                          p.a.log(
                            'CtrlBuffer('
                              .concat(this.id, ').switchBack switchIFramePts=')
                              .concat(this.switchTs.getDts(), ' lastIFramePts=')
                              .concat(this.switchTs.getPts()),
                          ),
                            (this.state = 2),
                            (this.avBuffer = this._createBuffer()),
                            this.callbacks &&
                              this.callbacks.start(this.switchTs.getDts(), this.switchTs.getPts());
                        },
                      },
                      {
                        key: 'switchShieldAudio',
                        value: function (e) {
                          this.avBuffer &&
                            this.avBuffer.switchShieldAudio &&
                            this.avBuffer.switchShieldAudio(e);
                        },
                      },
                      {
                        key: 'setEval',
                        value: function (e) {
                          this.evalBw = e;
                        },
                      },
                      {
                        key: 'resetAudioDts',
                        value: function () {
                          this.avBuffer.resetAudioDts();
                        },
                      },
                      {
                        key: 'addSample',
                        value: function (e) {
                          if (this.avBuffer) {
                            var t = e.key && (!this.avBuffer.hasOriginIFrame || e.origin_iframe);
                            if (
                              (t && this.switchTs.setLastTs(e.ts, e.ts + e.cts),
                              (e.type !== $t.TYPES.avc && e.type !== $t.TYPES.av01) ||
                                (this.evalBw && this.evalBw.addSample(e)),
                              2 === this.state &&
                                (this.hasFrame ||
                                  (e.type !== $t.TYPES.avc && e.type !== $t.TYPES.av01) ||
                                  (p.a.log(
                                    'CtrlBuffer('
                                      .concat(this.id, ').addSample first sample dts=')
                                      .concat(e.ts, ' pts=')
                                      .concat(e.ts + e.cts),
                                  ),
                                  (this.hasFrame = !0),
                                  this.callbacks && this.callbacks.first())),
                              (e.type !== $t.TYPES.avc && e.type !== $t.TYPES.av01) ||
                                this.hasVideoConfig)
                            )
                              if (2 === this.state) {
                                if (e.key) {
                                  var i = e.ts + e.cts,
                                    s = e.ts - this.switchTs.getDts(),
                                    r = i - this.switchTs.getPts();
                                  p.a.log(
                                    'CtrlBuffer('
                                      .concat(this.id, ').addSample find IFrame origin_iframe=')
                                      .concat(e.origin_iframe, ' dts=')
                                      .concat(e.ts, ' pts=')
                                      .concat(i, ' switchDts=')
                                      .concat(this.switchTs.switchIFrameDts, ' switchPts=')
                                      .concat(this.switchTs.switchIFramePts, ' dtsGap=')
                                      .concat(s, ' ptsGap=')
                                      .concat(r, ' iFrameGap=')
                                      .concat(this.avBuffer.gop),
                                  ),
                                    this.switchTs.addPtsSample(
                                      e.ts,
                                      i,
                                      s,
                                      r,
                                      this.avBuffer.hasOriginIFrame,
                                      e.origin_iframe,
                                    ),
                                    i >= this.switchTs.switchIFramePts &&
                                      (p.a.log(
                                        'CtrlBuffer('.concat(
                                          this.id,
                                          ').addSample find new IFrame, switch done',
                                        ),
                                      ),
                                      (this.state = 0),
                                      this.switchTs.setSwitchTs(0, 0),
                                      this.avBuffer.addSample(e),
                                      this.addBuffered(e, !0, r),
                                      this.callbacks && this.callbacks.done(s, e.ts, r));
                                }
                              } else
                                1 === this.state
                                  ? t
                                    ? (this._popAllBuffer(),
                                      (this.avBuffer.hasOriginIFrame = !1),
                                      (this.hasVideoConfig = !1),
                                      (this.hasFrame = !1),
                                      (this.state = 2),
                                      this.switchTs.setSwitchTs(e.ts, e.ts + e.cts),
                                      this.switchTs.resetPtsSample(),
                                      p.a.log(
                                        'CtrlBuffer('
                                          .concat(
                                            this.id,
                                            ').addSample find next IFrame origin_iframe=',
                                          )
                                          .concat(e.origin_iframe, ' dts=')
                                          .concat(this.switchTs.switchIFrameDts, ' pts=')
                                          .concat(this.switchTs.switchIFramePts, ' iFrameGap=')
                                          .concat(this.avBuffer.gop, ', switch start!'),
                                      ),
                                      this.callbacks &&
                                        this.callbacks.start(
                                          this.switchTs.switchIFrameDts,
                                          this.switchTs.switchIFramePts,
                                        ))
                                    : (e.key &&
                                        p.a.log(
                                          'CtrlBuffer('
                                            .concat(
                                              this.id,
                                              ').addSample find next IFrame fail, origin_iframe=',
                                            )
                                            .concat(e.origin_iframe, ' dts=')
                                            .concat(e.ts, ' pts=')
                                            .concat(e.ts + e.cts),
                                        ),
                                      this.avBuffer.addSample(e),
                                      this.addBuffered(e, !1, 0))
                                  : (1 === Number(localStorage._printIFramePts) &&
                                      e.key &&
                                      p.a.log(
                                        'CtrlBuffer('
                                          .concat(
                                            this.id,
                                            ').addSample find next IFrame fail, origin_iframe=',
                                          )
                                          .concat(e.origin_iframe, ' dts=')
                                          .concat(e.ts, ' pts=')
                                          .concat(e.ts + e.cts),
                                      ),
                                    this.avBuffer.addSample(e),
                                    this.addBuffered(e, !1, 0));
                          }
                        },
                      },
                      {
                        key: 'addShieldAudioSample',
                        value: function (e) {
                          this.avBuffer.addShieldAudioSample(e), this.addBuffered(e, !1, 0);
                        },
                      },
                      {
                        key: '_popAllBuffer',
                        value: function () {
                          this.avBuffer &&
                            (this.avBuffer.getBufferLen() > 0 &&
                              this.avBuffer.popBuffer(Number.MAX_SAFE_INTEGER),
                            this.avBuffer.clearBuffer());
                        },
                      },
                      {
                        key: 'updateVideoConfig',
                        value: function (e, t) {
                          t && ((this.avcChangeTime = D.a.now()), this._popAllBuffer()),
                            (this.hasVideoConfig = !0),
                            this.avBuffer && this.avBuffer.updateVideoConfig(e, t);
                        },
                      },
                      {
                        key: 'updateAudioConfig',
                        value: function (e, t, i, s) {
                          t && this._popAllBuffer(),
                            this.avBuffer &&
                              this.avBuffer.updateAudioConfig &&
                              this.avBuffer.updateAudioConfig(e, i, s);
                        },
                      },
                      {
                        key: 'setNeedEmptyAudioFrame',
                        value: function (e) {
                          (this.needEmptyAudioFrame = e), this.avBuffer.setNeedEmptyAudioFrame(e);
                        },
                      },
                      {
                        key: 'isInAvcChangeTime',
                        value: function (e) {
                          var t = D.a.now();
                          return this.avcChangeTime + e < t;
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this.avBuffer.getBufferLen();
                        },
                      },
                      {
                        key: 'getVideoBufferLen',
                        value: function () {
                          return this.mse.getBufferLen();
                        },
                      },
                      {
                        key: 'getLastIFrameDts',
                        value: function () {
                          return this.switchTs.lastIFrameDts;
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return this.avBuffer.getSize();
                        },
                      },
                      {
                        key: 'onSwitchShieldAudioFail',
                        value: function (e, t) {
                          this.mse && this.mse.onSwitchShieldAudioFail(e, t);
                        },
                      },
                      {
                        key: 'onSwitchShieldAudioSuc',
                        value: function (e) {
                          this.mse && this.mse.onSwitchShieldAudioSuc(e);
                        },
                      },
                      {
                        key: 'shieldAuidoMute',
                        value: function (e, t) {
                          this.mse && this.mse.shieldAuidoMute(e, t);
                        },
                      },
                      {
                        key: 'getIframePts',
                        value: function () {
                          return this.switchTs.getPts() || 0;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ii = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.avDifTotal = 0),
                      (this.avDifCnt = 0),
                      (this.avDifMax = 0),
                      (this.emptyFrames = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'checkSync',
                        value: function (e, t) {
                          if (e && 0 != e.samples.length)
                            if (
                              ((this.emptyFrames += t.emptyFrames),
                              !t.hasOwnProperty('isSync') || t.isSync)
                            )
                              if (e.endDts > 0 && t.endDts > 0) {
                                var i = e.endDts - t.endDts;
                                (this.avDifTotal += i),
                                  this.avDifCnt++,
                                  this.avDifMax < i && (this.avDifMax = i),
                                  i > 200 &&
                                    0 === t.emptyFrames &&
                                    p.a.warn(
                                      'AVSyncStat.checkSync avDif='
                                        .concat(i, ' video=[')
                                        .concat(e.startDts, ', ')
                                        .concat(e.endDts, '] videoPlayDts=')
                                        .concat(e.playDts, ' audio=[')
                                        .concat(t.startDts, ', ')
                                        .concat(t.endDts, '] audioPlayDts=')
                                        .concat(t.playDts),
                                    );
                              } else
                                p.a.log(
                                  'AVSyncStat.checkSync video=['
                                    .concat(e.startDts, ', ')
                                    .concat(e.endDts, '] videoPlayDts=')
                                    .concat(e.playDts, ' audio=[')
                                    .concat(t.startDts, ', ')
                                    .concat(t.endDts, '] audioPlayDts=')
                                    .concat(t.playDts),
                                );
                            else
                              t.emptyFrames > 0 &&
                                p.a.log(
                                  'AVSyncStat.checkSync isSync='
                                    .concat(t.isSync, ' video=[')
                                    .concat(e.startDts, ', ')
                                    .concat(e.endDts, '] videoPlayDts=')
                                    .concat(e.playDts, ' audio=[')
                                    .concat(t.startDts, ', ')
                                    .concat(t.endDts, '] audioPlayDts=')
                                    .concat(t.playDts),
                                );
                        },
                      },
                      {
                        key: 'record',
                        value: function (e) {
                          if (this.avDifCnt > 0) {
                            var t = Math.round(this.avDifTotal / this.avDifCnt);
                            e.setCore(C.a.DIM_CORE.AVSDA, t),
                              e.setCore(C.a.DIM_CORE.AVSDM, this.avDifMax),
                              e.setCore(C.a.DIM_CORE.AVEFS, this.emptyFrames);
                          }
                          (this.avDifCnt = 0),
                            (this.avDifTotal = 0),
                            (this.avDifMax = 0),
                            (this.emptyFrames = 0);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                si = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.mse = t),
                      (this.eventEmitter = this.mse.handler.eventEmitter),
                      (this.stat = this.mse.handler.stat),
                      (this.lastTs = 0),
                      (this.renderNum = 0),
                      (this.fpsTotal = 0),
                      (this.fpsNum = 0),
                      (this.recordTotal = 0),
                      (this.recordNum = 0),
                      (this.lastEachTs = 0),
                      (this.renderBadQuality = 0),
                      (this.isFirstRender = !0),
                      (this.prePageRenderTs = 0),
                      (this.pageRecordTotal = 0),
                      (this.pageRecordNum = 0),
                      (this.pageRenderNum = 0),
                      (this.pageFpsTotal = 0),
                      (this.pageFpsNum = 0),
                      (this.pageFpsMax = 0),
                      (this.pageFpsMin = 0),
                      (this._onVisibilityChangeBind = this._onVisibilityChange.bind(this)),
                      this.eventEmitter &&
                        this.eventEmitter.on(l.VISIBILITY_CHANGE, this._onVisibilityChangeBind);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this.fpsNum = 0),
                            (this.fpsTotal = 0),
                            (this.renderNum = 0),
                            (this.recordTotal = 0),
                            (this.recordNum = 0),
                            (this.lastEachTs = 0),
                            (this.renderBadQuality = 0),
                            (this.isFirstRender = !0),
                            (this.prePageRenderTs = 0),
                            (this.pageRecordTotal = 0),
                            (this.pageRecordNum = 0),
                            (this.pageRenderNum = 0),
                            (this.pageFpsTotal = 0),
                            (this.pageFpsNum = 0),
                            (this.pageFpsMax = 0),
                            (this.pageFpsMin = 0);
                        },
                      },
                      {
                        key: 'getRecordFps',
                        value: function () {
                          var e = this.fpsTotal - this.recordTotal,
                            t = this.fpsNum - this.recordNum;
                          return t > 0
                            ? ((this.recordTotal = this.fpsTotal),
                              (this.recordNum = this.fpsNum),
                              Math.round(e / t))
                            : 0;
                        },
                      },
                      {
                        key: 'addRender',
                        value: function () {
                          var e = D.a.now();
                          if ((this.renderNum++, 0 === this.lastTs)) this.lastTs = e;
                          else {
                            var t = e - this.lastTs;
                            if (t >= 1e3) {
                              this.lastTs = e;
                              var i = Math.floor(this.renderNum / (t / 1e3));
                              this.fpsNum++, (this.fpsTotal += i), (this.renderNum = 0);
                            }
                          }
                          this._checkRenderQuality(e);
                        },
                      },
                      {
                        key: 'getPageRecordFps',
                        value: function () {
                          var e = this.pageFpsTotal - this.pageRecordTotal,
                            t = this.pageFpsNum - this.pageRecordNum,
                            i = 0,
                            s = this.pageFpsMax,
                            r = this.pageFpsMin;
                          t > 0 &&
                            ((this.pageRecordTotal = this.pageFpsTotal),
                            (this.pageRecordNum = this.pageFpsNum),
                            (i = Math.round(e / t)));
                          var a = { pfps: i, pfpsMax: s, pfpsMin: r };
                          return (this.pageFpsMax = 0), (this.pageFpsMin = 0), a;
                        },
                      },
                      {
                        key: 'addPageRender',
                        value: function () {
                          var e = D.a.now();
                          if ((this.pageRenderNum++, 0 === this.prePageRenderTs))
                            this.prePageRenderTs = e;
                          else {
                            var t = e - this.prePageRenderTs;
                            if (t >= 1e3) {
                              this.prePageRenderTs = e;
                              var i = Math.round(this.pageRenderNum / (t / 1e3));
                              this.pageFpsNum++,
                                (this.pageFpsTotal += i),
                                (this.pageRenderNum = 0),
                                (this.pageFpsMax = Math.max(i, this.pageFpsMax)),
                                0 != i &&
                                  (0 == this.pageFpsMin
                                    ? (this.pageFpsMin = i)
                                    : (this.pageFpsMin = Math.min(i, this.pageFpsMin)));
                            }
                          }
                        },
                      },
                      {
                        key: '_checkRenderQuality',
                        value: function (e) {
                          if (0 === this.lastEachTs) this.lastEachTs = e;
                          else {
                            var t = e - this.lastEachTs;
                            !this.isFirstRender &&
                              t > 200 &&
                              ((this.renderBadQuality = 100),
                              this.stat.addCore(C.a.DIM_CORE.VRBQC, 1),
                              this.stat.addCore(C.a.DIM_CORE.VRBQD, t),
                              p.a.warn(
                                'RenderFps._checkRenderQuality render bad quality time=',
                                t,
                              )),
                              (this.isFirstRender = !1),
                              (this.lastEachTs = e);
                          }
                        },
                      },
                      {
                        key: 'statRenderQuality',
                        value: function () {
                          var e = this.renderBadQuality;
                          return (this.renderBadQuality = 0), e;
                        },
                      },
                      {
                        key: '_onVisibilityChange',
                        value: function () {
                          (document.hidden ||
                            document.webkitHidden ||
                            document.mozHidden ||
                            document.msHidden) &&
                            (this._checkRenderQuality(D.a.now()),
                            (this.lastTs = 0),
                            (this.lastEachTs = 0),
                            (this.renderNum = 0));
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ri = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.mse = t),
                      (this.eventEmitter = this.mse.handler.eventEmitter),
                      (this.recvFrameDataList = []),
                      (this.remuxFrameDataList = []),
                      (this.pushedVideoDataList = []),
                      (this.frameRecvToPushConSumingMax = 0),
                      (this.frameRecvToPushConSumingFrames = 0),
                      (this.frameRecvToPushConSumingTotalTime = 0),
                      (this.framePushToRenderedConSumingMax = 0),
                      (this.framePushToRenderedConSumingFrames = 0),
                      (this.framePushToRenderedConSumingTotalTime = 0),
                      (this.frameRecvToRenderMax = 0),
                      (this.frameRecvToRenderConSumingFrames = 0),
                      (this.frameRecvToRenderConSumingTotalTime = 0),
                      (this._onVisibilityChangeBind = this._onVisibilityChange.bind(this)),
                      this.eventEmitter &&
                        this.eventEmitter.on(l.VISIBILITY_CHANGE, this._onVisibilityChangeBind);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'clearConsuming',
                        value: function () {
                          (this.recvFrameDataList = []),
                            (this.remuxFrameDataList = []),
                            (this.pushedVideoDataList = []),
                            (this.frameRecvToPushConSumingMax = 0),
                            (this.frameRecvToPushConSumingFrames = 0),
                            (this.frameRecvToPushConSumingTotalTime = 0),
                            (this.framePushToRenderedConSumingMax = 0),
                            (this.framePushToRenderedConSumingFrames = 0),
                            (this.framePushToRenderedConSumingTotalTime = 0),
                            (this.frameRecvToRenderMax = 0),
                            (this.frameRecvToRenderConSumingFrames = 0),
                            (this.frameRecvToRenderConSumingTotalTime = 0);
                        },
                      },
                      {
                        key: 'addRecvFrameData',
                        value: function (e, t, i) {
                          I.a.renderStat[0] &&
                            this.recvFrameDataList.push({ ts: e, pts: t, time: i });
                        },
                      },
                      {
                        key: 'addRemuxFrameData',
                        value: function (e, t, i) {
                          I.a.renderStat[0] &&
                            this.remuxFrameDataList.push({ ts: e, pts: t, time: i });
                        },
                      },
                      {
                        key: 'pushRemuxedVideoFrameData',
                        value: function (e) {
                          var t = this;
                          if (I.a.renderStat[0]) {
                            for (
                              var i = function (i) {
                                  var s = t.recvFrameDataList.find(function (e) {
                                    return e.ts === t.remuxFrameDataList[i].ts;
                                  });
                                  if (s) {
                                    var r = e - s.time;
                                    (t.frameRecvToPushConSumingTotalTime += r),
                                      t.frameRecvToPushConSumingFrames++,
                                      (t.frameRecvToPushConSumingMax = Math.max(
                                        r,
                                        t.frameRecvToPushConSumingMax,
                                      ));
                                  }
                                  t.pushedVideoDataList.push({
                                    ts: t.remuxFrameDataList[i].ts,
                                    pts: t.remuxFrameDataList[i].pts,
                                    time: e,
                                  });
                                },
                                s = 0;
                              s < this.remuxFrameDataList.length;
                              s++
                            )
                              i(s);
                            this.remuxFrameDataList = [];
                          }
                        },
                      },
                      {
                        key: 'addRenderFrameData',
                        value: function (e, t) {
                          if (I.a.renderStat[0]) {
                            for (var i = 0; i < this.recvFrameDataList.length; i++)
                              for (
                                ;
                                this.recvFrameDataList.length > 0 &&
                                this.recvFrameDataList[0].pts < e;

                              ) {
                                var s = t - this.recvFrameDataList[0].time;
                                (this.frameRecvToRenderMax = Math.max(
                                  s,
                                  this.frameRecvToRenderMax,
                                )),
                                  this.frameRecvToRenderConSumingFrames++,
                                  (this.frameRecvToRenderConSumingTotalTime += s),
                                  this.recvFrameDataList.shift();
                              }
                            for (var r = 0; r < this.pushedVideoDataList.length; r++)
                              for (
                                ;
                                this.pushedVideoDataList.length > 0 &&
                                this.pushedVideoDataList[0].pts < e;

                              ) {
                                var a = t - this.pushedVideoDataList[0].time;
                                (this.framePushToRenderedConSumingMax = Math.max(
                                  a,
                                  this.framePushToRenderedConSumingMax,
                                )),
                                  this.framePushToRenderedConSumingFrames++,
                                  (this.framePushToRenderedConSumingTotalTime += a),
                                  this.pushedVideoDataList.shift();
                              }
                          }
                        },
                      },
                      {
                        key: 'getRecvToPushConsuming',
                        value: function () {
                          return {
                            max: this.frameRecvToPushConSumingMax,
                            avg:
                              this.frameRecvToPushConSumingFrames > 0
                                ? this.frameRecvToPushConSumingTotalTime /
                                  this.frameRecvToPushConSumingFrames
                                : 0,
                          };
                        },
                      },
                      {
                        key: 'getPushToRenderedConSuming',
                        value: function () {
                          return {
                            max: this.framePushToRenderedConSumingMax,
                            avg:
                              this.framePushToRenderedConSumingFrames > 0
                                ? this.framePushToRenderedConSumingTotalTime /
                                  this.framePushToRenderedConSumingFrames
                                : 0,
                          };
                        },
                      },
                      {
                        key: 'getRecvToRenderConsuming',
                        value: function () {
                          return {
                            max: this.frameRecvToRenderMax,
                            avg:
                              this.frameRecvToRenderConSumingFrames > 0
                                ? this.frameRecvToRenderConSumingTotalTime /
                                  this.frameRecvToRenderConSumingFrames
                                : 0,
                          };
                        },
                      },
                      {
                        key: '_onVisibilityChange',
                        value: function () {
                          this.clearConsuming();
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this.eventEmitter &&
                            this.eventEmitter.off(
                              l.VISIBILITY_CHANGE,
                              this._onVisibilityChangeBind,
                            );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ai =
                  window.requestAnimationFrame ||
                  window.mozRequestAnimationFrame ||
                  window.webkitRequestAnimationFrame ||
                  window.msRequestAnimationFrame ||
                  window.oRequestAnimationFrame,
                ni =
                  window.cancelAnimationFrame ||
                  window.mozCancelAnimationFrame ||
                  window.webkitCancelAnimationFrame ||
                  window.msCancelAnimationFrame ||
                  window.oCancelAnimationFrame,
                oi = !1,
                hi = [],
                ui = 0,
                di = null,
                ci = 0,
                li = 0,
                pi = 0;
              function fi() {
                ai(fi),
                  (function () {
                    var e = D.a.now();
                    if ((ci++, 0 === li)) li = e;
                    else {
                      var t = e - li;
                      if (t >= 1e3) {
                        li = e;
                        var i = Math.round(ci / (t / 1e3));
                        (ci = 0), (pi = Math.max(i, pi));
                      }
                    }
                  })();
              }
              function mi(e, t) {
                for (var i = 0, s = hi.length; i < s; i++) {
                  var r = hi[i];
                  if (r.callback == e && r.thisObj == t) return r;
                }
                return null;
              }
              function _i(e, t, i) {
                var s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
                  r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                if ((i = 0 | (Number(i) || 0)) < 10 || i % 10 != 0 || !e)
                  return p.a.error('Timer.add Invalide interval value or callback function.'), !1;
                var a = mi(e, t);
                return (
                  a ||
                    ((a = { callback: e, thisObj: t, bindCallback: t ? e.bind(t) : e, param: s }),
                    hi.push(a)),
                  (a.times = r),
                  (a.tickCount = 0),
                  (a.interval = i / 10),
                  (a.delayDel = !1),
                  vi(),
                  !0
                );
              }
              function vi() {
                di ? di.postMessage('start') : !ui && hi.length > 0 && (ui = setInterval(yi, 10));
              }
              function yi() {
                if (0 != hi.length) {
                  oi = !0;
                  for (var e = D.a.now(), t = hi.length - 1; t >= 0; t--) {
                    var i = hi[t];
                    if (i && !i.delayDel) {
                      if (++i.tickCount % i.interval == 0) {
                        var s = i.bindCallback,
                          r = i.tickCount / i.interval;
                        s(e, r, i.param),
                          i.times > 0 && i.times <= r && i.tickCount > 0 && hi.splice(t, 1);
                      }
                    } else hi.splice(t, 1);
                  }
                  oi = !1;
                } else 1 == di ? di.postMessage('stop') : (clearInterval(ui), (ui = 0));
              }
              var Si = {
                  initWorker: function () {
                    (di = A()(58))
                      ? (di.addEventListener('message', function (e) {
                          1 == e.data.type ? yi() : 2 == e.data.type && (pi = e.data.data);
                        }),
                        di.addEventListener('error', function (e) {
                          p.a.error('TimerWorker.error:', e.lineno + ',' + e.colno, e.message),
                            di.terminate(),
                            (di = null),
                            p.a.warn('[ TimerWorker terminate ]'),
                            vi();
                        }))
                      : ai(fi);
                  },
                  has: function (e, t) {
                    return !!mi(e, t);
                  },
                  add: _i,
                  remove: function (e, t) {
                    for (var i = 0, s = hi.length; i < s; i++) {
                      var r = hi[i];
                      if (r.callback == e && r.thisObj == t)
                        return oi ? (r.delayDel = !0) : hi.splice(i, 1), !0;
                    }
                    return !1;
                  },
                  once: function (e, t, i, s) {
                    _i(e, t, i + 10, s, 1);
                  },
                  getSize: function () {
                    return hi.length;
                  },
                  getPageFpsMax: function () {
                    return pi;
                  },
                },
                gi = i(28),
                Ti = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.buffer = null),
                      (this.view = null),
                      (this.size = 0),
                      (this.pos = 0);
                  }
                  return (
                    Object(r.a)(
                      e,
                      [
                        {
                          key: 'destroy',
                          value: function () {
                            (this.buffer = null),
                              (this.view = null),
                              (this.size = 0),
                              (this.pos = 0);
                          },
                        },
                        {
                          key: 'appendBuffer',
                          value: function (e) {
                            e = new Uint8Array(e);
                            var t = new Uint8Array(this.size + e.length);
                            this.buffer && t.set(this.buffer, 0),
                              t.set(e, this.size),
                              (this.size = t.byteLength),
                              (this.buffer = t),
                              (this.view = new DataView(t.buffer));
                          },
                        },
                        {
                          key: 'peekString',
                          value: function (e, t) {
                            for (var i = this.pos + e, s = '', r = 0; r < t; r++)
                              s += String.fromCharCode(this.view.getUint8(i + r));
                            return s;
                          },
                        },
                        {
                          key: 'peekBuffer',
                          value: function (e, t) {
                            return (
                              (e = this.pos + e),
                              new Uint8Array(this.view.buffer.slice(e, Math.min(e + t, this.size)))
                            );
                          },
                        },
                        {
                          key: 'peekAnyInt',
                          value: function (t) {
                            var i = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
                              s = 0;
                            if (this.pos + t <= this.size) {
                              switch (t) {
                                case 1:
                                  s = i
                                    ? this.view.getInt8(this.pos)
                                    : this.view.getUint8(this.pos);
                                  break;
                                case 2:
                                  s = i
                                    ? this.view.getInt16(this.pos)
                                    : this.view.getUint16(this.pos);
                                  break;
                                case 3:
                                  if (i) throw 'peekAnyInt signed 24 bits values wrong';
                                  (s = this.view.getUint8(this.pos) << 16),
                                    (s |= this.view.getUint8(this.pos + 1) << 8),
                                    (s |= this.view.getUint8(this.pos + 2));
                                  break;
                                case 4:
                                  s = i
                                    ? this.view.getInt32(this.pos)
                                    : this.view.getUint32(this.pos);
                                  break;
                                case 8:
                                  if (i) throw 'peekAnyInt signed 64 bits values wrong';
                                  s =
                                    this.view.getUint32(this.pos) * e.MAX_UINT +
                                    this.view.getUint32(this.pos + 4);
                                  break;
                                default:
                                  throw 'peekAnyInt not implemented for size: ' + t;
                              }
                              return s;
                            }
                            throw 'Not enough bytes in buffer';
                          },
                        },
                        {
                          key: 'readUint8',
                          value: function () {
                            var e = this.peekAnyInt(1);
                            return this.pos++, e;
                          },
                        },
                        {
                          key: 'readUint16',
                          value: function () {
                            var e = this.peekAnyInt(2);
                            return (this.pos += 2), e;
                          },
                        },
                        {
                          key: 'readUint24',
                          value: function () {
                            var e = this.peekAnyInt(3);
                            return (this.pos += 3), e;
                          },
                        },
                        {
                          key: 'readUint32',
                          value: function () {
                            var e = this.peekAnyInt(4);
                            return (this.pos += 4), e;
                          },
                        },
                        {
                          key: 'readInt32',
                          value: function () {
                            var e = this.peekAnyInt(4, !0);
                            return (this.pos += 4), e;
                          },
                        },
                        {
                          key: 'readUint64',
                          value: function () {
                            var e = this.peekAnyInt(8);
                            return (this.pos += 8), e;
                          },
                        },
                        {
                          key: 'readStr',
                          value: function (e) {
                            var t = this.peekString(0, e);
                            return (this.pos += e), t;
                          },
                        },
                        {
                          key: 'skip',
                          value: function (e) {
                            this.pos += e;
                          },
                        },
                        {
                          key: 'getPos',
                          value: function () {
                            return this.pos;
                          },
                        },
                        {
                          key: 'isCanRead',
                          value: function (e) {
                            return this.size - this.pos >= e;
                          },
                        },
                      ],
                      [
                        {
                          key: 'writeUint64',
                          value: function (t, i, s) {
                            var r = Math.floor(s / e.MAX_UINT),
                              a = 4294967295 & s;
                            t.setUint32(i, r), t.setUint32(i + 4, a);
                          },
                        },
                      ],
                    ),
                    e
                  );
                })();
              Ti.MAX_UINT = Math.pow(2, 32);
              var Ei = Ti,
                Ci = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.startOffset = 0), (this.size = 0), (this.type = '');
                  }
                  return (
                    Object(r.a)(e, [
                      { key: 'destroy', value: function () {} },
                      {
                        key: 'read',
                        value: function (e) {
                          (this.startOffset = e.getPos()),
                            (this.size = e.readUint32()),
                            (this.type = e.readStr(4));
                        },
                      },
                      {
                        key: 'readContainer',
                        value: function (e) {
                          for (var t = this.size + e.getPos() - 8; e.getPos() < t; ) {
                            var i = e.peekString(4, 4),
                              s = qi.createBox(i);
                            s.read(e), this.onReadBox(s);
                          }
                        },
                      },
                      { key: 'onReadBox', value: function (e) {} },
                      {
                        key: 'remux',
                        value: function () {
                          return null;
                        },
                      },
                      {
                        key: 'fillHeader',
                        value: function (e, t, i, s) {
                          t.setUint32(0, s), e.set(qi.getCharCode(i), 4);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return 8;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Di = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).major_brand = ''),
                      (e.minor_version = 0),
                      (e.compatible_brands = ''),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            4 +
                            4 +
                            this.compatible_brands.length
                          );
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            (this.major_brand = e.readStr(4)),
                            (this.minor_version = e.readUint32()),
                            (this.compatible_brands = e.readStr(this.size - 16));
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.getSize(),
                            t = new Uint8Array(e),
                            i = new DataView(t.buffer);
                          this.fillHeader(t, i, qi.STYP, e);
                          var s = 8;
                          return (
                            this.fillStr(t, s, this.major_brand),
                            (s += 4),
                            i.setUint32(s, this.minor_version),
                            (s += 4),
                            this.fillStr(t, s, this.compatible_brands),
                            t
                          );
                        },
                      },
                      {
                        key: 'fillStr',
                        value: function (e, t, i) {
                          for (var s = 0; s < i.length; s++) e[t + s] = i.charCodeAt(s);
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Pi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return Object(s.a)(this, i), ((e = t.call(this)).version = 0), (e.flags = 0), e;
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            (this.version = e.readUint8()),
                            (this.flags = e.readUint24());
                        },
                      },
                      {
                        key: 'fillHeader',
                        value: function (e, t, s, r) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'fillHeader', this).call(
                            this,
                            e,
                            t,
                            s,
                            r,
                          ),
                            (e[8] = this.version),
                            (e[9] = (this.flags >> 16) & 255),
                            (e[10] = (this.flags >> 8) & 255),
                            (e[11] = 255 & this.flags);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) + 4
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Ai = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).reference_id = 0),
                      (e.time_scale = 0),
                      (e.earliest_presentation_time = 0),
                      (e.first_offset = 0),
                      (e.reserved = 0),
                      (e.reference_count = 0),
                      (e.reference_list = []),
                      (e.reference_data = []),
                      (e.earliest_presentation_time_offset = 0),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          (this.reference_list = []),
                            (this.reference_data = []),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'updateReference',
                        value: function (e) {
                          if (this.reference_count > 0) {
                            var t = e.trun.getRemuxSampleCnt(),
                              i = this.reference_list[0];
                            (i.referenced_size = e.trun.getMdatSize()),
                              (i.subsegment_duration = t * e.tfhd.default_sample_duration);
                          }
                        },
                      },
                      {
                        key: 'updateEarliestPresentationTime',
                        value: function (e) {
                          var t = e.trun.getRemuxSampleCnt();
                          this.earliest_presentation_time_offset =
                            t * e.tfhd.default_sample_duration;
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            (this.reference_id = e.readUint32()),
                            (this.time_scale = e.readUint32()),
                            0 === this.version
                              ? ((this.earliest_presentation_time = e.readUint32()),
                                (this.first_offset = e.readUint32()))
                              : ((this.earliest_presentation_time = e.readUint64()),
                                (this.first_offset = e.readUint64())),
                            (this.reserved = e.readUint16()),
                            (this.reference_count = e.readUint16());
                          for (var t = 0; t < this.reference_count; t++) {
                            var s = {},
                              r = e.readUint32();
                            this.reference_data.push(r),
                              (s.reference_type = (r >> 31) & 1),
                              (s.referenced_size = 2147483647 & r),
                              (s.subsegment_duration = e.readUint32()),
                              this.reference_data.push(s.subsegment_duration),
                              (r = e.readUint32()),
                              this.reference_data.push(r),
                              (s.starts_with_SAP = (r >> 31) & 1),
                              (s.SAP_type = (r >> 28) & 7),
                              (s.SAP_delta_time = 268435455 & r),
                              this.reference_list.push(s);
                          }
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          var e = Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(
                            this,
                          );
                          return (
                            (e += 4),
                            (e += 4),
                            (e += 0 === this.version ? 8 : 16),
                            (e += 2),
                            (e += 2) + 12 * this.reference_count
                          );
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.getSize(),
                            t = new Uint8Array(e),
                            i = new DataView(t.buffer);
                          this.fillHeader(t, i, qi.SIDX, e);
                          var s = 12;
                          i.setUint32(s, this.reference_id),
                            (s += 4),
                            i.setUint32(s, this.time_scale),
                            (s += 4),
                            0 === this.version
                              ? (i.setUint32(
                                  s,
                                  this.earliest_presentation_time +
                                    this.earliest_presentation_time_offset,
                                ),
                                (s += 4),
                                i.setUint32(s, this.first_offset),
                                (s += 4))
                              : (Ei.writeUint64(
                                  i,
                                  s,
                                  this.earliest_presentation_time +
                                    this.earliest_presentation_time_offset,
                                ),
                                (s += 8),
                                Ei.writeUint64(i, s, this.first_offset),
                                (s += 8)),
                            i.setUint16(s, this.reserved),
                            (s += 2),
                            i.setUint16(s, this.reference_count),
                            (s += 2);
                          for (var r = 0; r < this.reference_data.length; r++)
                            i.setUint32(s, this.reference_data[r]), (s += 4);
                          return t;
                        },
                      },
                    ]),
                    i
                  );
                })(Pi),
                Ii = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).mfhd = null),
                      (e.trafVideo = null),
                      (e.trafAudio = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.mfhd.destroy(),
                            this.trafVideo.destroy(),
                            this.trafAudio.destroy(),
                            (this.mfhd = null),
                            (this.trafVideo = null),
                            (this.trafAudio = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            this.readContainer(e),
                            this.trafVideo.trun.data_offset > this.trafAudio.trun.data_offset
                              ? (this.trafAudio.calcSampleMdatDataOffset(0),
                                this.trafVideo.calcSampleMdatDataOffset(
                                  this.trafAudio.getSampleDataSize(),
                                ))
                              : (this.trafVideo.calcSampleMdatDataOffset(0),
                                this.trafAudio.calcSampleMdatDataOffset(
                                  this.trafVideo.getSampleDataSize(),
                                ));
                        },
                      },
                      {
                        key: 'onReadBox',
                        value: function (e) {
                          e.type === qi.MFHD
                            ? (this.mfhd = e)
                            : e.type === qi.TRAF &&
                              (e.isVideo() ? (this.trafVideo = e) : (this.trafAudio = e));
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e) {
                          this.trafVideo && this.trafVideo.readMdat(e),
                            this.trafAudio && this.trafAudio.readMdat(e);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.mfhd.getSize() +
                            this.trafVideo.getSize() +
                            this.trafAudio.getSize()
                          );
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.mfhd.remux(),
                            t = this.trafVideo.remux(),
                            i = this.trafAudio.remux(),
                            s = this.getSize(),
                            r = new Uint8Array(s),
                            a = new DataView(r.buffer);
                          this.fillHeader(r, a, qi.MOOF, s);
                          var n = 8;
                          return (
                            r.set(e, n),
                            (n += e.length),
                            r.set(t, n),
                            (n += t.length),
                            r.set(i, n),
                            (n += i.length),
                            r
                          );
                        },
                      },
                      {
                        key: 'updateMdatDataOffset',
                        value: function () {
                          var e = this.getSize();
                          (e += 8),
                            (this.trafVideo.trun.remux_data_offset = e),
                            (this.trafAudio.trun.remux_data_offset =
                              e + this.trafVideo.trun.getMdatSize());
                        },
                      },
                      {
                        key: 'updateBaseMediaDecodeTime',
                        value: function () {
                          this.trafVideo.updateBaseMediaDecodeTime(),
                            this.trafAudio.updateBaseMediaDecodeTime();
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                ki = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return Object(s.a)(this, i), ((e = t.call(this)).sequence_number = 0), e;
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            (this.sequence_number = e.readUint32());
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) + 4
                          );
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.getSize(),
                            t = new Uint8Array(e),
                            i = new DataView(t.buffer);
                          return (
                            this.fillHeader(t, i, qi.MFHD, e),
                            i.setUint32(12, this.sequence_number),
                            t
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Pi),
                Ri = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).tfhd = null),
                      (e.tfdt = null),
                      (e.trun = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.tfhd.destroy(),
                            this.tfdt.destroy(),
                            this.trun.destroy(),
                            (this.tfhd = null),
                            (this.tfdt = null),
                            (this.trun = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'isVideo',
                        value: function () {
                          return 1 === this.tfhd.track_id;
                        },
                      },
                      {
                        key: 'getDuration',
                        value: function () {
                          return this.trun.sampleMdatIndex * this.tfhd.default_sample_duration;
                        },
                      },
                      {
                        key: 'getSampleDataSize',
                        value: function () {
                          return this.trun ? this.trun.getSampleDataSize(this.tfhd) : 0;
                        },
                      },
                      {
                        key: 'calcSampleMdatDataOffset',
                        value: function (e) {
                          this.trun.calcSampleMdatDataOffset(e, this.tfhd);
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e) {
                          this.trun && this.trun.readMdat(e, this.tfhd);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            this.readContainer(e);
                        },
                      },
                      {
                        key: 'onReadBox',
                        value: function (e) {
                          e.type === qi.TFHD
                            ? (this.tfhd = e)
                            : e.type === qi.TFDT
                            ? (this.tfdt = e)
                            : e.type === qi.TRUN && (this.trun = e);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.tfhd.getSize() +
                            this.tfdt.getSize() +
                            this.trun.getSize()
                          );
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.getSize(),
                            t = new Uint8Array(e),
                            i = new DataView(t.buffer);
                          this.fillHeader(t, i, qi.TRAF, e);
                          var s = this.tfhd.remux(),
                            r = this.tfdt.remux(),
                            a = this.trun.remux(),
                            n = 8;
                          return (
                            t.set(s, n),
                            (n += s.length),
                            t.set(r, n),
                            (n += r.length),
                            t.set(a, n),
                            (n += a.length),
                            t
                          );
                        },
                      },
                      {
                        key: 'updateBaseMediaDecodeTime',
                        value: function () {
                          var e = this.trun.getRemuxSampleCnt();
                          this.tfdt.base_media_decode_time_offset =
                            e * this.tfhd.default_sample_duration;
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Oi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).track_id = 0),
                      (e.base_data_offset = 0),
                      (e.sample_description_index = 0),
                      (e.default_sample_duration = 0),
                      (e.default_sample_size = 0),
                      (e.default_sample_flags = 0),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            (this.track_id = e.readUint32()),
                            this.flags & i.FLAG_BASE_DATA_OFFSET &&
                              (this.base_data_offset = e.readUint64()),
                            this.flags & i.FLAG_SAMPLE_DESC &&
                              (this.sample_description_index = e.readUint32()),
                            this.flags & i.FLAG_SAMPLE_DUR &&
                              (this.default_sample_duration = e.readUint32()),
                            this.flags & i.FLAG_SAMPLE_SIZE &&
                              (this.default_sample_size = e.readUint32()),
                            this.flags & i.FLAG_SAMPLE_FLAGS &&
                              (this.default_sample_flags = e.readUint32());
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          var e = Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(
                            this,
                          );
                          return (
                            (e += 4),
                            this.flags & i.FLAG_BASE_DATA_OFFSET && (e += 8),
                            this.flags & i.FLAG_SAMPLE_DESC && (e += 4),
                            this.flags & i.FLAG_SAMPLE_DUR && (e += 4),
                            this.flags & i.FLAG_SAMPLE_SIZE && (e += 4),
                            this.flags & i.FLAG_SAMPLE_FLAGS && (e += 4),
                            e
                          );
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.getSize(),
                            t = new Uint8Array(e),
                            s = new DataView(t.buffer);
                          this.fillHeader(t, s, qi.TFHD, e), s.setUint32(12, this.track_id);
                          var r = 16;
                          return (
                            this.flags & i.FLAG_BASE_DATA_OFFSET &&
                              (Ei.writeUint64(s, r, this.base_data_offset), (r += 8)),
                            this.flags & i.FLAG_SAMPLE_DESC &&
                              (s.setUint32(r, this.sample_description_index), (r += 4)),
                            this.flags & i.FLAG_SAMPLE_DUR &&
                              (s.setUint32(r, this.default_sample_duration), (r += 4)),
                            this.flags & i.FLAG_SAMPLE_SIZE &&
                              (s.setUint32(r, this.default_sample_size), (r += 4)),
                            this.flags & i.FLAG_SAMPLE_FLAGS &&
                              (s.setUint32(r, this.default_sample_flags), (r += 4)),
                            t
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Pi);
              (Oi.FLAG_BASE_DATA_OFFSET = 1),
                (Oi.FLAG_SAMPLE_DESC = 2),
                (Oi.FLAG_SAMPLE_DUR = 8),
                (Oi.FLAG_SAMPLE_SIZE = 16),
                (Oi.FLAG_SAMPLE_FLAGS = 32),
                (Oi.FLAG_DUR_EMPTY = 65536),
                (Oi.FLAG_DEFAULT_BASE_IS_MOOF = 131072);
              var bi = Oi,
                wi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).base_media_decode_time = 0),
                      (e.base_media_decode_time_offset = 0),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            1 === this.version
                              ? (this.base_media_decode_time = e.readUint64())
                              : (this.base_media_decode_time = e.readUint32());
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            (1 === this.version ? 8 : 4)
                          );
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.getSize(),
                            t = new Uint8Array(e),
                            i = new DataView(t.buffer);
                          return (
                            this.fillHeader(t, i, qi.TFDT, e),
                            1 === this.version
                              ? Ei.writeUint64(
                                  i,
                                  12,
                                  this.base_media_decode_time + this.base_media_decode_time_offset,
                                )
                              : i.setUint32(
                                  12,
                                  this.base_media_decode_time + this.base_media_decode_time_offset,
                                ),
                            t
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Pi),
                Li = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.sample_duration = 0),
                      (this.sample_size = 0),
                      (this.sample_flags = 0),
                      (this.sample_composition_time_offset = 0),
                      (this.dataOffset = 0),
                      (this.units = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.units = null;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Mi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).sample_count = 0),
                      (e.data_offset = 0),
                      (e.first_sample_flags = 0),
                      (e.samples = []),
                      (e.sampleMdatIndex = 0),
                      (e.sampleMdatSize = 0),
                      (e.remuxSampleStart = 0),
                      (e.remuxSampleEnd = 0),
                      (e.remux_data_offset = 0),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.samples.forEach(function (e) {
                            e.destroy();
                          }),
                            (this.samples = []),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'createEmptySamples',
                        value: function (e) {
                          this.remuxSampleEnd = e;
                          for (var t = 0; t < e; t++) {
                            var i = this.samples[t];
                            (i.units = new Uint8Array(Et.emptyAacFrame)),
                              (i.sample_size = i.units.length);
                          }
                          this.sampleMdatIndex = e;
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e, t) {
                          for (; this.sampleMdatIndex < this.sample_count; ) {
                            var i = this.samples[this.sampleMdatIndex];
                            if (!e.readSample(i, t)) break;
                            this.sampleMdatIndex++;
                          }
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            (this.sample_count = e.readUint32()),
                            this.flags & i.FLAGS_DATA_OFFSET && (this.data_offset = e.readUint32()),
                            this.flags & i.FLAGS_FIRST_FLAG &&
                              (this.first_sample_flags = e.readUint32());
                          for (var t = 0; t < this.sample_count; t++) {
                            var s = new Li(this.flags);
                            this.flags & i.FLAGS_DURATION && (s.sample_duration = e.readUint32()),
                              this.flags & i.FLAGS_SIZE && (s.sample_size = e.readUint32()),
                              this.flags & i.FLAGS_FLAGS && (s.sample_flags = e.readUint32()),
                              this.flags & i.FLAGS_CTS_OFFSET &&
                                (0 === this.version
                                  ? (s.sample_composition_time_offset = e.readUint32())
                                  : (s.sample_composition_time_offset = e.readInt32())),
                              (this.sampleMdatSize += s.sample_size),
                              this.samples.push(s);
                          }
                        },
                      },
                      {
                        key: 'calcSampleMdatDataOffset',
                        value: function (e, t) {
                          for (var i = 0; i < this.sample_count; i++) {
                            var s = this.samples[i];
                            (s.dataOffset = e),
                              0 === s.sample_size
                                ? (e += t.default_sample_size)
                                : (e += s.sample_size);
                          }
                        },
                      },
                      {
                        key: 'getRemuxSampleCnt',
                        value: function () {
                          return this.remuxSampleEnd - this.remuxSampleStart;
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          var e = Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(
                            this,
                          );
                          return (
                            (e += 4),
                            this.flags & i.FLAGS_DATA_OFFSET && (e += 4),
                            this.flags & i.FLAGS_FIRST_FLAG && (e += 4),
                            e + (this.remuxSampleEnd - this.remuxSampleStart) * this.getSampleSize()
                          );
                        },
                      },
                      {
                        key: 'getSampleDataSize',
                        value: function (e) {
                          for (var t = 0, i = 0; i < this.sample_count; i++) {
                            var s = this.samples[i];
                            0 === s.sample_size
                              ? (t += e.default_sample_size)
                              : (t += s.sample_size);
                          }
                          return t;
                        },
                      },
                      {
                        key: 'getSampleSize',
                        value: function () {
                          var e = 0;
                          return (
                            this.flags & i.FLAGS_DURATION && (e += 4),
                            this.flags & i.FLAGS_SIZE && (e += 4),
                            this.flags & i.FLAGS_FLAGS && (e += 4),
                            this.flags & i.FLAGS_CTS_OFFSET && (e += 4),
                            e
                          );
                        },
                      },
                      {
                        key: 'getMdatSize',
                        value: function () {
                          for (var e = 0, t = this.remuxSampleStart; t < this.remuxSampleEnd; t++)
                            e += this.samples[t].units.length;
                          return e;
                        },
                      },
                      {
                        key: 'getMdat',
                        value: function () {
                          for (
                            var e = this.getMdatSize(),
                              t = 0,
                              i = new Uint8Array(e),
                              s = this.remuxSampleStart;
                            s < this.remuxSampleEnd;
                            s++
                          ) {
                            var r = this.samples[s];
                            i.set(r.units, t), (t += r.units.length);
                          }
                          return i;
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = this.getSize(),
                            t = new Uint8Array(e),
                            s = new DataView(t.buffer);
                          this.fillHeader(t, s, qi.TRUN, e),
                            s.setUint32(12, this.remuxSampleEnd - this.remuxSampleStart);
                          var r = 16;
                          this.flags & i.FLAGS_DATA_OFFSET &&
                            (s.setUint32(r, this.remux_data_offset), (r += 4)),
                            this.flags & i.FLAGS_FIRST_FLAG &&
                              (s.setUint32(r, this.first_sample_flags), (r += 4));
                          for (var a = this.remuxSampleStart; a < this.remuxSampleEnd; a++) {
                            var n = this.samples[a];
                            this.flags & i.FLAGS_DURATION &&
                              (s.setUint32(r, n.sample_duration), (r += 4)),
                              this.flags & i.FLAGS_SIZE &&
                                (s.setUint32(r, n.sample_size), (r += 4)),
                              this.flags & i.FLAGS_FLAGS &&
                                (s.setUint32(r, n.sample_flags), (r += 4)),
                              this.flags & i.FLAGS_CTS_OFFSET &&
                                (0 === this.version
                                  ? s.setUint32(r, n.sample_composition_time_offset)
                                  : s.setInt32(r, n.sample_composition_time_offset),
                                (r += 4));
                          }
                          return t;
                        },
                      },
                    ]),
                    i
                  );
                })(Pi);
              (Mi.FLAGS_DATA_OFFSET = 1),
                (Mi.FLAGS_FIRST_FLAG = 4),
                (Mi.FLAGS_DURATION = 256),
                (Mi.FLAGS_SIZE = 512),
                (Mi.FLAGS_FLAGS = 1024),
                (Mi.FLAGS_CTS_OFFSET = 2048);
              var Vi = Mi,
                Ni = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e) {
                    var r;
                    return (
                      Object(s.a)(this, i),
                      ((r = t.call(this)).data_len = 0),
                      (r.data_size = e - 8),
                      (r.data = new Uint8Array(r.data_size)),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'isRecvFull',
                        value: function () {
                          return this.data_len >= this.data_size;
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          (this.data = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            e.skip(this.data_size);
                        },
                      },
                      {
                        key: 'appendData',
                        value: function (e) {
                          var t = e.peekBuffer(8, this.data_size);
                          (this.data_len = t.length), this.data.set(t, 0);
                        },
                      },
                      {
                        key: 'readSample',
                        value: function (e, t) {
                          var i = e.sample_size;
                          return (
                            0 === i && (i = t.default_sample_size),
                            this.data_len - e.dataOffset >= i &&
                              ((e.units = this.data.slice(e.dataOffset, e.dataOffset + i)), !0)
                          );
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          var e = 8 + this.data_len,
                            t = new Uint8Array(e),
                            i = new DataView(t.buffer);
                          return this.fillHeader(t, i, qi.MDAT, e), t.set(this.data, 8), t;
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Fi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    return Object(s.a)(this, i), t.call(this);
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            e.skip(this.size - 8);
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Bi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).mvhd = null),
                      (e.videoTrack = null),
                      (e.audioTrack = null),
                      (e.mvex = null),
                      (e.udta = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.mvhd.destroy(),
                            (this.mvhd = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            this.readContainer(e);
                        },
                      },
                      {
                        key: 'onReadBox',
                        value: function (e) {
                          e.type === qi.MVHD
                            ? (this.mvhd = e)
                            : e.type === qi.TRAK
                            ? e.isVideo()
                              ? (this.videoTrack = e)
                              : (this.audioTrack = e)
                            : e.type === qi.MVEX
                            ? (this.mvex = e)
                            : e.type === qi.UDTA && (this.udta = e);
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e) {
                          this.trafVideo && this.trafVideo.readMdat(e),
                            this.trafAudio && this.trafAudio.readMdat(e);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.mvhd.getSize() +
                            this.videoTrack.getSize() +
                            this.audioTrack.getSize() +
                            this.mvex.getSize() +
                            this.udta.getSize()
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Ui = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).tkhd = null),
                      (e.edts = null),
                      (e.mdia = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.tkhd.destroy(),
                            this.edts.destroy(),
                            this.mdia.destroy(),
                            (this.tkhd = null),
                            (this.edts = null),
                            (this.mdia = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'isVideo',
                        value: function () {
                          return 1 === this.tkhd.track_id;
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e) {
                          this.trun && this.trun.readMdat(e, this.tfhd);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            this.readContainer(e);
                        },
                      },
                      {
                        key: 'onReadBox',
                        value: function (e) {
                          e.type === qi.TKHD
                            ? (this.tkhd = e)
                            : e.type === qi.EDTS
                            ? (this.edts = e)
                            : e.type === qi.MDIA && (this.mdia = e);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.tkhd.getSize() +
                            this.edts.getSize() +
                            this.mdia.getSize()
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                xi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return Object(s.a)(this, i), ((e = t.call(this)).track_id = 0), e;
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            e.readUint32(),
                            e.readUint32(),
                            (this.track_id = e.readUint32()),
                            e.skip(this.size - 12 - 12);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.size
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Pi),
                Hi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).mdhd = null),
                      (e.hdlr = null),
                      (e.minf = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.mdhd.destroy(),
                            this.hdlr.destroy(),
                            this.minf.destroy(),
                            (this.mdhd = null),
                            (this.hdlr = null),
                            (this.minf = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e) {
                          this.trun && this.trun.readMdat(e, this.tfhd);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            this.readContainer(e);
                        },
                      },
                      {
                        key: 'onReadBox',
                        value: function (e) {
                          e.type === qi.MDHD
                            ? (this.mdhd = e)
                            : e.HDLR === qi.HDLR
                            ? (this.hdlr = e)
                            : e.type === qi.MINF && (this.minf = e);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.mdhd.getSize() +
                            this.hdlr.getSize() +
                            this.minf.getSize()
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Wi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).vmhd = null),
                      (e.dinf = null),
                      (e.stbl = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.vmhd.destroy(),
                            this.dinf.destroy(),
                            this.stbl.destroy(),
                            (this.vmhd = null),
                            (this.dinf = null),
                            (this.stbl = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e) {
                          this.trun && this.trun.readMdat(e, this.tfhd);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            this.readContainer(e);
                        },
                      },
                      {
                        key: 'onReadBox',
                        value: function (e) {
                          e.type === qi.VMHD
                            ? (this.vmhd = e)
                            : e.type === qi.DINF
                            ? (this.dinf = e)
                            : e.type === qi.STBL && (this.stbl = e);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.vmhd.getSize() +
                            this.dinf.getSize() +
                            this.minf.getSize()
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                Gi = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).stsd = null),
                      (e.stts = null),
                      (e.stsc = null),
                      (e.stsz = null),
                      (e.stco = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.stsd.destroy(),
                            this.stts.destroy(),
                            this.stsc.destroy(),
                            this.stsz.destroy(),
                            this.stco.destroy(),
                            (this.stsd = null),
                            (this.stts = null),
                            (this.stsc = null),
                            (this.stsz = null),
                            (this.stco = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'readMdat',
                        value: function (e) {
                          this.trun && this.trun.readMdat(e, this.tfhd);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            this.readContainer(e);
                        },
                      },
                      {
                        key: 'onReadBox',
                        value: function (e) {
                          e.type === qi.STSD
                            ? (this.stsd = e)
                            : e.type === qi.STTS
                            ? (this.stts = e)
                            : e.type === qi.STSC
                            ? (this.stsc = e)
                            : e.type === qi.STSZ
                            ? (this.stsz = e)
                            : e.type === qi.STCO && (this.stco = e);
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.stsd.getSize() +
                            this.stts.getSize() +
                            this.stsc.getSize() +
                            this.stsz.getSize()
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Ci),
                ji = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).headerBox = null),
                      (e.headerProps = null),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.headerBox.destroy(),
                            (this.headerBox = null),
                            Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this);
                        },
                      },
                      {
                        key: 'read',
                        value: function (e) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'read', this).call(this, e),
                            e.readUint32(),
                            e.readUint32();
                          var t = e.readStr(4);
                          if ('av01' == t) {
                            e.skip(6), e.skip(2), e.skip(2), e.skip(2), e.skip(12);
                            var s = e.readUint16(),
                              r = e.readUint16();
                            e.readUint32(),
                              e.readUint32(),
                              e.skip(4),
                              e.readUint16(),
                              e.readStr(32),
                              e.readUint16(),
                              e.skip(2);
                            var a = e.readUint32(),
                              n = (e.readStr(4), e.readUint8()),
                              o = ((n = e.readUint8()) >> 5) & 7,
                              h = 31 & n,
                              u = ((n = e.readUint8()) >> 7) & 1,
                              d = (n >> 6) & 1,
                              c = (n >> 5) & 1;
                            if (0 != (((n = e.readUint8()) >> 5) & 7))
                              return void console.error('av1C reserved_1 parsing problem');
                            if (1 == ((n >> 4) & 1));
                            else if (0 != (15 & n)) return;
                            var l,
                              p = a - 12,
                              f = e.buffer.slice(e.pos - 4, e.pos + p),
                              m = h;
                            m < 10 && (m = '0' + m),
                              2 === o && 1 === d
                                ? (l = 1 === c ? '12' : '10')
                                : o <= 2 && (l = 1 === d ? '10' : '08');
                            var _ = t + '.' + o + '.' + m + (u ? 'H' : 'M') + '.' + l;
                            (this.headerProps = {
                              type: t,
                              width: s,
                              height: r,
                              codec: _,
                              configOBUs: f,
                            }),
                              e.skip(this.size - 12 - 4 - 86 - 12);
                          } else if ('mp4a' == t) {
                            e.skip(6), e.skip(2), e.skip(8);
                            var v = e.readUint16(),
                              y = e.readUint16();
                            e.skip(2), e.skip(2);
                            var S = e.readUint32() / 65536;
                            e.skip(this.size - 12 - 4 - 36),
                              (this.headerProps = {
                                type: t,
                                channel_count: v,
                                samplesize: y,
                                samplerate: S,
                              });
                          }
                        },
                      },
                      {
                        key: 'getSize',
                        value: function () {
                          return (
                            Object(me.a)(Object(_e.a)(i.prototype), 'getSize', this).call(this) +
                            this.size
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Pi),
                Yi = new Map(),
                qi = {
                  STYP: 'styp',
                  SIDX: 'sidx',
                  MOOF: 'moof',
                  MFHD: 'mfhd',
                  TRAF: 'traf',
                  TFHD: 'tfhd',
                  TFDT: 'tfdt',
                  TRUN: 'trun',
                  MDAT: 'mdat',
                  MOOV: 'moov',
                  MVHD: 'mvhd',
                  TRAK: 'trak',
                  TKHD: 'tkhd',
                  EDTS: 'edts',
                  MDIA: 'mdia',
                  MDHD: 'mdhd',
                  HDLR: 'hdlr',
                  MINF: 'minf',
                  VMHD: 'vmhd',
                  DINF: 'dinf',
                  STBL: 'stbl',
                  STSD: 'stsd',
                  STTS: 'stts',
                  STSC: 'stsc',
                  STSZ: 'stsz',
                  STCO: 'stco',
                  AV01: 'av01',
                  MVEX: 'mvex',
                  UDTA: 'udta',
                  createBox: function (e) {
                    return (
                      0 === Yi.size &&
                        (Yi.set(this.STYP, Di),
                        Yi.set(this.SIDX, Ai),
                        Yi.set(this.MOOF, Ii),
                        Yi.set(this.MFHD, ki),
                        Yi.set(this.TRAF, Ri),
                        Yi.set(this.TFHD, bi),
                        Yi.set(this.TFDT, wi),
                        Yi.set(this.TRUN, Vi),
                        Yi.set(this.MDAT, Ni),
                        Yi.set(this.MOOV, Bi),
                        Yi.set(this.TRAK, Ui),
                        Yi.set(this.TKHD, xi),
                        Yi.set(this.MDIA, Hi),
                        Yi.set(this.MINF, Wi),
                        Yi.set(this.STBL, Gi),
                        Yi.set(this.STSD, ji)),
                      new (Yi.get(e) || Fi)()
                    );
                  },
                  getCharCode: function (e) {
                    for (var t = [], i = 0; i < e.length; i++) t.push(e.charCodeAt(i));
                    return t;
                  },
                },
                Ki = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.buffer = new Ei()),
                      (this.styp = null),
                      (this.sidxVideo = null),
                      (this.sidxAudio = null),
                      (this.moof = null),
                      (this.mdat = null),
                      (this.moov = null),
                      (this.step = 0),
                      (this.type = t);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'destroy',
                        value: function () {
                          this.buffer.destroy(),
                            this.styp.destroy(),
                            this.sidxVideo.destroy(),
                            this.sidxAudio.destroy(),
                            this.moof.destroy(),
                            this.mdat.destroy();
                        },
                      },
                      {
                        key: 'isRecvFull',
                        value: function () {
                          return this.mdat && this.mdat.isRecvFull();
                        },
                      },
                      {
                        key: 'setFullRemux',
                        value: function () {
                          (this.moof.trafVideo.trun.remuxSampleStart = 0),
                            (this.moof.trafAudio.trun.remuxSampleStart = 0),
                            (this.moof.trafVideo.trun.remuxSampleEnd =
                              this.moof.trafVideo.trun.sample_count),
                            (this.moof.trafAudio.trun.remuxSampleEnd =
                              this.moof.trafAudio.trun.sample_count),
                            (this.sidxVideo.earliest_presentation_time_offset = 0),
                            (this.sidxAudio.earliest_presentation_time_offset = 0),
                            (this.moof.trafVideo.tfdt.base_media_decode_time_offset = 0),
                            (this.moof.trafAudio.tfdt.base_media_decode_time_offset = 0);
                        },
                      },
                      {
                        key: 'setRemuxAll',
                        value: function () {
                          (this.moof.trafVideo.trun.remuxSampleStart =
                            this.moof.trafVideo.trun.remuxSampleEnd),
                            (this.moof.trafAudio.trun.remuxSampleStart =
                              this.moof.trafAudio.trun.remuxSampleEnd),
                            (this.moof.trafVideo.trun.remuxSampleEnd =
                              this.moof.trafVideo.trun.sample_count),
                            (this.moof.trafAudio.trun.remuxSampleEnd =
                              this.moof.trafAudio.trun.sample_count);
                        },
                      },
                      {
                        key: 'isCanSecOpen',
                        value: function (e) {
                          if (this.moof) {
                            var t =
                              (1e3 * this.moof.trafVideo.getDuration()) / this.sidxVideo.time_scale;
                            if (t >= e) {
                              this.moof.trafVideo.trun.remuxSampleEnd =
                                this.moof.trafVideo.trun.sampleMdatIndex;
                              var i = Math.ceil(
                                (t * this.sidxAudio.time_scale) /
                                  1e3 /
                                  this.moof.trafAudio.tfhd.default_sample_duration,
                              );
                              return (
                                (i = Math.min(i, this.moof.trafAudio.trun.sample_count)),
                                this.moof.trafAudio.trun.createEmptySamples(i),
                                !0
                              );
                            }
                          }
                          return !1;
                        },
                      },
                      {
                        key: 'appendBuffer',
                        value: function (e) {
                          this.buffer.appendBuffer(e), this.parse();
                        },
                      },
                      {
                        key: 'parse',
                        value: function () {
                          for (; this.buffer.isCanRead(8); ) {
                            var e = this.buffer.peekAnyInt(4),
                              t = this.buffer.peekString(4, 4);
                            if (t === qi.MDAT) {
                              if (
                                (this.mdat || (this.mdat = new Ni(e)),
                                this.mdat.appendData(this.buffer),
                                this.moof && this.moof.readMdat(this.mdat),
                                !this.buffer.isCanRead(e))
                              )
                                break;
                              this.mdat.read(this.buffer);
                            } else {
                              if (!this.buffer.isCanRead(e)) break;
                              var i = qi.createBox(t);
                              i.read(this.buffer),
                                t === qi.STYP
                                  ? (this.styp = i)
                                  : t === qi.SIDX
                                  ? 1 === i.reference_id
                                    ? (this.sidxVideo = i)
                                    : (this.sidxAudio = i)
                                  : t === qi.MOOF
                                  ? (this.moof = i)
                                  : t === qi.MOOV && (this.moov = i);
                            }
                          }
                        },
                      },
                      {
                        key: 'remux',
                        value: function () {
                          this.moof.updateMdatDataOffset(),
                            this.sidxVideo.updateReference(this.moof.trafVideo),
                            this.sidxAudio.updateReference(this.moof.trafAudio);
                          var e = this.styp.remux(),
                            t = this.sidxVideo.remux(),
                            i = this.sidxAudio.remux(),
                            s = this.moof.remux(),
                            r = this.moof.trafVideo.trun.getMdat(),
                            a = this.moof.trafAudio.trun.getMdat(),
                            n = 8 + r.length + a.length,
                            o = new Uint8Array(e.length + t.length + i.length + s.length + n),
                            h = 0;
                          return (
                            o.set(e, h),
                            (h += e.length),
                            o.set(i, h),
                            (h += i.length),
                            o.set(t, h),
                            (h += t.length),
                            o.set(s, h),
                            (o[(h += s.length)] = (n >> 24) & 255),
                            (o[h + 1] = (n >> 16) & 255),
                            (o[h + 2] = (n >> 8) & 255),
                            (o[h + 3] = 255 & n),
                            (h += 4),
                            o.set(qi.getCharCode(qi.MDAT), h),
                            (h += 4),
                            o.set(r, h),
                            (h += r.length),
                            o.set(a, h),
                            this.sidxVideo.updateEarliestPresentationTime(this.moof.trafVideo),
                            this.sidxAudio.updateEarliestPresentationTime(this.moof.trafAudio),
                            this.moof.updateBaseMediaDecodeTime(),
                            o
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ji = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.mse = t),
                      (this.mediaSource = null),
                      (this.buffer = null),
                      (this.segments = []),
                      (this.initSegment = null),
                      (this.initUrl = ''),
                      (this.config = null),
                      (this.initPhase = 0),
                      (this.initLoader = null),
                      (this.onUpdateendBind = this.onUpdateend.bind(this)),
                      (this.onErrorBind = this.onError.bind(this)),
                      (this.loadOpenBind = this.loadOpen.bind(this)),
                      (this.loadChunkBind = this.loadChunk.bind(this)),
                      (this.loadSuccessBind = this.loadSuccess.bind(this)),
                      (this.loadErrorBind = this.loadError.bind(this)),
                      (this.loadTimeoutBind = this.loadTimeout.bind(this)),
                      (this.onInitOpenCb = null),
                      (this.onInitCallback = null),
                      (this.onFirstBufCb = null),
                      (this.mp4 = null),
                      (this.firstPlay = !0),
                      (this.checkCurrentTime = !1),
                      (this.initMp4 = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          p.a.log('Av1Player.reset'),
                            this.buffer &&
                              (this.buffer.removeEventListener('updateend', this.onUpdateendBind),
                              this.buffer.removeEventListener('error', this.onErrorBind),
                              (this.buffer = null)),
                            this.initLoader && this.initLoader.abort(),
                            (this.onInitOpenCb = null),
                            (this.onInitCallback = null),
                            (this.mediaSource = null),
                            (this.segments = []);
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          p.a.log('Av1Player.destroy'),
                            this.reset(),
                            (this.initSegment = null),
                            (this.initPhase = 0),
                            (this.tryCnt = 5),
                            (this.initUrl = ''),
                            (this.config = null),
                            (this.mse = null),
                            (this.onFirstBufCb = null);
                        },
                      },
                      {
                        key: 'isPlaying',
                        value: function () {
                          return null != this.buffer;
                        },
                      },
                      {
                        key: 'isInitLoaded',
                        value: function () {
                          return 2 === this.initPhase;
                        },
                      },
                      {
                        key: 'initError',
                        value: function () {
                          3 !== this.initPhase &&
                            ((this.initPhase = 3), this.onError({ message: 'load init.mp4=404' }));
                        },
                      },
                      {
                        key: 'loadInit',
                        value: function (e, t, i) {
                          var s = i.initCb,
                            r = i.openCb;
                          if (0 === this.initPhase) {
                            p.a.log('M4sPlayer.loadInit'),
                              (this.initPhase = 1),
                              (this.initUrl = e),
                              (this.config = t),
                              (this.onInitCallback = s),
                              (this.onInitOpenCb = r);
                            var a = new te(t);
                            (this.initLoader = a),
                              a.loadBuffer(
                                e,
                                this.loadOpenBind,
                                this.loadChunkBind,
                                this.loadSuccessBind,
                                this.loadErrorBind,
                                this.loadTimeoutBind,
                                2e3,
                                t.fragLoadingMaxRetry,
                                t.fragLoadingRetryDelay,
                              );
                          }
                        },
                      },
                      {
                        key: 'loadOpen',
                        value: function (e) {
                          this.onInitOpenCb && (this.onInitOpenCb(), (this.onInitOpenCb = null));
                        },
                      },
                      { key: 'loadChunk', value: function (e) {} },
                      {
                        key: 'loadSuccess',
                        value: function (e) {
                          (this.initMp4 = new Ki(2)),
                            p.a.log('M4sPlayer.loadSuccess init'),
                            (this.initPhase = 2),
                            (this.initSegment = e),
                            this._initCodecs(),
                            this._appendInit(),
                            this.onInitCallback &&
                              (this.onInitCallback(), (this.onInitCallback = null)),
                            this.initMp4.appendBuffer(e),
                            console.log('initMp4', this.initMp4);
                          var t = this.initMp4.moov.videoTrack.mdia.minf.stbl.stsd.headerProps,
                            i = this.initMp4.moov.audioTrack.mdia.minf.stbl.stsd.headerProps;
                          this.mse.initSegmentSuc(t, i);
                        },
                      },
                      {
                        key: 'loadError',
                        value: function (e) {
                          e.code, e.currentTarget, e.msg, this.initError();
                        },
                      },
                      {
                        key: 'loadTimeout',
                        value: function (e) {
                          this.initError();
                        },
                      },
                      {
                        key: 'onMediaSourceOpen',
                        value: function (e) {
                          (this.mediaSource = e), this._initCodecs(), this._appendInit();
                        },
                      },
                      {
                        key: 'createMp4',
                        value: function () {
                          this.mp4 && (this.mp4.destroy(), (this.mp4 = null)),
                            (this.mp4 = new Ki(1));
                        },
                      },
                      {
                        key: 'appendSegment',
                        value: function (e, t) {
                          var i = this.mp4;
                          if (
                            (i.appendBuffer(e),
                            this.mse.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS)
                          )
                            i.isRecvFull() && this.mse.remuxAv1(i, t);
                          else {
                            var s = !1;
                            this.firstPlay
                              ? i.isCanSecOpen(200) &&
                                ((i.step = 1), (this.firstPlay = !1), (s = !0))
                              : i.isRecvFull() &&
                                (1 == i.step && (i.step = 2), (s = !0), i.setFullRemux()),
                              s &&
                                (p.a.log(
                                  'M4sPlayer.appendSegment video=['
                                    .concat(i.moof.trafVideo.trun.remuxSampleStart, ', ')
                                    .concat(i.moof.trafVideo.trun.remuxSampleEnd, '] audio=[')
                                    .concat(i.moof.trafAudio.trun.remuxSampleStart, ', ')
                                    .concat(i.moof.trafAudio.trun.remuxSampleEnd, ']'),
                                ),
                                (e = i.remux()),
                                this.segments.push({ segment: e, step: i.step }),
                                this._appendBuffer());
                          }
                        },
                      },
                      {
                        key: '_appendInit',
                        value: function () {
                          this.initSegment &&
                            this.buffer &&
                            this.buffer.appendBuffer(this.initSegment);
                        },
                      },
                      {
                        key: '_appendBuffer',
                        value: function () {
                          if (
                            this.initSegment &&
                            this.segments.length > 0 &&
                            this.buffer &&
                            !this.buffer.updating
                          ) {
                            this.onFirstBufCb && this.onFirstBufCb();
                            var e = this.segments.shift(),
                              t = e.segment;
                            (this.checkCurrentTime = 2 === e.step), this.buffer.appendBuffer(t);
                          }
                        },
                      },
                      {
                        key: '_initCodecs',
                        value: function () {
                          !this.buffer &&
                            this.mediaSource &&
                            2 === this.initPhase &&
                            (p.a.log('M4sPlayer._initCodecs'),
                            (this.buffer = this.mediaSource.addSourceBuffer(
                              'video/mp4;codecs='.concat(gi.a.AV01),
                            )),
                            this.buffer.addEventListener('updateend', this.onUpdateendBind),
                            this.buffer.addEventListener('error', this.onErrorBind));
                        },
                      },
                      {
                        key: 'onUpdateend',
                        value: function () {
                          this.mse.checkSeek(),
                            this.checkCurrentTime &&
                              (p.a.log('M4sPlayer.onUpdateend checkCurrentTime'),
                              (this.checkCurrentTime = !1),
                              this.mse.checkCurrentTime()),
                            this._appendBuffer();
                        },
                      },
                      {
                        key: 'onError',
                        value: function (e) {
                          p.a.log('M4sPlayer.onError '.concat(e.message)),
                            this.mse && this.mse.onM4sError();
                        },
                      },
                      {
                        key: 'hasVideo',
                        value: function () {
                          return !!this.buffer;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                zi = i(24),
                Qi = [43, 138, 8, 0],
                Xi = 0,
                $i = (function () {
                  function e(t, i, r) {
                    Object(s.a)(this, e), (this._num_ = ++Xi);
                    var a = i.videoType,
                      n = void 0 === a ? 'flv' : a,
                      o = i.isLive,
                      h = void 0 === o || o,
                      u = i.isPureAudio,
                      d = void 0 !== u && u,
                      c = i.isPureVideo,
                      l = void 0 !== c && c,
                      p = i.isH265Mode,
                      f = i.videoElement,
                      m = void 0 === f ? null : f;
                    (this.videoElement = m),
                      (this.isH265Mode = p),
                      (this.handler = t),
                      (this.videoType = n),
                      (this.isLive = h),
                      (this.isPureAudio = d),
                      (this.isPureVideo = l),
                      (this.parser = null),
                      (this.metadata = {}),
                      (this.bufStat = new bt()),
                      (this.pauseStat = new wt(this)),
                      (this.pausePerf = new Bt()),
                      (this.buffered = new jt()),
                      this.buffered.setMse(this),
                      (this.h264SeiInfos = new Yt(this)),
                      (this.scriptVolumeInfos = new qt(this)),
                      (this.pid = 0),
                      (this.bitrate = 0),
                      (this.JITTER_BUFMIN = 1e3),
                      (this.JITTER_BUFLEN = 4e3),
                      (this.JITTER_BUFMAX = 8e3),
                      (this.webcodecType = r),
                      (this.width = 1280),
                      (this.height = 720),
                      (this.widthCfg = 1280),
                      (this.heightCfg = 720),
                      (this.mediaElement = null),
                      (this.hasRemuxed = !1),
                      (this.m4sPlayer = new Ji(this)),
                      (this.remuxer = new gt(this)),
                      (this.avSyncStat = new ii(this)),
                      (this.ctrlBuffer = new ti(
                        {
                          bufferSize: 0,
                          popDuration: Number(I.a.popDuration) || 200,
                          timescale: this.remuxer.timescale,
                          isPureAudio: this.isPureAudio,
                          isPureVideo: this.isPureVideo,
                          webcodecType: this.webcodecType,
                        },
                        this._remux.bind(this),
                        this,
                      )),
                      (this.renderFps = new si(this)),
                      (this.onPageRenderCbkBind = this.onPageRenderCbk.bind(this)),
                      window.requestAnimationFrame &&
                        I.a.renderStat[0] &&
                        window.requestAnimationFrame(this.onPageRenderCbkBind),
                      (this.videoPlayConsuming = new ri(this)),
                      (this.audioPlayConsuming = new ri(this)),
                      (this.audioConfig = Qi.slice()),
                      this.updateAudioConfig(
                        {
                          audioConfig: this.audioConfig,
                          codec: 'mp4a.40.5',
                          audioSampleRate: 22050,
                          aacTimeLen: 1024e3 / 22050,
                          audioObjectType: 5,
                          audioChannelCount: 1,
                        },
                        !0,
                      ),
                      (this.perfBlockCnt = 0),
                      (this.remuxVideoCnt = 0),
                      (this.audioEmptyDuration = 0),
                      (this.audioEmptyList4Sec = []),
                      (this.lastSecNow = D.a.now()),
                      (this.isNoAudio = !0),
                      Si.add(this.onCheckFastWorkerTimer, this, 100),
                      (this.shildAudioStartTs = 0),
                      (this.isShieldAudio = !1),
                      (this.isRevFastOver = !1),
                      (this.videoCallBackLargeCnt = 0),
                      (this.isOnFragParsed = !1),
                      (this.onFragParsedTime = 0),
                      (this.audioSampleNums = 0),
                      (this.videoSampleNums = 0),
                      (this.isOnEnded = !1),
                      'visible' == document.visibilityState
                        ? (this.initTime = D.a.now())
                        : (this.initTime = 0),
                      (this.checkScreenTs = 0),
                      (this.singleColorCnt = 0),
                      (this.isSingleErr = !1),
                      (this.isSingleTest = !1),
                      (this.canvas = null),
                      (this.context = null),
                      (this.isPlayVideo = !1),
                      (this.isMuffeled = !1),
                      (this.muffleTs = 0),
                      (this.muffleDuration = 0),
                      (this.muffleCnt = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'onVisibilitychange',
                        value: function () {
                          p.a.log('BaseController.onVisibilitychange', document.visibilityState),
                            'visible' == document.visibilityState
                              ? (this.initTime = D.a.now())
                              : ((this.initTime = 0), (this.singleColorCnt = 0));
                        },
                      },
                      {
                        key: 'printAVInfos',
                        value: function () {
                          this.parser &&
                            (this.parser.printVideoInfo && this.parser.printVideoInfo(),
                            this.parser.printAudioInfo && this.parser.printAudioInfo());
                        },
                      },
                      {
                        key: 'resetHls',
                        value: function () {
                          this.parser.reset && this.parser.reset(),
                            this.remuxer.reset(),
                            this.remuxer.resetInitDts && this.remuxer.resetInitDts();
                        },
                      },
                      { key: 'onFastOver', value: function () {} },
                      {
                        key: 'setParams',
                        value: function (e, t) {
                          if (
                            ((this.pid = e),
                            (this.bitrate = t),
                            this._initPerf(),
                            this.parser.dropFrameDts)
                          ) {
                            var i = !1;
                            (1 === I.a.dropFrameUids[0] ||
                              -1 !== I.a.dropFrameUids.indexOf(parseInt(e))) &&
                              (i = !0),
                              (this.parser.dropFrameDts.open = i);
                          }
                          this.parser.dropFrameDts.start();
                        },
                      },
                      {
                        key: '_initPerf',
                        value: function () {
                          'ts' !== this.videoType &&
                            this.pausePerf.checkLocal(this.pid, this.bitrate) &&
                            this.parser.dropFrameCtrl.start();
                        },
                      },
                      {
                        key: 'getDelayStat',
                        value: function () {
                          return 'ts' !== this.videoType ? this.parser.sei.getStat() : null;
                        },
                      },
                      {
                        key: 'onRestart',
                        value: function () {
                          p.a.log('BaseController('.concat(this._num_, ').onRestart')),
                            this.reset();
                        },
                      },
                      {
                        key: 'onVideoParseInvalid',
                        value: function () {
                          this.handler &&
                            this.handler.onVideoParseInvalid &&
                            this.handler.onVideoParseInvalid();
                        },
                      },
                      {
                        key: 'onGop',
                        value: function (e) {
                          this.handler.onGop && this.handler.onGop(e),
                            e > this.maxGop &&
                              ((this.maxGop = e),
                              p.a.log(
                                'BaseController('.concat(this._num_, ').onGop update maxGop=') +
                                  this.maxGop,
                              ));
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e, t) {
                          this.parser &&
                            this.parser.fps &&
                            ((this.metadata.fps = this.parser.fps.getFps()),
                            (this.metadata.recvVideoFps = this.parser.fps.getRecvFps())),
                            this.parser &&
                              this.parser.audioFps &&
                              ((this.metadata.audioFps = this.parser.audioFps.getFps()),
                              (this.metadata.recvAudioFps = this.parser.audioFps.getRecvFps()));
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function (e, t) {
                          1 === Number(I.a.isMute) && this.muffledVoice(),
                            this._getEmptyAudioDuration(e);
                        },
                      },
                      {
                        key: 'getCodecType',
                        value: function () {
                          return this.m4sPlayer.isInitLoaded()
                            ? G.a.AV1
                            : this.getControllerCodecType();
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this.m4sPlayer.reset();
                        },
                      },
                      {
                        key: 'onEnded',
                        value: function () {
                          this.isOnEnded = !0;
                        },
                      },
                      {
                        key: 'onCheckFastWorkerTimer',
                        value: function () {
                          this.checkSolidColor();
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          Si.remove(this.onCheckFastWorkerTimer, this),
                            (this.metadata = {}),
                            (this.JITTER_BUFMIN = 1e3),
                            (this.JITTER_BUFLEN = 4e3),
                            (this.JITTER_BUFMAX = 8e3),
                            this.remuxer.destroy(),
                            this.ctrlBuffer && this.ctrlBuffer.destroy && this.ctrlBuffer.destroy(),
                            this.m4sPlayer && (this.m4sPlayer.destroy(), (this.m4sPlayer = null)),
                            (this.hasRemuxed = !1),
                            this.resetPerfBlockCnt(),
                            this.renderFps.reset(),
                            (this.audioEmptyList4Sec.length = 0),
                            (this.isNoAudio = !0),
                            (this.shildAudioStartTs = 0),
                            (this.isShieldAudio = !1),
                            this.videoPlayConsuming && this.videoPlayConsuming.destroy(),
                            this.audioPlayConsuming && this.audioPlayConsuming.destroy(),
                            (this.initTime = 0),
                            (this.checkScreenTs = 0),
                            (this.singleColorCnt = 0),
                            (this.isSingleErr = !1),
                            (this.isSingleTest = !1),
                            (this.canvas = null),
                            (this.context = null),
                            (this.isPlayVideo = !1),
                            (this.isMuffeled = !1),
                            (this.muffleTs = 0),
                            (this.muffleDuration = 0),
                            (this.muffleCnt = 0);
                        },
                      },
                      {
                        key: 'getControllerCodecType',
                        value: function () {
                          return this.parser.getCodecType();
                        },
                      },
                      {
                        key: 'setPushGop',
                        value: function (e) {
                          this.parser.setPushGop(e);
                        },
                      },
                      {
                        key: 'saveH264SeiData',
                        value: function (e, t) {
                          this.h264SeiInfos.add(e, t);
                        },
                      },
                      {
                        key: 'saveSeiInfo',
                        value: function (e, t, i) {
                          1 === Number(localStorage._printSeiInfo) &&
                            p.a.log(
                              'BaseController.saveSeiInfo, timestamp='
                                .concat(e, ', type=')
                                .concat(i),
                            ),
                            this.handler &&
                              this.handler.eventEmitter.trigger(l.SEI_INFO, {
                                timestamp: e,
                                data: t,
                              });
                        },
                      },
                      {
                        key: 'setPlaybackrateAccess',
                        value: function (e) {
                          this.playbackrateChangeAccess = e;
                        },
                      },
                      {
                        key: 'getDelayInfo',
                        value: function () {
                          return (
                            p.a.log('MSEPlayer.getDelayInfo: delay: ', this.mediaDelay),
                            this.mediaDelay
                          );
                        },
                      },
                      {
                        key: 'setSeiDelay',
                        value: function (e) {
                          if (this.seiAnchorDelay !== e || !this.mediaDelay) {
                            var t = this.getBufferLen();
                            this.isShieldAudio && (t += this.getFrameBufferLen()),
                              (this.seiAnchorDelay = e),
                              (this.mediaDelay = {
                                total_delay: this.seiAnchorDelay + t,
                                buffer_delay: t,
                                status: 0,
                              }),
                              0 === this.seiAnchorDelay && (this.mediaDelay.status = 1);
                          }
                        },
                      },
                      {
                        key: 'getRealFps',
                        value: function () {
                          return this.parser.getRealFps ? this.parser.getRealFps() : 0;
                        },
                      },
                      {
                        key: 'getIsDownEnough',
                        value: function () {
                          return !this.parser.isDownEnough || this.parser.isDownEnough();
                        },
                      },
                      {
                        key: 'getRealBitrate',
                        value: function () {
                          var e = 0;
                          return this.parser.fps && (e = this.parser.fps.getRealBitrate()), e;
                        },
                      },
                      {
                        key: 'setDeleteH264Aud',
                        value: function (e) {
                          this.parser.setDeleteH264Aud(e);
                        },
                      },
                      {
                        key: 'setNeedEmptyAudioFrame',
                        value: function (e) {
                          this.parser.setNeedEmptyAudioFrame(e);
                        },
                      },
                      {
                        key: 'setJitter',
                        value: function () {
                          var e =
                              arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3e3,
                            t =
                              arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3,
                            i =
                              arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5e3;
                          (this.JITTER_BUFLEN = e),
                            (this.JITTER_BUFMIN = t),
                            (this.JITTER_BUFMAX = i),
                            p.a.info(
                              ''
                                .concat(this._getTag(), ' BaseController.setJitter bufMin=')
                                .concat(t, ' bufLen=')
                                .concat(e, ' bufMax=')
                                .concat(i),
                            );
                        },
                      },
                      {
                        key: 'setResolution',
                        value: function (e, t) {
                          p.a.log(
                            'BaseController('.concat(this._num_, ').setResolution w/h=') +
                              e +
                              '/' +
                              t,
                          ),
                            this.width &&
                              this.height &&
                              (this.width !== e || this.height !== t) &&
                              this.handler.eventEmitter &&
                              this.handler.eventEmitter.trigger(l.VIDEO_RESOLUTION_CHANGE),
                            (this.width = e),
                            (this.height = t);
                        },
                      },
                      {
                        key: 'getWidth',
                        value: function () {
                          return this.width;
                        },
                      },
                      {
                        key: 'getHeight',
                        value: function () {
                          return this.height;
                        },
                      },
                      {
                        key: 'setExceptionStat',
                        value: function (e, t) {
                          this.handler &&
                            this.handler.exceptionStat &&
                            this.handler.exceptionStat.setStat(e, t);
                        },
                      },
                      {
                        key: 'cacheBlockReason',
                        value: function (e, t) {
                          this.handler &&
                            this.handler.cacheBlockReason &&
                            this.handler.cacheBlockReason(e, t);
                        },
                      },
                      {
                        key: 'getPlayStat',
                        value: function () {
                          return this.parser.getPlayStat();
                        },
                      },
                      {
                        key: 'getCaptureStats',
                        value: function (e) {
                          return this.parser && this.parser.vCaptureJitterStat
                            ? {
                                video: this.parser.vCaptureJitterStat.getStats(e),
                                audio: this.parser.aCaptureJitterStat.getStats(e),
                              }
                            : null;
                        },
                      },
                      {
                        key: 'getPlayVideo',
                        value: function () {
                          return this.video ? this.video.video : null;
                        },
                      },
                      {
                        key: 'getFrameReadyed',
                        value: function () {
                          return this.parser && this.parser.getFrameReadyed
                            ? this.parser.getFrameReadyed()
                            : 0;
                        },
                      },
                      {
                        key: 'getFramePlayDelays',
                        value: function () {
                          return this.parser.getCalculateVideoFramePlayDelay
                            ? this.parser.getCalculateVideoFramePlayDelay()
                            : 0;
                        },
                      },
                      {
                        key: 'getVideoDecodeDelaySmooth',
                        value: function () {
                          return 0;
                        },
                      },
                      {
                        key: 'getFrameBufferLen',
                        value: function () {
                          return this.parser.getFrameBufferLen
                            ? this.parser.getFrameBufferLen()
                            : 0;
                        },
                      },
                      {
                        key: 'getContinueBuffer',
                        value: function () {
                          return this.buffered.continueBuffer;
                        },
                      },
                      {
                        key: 'getVideoContinueBuffer',
                        value: function () {
                          return this.buffered.getVideoContinueBuffer();
                        },
                      },
                      {
                        key: 'getParserBufLen',
                        value: function () {
                          return this.parser.getParserBufLen();
                        },
                      },
                      {
                        key: 'setSensitivePause',
                        value: function (e) {
                          this.sensitivePause = e;
                        },
                      },
                      {
                        key: 'getInitDts',
                        value: function () {
                          return void 0 === this.remuxer.getInitDts()
                            ? 0
                            : this.remuxer.getInitDts();
                        },
                      },
                      {
                        key: 'getCurrentSeiOffsetDts',
                        value: function () {
                          return this.offsetDts || 0;
                        },
                      },
                      {
                        key: 'appendFlv',
                        value: function (e) {
                          this.parser.parseFlv(e);
                        },
                      },
                      {
                        key: 'appendFlvTag',
                        value: function (e, t) {
                          this.parser.parseTag(e, this.isPureAudio, t);
                        },
                      },
                      {
                        key: '_getTag',
                        value: function () {
                          var e = this.handler.constructor.name;
                          return this._num_ + ' ' + e;
                        },
                      },
                      {
                        key: 'recvDataFull',
                        value: function () {
                          this.handler && this.handler.recvDataFull && this.handler.recvDataFull();
                        },
                      },
                      {
                        key: 'getVideoFrames',
                        value: function () {
                          return this.parser && this.parser.getVideoFrames
                            ? this.parser.getVideoFrames()
                            : 0;
                        },
                      },
                      {
                        key: 'getAudioFrames',
                        value: function () {
                          return this.parser && this.parser.getAudioFrames
                            ? this.parser.getAudioFrames()
                            : 0;
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          this.webcodecType == B.a.PLAYER_CORE_TYPE.MSE
                            ? this.video.setVolume(e)
                            : this.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                              this.startMuteRender(e);
                        },
                      },
                      {
                        key: 'muffledVoice',
                        value: function () {
                          var e = this;
                          if (this.handler && this.handler.getMuffleCacheData) {
                            var t = D.a.now(),
                              i = this.handler.voiceEliminationData || [],
                              s = !1,
                              r = this.getCurrentDts(),
                              a = this.getBufferLen(),
                              n = 0,
                              o = 0,
                              h = Object(pe.a)(i),
                              u = this.handler.getMuffleCacheData(),
                              d = u.length;
                            if (0 != u.length) {
                              var c = u[0].begin,
                                l = u[d - 1].end,
                                f = r - c,
                                m = r - u[0].end,
                                _ = r - u[d - 1].begin,
                                v = r - l;
                              1 == Number(localStorage._printMuteInfo) &&
                                p.a.log(
                                  'MSEPlayer.muffledVoice nowDts='
                                    .concat(r, ',buffer=')
                                    .concat(a, ',cacheBegin=')
                                    .concat(c, ',cacheEnd=')
                                    .concat(l, ',firstBeginDetla=')
                                    .concat(f, ',firstEndDelta=')
                                    .concat(m, ',lastBeginDelta=')
                                    .concat(_, ',lastEndDelta=')
                                    .concat(v, ',cacheLen=')
                                    .concat(d),
                                ),
                                u.map(function (t, i) {
                                  (n = t.begin),
                                    (o = t.end),
                                    0 == t.type && ((n += e.offsetDts), (o += e.offsetDts)),
                                    r >= n &&
                                      r <= o &&
                                      ((s = !0),
                                      1 == Number(localStorage._printMuteInfo) &&
                                        p.a.log(
                                          'MSEPlayer.muffledVoicecache data',
                                          JSON.stringify(t),
                                        ));
                                });
                            }
                            h.map(function (t, i) {
                              (n = t.begin),
                                (o = t.end),
                                0 == t.type && ((n += e.offsetDts), (o += e.offsetDts)),
                                r > o && e.handler.voiceEliminationData.splice(i, 1);
                            }),
                              this.setMuffledVolume(s),
                              !this.isMuffeled && s && 0 == this.muffleTs
                                ? (this.muffleTs = t)
                                : !s &&
                                  this.isMuffeled &&
                                  ((this.muffleDuration += t - this.muffleTs),
                                  this.muffleCnt++,
                                  (this.muffleTs = 0)),
                              (this.isMuffeled = s);
                          }
                        },
                      },
                      { key: 'setMuffledVolume', value: function (e) {} },
                      {
                        key: 'disableHardAcc',
                        value: function () {
                          p.a.log('BaseController.disableHardAcc');
                        },
                      },
                      {
                        key: 'setDisableHardAcc',
                        value: function () {
                          p.a.log('BaseController.setDisableHardAcc');
                        },
                      },
                      {
                        key: 'pushAvcSample',
                        value: function (e) {
                          this.isPureAudio || this.ctrlBuffer.addSample(e);
                        },
                      },
                      {
                        key: 'pushAacSample',
                        value: function (e, t) {
                          2 == t
                            ? this.ctrlBuffer.addShieldAudioSample(e)
                            : this.ctrlBuffer.addSample(e);
                        },
                      },
                      {
                        key: 'appendShieldAudioFlv',
                        value: function (e) {
                          this.parser2.parseFlv(e, !0);
                        },
                      },
                      {
                        key: 'updateAudioConfig',
                        value: function (e, t, i) {
                          var s = e.audioConfig,
                            r = e.codec,
                            a = e.audioSampleRate,
                            n = e.aacTimeLen,
                            o = e.audioObjectType,
                            h = e.audioChannelCount;
                          if (t)
                            this.ctrlBuffer.updateAudioConfig(
                              {
                                config: s,
                                codec: r,
                                audiosamplerate: a,
                                aacTimeLen: n,
                                audioObjectType: o,
                                audioChannelCount: h,
                              },
                              !1,
                              1,
                              t,
                            );
                          else {
                            var u = !1,
                              d = s;
                            d.toString(16) !== this.audioConfig.toString(16) &&
                              (this.audioConfig.toString(16) === Qi.toString(16) &&
                                this.remuxer.videoISGenerated &&
                                (u = !0),
                              p.a.warn(
                                "MSEPlayer.parseAudio adts changed old='"
                                  .concat(this.audioConfig, ", new='")
                                  .concat(d, ', needReplay=')
                                  .concat(u),
                              )),
                              (this.audioConfig = s),
                              this.ctrlBuffer.updateAudioConfig(
                                {
                                  config: s,
                                  codec: r,
                                  audiosamplerate: a,
                                  aacTimeLen: n,
                                  audioObjectType: o,
                                  audioChannelCount: h,
                                },
                                u,
                                i,
                                t,
                              ),
                              this.remuxer.switchLevel(!1, u),
                              this.setExceptionStat(C.a.DIM_LINK_STA.AUDIO_CONFIG, 1);
                          }
                        },
                      },
                      {
                        key: 'updateVideoConfig',
                        value: function (e, t) {
                          this.isPureAudio || this.ctrlBuffer.updateVideoConfig(e, t);
                        },
                      },
                      {
                        key: 'getLastIFrameDts',
                        value: function () {
                          return this.ctrlBuffer.getLastIFrameDts();
                        },
                      },
                      {
                        key: 'getFrameBufferLen',
                        value: function () {
                          return this.ctrlBuffer.getBufferLen();
                        },
                      },
                      {
                        key: 'getFrameReadyed',
                        value: function () {
                          return this.ctrlBuffer.getSize();
                        },
                      },
                      {
                        key: 'setNeedEmptyAudioFrame',
                        value: function (e) {
                          this.ctrlBuffer.setNeedEmptyAudioFrame(e),
                            p.a.log('FlvParser.setNeedEmptyAudioFrame ' + e);
                        },
                      },
                      {
                        key: 'getParserBufLen',
                        value: function () {
                          return this.ctrlBuffer.getBufferLen();
                        },
                      },
                      {
                        key: '_remux',
                        value: function (e, t) {
                          this._setRemuxed(),
                            (this.remuxVideoCnt += e.samples.length),
                            this.avSyncStat.checkSync(e, t),
                            this.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS
                              ? (this.appendAvcTrack(e), this.appendAacSample(t))
                              : this.remuxer && this.remuxer.remux(t, e, 0, !1);
                        },
                      },
                      {
                        key: 'initSegmentSuc',
                        value: function (e, t) {
                          this.webcodecType != B.a.PLAYER_CORE_TYPE.MSE &&
                            (p.a.log('BaseController.initSegmentSuc', e, t),
                            this._initSegmentSuc(e),
                            this.updateM4sAudioConfig({
                              codec: 'mp4a.40.5',
                              audioSampleRate: t.samplerate,
                              audioChannelCount: t.channel_count,
                            }),
                            this.updateAVCConfig({ width: e.width, height: e.height }));
                        },
                      },
                      {
                        key: '_setRemuxed',
                        value: function () {
                          this.hasRemuxed ||
                            ((this.hasRemuxed = !0), this.recvDataFull && this.recvDataFull());
                        },
                      },
                      {
                        key: 'setPerfCntPlus',
                        value: function () {
                          this.perfBlockCnt++;
                        },
                      },
                      {
                        key: 'resetPerfBlockCnt',
                        value: function () {
                          this.perfBlockCnt = 0;
                        },
                      },
                      {
                        key: 'getRealFpsAudio',
                        value: function () {
                          return this.parser.getRealFpsAudio ? this.parser.getRealFpsAudio() : 0;
                        },
                      },
                      {
                        key: 'onVideoResize',
                        value: function (e) {
                          this.checkResolution();
                        },
                      },
                      {
                        key: 'checkResolution',
                        value: function () {
                          if (
                            !this.h265Proxy ||
                            !this.h265Proxy.isReady ||
                            this.h265Proxy.isH265MseCodec
                          ) {
                            var e = 0,
                              t = 0;
                            this.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS
                              ? ((e = this.videoRender.getVideoWidth()),
                                (t = this.videoRender.getVideoHeight()))
                              : ((e = this.video.getVideoWidth()),
                                (t = this.video.getVideoHeight())),
                              p.a.log(
                                'MSEPlayer('.concat(this._num_, ').checkResolution o_w/o_h=') +
                                  this.width +
                                  '/' +
                                  this.height,
                                'n_w/nh',
                                e,
                                '/',
                                t,
                              ),
                              this.width &&
                                this.height &&
                                (this.width !== e || this.height !== t) &&
                                this.handler.eventEmitter &&
                                this.handler.eventEmitter.trigger(l.VIDEO_RESOLUTION_CHANGE, {
                                  width: e,
                                  height: t,
                                }),
                              (this.width = e),
                              (this.height = t);
                          }
                        },
                      },
                      {
                        key: 'setAvcCfg',
                        value: function (e, t) {
                          (e == this.widthCfg && t == this.heightCfg) ||
                            (p.a.log(
                              'BaseController.setAvcCfg o_w/o_h=' +
                                this.widthCfg +
                                '/' +
                                this.heightCfg,
                              'n_w/nh',
                              e,
                              '/',
                              t,
                            ),
                            this.handler.eventEmitter &&
                              this.handler.eventEmitter.trigger(l.VIDEO_AVCCFG_CHANGE, {
                                width: e,
                                height: t,
                              })),
                            (this.widthCfg = e),
                            (this.heightCfg = t);
                        },
                      },
                      {
                        key: 'getMseAvcCfgWidth',
                        value: function () {
                          return this.widthCfg;
                        },
                      },
                      {
                        key: 'getMseAvcCfgHeight',
                        value: function () {
                          return this.heightCfg;
                        },
                      },
                      {
                        key: 'onPageRenderCbk',
                        value: function () {
                          this.renderFps.addPageRender(),
                            window.requestAnimationFrame &&
                              window.requestAnimationFrame(this.onPageRenderCbkBind);
                        },
                      },
                      {
                        key: 'onScriptVolumeInfo',
                        value: function (e, t) {
                          this.handler.onSendScriptVolumeInfo(e, t);
                        },
                      },
                      {
                        key: '_getEmptyAudioDuration',
                        value: function (e) {
                          var t = this.ctrlBuffer.avBuffer.aBuffer.getEmptyeDuration();
                          (this.audioEmptyDuration += t),
                            e - this.lastSecNow >= 4e3 &&
                              (this.audioEmptyList4Sec.push(
                                Math.floor(
                                  this.audioEmptyDuration > 4e3 ? 4e3 : this.audioEmptyDuration,
                                ),
                              ),
                              (this.audioEmptyDuration = 0),
                              (this.lastSecNow = e));
                        },
                      },
                      {
                        key: 'getEmptyAudioDurationHeart',
                        value: function () {
                          return this.ctrlBuffer.avBuffer.aBuffer.getEmptyDurationHeart();
                        },
                      },
                      {
                        key: 'hasAudioCfg',
                        value: function () {
                          return this.parser && this.parser.recvAudioConfig;
                        },
                      },
                      {
                        key: 'getEmptyAudioRecord',
                        value: function () {
                          var e = Object(pe.a)(this.audioEmptyList4Sec);
                          return (this.audioEmptyList4Sec.length = 0), e;
                        },
                      },
                      { key: 'setRealFps', value: function () {} },
                      {
                        key: 'setNoAuido',
                        value: function (e) {
                          this.isNoAudio = e;
                        },
                      },
                      {
                        key: 'setStreamFormat',
                        value: function (e) {
                          this.handler &&
                            this.handler.setStreamFormat &&
                            this.handler.setStreamFormat(e);
                        },
                      },
                      {
                        key: 'switchShieldAudio',
                        value: function (e) {
                          this.ctrlBuffer.switchShieldAudio(e);
                        },
                      },
                      {
                        key: 'stopShieldAudio',
                        value: function () {
                          this.switchShieldAudio(!1), (this.isShieldAudio = !1);
                        },
                      },
                      {
                        key: 'onSwitchShieldAudioFail',
                        value: function (e, t) {
                          (this.isShieldAudio = !1),
                            this.handler.onSwitchShieldAudioFail &&
                              this.handler.onSwitchShieldAudioFail(e, t);
                        },
                      },
                      {
                        key: 'onSwitchShieldAudioSuc',
                        value: function (e) {
                          (this.isShieldAudio = !0),
                            this.handler.onSwitchShieldAudioSuc &&
                              this.handler.onSwitchShieldAudioSuc(e);
                        },
                      },
                      {
                        key: 'shieldAuidoMute',
                        value: function (e, t) {
                          p.a.log('MSEPlayer.shieldAudioMute', e, t),
                            (this.shildAudioStartTs = t),
                            this.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS
                              ? this.setMuted(!0)
                              : this.video && this.video.video && (this.video.video.muted = !0);
                        },
                      },
                      {
                        key: 'resetPlayer',
                        value: function () {
                          this.handler.resetPlayer();
                        },
                      },
                      {
                        key: 'resetAudioDts',
                        value: function () {
                          p.a.log(
                            'BaseContrller.resetAudioDts curDts='.concat(this.getCurrentDts()),
                          ),
                            this.ctrlBuffer.resetAudioDts();
                        },
                      },
                      { key: 'getRenderElement', value: function () {} },
                      {
                        key: 'getIframePts',
                        value: function () {
                          return this.ctrlBuffer && this.ctrlBuffer.getIframePts
                            ? this.ctrlBuffer.getIframePts()
                            : 0;
                        },
                      },
                      {
                        key: 'setIFrameAvcChageStat',
                        value: function () {
                          this.handler.setIFrameAvcChageStat();
                        },
                      },
                      {
                        key: 'onRevFastOver',
                        value: function () {
                          p.a.log('BaseController.onRevFastOver mse webcodecs jump buffer!'),
                            (this.isRevFastOver = !0);
                        },
                      },
                      {
                        key: 'getVideoCBLargeCnt',
                        value: function () {
                          var e = this.videoCallBackLargeCnt;
                          return (this.videoCallBackLargeCnt = 0), e;
                        },
                      },
                      {
                        key: 'getVideoFrameCallBackNums',
                        value: function () {
                          return this.frameCallBackNums || 0;
                        },
                      },
                      {
                        key: 'isM4sInitLoaded',
                        value: function () {
                          return this.m4sPlayer.isInitLoaded();
                        },
                      },
                      {
                        key: 'loadM4sInit',
                        value: function (e, t, i) {
                          this.m4sPlayer.loadInit(e, t, i);
                        },
                      },
                      {
                        key: 'setFragParsedTime',
                        value: function () {
                          this.isOnFragParsed ||
                            ((this.onFragParsedTime = D.a.now()),
                            p.a.log('MSEPlayer.onFragParsed', this.onFragParsedTime),
                            (this.isOnFragParsed = !0));
                        },
                      },
                      {
                        key: 'appendM4sSegment',
                        value: function (e, t) {
                          this.setFragParsedTime(), this.m4sPlayer.appendSegment(e, t);
                        },
                      },
                      {
                        key: 'onM4sError',
                        value: function () {
                          this._onErrorEvent(100), this._onPlayerError(!0);
                        },
                      },
                      {
                        key: 'checkSolidColor',
                        value: function () {
                          if (
                            this.isLive &&
                            -1 != I.a.testRenderCfg[3].indexOf(g.a.version.major) &&
                            0 != I.a.testRenderSwitchCfg[0] &&
                            this.isPlayVideo &&
                            !this.isSingleErr &&
                            !this.isSingleTest &&
                            (this.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS ||
                              this.getIsMseHevc())
                          ) {
                            var e = D.a.now();
                            if (0 != this.initTime)
                              if (e - this.initTime >= I.a.testRenderCfg[1]) this.isSingleTest = !0;
                              else if (
                                !(
                                  0 != this.checkScreenTs &&
                                  e - this.checkScreenTs < I.a.testRenderCfg[2]
                                )
                              ) {
                                this.checkScreenTs = e;
                                var t = this.getRenderElement();
                                this.checkForScreen(t);
                              }
                          }
                        },
                      },
                      {
                        key: 'checkForScreen',
                        value: function (e) {
                          var t = this;
                          if (e) {
                            var i = null,
                              s = null;
                            if (this.canvas) (i = this.canvas), (s = this.context);
                            else {
                              var r = !1;
                              try {
                                (i = document.createElement('canvas')),
                                  (s = i.getContext('2d', { willReadFrequently: !0 }));
                              } catch (e) {
                                (r = !0),
                                  p.a.error(
                                    'BaseController.checkForWhiteScreen context 2d error',
                                    e,
                                  );
                              }
                              if (r) return;
                            }
                            if (i || s) {
                              (this.canvas = i),
                                (this.context = s),
                                (i.width = 100),
                                (i.height = 50),
                                s.drawImage(e, 0, 0, i.width, i.height);
                              var a = Math.floor(i.width / 2),
                                n = Math.floor(i.height / 2),
                                o = i.width - 10,
                                h = i.height - 10,
                                u = [
                                  { x: a, y: 0, w: 10, h: 10 },
                                  { x: o, y: 0, w: 10, h: 10 },
                                  { x: 0, y: n, w: 10, h: 10 },
                                  { x: a, y: n, w: 10, h: 10 },
                                  { x: o, y: n, w: 10, h: 10 },
                                  { x: 0, y: h, w: 10, h: 10 },
                                  { x: a, y: h, w: 10, h: 10 },
                                  { x: o, y: h, w: 10, h: 10 },
                                ],
                                d = s.getImageData(u[0].x, u[0].y, u[0].w, u[0].h).data,
                                c = u.every(function (e, i) {
                                  var r = s.getImageData(e.x, e.y, e.w, e.h).data;
                                  return t.isImageDataSame(d, r);
                                });
                              c ? this.singleColorCnt++ : (this.singleColorCnt = 0);
                              for (var l = d.length, f = !0, m = 0; m < l; m += 4)
                                if (0 != d[m + 3]) {
                                  f = !1;
                                  break;
                                }
                              p.a.log(
                                'BaseController.checkForWhiteScreen,isSingleColor='
                                  .concat(c, ',isTransparent=')
                                  .concat(f),
                                d.slice(0, 24).toString(),
                              ),
                                (f || 1 != I.a.testRenderSwitchCfg[1]) &&
                                  this.singleColorCnt >= I.a.testRenderCfg[0] &&
                                  this.singleColorErrHand(d);
                            }
                          }
                        },
                      },
                      {
                        key: 'isImageDataSame',
                        value: function (e, t) {
                          for (var i = e.length, s = 0; s < i; s += 4)
                            if (e[s] != t[s] || e[s + 1] != t[s + 1] || e[s + 2] != t[s + 2])
                              return !1;
                          return !0;
                        },
                      },
                      {
                        key: 'singleColorErrHand',
                        value: function (e) {
                          var t = e.slice(0, 24).toString();
                          p.a.log('BaseController.singleColorErrHand', t),
                            (this.isSingleErr = !0),
                            this.webcodecType == B.a.PLAYER_CORE_TYPE.WEBCODECS
                              ? (this.handler &&
                                  this.handler.wcsRenderErr &&
                                  this.handler.wcsRenderErr(t),
                                (localStorage._nextWcsRenderErrTime = Date.now() + 2592e5),
                                this.onWebcodecsError(zi.a.SCREEN_COLOR))
                              : this.getIsMseHevc() &&
                                (this.handler &&
                                  this.handler.mseHevcRenderErr &&
                                  this.handler.mseHevcRenderErr(t),
                                (localStorage._nextMseHevcRenderErrTime = Date.now() + 2592e5),
                                this.handler.onMseHevcError(5));
                        },
                      },
                      {
                        key: 'getMuffleStat',
                        value: function () {
                          var e = {
                            muffleCnt: this.muffleCnt,
                            muffleDuration: this.muffleDuration,
                          };
                          return (
                            p.a.log(
                              'BaseController.getMuffleStat,muffleCnt='
                                .concat(this.muffleCnt, ',muffleDuration=')
                                .concat(this.muffleDuration),
                            ),
                            (this.muffleCnt = 0),
                            (this.muffleDuration = 0),
                            e
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Zi = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._mse = t),
                      (this._callbacks = i),
                      (this._paused = !1),
                      (this._playedTime = 0),
                      (this._pausedTs = 0),
                      (this._lastPausedTs = 0),
                      (this._lastCheckTime = 0),
                      (this._lastCheck500Time = 0),
                      (this._lastCheck500CurrntTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._paused = !1),
                            (this._playedTime = 0),
                            (this._pausedTs = 0),
                            (this._lastPausedTs = 0),
                            (this._lastCheckTime = 0),
                            (this._lastCheck500Time = 0);
                        },
                      },
                      {
                        key: 'check',
                        value: function () {
                          var e = D.a.now(),
                            t = this._mse.video.video;
                          if (
                            !(0 != this._lastCheckTime && e - this._lastCheckTime < 50) &&
                            (this._mse.isLive || !(t.currentTime <= 1)) &&
                            (this._mse.isLive || !this._mse.handler || this._mse.handler.started)
                          ) {
                            if (0 !== this._playedTime) {
                              t.currentTime === this._playedTime
                                ? this._paused || this._setPaused(e, t)
                                : this._paused && this._setResume(e, t);
                              var i = e - this._lastCheck500Time,
                                s = Math.round(1e3 * t.currentTime - this._lastCheck500CurrntTime);
                              (0 == this._lastCheck500Time || i >= 500) &&
                                (0 != this._lastCheck500Time &&
                                  i - s >= I.a.pause500Cfg[0] &&
                                  (p.a.log(
                                    'MSEPauseWorker.check.500ms check500Delta='
                                      .concat(i, ', check500CurrentTimeDelta=')
                                      .concat(s, ', pauseDelta=')
                                      .concat(i - s),
                                  ),
                                  this._mse.check500Pause()),
                                (this._lastCheck500CurrntTime = 1e3 * t.currentTime),
                                (this._lastCheck500Time = e));
                            }
                            (this._playedTime = t.currentTime), (this._lastCheckTime = e);
                          }
                        },
                      },
                      {
                        key: '_setPaused',
                        value: function (e, t) {
                          (this._paused = !0),
                            (this._pausedTs = e),
                            (this._lastPausedTs = e),
                            this._log('_setPaused', t),
                            this._callbacks.pause(e);
                        },
                      },
                      {
                        key: '_setResume',
                        value: function (e, t) {
                          var i = e - this._pausedTs;
                          (this._paused = !1),
                            (this._pausedTs = 0),
                            (this._lastPausedTs = 0),
                            this._log('_setResume', t),
                            this._callbacks.resume(e, i);
                        },
                      },
                      {
                        key: '_log',
                        value: function (e, t, i) {
                          this._mse.video.printBuffered(),
                            p.a.log(
                              'MSEPauseWorker('
                                .concat(this._mse._num_, ').')
                                .concat(e, ' readyState=')
                                .concat(t.readyState, ' currentTime=')
                                .concat(t.currentTime, ' buf=')
                                .concat(this._mse.getBufferLen(), ' dts=')
                                .concat(this._mse.getCurrentDts(), ' ')
                                .concat(i || ''),
                            );
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this._paused;
                        },
                      },
                      {
                        key: 'pausedTs',
                        get: function () {
                          return this._pausedTs;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                es = 0,
                ts = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e, r) {
                    var a;
                    Object(s.a)(this, i), (a = t.call(this, e, r, B.a.PLAYER_CORE_TYPE.MSE));
                    var n = r.videoType,
                      h = void 0 === n ? 'flv' : n,
                      u = (r.videoElement, r.h265Proxy),
                      d = r.ignoreSei,
                      c = void 0 !== d && d,
                      l = r.closeFetch,
                      f = void 0 !== l && l;
                    (a.pushVideoStartRenderTime = 0),
                      (a.h265Proxy = u),
                      (a.requestAnimationId = -1),
                      (a._num_ = ++es),
                      p.a.log('MSEPlayer('.concat(a._num_, ').constructor')),
                      'ts' === h
                        ? ((a.parser = new kt(Object(fe.a)(a), a.remuxer)),
                          (a.parser.ignoreSei = c),
                          (a.parser.closeFetch = f))
                        : ((a.parser = new _t(Object(fe.a)(a), a.remuxer, 1)),
                          a.parser.setCorrentDtsOpen(!0),
                          (a.parser.repairSameDts = 1 == I.a.repairSameDts),
                          a.ctrlBuffer.setBuffered(a.buffered),
                          a.parser.dropFrameCtrl.setConfig({
                            dropTime: I.a.dropTime,
                            minFps: I.a.minFps,
                          }),
                          (a.parser2 = new _t(Object(fe.a)(a), a.remuxer, 2))),
                      (a.JITTER_BUFMIN = 1e3),
                      (a.JITTER_BUFLEN = 4e3),
                      (a.JITTER_BUFMAX = 8e3),
                      (a.latencySeek = 0),
                      (a.userPaused = !1),
                      (a._triggerPlay = !1),
                      (a.hasData = !1),
                      (a.playing = !1),
                      (a.lastPlayTime = 0),
                      (a.lastCheckPlayTime = 0),
                      (a.maxGop = 0),
                      (a.playStartTime = 0),
                      (a.delayReset = !1),
                      (a.isPlayerError = !1),
                      (a.isErrorEvent = !1),
                      (a.startPlayBackRate = 0.9),
                      (a.pausedByBrowser = !1),
                      (a.tryPlayAgainTimout = 0),
                      (a.onUpdateErrorBind = a.onUpdateError.bind(Object(fe.a)(a))),
                      (a.onAudioUpdateEndBind = a.onAudioUpdateEnd.bind(Object(fe.a)(a))),
                      (a.onVideoUpdateEndBind = a.onVideoUpdateEnd.bind(Object(fe.a)(a))),
                      (a.onMediaSourceOpenBind = a.onMediaSourceOpen.bind(Object(fe.a)(a))),
                      (a.onVideoErrorBind = a.onVideoError.bind(Object(fe.a)(a))),
                      (a.onVideoPauseBind = a.onVideoPause.bind(Object(fe.a)(a))),
                      (a.onVideoPlayBind = a.onVideoPlay.bind(Object(fe.a)(a))),
                      (a.onVideoLoadedBind = a.onVideoLoaded.bind(Object(fe.a)(a))),
                      (a.onLoadedMetadataBind = a.onLoadedMetadata.bind(Object(fe.a)(a))),
                      (a.checkVideoPlayingBind = a.checkVideoPlaying.bind(Object(fe.a)(a))),
                      (a.onVideoPlayingBind = a.onVideoPlaying.bind(Object(fe.a)(a))),
                      (a.onVideoResizeBind = a.onVideoResize.bind(Object(fe.a)(a))),
                      (a.mediaSource = new MediaSource()),
                      a.mediaSource.addEventListener('sourceopen', a.onMediaSourceOpenBind),
                      (a.video = a.createVideo()),
                      (a.msePause = new Ot(Object(fe.a)(a), {
                        pause: a._msePaused.bind(Object(fe.a)(a)),
                        resume: a._mseResume.bind(Object(fe.a)(a)),
                      })),
                      (a.msePauseWorker = new Zi(Object(fe.a)(a), {
                        pause: a._msePausedWorker.bind(Object(fe.a)(a)),
                        resume: a._mseResumeWorker.bind(Object(fe.a)(a)),
                      })),
                      (a.audioSourceBuffer = null),
                      (a.videoSourceBuffer = null),
                      (a.audioCodec = null),
                      (a.videoCodec = null),
                      (a.audioSegments = []),
                      (a.videoSegments = []),
                      (a.autoJitter = !0),
                      (a.autoBitrateJitter = !1),
                      (a.playbackrateChangeAccess = !0),
                      (a.enableLowLatency = !1),
                      (a.sensitivePause = !0),
                      (a.waitSwapToPcdn = !1),
                      (a.printJitter = !!Number(localStorage._printJitter));
                    var m = navigator.userAgent.toLowerCase();
                    return (
                      (a.isAndroid = -1 !== m.indexOf('Android')),
                      -1 == p.a.getLevel() &&
                        window.chrome &&
                        (window.chrome.mse = Object(fe.a)(a)),
                      (a.videoDataAppended = !1),
                      (a.avcchangeCheckTimer = 0),
                      (a.offsetDts = 0),
                      (a.curVideoDts = 0),
                      (a.curAudioDts = 0),
                      (a.isH265Play = !1),
                      (a.playRateIncrease = 0),
                      (a.playRateDecrease = 0),
                      (a.startPlayTime = 0),
                      (a.isStartBuffer = !0),
                      (a.bufferCd = 1e3 * I.a.jumpBufferCfg[0]),
                      (a.startCd = I.a.jumpBufferCfg[3]),
                      (a.startCdMax = 1e3 * I.a.jumpBufferCfg[5]),
                      (a.setVideoCurrentTime = 0),
                      (a.startMoreBufferTime = 0),
                      (a.bufferMoreContinueTime = 1e4),
                      (a.maxJumpWaitNow = 0),
                      (a.lastJumpBufferTs = 0),
                      (a.mediaDelay = null),
                      (a.seiAnchorDelay = -1),
                      (a.discontinuityAudio = !1),
                      (a.discontinuityVideo = !1),
                      (a.isPlaybackRateNormal = !0),
                      (a.discontinuityTimeOffset = 0),
                      (a.frameCallBackNums = 0),
                      (a.lastFrameCallBackNums = 0),
                      (a.mseRenderList = []),
                      u && u.initRender && u.initRender(Object(fe.a)(a)),
                      (a.renderList = []),
                      (a.renderHiddenTs = 0),
                      (a.renderListFirst = !0),
                      (a.onInitSegmentCb = null),
                      (a.videoCallBackTs = 0),
                      (a.onVisibilityChangedBind = a.onVisibilitychange.bind(Object(fe.a)(a))),
                      a.handler &&
                        a.handler.eventEmitter &&
                        a.handler.eventEmitter.on(o.VISIBILITY_CHANGE, a.onVisibilityChangedBind),
                      (a.isMseRCErrorCnt = 0),
                      a
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'onVisibilitychange',
                        value: function () {
                          Object(me.a)(Object(_e.a)(i.prototype), 'onVisibilitychange', this).call(
                            this,
                          ),
                            'hidden' == document.visibilityState &&
                              ((this.videoCallBackTs = 0), (this.isMseRCErrorCnt = 0));
                        },
                      },
                      {
                        key: 'setParams',
                        value: function (e, t) {
                          if (
                            ((this.pid = e),
                            (this.bitrate = t),
                            this._initPerf(),
                            this.parser.dropFrameDts)
                          ) {
                            var i = !1;
                            (1 === I.a.dropFrameUids[0] ||
                              -1 !== I.a.dropFrameUids.indexOf(parseInt(e))) &&
                              (i = !0),
                              (this.parser.dropFrameDts.open = i);
                          }
                          this.parser.dropFrameDts.start();
                        },
                      },
                      {
                        key: '_initPerf',
                        value: function () {
                          'ts' !== this.videoType &&
                            this.pausePerf.checkLocal(this.pid, this.bitrate) &&
                            this.parser.dropFrameCtrl.start();
                        },
                      },
                      {
                        key: 'getDelayStat',
                        value: function () {
                          return 'ts' !== this.videoType ? this.parser.sei.getStat() : null;
                        },
                      },
                      {
                        key: 'getVideoDecodeDelaySmooth',
                        value: function () {
                          return (this.parser.ctsMax || 0) + 100;
                        },
                      },
                      {
                        key: 'getDelayInfo',
                        value: function () {
                          return (
                            p.a.log('MSEPlayer.getDelayInfo: delay: ', this.mediaDelay),
                            this.mediaDelay
                          );
                        },
                      },
                      {
                        key: 'getRealFps',
                        value: function () {
                          return this.parser.getRealFps ? this.parser.getRealFps() : 0;
                        },
                      },
                      {
                        key: 'getIsDownEnough',
                        value: function () {
                          return !this.parser.isDownEnough || this.parser.isDownEnough();
                        },
                      },
                      {
                        key: 'getRealBitrate',
                        value: function () {
                          var e = 0;
                          return this.parser.fps && (e = this.parser.fps.getRealBitrate()), e;
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          if (
                            (Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this),
                            p.a.log('MSEPlayer('.concat(this._num_, ').destroy')),
                            (this.onMediaSourceOpenCallback = null),
                            this.buffered.stop(),
                            this.h265Proxy && this.h265Proxy.stop(),
                            (this.playing = !1),
                            (this.lastPlayTime = 0),
                            (this.playStartTime = 0),
                            (this.lastCheckPlayTime = 0),
                            (this.hasData = !1),
                            this.handler &&
                              this.handler.onVideoStop(this.video.video, this._hasVideo()),
                            this.handler &&
                              this.handler.eventEmitter &&
                              this.handler.eventEmitter.off(
                                o.VISIBILITY_CHANGE,
                                this.onVisibilityChangedBind,
                              ),
                            this.parser.destroy(),
                            (this.audioCodec = null),
                            (this.videoCodec = null),
                            (this.audioSegments = []),
                            (this.videoSegments = []),
                            (this.onInitSegmentCb = null),
                            this.audioSourceBuffer &&
                              (this.audioSourceBuffer.removeEventListener(
                                'updateend',
                                this.onAudioUpdateEndBind,
                              ),
                              this.audioSourceBuffer.removeEventListener(
                                'error',
                                this.onUpdateErrorBind,
                              ),
                              (this.audioSourceBuffer = null)),
                            this.videoSourceBuffer &&
                              (this.videoSourceBuffer.removeEventListener(
                                'updateend',
                                this.onVideoUpdateEndBind,
                              ),
                              this.videoSourceBuffer.removeEventListener(
                                'error',
                                this.onUpdateErrorBind,
                              ),
                              (this.videoSourceBuffer = null)),
                            this.mediaSource)
                          ) {
                            this.mediaSource.removeEventListener(
                              'sourceopen',
                              this.onMediaSourceOpenBind,
                            );
                            for (var e = this.mediaSource.sourceBuffers; e.length; )
                              this.mediaSource.removeSourceBuffer(e[0]);
                            this.mediaSource = this.onMediaSourceOpenBind = null;
                          }
                          (this.onAudioUpdateEndBind =
                            this.onVideoUpdateEndBind =
                            this.onUpdateErrorBind =
                              null),
                            this.video && (this.video.destroy(), (this.video = null)),
                            (this.videoElement = null),
                            (this.pushVideoStartRenderTime = 0),
                            (this.playbackrateChangeAccess = !0),
                            -1 !== this.requestAnimationId &&
                              (cancelAnimationFrame(this.requestAnimationId),
                              (this.requestAnimationId = -1)),
                            (this.onFragParsedTime = 0),
                            F.remove(this.triggerPlayVideo, this);
                        },
                      },
                      {
                        key: 'clearSourceBuffer',
                        value: function () {
                          var e = this.video.video,
                            t = 0;
                          if (e) {
                            var i = e.buffered.length;
                            t = i > 0 ? e.buffered.end(i - 1) : t;
                          }
                          this.audioSourceBuffer &&
                            !this.audioSourceBuffer.updating &&
                            t > 0 &&
                            this.audioSourceBuffer.remove(0, t),
                            this.videoSourceBuffer &&
                              !this.videoSourceBuffer.updating &&
                              t > 0 &&
                              this.videoSourceBuffer.remove(0, t);
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          if (
                            (Object(me.a)(Object(_e.a)(i.prototype), 'reset', this).call(this),
                            p.a.log('MSEPlayer('.concat(this._num_, ').reset')),
                            this.handler.onVideoStop(this.video.video, !!this.videoSourceBuffer),
                            (this.userPaused = !1),
                            (this.playing = !1),
                            (this.lastPlayTime = 0),
                            (this.playStartTime = 0),
                            (this.lastCheckPlayTime = 0),
                            (this.hasData = !1),
                            (this.audioCodec = null),
                            (this.videoCodec = null),
                            (this.audioSegments = []),
                            (this.videoSegments = []),
                            (this.discontinuityAudio = !1),
                            (this.discontinuityVideo = !1),
                            this.msePause.paused && this.handler.onPlayResume(D.a.now()),
                            this.pauseStat.reset(),
                            this.bufStat.reset(),
                            this.msePause.reset(),
                            this.msePauseWorker.reset(),
                            (this.maxGop = 0),
                            (this.isPlaybackRateNormal = !0),
                            clearTimeout(this.tryPlayAgainTimout),
                            this.audioSourceBuffer &&
                              (this.audioSourceBuffer.removeEventListener(
                                'updateend',
                                this.onAudioUpdateEndBind,
                              ),
                              this.audioSourceBuffer.removeEventListener(
                                'error',
                                this.onUpdateErrorBind,
                              ),
                              (this.audioSourceBuffer = null)),
                            this.videoSourceBuffer &&
                              (this.videoSourceBuffer.removeEventListener(
                                'updateend',
                                this.onVideoUpdateEndBind,
                              ),
                              this.videoSourceBuffer.removeEventListener(
                                'error',
                                this.onUpdateErrorBind,
                              ),
                              (this.videoSourceBuffer = null)),
                            this.mediaSource)
                          ) {
                            this.mediaSource.removeEventListener(
                              'sourceopen',
                              this.onMediaSourceOpenBind,
                            );
                            for (var e = this.mediaSource.sourceBuffers; e.length; )
                              this.mediaSource.removeSourceBuffer(e[0]);
                          }
                          (this.mediaSource = new MediaSource()),
                            this.mediaSource.addEventListener(
                              'sourceopen',
                              this.onMediaSourceOpenBind,
                            ),
                            this.video && (this.video.destroy(), (this.video = null)),
                            (this.video = this.createVideo()),
                            (this.playbackrateChangeAccess = !0),
                            (this.videoDataAppended = !1),
                            (this.onFragParsedTime = 0),
                            (this.startPlayTime = 0),
                            (this.isStartBuffer = !0),
                            (this.setVideoCurrentTime = 0),
                            (this.startMoreBufferTime = 0),
                            (this.maxJumpWaitNow = 0),
                            (this.frameCallBackNums = 0),
                            (this.lastFrameCallBackNums = 0),
                            (this.mseRenderList.length = 0);
                        },
                      },
                      {
                        key: 'resetVideo',
                        value: function () {
                          if (
                            (this.audioSourceBuffer &&
                              (this.audioSourceBuffer.removeEventListener(
                                'updateend',
                                this.onAudioUpdateEndBind,
                              ),
                              this.audioSourceBuffer.removeEventListener(
                                'error',
                                this.onUpdateErrorBind,
                              ),
                              (this.audioSourceBuffer = null)),
                            this.videoSourceBuffer &&
                              (this.videoSourceBuffer.removeEventListener(
                                'updateend',
                                this.onVideoUpdateEndBind,
                              ),
                              this.videoSourceBuffer.removeEventListener(
                                'error',
                                this.onUpdateErrorBind,
                              ),
                              (this.videoSourceBuffer = null)),
                            this.mediaSource)
                          ) {
                            this.mediaSource.removeEventListener(
                              'sourceopen',
                              this.onMediaSourceOpenBind,
                            );
                            for (var e = this.mediaSource.sourceBuffers; e.length; )
                              this.mediaSource.removeSourceBuffer(e[0]);
                          }
                          (this.mediaSource = new MediaSource()),
                            this.mediaSource.addEventListener(
                              'sourceopen',
                              this.onMediaSourceOpenBind,
                            ),
                            this.video && (this.video.destroy(), (this.video = null)),
                            (this.video = this.createVideo()),
                            (this.videoCodec = null),
                            (this.audioCodec = null),
                            (this.lastPlayTime = 0);
                        },
                      },
                      {
                        key: 'createVideo',
                        value: function () {
                          this._triggerPlay = !1;
                          var e = this.videoElement;
                          return (
                            e ||
                              (((e = document.createElement('video')).id = 'mse'.concat(
                                this._num_,
                              )),
                              (e.autoplay = 'safari' !== g.a.name),
                              e.setAttribute('playsinline', !0),
                              e.setAttribute('webkit-playsinline', !0),
                              (e.muted = !1)),
                            (e.src = URL.createObjectURL(this.mediaSource)),
                            new Rt(this, e)
                          );
                        },
                      },
                      {
                        key: 'insertDiscontinuity',
                        value: function (e) {
                          if (
                            ((this.discontinuityAudio = !0),
                            (this.discontinuityVideo = !0),
                            (this.discontinuityTimeOffset = e),
                            this.discontinuityTimeOffset > 0)
                          ) {
                            var t = $;
                            this.cacheBlockReason(t, e);
                          }
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this.video ? this.video.getBufferLen() : 0;
                        },
                      },
                      {
                        key: 'getSegmentsBufferLen',
                        value: function () {
                          return 200 * this.videoSegments.length;
                        },
                      },
                      {
                        key: 'getCurrentDts',
                        value: function () {
                          if (I.a.dtsJumpOpen) {
                            if (this.isPureAudio && this.parser.timelineAudio)
                              return this.parser.timelineAudio.getRealDtsByCurrentTime(
                                this.getCurrentTime(),
                              );
                            if (this.parser.timelineVideo)
                              return this.parser.timelineVideo.getRealDtsByCurrentTime(
                                this.getCurrentTime(),
                              );
                          }
                          return this.getCurrentTime() + this.getInitDts();
                        },
                      },
                      {
                        key: 'getCorrentCurrentDts',
                        value: function () {
                          return this.isPureAudio && this.parser.timelineAudio
                            ? this.parser.timelineAudio.getCorrentDtsByCurrentTime(
                                this.getCurrentTime(),
                              )
                            : this.parser.timelineVideo
                            ? this.parser.timelineVideo.getCorrentDtsByCurrentTime(
                                this.getCurrentTime(),
                              )
                            : this.getCurrentTime() + this.getInitDts();
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this.video ? this.video.getCurrentTime() : 0;
                        },
                      },
                      {
                        key: 'getCurrentRealTime',
                        value: function () {
                          return this.getCurrentDts();
                        },
                      },
                      {
                        key: 'appendFlv',
                        value: function (e) {
                          this.addPlayEvent(), this.parser.parseFlv(e, this.isPureAudio);
                        },
                      },
                      {
                        key: 'addPlayEvent',
                        value: function () {
                          this.hasData ||
                            ((this.hasData = !0),
                            this.videoElement &&
                              (this.videoElement.addEventListener(
                                'loadeddata',
                                this.onVideoLoadedBind,
                              ),
                              'safari' !== g.a.name ||
                                this.isLive ||
                                this.videoElement.addEventListener(
                                  'loadedmetadata',
                                  this.onLoadedMetadataBind,
                                ),
                              (this.requestAnimationId = requestAnimationFrame(
                                this.checkVideoPlayingBind,
                              ))));
                        },
                      },
                      {
                        key: 'appendTs',
                        value: function (e) {
                          this.addPlayEvent(), this.parser.parseTs(e);
                        },
                      },
                      {
                        key: 'checkBuffer',
                        value: function () {
                          if (!this.video.video.paused && !this.video.seeking) {
                            var e = D.a.now(),
                              t = this.video.video.buffered,
                              i = t.length,
                              s = this.getBufferLen();
                            if (
                              (this.bufStat.checkBuffer(e, s),
                              0 === this.video.video.currentTime && 0 !== this.lastPlayTime)
                            )
                              return (
                                p.a.warn(
                                  'MSEPlayer.checkBuffer onPlayerError(true) lastPlayTime=' +
                                    this.lastPlayTime +
                                    ' bufLen=' +
                                    s,
                                ),
                                this._onPlayerError(!0),
                                this._onErrorEvent(9),
                                void (this.lastPlayTime = 0)
                              );
                            if (
                              ((this.lastPlayTime = this.video.video.currentTime),
                              e > this.playStartTime + 3e3 &&
                                s > 4e3 &&
                                0 == this.video.currentTime &&
                                (i > 0 &&
                                  t.start(0) <= 4 &&
                                  (p.a.log('MSEPlayer.checkBuffer buffer full but can not play'),
                                  (this.video.currentTime = Math.round(t.start(0) + 1))),
                                this.video.play()),
                              0 !== this.playStartTime &&
                                e > this.playStartTime + 5e3 &&
                                (s > 5e3 || 0 === s))
                            )
                              if (0 == this.video.video.currentTime && s > 2e3)
                                p.a.log(
                                  'MSEPlayer('
                                    .concat(this._num_, ') ####### currentTime=0 ++ bufLen=')
                                    .concat(s, ' paused=')
                                    .concat(this.video.video.paused),
                                ),
                                  this.video.play();
                              else if (
                                ((this.playStartTime = 0),
                                0 === this.video.video.currentTime && !this.isAndroid)
                              )
                                return (
                                  p.a.warn(
                                    'MSEPlayer('.concat(
                                      this._num_,
                                      ').checkBuffer onPlayerError(true) playTime=',
                                    ) +
                                      this.video.video.currentTime +
                                      ' bufLen=' +
                                      s,
                                  ),
                                  this._onErrorEvent(6),
                                  void this._onPlayerError(!0)
                                );
                            null == this.videoElement &&
                              i &&
                              this.video.video.currentTime - t.start(0) > 20 &&
                              (this.audioSourceBuffer &&
                                !this.audioSourceBuffer.updating &&
                                this.audioSourceBuffer.remove(0, this.video.video.currentTime - 10),
                              this.videoSourceBuffer &&
                                !this.videoSourceBuffer.updating &&
                                this.videoSourceBuffer.remove(
                                  0,
                                  this.video.video.currentTime - 10,
                                ));
                          }
                        },
                      },
                      {
                        key: '_onPlayerError',
                        value: function (e) {
                          !this.isPlayerError &&
                            this.handler &&
                            ((this.isPlayerError = !0), this.handler.onPlayerError(e));
                        },
                      },
                      {
                        key: '_onErrorEvent',
                        value: function (e) {
                          this.isErrorEvent ||
                            ((this.isErrorEvent = !0),
                            this.handler &&
                              this.handler.onErrorEvent &&
                              this.handler.onErrorEvent({ type: e }));
                        },
                      },
                      {
                        key: 'onParseError',
                        value: function (e) {
                          this._onErrorEvent(e);
                        },
                      },
                      {
                        key: 'onAvcCfgChange',
                        value: function () {
                          return (
                            p.a.log('MSEPlayer('.concat(this._num_, ').onAvcCfgChange')),
                            this.getBufferLen() < 500
                              ? (p.a.log(
                                  'MSEPlayer('.concat(this._num_, ').onAvcCfgChange reset player'),
                                ),
                                this.remuxer.reset(),
                                this.parser.setPaused(!1),
                                !1)
                              : ((this.delayReset = !0), !0)
                          );
                        },
                      },
                      {
                        key: 'getMaxGop',
                        value: function () {
                          return this.maxGop;
                        },
                      },
                      {
                        key: 'setEnableLowLatency',
                        value: function (e) {
                          this.enableLowLatency = e;
                        },
                      },
                      {
                        key: 'getVolume',
                        value: function () {
                          return this.video ? this.video.getVolume() : -1;
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          this.video &&
                            (this.video.setMuted(e),
                            p.a.log(
                              'MSEPlayer.setMuted '
                                .concat(e, ' hasVideo=')
                                .concat(this._hasVideo(), ' hasAudio=')
                                .concat(this._hasAudio()),
                            ));
                        },
                      },
                      {
                        key: 'getMuted',
                        value: function () {
                          return this.video ? this.video.getMuted() : -1;
                        },
                      },
                      {
                        key: 'setResolution',
                        value: function (e, t) {
                          p.a.log(
                            'MSEPlayer('.concat(this._num_, ').setResolution w/h=') + e + '/' + t,
                          ),
                            this.width &&
                              this.height &&
                              (this.width !== e || this.height !== t) &&
                              this.handler.eventEmitter &&
                              this.handler.eventEmitter.trigger(o.VIDEO_RESOLUTION_CHANGE, {
                                width: e,
                                height: t,
                              }),
                            (this.width = e),
                            (this.height = t);
                        },
                      },
                      {
                        key: 'getWidth',
                        value: function () {
                          return this.width;
                        },
                      },
                      {
                        key: 'getHeight',
                        value: function () {
                          return this.height;
                        },
                      },
                      {
                        key: 'setExceptionStat',
                        value: function (e, t) {
                          this.handler &&
                            this.handler.exceptionStat &&
                            this.handler.exceptionStat.setStat(e, t);
                        },
                      },
                      {
                        key: 'cacheBlockReason',
                        value: function (e, t) {
                          this.handler &&
                            this.handler.cacheBlockReason &&
                            this.handler.cacheBlockReason(e, t);
                        },
                      },
                      {
                        key: 'turnToH264',
                        value: function (e) {
                          this.h265Proxy && this.h265Proxy.stop(),
                            this.handler && this.handler.turnToH264(e);
                        },
                      },
                      {
                        key: 'on265StartCodeError',
                        value: function () {
                          this.h265Proxy && this.h265Proxy.on265StartCodeError();
                        },
                      },
                      {
                        key: 'h265Retry',
                        value: function () {
                          this.h265Proxy && this.h265Proxy.stop(), this.handler.h265Retry();
                        },
                      },
                      {
                        key: 'onInitSegment',
                        value: function (e) {
                          this.onInitSegmentCb && this.onInitSegmentCb(),
                            e.audioCodec && (this.audioCodec = e.audioCodec),
                            e.videoCodec &&
                              ((this.videoCodec = e.videoCodec), this.getVideoCapabilities(e)),
                            this.isMediaSourceOpen && this.initSourceBuffer(),
                            e.audioMoov && this.audioSegments.push(e.audioMoov),
                            e.videoMoov && this.videoSegments.push(e.videoMoov),
                            (this.playStartTime = 0);
                        },
                      },
                      {
                        key: 'onFragParsing',
                        value: function (e) {
                          'audio' === e.type
                            ? this.audioSegments.push(e.data)
                            : 'video' === e.type && this.videoSegments.push(e.data);
                        },
                      },
                      {
                        key: 'onFragParsed',
                        value: function () {
                          this.audioSourceBuffer && this.appendBuffer('audio'),
                            this.videoSourceBuffer && this.appendBuffer('video'),
                            null == this.videoElement &&
                              this.isLive &&
                              (this.setFragParsedTime(), this.triggerPlay());
                        },
                      },
                      {
                        key: 'checkVideoPlaying',
                        value: function () {
                          0 == this.pushVideoStartRenderTime &&
                          this.video &&
                          this.video.video &&
                          this.video.video.videoWidth > 0 &&
                          this.video.video.videoHeight > 0
                            ? (this.pushVideoStartRenderTime = D.a.now())
                            : (this.requestAnimationId = requestAnimationFrame(
                                this.checkVideoPlayingBind,
                              ));
                        },
                      },
                      {
                        key: 'onLoadedMetadata',
                        value: function (e) {
                          p.a.log('MSEPlayer.onLoadedMetadata'),
                            this.onVideoLoaded(),
                            this.handler.eventEmitter &&
                              this.handler.eventEmitter.trigger(o.VIDEO_PAUSE, {
                                video: this.videoElement,
                                event: e,
                              });
                        },
                      },
                      {
                        key: 'onVideoLoaded',
                        value: function () {
                          p.a.log('MSEPlayer.onVideoLoaded'), this.triggerPlay();
                        },
                      },
                      {
                        key: 'reloadInError',
                        value: function () {
                          this.handler.reloadInError && this.handler.reloadInError();
                        },
                      },
                      {
                        key: 'initSourceBuffer',
                        value: function () {
                          if (
                            (localStorage._localVideoCodec &&
                              '' != localStorage._localVideoCodec &&
                              (this.videoCodec = localStorage._localVideoCodec),
                            this.audioCodec && !this.audioSourceBuffer)
                          ) {
                            p.a.log(
                              'MSEPlayer('.concat(this._num_, ').initSourceBuffer audio codec=') +
                                this.audioCodec,
                            );
                            try {
                              (this.audioSourceBuffer = this.mediaSource.addSourceBuffer(
                                'video/mp4;codecs='.concat(this.audioCodec),
                              )),
                                this.audioSourceBuffer.addEventListener(
                                  'updateend',
                                  this.onAudioUpdateEndBind,
                                ),
                                this.audioSourceBuffer.addEventListener(
                                  'error',
                                  this.onUpdateErrorBind,
                                );
                            } catch (e) {
                              return (
                                p.a.warn('MSEPlayer.initSourceBuffer audio err=' + e.message),
                                e.message &&
                                -1 !=
                                  e.message.indexOf(
                                    'No additional SourceBuffer objects may be added',
                                  ) &&
                                (p.a.log('MSEPlayer.initSourceBuffer resetMediasource in audio'),
                                this.handler.resetMediasource)
                                  ? void this.handler.resetMediasource()
                                  : (this._onErrorEvent(4), void this._onPlayerError(!0))
                              );
                            }
                          } else
                            this.audioCodec &&
                              this.audioSourceBuffer &&
                              this.discontinuityAudio &&
                              (p.a.log(
                                'MSEPlayer('.concat(
                                  this._num_,
                                  ').initSourceBuffer reset audio codec=',
                                ) + this.audioCodec,
                              ),
                              this.audioSourceBuffer.changeType(
                                'video/mp4;codecs='.concat(this.audioCodec),
                              ));
                          if (this.videoCodec && !this.videoSourceBuffer) {
                            p.a.log(
                              'MSEPlayer('.concat(this._num_, ').initSourceBuffer video codec=') +
                                this.videoCodec,
                            );
                            try {
                              (this.videoSourceBuffer = this.mediaSource.addSourceBuffer(
                                'video/mp4;codecs='.concat(this.videoCodec),
                              )),
                                this.videoSourceBuffer.addEventListener(
                                  'updateend',
                                  this.onVideoUpdateEndBind,
                                ),
                                this.videoSourceBuffer.addEventListener(
                                  'error',
                                  this.onUpdateErrorBind,
                                );
                            } catch (e) {
                              if (
                                e.message &&
                                -1 !=
                                  e.message.indexOf(
                                    'No additional SourceBuffer objects may be added',
                                  ) &&
                                (p.a.log('MSEPlayer.initSourceBuffer resetMediasource in video'),
                                this.handler.resetMediasource)
                              )
                                return void this.handler.resetMediasource();
                              p.a.warn(
                                'MSEPlayer('.concat(this._num_, ').initSourceBuffer video err=') +
                                  e.message,
                              ),
                                this.getIsMseHevc()
                                  ? this.handler.onMseHevcError(1)
                                  : (this._onErrorEvent(5), this._onPlayerError(!0));
                            }
                          } else
                            this.videoCodec &&
                              this.videoSourceBuffer &&
                              this.discontinuityVideo &&
                              (p.a.log(
                                'MSEPlayer('.concat(
                                  this._num_,
                                  ').initSourceBuffer reset video codec=',
                                ) + this.videoCodec,
                              ),
                              this.videoSourceBuffer.changeType(
                                'video/mp4;codecs='.concat(this.videoCodec),
                              ));
                          (this.discontinuityVideo = !1), (this.discontinuityAudio = !1);
                        },
                      },
                      {
                        key: 'appendBuffer',
                        value: function (e) {
                          var t = D.a.now();
                          if (0 != this.mediaSource.sourceBuffers.length && !this.isPlayerError)
                            if ('audio' == e) {
                              if (
                                this.audioSegments.length > 0 &&
                                this.audioSourceBuffer &&
                                !this.audioSourceBuffer.updating
                              ) {
                                var i = this.audioSegments.shift();
                                try {
                                  this.audioSourceBuffer.appendBuffer(i),
                                    (this.videoDataAppended = !0),
                                    this.audioPlayConsuming.pushRemuxedVideoFrameData(t);
                                } catch (e) {
                                  p.a.warn(
                                    'MSEPlayer('.concat(this._num_, ').appendBuffer audio err=') +
                                      e.message,
                                  ),
                                    this._onErrorEvent(7),
                                    this._onPlayerError(!0);
                                }
                              }
                            } else {
                              if ('video' != e)
                                throw new Error(
                                  'MSEPlayer('.concat(
                                    this._num_,
                                    ').appendBuffer type error! Valide type is audio or video.',
                                  ),
                                );
                              if (
                                this.videoSegments.length > 0 &&
                                this.videoSourceBuffer &&
                                !this.videoSourceBuffer.updating
                              ) {
                                var s = this.videoSegments.shift();
                                try {
                                  this.videoSourceBuffer.appendBuffer(s),
                                    (this.videoDataAppended = !0),
                                    this.videoPlayConsuming.pushRemuxedVideoFrameData(t);
                                } catch (e) {
                                  p.a.warn(
                                    'MSEPlayer('.concat(this._num_, ').appendBuffer video err=') +
                                      e.message,
                                  ),
                                    this._onErrorEvent(8),
                                    this._onPlayerError(!0);
                                }
                              }
                            }
                        },
                      },
                      {
                        key: 'triggerH265Play',
                        value: function (e, t) {
                          this.isH265Play ||
                            (p.a.log('MSEPlayer.triggerH265Play'),
                            (this.isH265Play = !0),
                            this.h265Proxy && this.h265Proxy.reportDecodeRenderTime(e, t)),
                            (!this.videoElement && this.isLive) ||
                              (p.a.log('MSEPlayer.triggerH265Play.triggerPlay'),
                              this.triggerPlay());
                        },
                      },
                      {
                        key: 'triggerPlay',
                        value: function () {
                          if (!this.playing && this.isMediaSourceOpen) {
                            if (
                              ((this.playing = !0),
                              (this.playStartTime = D.a.now()),
                              (this.videoElement && !this.videoElement.autoplay) ||
                                this.video.play(),
                              I.a.platform === B.a.PLATFORM_TYPE_NAME.wap &&
                                null != this.videoElement)
                            )
                              return;
                            'safari' === g.a.name
                              ? I.a.safariFirstLoad
                                ? ((I.a.safariFirstLoad = !1), this.triggerPlayVideo())
                                : F.once(this.triggerPlayVideo, this, I.a.safariPlayDelay)
                              : this.triggerPlayVideo();
                          }
                        },
                      },
                      {
                        key: 'triggerPlayVideo',
                        value: function () {
                          var e = !!this.videoSourceBuffer,
                            t = this.getCodecType(),
                            i = this.h265Proxy && this.h265Proxy.isH265MseCodec;
                          p.a.log(
                            'MSEPlayer.onPlayVideo codec: '.concat(t).concat(i ? ' (mse)' : ''),
                          ),
                            0 == this.parser.decodeIFRTime &&
                              1 == Number(I.a.isNoVideoReport) &&
                              this.handler.eventEmitter &&
                              this.handler.eventEmitter.trigger(o.P2P_REPORT),
                            t === G.a.H265 &&
                              this.h265Proxy &&
                              this.h265Proxy.isReady &&
                              this.h265Proxy.canvas,
                            t === G.a.H265 && this.h265Proxy && this.h265Proxy.isReady
                              ? this.h265Proxy.isVideoTrack
                                ? this.handler.onPlayVideo(
                                    this.h265Proxy.canvas,
                                    this.widthCfg,
                                    this.heightCfg,
                                    e,
                                    null,
                                    this.onFragParsedTime,
                                    t,
                                  )
                                : this.handler.onPlayVideo(
                                    this.video.video,
                                    this.widthCfg,
                                    this.heightCfg,
                                    e,
                                    this.h265Proxy.canvas,
                                    this.onFragParsedTime,
                                    t,
                                  )
                              : this.handler.onPlayVideo(
                                  this.video.video,
                                  this.widthCfg,
                                  this.heightCfg,
                                  e,
                                  null,
                                  this.onFragParsedTime,
                                  t,
                                ),
                            (this.startPlayTime = D.a.now()),
                            (this.isPlayVideo = !0);
                        },
                      },
                      {
                        key: 'triggerH5PlayVideo',
                        value: function () {
                          if ((p.a.log('trigger h5 video play'), this.pausedByBrowser))
                            this.pausedByBrowser = !1;
                          else {
                            this.startPlayTime = D.a.now();
                            var e = this._hasVideo();
                            this.handler.onPlayVideo(
                              this.video.video,
                              this.widthCfg,
                              this.heightCfg,
                              e,
                              null,
                              this.onFragParsedTime,
                            );
                          }
                        },
                      },
                      {
                        key: 'onH264Sei',
                        value: function (e, t) {
                          this.handler.onSendSeiData(e, t, this.video.video.currentTime);
                        },
                      },
                      {
                        key: 'onMediaSourceOpen',
                        value: function () {
                          this.mediaSource.removeEventListener(
                            'sourceopen',
                            this.onMediaSourceOpenBind,
                          ),
                            p.a.log('MSEPlayer.onMediaSourceOpen'),
                            this.m4sPlayer.onMediaSourceOpen(this.mediaSource),
                            (this.audioSegments.length > 0 || this.videoSegments.length > 0) &&
                              (this.initSourceBuffer(),
                              this.appendBuffer('audio'),
                              this.appendBuffer('video'),
                              0 == this.onFragParsedTime && (this.onFragParsedTime = D.a.now()),
                              null == this.videoElement && this.triggerPlay());
                        },
                      },
                      {
                        key: 'onAudioUpdateEnd',
                        value: function () {
                          this.checkSeek(), this.appendBuffer('audio'), this.checkAppendOver();
                        },
                      },
                      {
                        key: 'onVideoUpdateEnd',
                        value: function () {
                          this.checkSeek(), this.appendBuffer('video'), this.checkAppendOver();
                        },
                      },
                      {
                        key: 'checkSeek',
                        value: function () {
                          this.video.realSeek();
                        },
                      },
                      {
                        key: 'checkCurrentTime',
                        value: function () {
                          this.video.checkCurrentTime();
                        },
                      },
                      {
                        key: 'checkAppendOver',
                        value: function () {
                          0 === this.videoSegments.length &&
                            0 === this.audioSegments.length &&
                            ((this.videoSourceBuffer && this.videoSourceBuffer.updating) ||
                              (this.audioSourceBuffer && this.audioSourceBuffer.updating) ||
                              (this.handler &&
                                this.handler.onSBUpdateEnd &&
                                this.handler.onSBUpdateEnd()));
                        },
                      },
                      {
                        key: 'onUpdateError',
                        value: function (e) {
                          p.a.warn('MSEPlayer.onUpdateError', e);
                        },
                      },
                      {
                        key: 'onVideoPause',
                        value: function (e) {
                          p.a.log('MSEPlayer.onVideoPause'),
                            (this.userPaused = !0),
                            this.h265Proxy &&
                              this.h265Proxy.isReady &&
                              this.h265Proxy.onVideoPause &&
                              this.h265Proxy.onVideoPause();
                        },
                      },
                      {
                        key: 'onPauseByBrowser',
                        value: function () {
                          (this.userPaused = !0),
                            p.a.log('MSEPlayer.onPauseByBrowser'),
                            this.handler &&
                              (this.handler.onPauseByBrowser && this.handler.onPauseByBrowser(),
                              this.handler.updateStatus && this.handler.updateStatus(c),
                              (this.pausedByBrowser = !0),
                              this.handler.eventEmitter &&
                                this.handler.eventEmitter.trigger(o.BROWSER_PAUSE, {
                                  video: this.video.video,
                                })),
                            this.h265Proxy &&
                              this.h265Proxy.isReady &&
                              this.h265Proxy.onVideoPause &&
                              this.h265Proxy.onVideoPause();
                        },
                      },
                      {
                        key: 'onVideoPlaying',
                        value: function () {
                          if (this.handler && this.handler.updateStatus) {
                            if (this.video && this.video.video && this.video.video.paused)
                              return void p.a.log(
                                'video is playing, video.paused=',
                                this.video.video.paused,
                              );
                            p.a.log('video is playing', this.isPureAudio);
                            var e = this.isPureAudio ? 'AUDIO_PLAYING' : h;
                            this.handler.updateStatus(e);
                          }
                        },
                      },
                      {
                        key: 'onVideoPlay',
                        value: function (e) {
                          p.a.log('MSEPlayer.onVideoPlay'),
                            (this.userPaused = !1),
                            this.h265Proxy &&
                              this.h265Proxy.isReady &&
                              this.h265Proxy.onVideoPlay &&
                              this.h265Proxy.onVideoPlay();
                        },
                      },
                      {
                        key: 'onVideoError',
                        value: function (e) {
                          var t = '';
                          if (this.video.video.error) {
                            var i = this.video.video.error.code;
                            (t =
                              ' errCode=' +
                              i +
                              ' ' +
                              ['Unknow', '用户终止', '网络错误', '解码错误', '格式不支持'][i]),
                              (3 != i && 4 != i) ||
                                (this.getIsMseHevc()
                                  ? this.handler.onMseHevcError(2)
                                  : (this._onErrorEvent(3 == i ? 1 : 2), this._onPlayerError(!0)),
                                (localStorage.decodeabnormal = 'abnormal_' + new Date().getTime()),
                                3 == i && this.handler.decoderDecodeError());
                          }
                          p.a.warn(
                            'MSEPlayer('
                              .concat(this._num_, ').onVideoError id=')
                              .concat(e.currentTarget.id) + t,
                            e,
                          ),
                            this.isLive ||
                              (4 === W.getFirstFragStatus() && W.setFirstFragStatus(-4));
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          p.a.info('MSEPlayer.pause'),
                            (this.userPaused = !0),
                            this.video && this.video.pause(),
                            this.handler._hyPlayer &&
                              this.handler._hyPlayer.roomRecordStat &&
                              this.handler._hyPlayer.roomRecordStat.roomNoRenderStat.pause();
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          p.a.info('MSEPlayer.play'),
                            (this.userPaused = !1),
                            this.video && this.video.play();
                        },
                      },
                      {
                        key: 'resetHls',
                        value: function () {
                          this.parser.pushAllData && this.parser.pushAllData(),
                            Object(me.a)(Object(_e.a)(i.prototype), 'resetHls', this).call(this),
                            this.clearSourceBuffer();
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          (this.lastPlayTime = e),
                            p.a.info(
                              'MSEPlayer.seek seekTime=' + e,
                              'currentTime=' + this.video.video.currentTime,
                            ),
                            this.video && this.video.seek(e);
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e, t) {
                          if (this.playing && this.isMediaSourceOpen) {
                            if (
                              (Object(me.a)(Object(_e.a)(i.prototype), 'onCheckTimer', this).call(
                                this,
                                e,
                                t,
                              ),
                              0 != this.shildAudioStartTs && this.video && this.video.video)
                            ) {
                              var s = this.getCurrentDts();
                              this.video.video.muted &&
                                s >= this.shildAudioStartTs &&
                                (p.a.log('MSEPlayer.shieldAudioMute recover'),
                                (this.video.video.muted = !1),
                                (this.shildAudioStartTs = 0));
                            }
                            var r = this.getBufferLen(),
                              a = Number(localStorage._printBufferLen);
                            if (-1 == a || (a > 0 && a == this._num_)) {
                              var n = Math.max(0, r / 100);
                              p.a.debug(this._getTag(), 'bufLen', '-'.repeat(n), r);
                            }
                            if (
                              (Number(localStorage._printMseLog) &&
                                this.audioSegments &&
                                this.videoSegments &&
                                p.a.debug(
                                  'MSE aSegments='
                                    .concat(this.audioSegments.length, ' vSegments=')
                                    .concat(this.videoSegments.length, ' bufLen=')
                                    .concat(this.getBufferLen()),
                                ),
                              !this.video.video.paused && !this.userPaused)
                            ) {
                              if (
                                (this.checkVideoRenderFrames(),
                                null == this.videoElement &&
                                  this.isLive &&
                                  t % 4 == 0 &&
                                  r > I.a.jitJump[0] &&
                                  !Number(localStorage._localFlvTest))
                              ) {
                                var o = 0.001 * (I.a.jitJump[0] - I.a.jitJump[1]);
                                (this.video.video.currentTime += o),
                                  p.a.warn(
                                    'MSEPlayer.onCheckTimer jumpTs='
                                      .concat(o, ' bufLen=')
                                      .concat(this.getBufferLen()),
                                  );
                              }
                              this.checkBuffer();
                              var h = (this.handler ? this.handler.lastEmptySliceTs : 0) || 0,
                                u = h > 0 && e - h < 3e3,
                                d = this._hasVideo();
                              this.isLive &&
                                d &&
                                this.msePause.pausedTs > 0 &&
                                e - this.msePause.pausedTs > 5e3 &&
                                !u &&
                                this.sensitivePause &&
                                (p.a.warn('MSEPlayer.onCheckTimer paused 5 sec.'),
                                this._onErrorEvent(3),
                                this._onPlayerError(!0),
                                this.handler &&
                                  this.handler.onPause5Sec &&
                                  this.handler.onPause5Sec());
                            }
                          } else
                            this.parser &&
                              this.parser.printPlayFrameInfo &&
                              this.parser.printPlayFrameInfo();
                        },
                      },
                      {
                        key: 'checkVideoRenderFrames',
                        value: function () {
                          var e = this.frameCallBackNums - this.lastFrameCallBackNums;
                          this.parser &&
                            this.parser.fps &&
                            (this.parser.fps.getRecvFps() >= 25 &&
                            0 == e &&
                            'visble' == document.visibilityState
                              ? this.isMseRCErrorCnt++
                              : (this.isMseRCErrorCnt = 0),
                            this.getIsMseHevc() &&
                              this.video &&
                              this.video.isSupportRVCB &&
                              1 == I.a.isMseCheckRcRd &&
                              this.isMseRCErrorCnt >= 10 &&
                              (p.a.log('MSEPlayer.checkVideoRenderFrames, close mse hevc!'),
                              this.handler.onMseHevcError(3)));
                          var t = D.a.now();
                          this.renderList.length >= 5 && this.renderList.shift(),
                            'hidden' == document.visibilityState
                              ? ((this.renderList.length = 0), (this.renderHiddenTs = t))
                              : (t - this.renderHiddenTs >= 1e3 || 0 == this.renderHiddenTs) &&
                                !this.renderListFirst &&
                                this.renderList.push(e),
                            1 == Number(localStorage._printVideoCallBackFps) &&
                              p.a.log(
                                'MSEPlayer.checkVideoRenderFrames,isHevc='
                                  .concat(isHevc, ',rfps=')
                                  .concat(e, ',vs=')
                                  .concat(document.visibilityState, ',rl=')
                                  .concat(this.renderList.toString(), ',ecECnt=')
                                  .concat(this.isMseRCErrorCnt),
                              ),
                            this.mseRenderList.push(e),
                            (this.renderListFirst = !1),
                            (this.lastFrameCallBackNums = this.frameCallBackNums);
                        },
                      },
                      {
                        key: 'getMseRenderList',
                        value: function () {
                          var e = Object(pe.a)(this.mseRenderList);
                          return (
                            (this.mseRenderList.length = 0),
                            p.a.log('MSEPlayer.renderList', e.toString()),
                            e
                          );
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function (e, t) {
                          if (
                            (Object(me.a)(Object(_e.a)(i.prototype), 'onCheckFastTimer', this).call(
                              this,
                              e,
                            ),
                            this.playing &&
                              this.isMediaSourceOpen &&
                              !this.video.video.paused &&
                              !this.userPaused)
                          ) {
                            this.checkEmptyFrames(),
                              this.checkDelayReset(),
                              this.onJitterTimer(),
                              this.msePause.check(e);
                            var s = (this.handler ? this.handler.lastEmptySliceTs : 0) || 0,
                              r = s > 0 && e - s < 3e3,
                              a = this._hasVideo();
                            if (
                              null == this.videoElement &&
                              !this.pause500checked &&
                              a &&
                              this.msePause.pausedTs > 0 &&
                              e - this.msePause.pausedTs > 500 &&
                              !r
                            ) {
                              this.pause500checked = !0;
                              var n = this.bufferedInfo(),
                                o = n.bufferLen.toFixed(2),
                                h = (n.nextStart - n.end).toFixed(2);
                              if (
                                (p.a.info(
                                  'MSEPlayer('.concat(this._num_, ').onCheckFastTimer paused'),
                                  'bufferLen=' + o,
                                  'hole=' + h,
                                  'nextStart=' + n.nextStart.toFixed(2),
                                  'currentTime=' + this.video.video.currentTime,
                                  'audioSegments='
                                    .concat(this.audioSegments.length, ' videoSegments=')
                                    .concat(this.videoSegments.length, ' videoSamples=')
                                    .concat(
                                      this.ctrlBuffer.avBuffer.vBuffer.getInfo(),
                                      ' audioSamples=',
                                    )
                                    .concat(this.ctrlBuffer.avBuffer.aBuffer.getInfo()),
                                ),
                                this.isLive && 'ts' != this.videoType)
                              ) {
                                this.video.printBuffered();
                                var u = Number(n.nextStart);
                                this.video.video &&
                                  u &&
                                  h > 0 &&
                                  h < 3 &&
                                  u - this.video.video.currentTime > 0.5 &&
                                  ((this.video.video.currentTime = u),
                                  p.a.log(
                                    'MSEPlayer('.concat(
                                      this._num_,
                                      ').onCheckFastTimer try jump currentTime=',
                                    ) + this.video.video.currentTime,
                                  ));
                              }
                            }
                          }
                        },
                      },
                      {
                        key: 'onCheckFastWorkerTimer',
                        value: function (e) {
                          Object(me.a)(
                            Object(_e.a)(i.prototype),
                            'onCheckFastWorkerTimer',
                            this,
                          ).call(this, e),
                            this.playing &&
                              this.isMediaSourceOpen &&
                              !this.video.video.paused &&
                              !this.userPaused &&
                              this.msePauseWorker.check(e);
                        },
                      },
                      {
                        key: 'checkEmptyFrames',
                        value: function () {
                          this.handler.setEmptyFrames &&
                            this.parser.hasEmptyFrames &&
                            this.handler.setEmptyFrames(this.parser.hasEmptyFrames);
                        },
                      },
                      {
                        key: 'checkDelayReset',
                        value: function () {
                          this.delayReset &&
                            this.getBufferLen() < 500 &&
                            (p.a.log(
                              'MSEPlayer('.concat(this._num_, ').checkDelayReset reset player'),
                            ),
                            this.remuxer.reset(),
                            this.parser.setPaused(!1),
                            (this.delayReset = !1));
                        },
                      },
                      {
                        key: '_hasAudio',
                        value: function () {
                          return (
                            !!this.audioSourceBuffer ||
                            (this.m4sPlayer && this.m4sPlayer.hasVideo())
                          );
                        },
                      },
                      {
                        key: '_hasVideo',
                        value: function () {
                          return (
                            !!this.videoSourceBuffer ||
                            (this.m4sPlayer && this.m4sPlayer.hasVideo())
                          );
                        },
                      },
                      {
                        key: '_msePaused',
                        value: function (e) {
                          this.pauseStat.pause(), this.handler.onPlayPause(e, this._hasVideo());
                        },
                      },
                      {
                        key: '_mseResume',
                        value: function (e, t) {
                          this.pauseStat.resume(),
                            (this.pause500checked = !1),
                            this.handler.onPlayResume(e, this._hasVideo());
                        },
                      },
                      {
                        key: '_msePausedWorker',
                        value: function (e) {
                          this.handler._hyPlayer &&
                            this.handler._hyPlayer.roomRecordStat &&
                            this.handler._hyPlayer.roomRecordStat.roomNoRenderStat.pause(),
                            this.handler.onPlayPauseWorker &&
                              this.handler.onPlayPauseWorker(e, this._hasVideo());
                        },
                      },
                      {
                        key: '_mseResumeWorker',
                        value: function (e, t) {
                          this.handler._hyPlayer &&
                            this.handler._hyPlayer.roomRecordStat &&
                            this.handler._hyPlayer.roomRecordStat.roomNoRenderStat.resume(),
                            this.parser.dropFrameCtrl &&
                              this.pausePerf.checkLive(
                                this.pid,
                                this.bitrate,
                                this.pauseStat.getCnt(),
                                this.buffered.continueBuffer,
                              ) &&
                              (this.parser.dropFrameCtrl.start(), this.parser.dropFrameDts.start()),
                            this.handler.onPlayResumeWorker &&
                              this.handler.onPlayResumeWorker(e, this._hasVideo());
                        },
                      },
                      {
                        key: 'bufferedInfo',
                        value: function () {
                          var e,
                            t,
                            i,
                            s,
                            r,
                            a =
                              arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0.2,
                            n = [],
                            o = [],
                            h = this.video.video.buffered;
                          for (r = 0; r < h.length; r++)
                            n.push({ start: h.start(r), end: h.end(r) });
                          for (
                            n.sort(function (e, t) {
                              return e.start - t.start || t.end - e.end;
                            }),
                              r = 0;
                            r < n.length;
                            r++
                          ) {
                            var u = o.length;
                            if (u) {
                              var d = o[u - 1].end;
                              n[r].start - d < a
                                ? n[r].end > d && (o[u - 1].end = n[r].end)
                                : o.push(n[r]);
                            } else o.push(n[r]);
                          }
                          var c = this.video.video.currentTime;
                          for (r = 0, e = 0, t = i = c; r < o.length; r++) {
                            var l = o[r].start,
                              p = o[r].end;
                            if (c + a >= l && c < p) (t = l), (e = (i = p) - c);
                            else if (c + a < l) {
                              s = l;
                              break;
                            }
                          }
                          return s || (s = i), { bufferLen: e, start: t, end: i, nextStart: s };
                        },
                      },
                      {
                        key: 'printBuffer',
                        value: function (e) {
                          if (this.video.video) {
                            var t = this.video.video.buffered,
                              i =
                                'buffered=[' +
                                ((1e3 * t.start(0)) | 0) +
                                ',' +
                                ((1e3 * t.end(0)) | 0) +
                                ']',
                              s = (1e3 * this.video.video.currentTime) >> 0,
                              r = this.getBufferLen();
                            p.a.log(
                              'MSEPlayer('
                                .concat(this._num_, ').printBuffer ')
                                .concat(e, ' currentTime=')
                                .concat(s, ' bufLen=')
                                .concat(r, ' ')
                                .concat(i),
                            );
                          }
                        },
                      },
                      {
                        key: 'playbackRateSet',
                        value: function (e) {
                          var t = this,
                            i = this.getPlayVideo();
                          if (i) {
                            var s = function (e) {
                                if (t.playRateIncrease % 2 == 0) {
                                  var s = e < 1 && e + 0.02 > 1 ? 1 : e + 0.02;
                                  s > I.a.playbackrateMax && (s = I.a.playbackrateMax),
                                    (t.playRateDecrease = 0),
                                    (i.playbackRate = s);
                                }
                              },
                              r = function (e) {
                                if (t.playRateDecrease % 2 == 0) {
                                  var s = e > 1 && e - 0.02 < 1 ? 1 : e - 0.02;
                                  s < I.a.playbackrateMin && (s = I.a.playbackrateMin),
                                    (t.playRateIncrease = 0),
                                    (i.playbackRate = s);
                                }
                              },
                              a = this.getBufferLen(),
                              n = i.playbackRate;
                            e < 0
                              ? r(n)
                              : e > 0
                              ? s(n)
                              : 1 !== n &&
                                (n < 1 && a < this.JITTER_BUFLEN
                                  ? r(n)
                                  : n > 1 && a > this.JITTER_BUFLEN
                                  ? s(n)
                                  : (i.playbackRate = 1)),
                              this.playRateDecrease++,
                              this.playRateIncrease++;
                          }
                        },
                      },
                      {
                        key: 'setMuffledVolume',
                        value: function (e) {
                          this.video.setMuffledVolume(e);
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function (e) {
                          if (
                            !(
                              this.handler &&
                              this.handler._hyPlayer &&
                              this.handler._hyPlayer.getSupportAuto
                            ) ||
                            this.handler._hyPlayer.getSupportAuto()
                          ) {
                            var t = this.getPlayVideo();
                            t && (t.playbackRate = e);
                          }
                        },
                      },
                      {
                        key: 'onJitterTimer',
                        value: function (e, t) {
                          if (
                            this.playing &&
                            ('ts' != this.videoType || this.isLive) &&
                            this.autoJitter &&
                            !this.autoBitrateJitter
                          ) {
                            var i = this.getPlayVideo();
                            if (i) {
                              var s = this.getBufferLen();
                              if (I.a.getEnableJumpBuffer() || this.isShieldAudio) {
                                var r = D.a.now();
                                if (this.latencySeek > 0 && s > 4e3)
                                  return void (i.currentTime += s - this.latencySeek);
                                if (this.enableLowLatency && s > Number(I.a.jitLowLatency))
                                  i.currentTime += s - I.a.jitLowLatency;
                                else {
                                  var a = this.getFrameBufferLen();
                                  1 == I.a.jumpBufferCfg2[0] && (s += a);
                                  var n = s - this.JITTER_BUFLEN;
                                  if (r - this.startPlayTime < this.startCd) return;
                                  if (this.isShieldAudio) {
                                    var o = a + s,
                                      h = this.JITTER_BUFLEN + I.a.shieldAudioCfg[1],
                                      u = this.JITTER_BUFLEN;
                                    if (
                                      (this.printJitter &&
                                        p.a.log(
                                          'MSEPlayer.onJitterTimer.shield bufLen='
                                            .concat(s, ',frameBufLen=')
                                            .concat(a, ',minusBuffer=')
                                            .concat(n, ',newBuf=')
                                            .concat(o - n),
                                        ),
                                      (n = o - h) <= 0)
                                    )
                                      return;
                                    if ((s - n < u && (n = s - u), n < 0)) return;
                                  }
                                  if (this.isStartBuffer)
                                    n >= I.a.jumpBufferCfg[1] &&
                                      (this.isRevFastOver ||
                                        r - this.startPlayTime >= this.startCdMax) &&
                                      this.setJumpBufferCurrentTime(n, s, 1, r);
                                  else if (
                                    r - this.setVideoCurrentTime >= this.bufferCd ||
                                    0 == this.setVideoCurrentTime
                                  ) {
                                    if (
                                      r - this.startMoreBufferTime >= this.bufferMoreContinueTime &&
                                      0 != this.startMoreBufferTime
                                    )
                                      return void this.setJumpBufferCurrentTime(n, s, 2, r);
                                    n >= I.a.jumpBufferCfg[1]
                                      ? 0 == this.startMoreBufferTime &&
                                        (this.startMoreBufferTime = r)
                                      : (this.startMoreBufferTime = 0);
                                  }
                                }
                              } else if (this.latencySeek > 0 && s > 4e3)
                                i.currentTime += s - this.latencySeek;
                              else
                                try {
                                  var d = 0;
                                  s < this.JITTER_BUFMIN
                                    ? (d = s - this.JITTER_BUFLEN)
                                    : s > this.JITTER_BUFMAX && (d = s - this.JITTER_BUFMAX),
                                    this.enableLowLatency && s > Number(I.a.jitLowLatency)
                                      ? (i.playbackRate = 1.1)
                                      : this.playbackrateChangeAccess
                                      ? ((d = Number(localStorage.ab_adjust) || d),
                                        1 != i.playbackRate &&
                                          this.isPlaybackRateNormal &&
                                          p.a.log(
                                            'MSEPlayer.onJitterTimer.playbackRate=',
                                            i.playbackRate,
                                          ),
                                        1 != i.playbackRate
                                          ? (this.isPlaybackRateNormal = !1)
                                          : (this.isPlaybackRateNormal = !0),
                                        this.playbackRateSet(d))
                                      : (i.playbackRate = 1),
                                    -1 === Number(localStorage._print_ab_log) &&
                                      p.a.log(
                                        'BUFMIN: %d, BUFMAX: %d, BUFLEN:%d, bufLen: %d, adjust: %d, playbackRate: %f',
                                        this.JITTER_BUFMIN,
                                        this.JITTER_BUFMAX,
                                        this.JITTER_BUFLEN,
                                        s,
                                        d,
                                        i.playbackRate,
                                      );
                                } catch (e) {
                                  p.a.error('MSEPlayer.onJitterTimer set playbackRateSet error', e);
                                }
                            }
                          }
                        },
                      },
                      {
                        key: 'setJumpBufferCurrentTime',
                        value: function (e, t, i, s) {
                          (this.lastJumpBufferTs = s || D.a.now()),
                            this.h265Proxy &&
                            this.h265Proxy.isReady &&
                            !this.h265Proxy.isH265MseCodec
                              ? (-1 == localStorage._printWasmJump &&
                                  p.a.log('MSEPlayer.setJumpBufferCurrentTime', e, t, i, s),
                                this.h265Proxy.jumpBuffer(e, t, i, s))
                              : this.setVideoCurrentTimeHand(e, t, i, s);
                        },
                      },
                      {
                        key: 'setVideoCurrentTimeHand',
                        value: function (e, t, i, s) {
                          var r = this.getPlayVideo();
                          if (r) {
                            var a = '';
                            1 === i
                              ? ((this.isStartBuffer = !1), (a = 'fiveJump'))
                              : 2 === i &&
                                ((a = 'ContinueJudgeJump'), (this.startMoreBufferTime = 0)),
                              p.a.log(
                                'MSEPlayer.onJitterTimer.jumpBuffer '
                                  .concat(a, ' video.currentTime before=')
                                  .concat(r.currentTime, ' bufLen=')
                                  .concat(t, ' minusBuffer=')
                                  .concat(e, ' curDts=')
                                  .concat(this.getCurrentDts()),
                              ),
                              (r.currentTime += e / 1e3),
                              (this.setVideoCurrentTime = s),
                              p.a.log(
                                'MSEPlayer.onJitterTimer.jumpBuffer '
                                  .concat(a, ' video.currentTime now=')
                                  .concat(r.currentTime, ' curDts=')
                                  .concat(this.getCurrentDts(), ' bufLen=')
                                  .concat(this.getBufferLen(), ' frameBufLen=')
                                  .concat(this.getFrameBufferLen()),
                              );
                          }
                        },
                      },
                      {
                        key: 'requestVideoFrameCallback',
                        value: function () {
                          if ((this.frameCallBackNums++, I.a.renderStat[0])) {
                            this.renderFps.addRender();
                            var e = D.a.now(),
                              t = e - this.videoCallBackTs;
                            0 != this.videoCallBackTs &&
                              t >= 200 &&
                              (p.a.log('MSEPlayer.requestVideoFrameCallback dis='.concat(t)),
                              this.videoCallBackLargeCnt++);
                            var i = this.getCurrentRealTime();
                            this.audioPlayConsuming.addRenderFrameData(i, e),
                              this.videoPlayConsuming.addRenderFrameData(i, e),
                              (this.videoCallBackTs = e);
                          }
                        },
                      },
                      {
                        key: 'getOsDiscardConfig',
                        value: function () {
                          var e = Ze.a.os || '',
                            t = Ze.a.osVersion || '';
                          return (
                            !('windows' != e.toLocaleLowerCase() || 7 != Number(t)) ||
                            1 == Number(localStorage._enableOsDiscardFrame)
                          );
                        },
                      },
                      {
                        key: 'getIsMseHevc',
                        value: function () {
                          return (
                            this.videoCodec &&
                            (-1 != this.videoCodec.indexOf('hev') ||
                              -1 != this.videoCodec.indexOf('hvc'))
                          );
                        },
                      },
                      {
                        key: 'getVideoCapabilities',
                        value: function (e) {
                          var t = this;
                          navigator &&
                            navigator.mediaCapabilities &&
                            navigator.mediaCapabilities
                              .decodingInfo({
                                type: 'media-source',
                                video: {
                                  contentType: 'video/mp4;codecs="'.concat(e.videoCodec, '"'),
                                  width: e.videoWidth,
                                  height: e.videoHeight,
                                  bitrate: 1e4,
                                  framerate: 60,
                                },
                              })
                              .then(function (e) {
                                e && e.supported
                                  ? p.a.log('MSEPlayer.getVideoCapabilities', JSON.stringify(e))
                                  : t.getIsMseHevc() && t.handler.onMseHevcError(4);
                              });
                        },
                      },
                      {
                        key: 'switchShieldAudio',
                        value: function (e) {
                          this.ctrlBuffer.switchShieldAudio(e);
                        },
                      },
                      {
                        key: 'check500Pause',
                        value: function () {
                          this.handler.check500Pause && this.handler.check500Pause();
                        },
                      },
                      {
                        key: 'isSupportRequestVideoFrameCallback',
                        value: function () {
                          return this.video && this.video.isSupportRequestVideoFrameCallback();
                        },
                      },
                      {
                        key: 'getRenderElement',
                        value: function () {
                          return this.getCodecType() === G.a.H265 &&
                            this.h265Proxy &&
                            this.h265Proxy.isReady
                            ? this.h265Proxy.getRenderElement()
                            : this.video.video;
                        },
                      },
                      {
                        key: 'isMediaSourceOpen',
                        get: function () {
                          return this.mediaSource && 'open' === this.mediaSource.readyState;
                        },
                      },
                    ]),
                    i
                  );
                })($i),
                is = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._config = t),
                      (this._receivedLength = 0),
                      (this._status = 0);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'isSupported',
                        value: function () {
                          if (1 == localStorage._noFetch) return !1;
                          try {
                            var e = g.a.msedge && g.a.version.minor >= 15048,
                              t = !g.a.msedge || e;
                            return fetch && ReadableStream && t;
                          } catch (e) {
                            return !1;
                          }
                        },
                      },
                    ]),
                    Object(r.a)(e, [
                      {
                        key: 'destroy',
                        value: function () {
                          (this.onChunk = null),
                            (this.onSuccess = null),
                            (this.onError = null),
                            (this.onTimeout = null),
                            (this._status = 0),
                            this._clearTimeout(),
                            this.abort();
                        },
                      },
                      {
                        key: 'loadBuffer',
                        value: function (e, t, i, s, r, a, n, o, h) {
                          (this.url = e),
                            (this.onOpen = t),
                            (this.onChunk = i),
                            (this.onSuccess = s),
                            (this.onError = r),
                            (this.onTimeout = a),
                            (this.stats = { trequest: performance.now(), retry: 0 }),
                            (this.timeout = n),
                            (this.maxRetry = o),
                            (this.retryDelay = h),
                            (this.timeoutHandle = window.setTimeout(
                              this.loadtimeout.bind(this),
                              n,
                            )),
                            this.loadInternal();
                        },
                      },
                      {
                        key: 'loadInternal',
                        value: function () {
                          var e = this;
                          this._requestAbort = !1;
                          var t = this.fromByte,
                            i = this.toByte,
                            s = new self.Headers();
                          null != this.fromByte &&
                            null != this.toByte &&
                            s.append('Range', 'bytes='.concat(t, '-').concat(i));
                          var r = {
                            method: 'GET',
                            headers: s,
                            mode: 'cors',
                            cache: 'default',
                            referrerPolicy: 'no-referrer-when-downgrade',
                          };
                          fetch(this.url, r).then(function (t) {
                            if (!e._requestAbort)
                              return t.ok && t.status >= 200 && t.status <= 299
                                ? ((e._status = t.status),
                                  e._onopen({ code: e._status }),
                                  e._pump.call(e, t.body.getReader()))
                                : ((e._status = t.status),
                                  void e._onerror({ code: t.status, msg: t.statusText }));
                            e._requestAbort = !1;
                          });
                        },
                      },
                      {
                        key: 'abort',
                        value: function () {
                          this._requestAbort = !0;
                        },
                      },
                      {
                        key: '_clearTimeout',
                        value: function () {
                          var e = this.timeoutHandle;
                          e && (clearTimeout(e), (this.timeoutHandle = null));
                        },
                      },
                      {
                        key: '_pump',
                        value: function (e) {
                          var t = this;
                          return e.read().then(function (i) {
                            if ((t._clearTimeout(), i.done)) t._onsuccess();
                            else {
                              if (!0 === t._requestAbort) return (t._requestAbort = !1), e.cancel();
                              var s = i.value.buffer;
                              t.onChunk && t.onChunk(s), t._pump(e);
                            }
                          });
                        },
                      },
                      {
                        key: '_onopen',
                        value: function (e) {
                          this.onOpen && this.onOpen(e);
                        },
                      },
                      {
                        key: '_onerror',
                        value: function (e) {
                          0 !== e.code && 404 !== e.code
                            ? this.stats.retry < this.maxRetry
                              ? (p.a.warn(
                                  'FetchLoader.loaderror url='
                                    .concat(this.url, ' retryDelay=')
                                    .concat(this.retryDelay, ' error: '),
                                  e,
                                ),
                                window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                                (this.retryDelay = Math.min(2 * this.retryDelay, 64e3)),
                                this.stats.retry++,
                                this.abort())
                              : (this._clearTimeout(),
                                p.a.warn(
                                  'FetchLoader.loaderror reach max retry url='.concat(
                                    this.url,
                                    ' error: ',
                                  ),
                                  e,
                                ),
                                this.onError && this.onError(e))
                            : this.onError && this.onError(e);
                        },
                      },
                      {
                        key: '_onsuccess',
                        value: function (e) {
                          this._clearTimeout(), this.onSuccess && this.onSuccess(e);
                        },
                      },
                      {
                        key: 'loadtimeout',
                        value: function () {
                          (this._status = -2),
                            this.stats.retry < this.maxRetry
                              ? (p.a.warn(
                                  'FetchLoader.loadtimeout url=' +
                                    this.url +
                                    ' retryDelay=' +
                                    this.retryDelay,
                                ),
                                this.abort(),
                                window.setTimeout(this.loadInternal.bind(this), this.retryDelay),
                                (this.retryDelay = Math.min(2 * this.retryDelay, 64e3)),
                                this.stats.retry++)
                              : (this._clearTimeout(),
                                p.a.warn('FetchLoader.loadtimeout max retry url=' + this.url),
                                this.onTimeout && this.onTimeout());
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ss = localStorage || {
                  removeItem: function (e) {},
                  getItem: function (e) {
                    return null;
                  },
                  setItem: function (e, t) {},
                  clear: function () {},
                },
                rs = '_autoViewReport',
                as = '_load_video_ts_v2_fail',
                ns = new ((function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._tsdb = null),
                      (this._sessionId = 0),
                      (this._line = 0),
                      (this._sDisplayName = ''),
                      (this._bitrate = 0),
                      (this._fails = {});
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'addFail',
                        value: function (e, t) {
                          var i = t.loadTime,
                            s = t.connectTime,
                            r = t.recvDataTime;
                          if (this.isOpen()) {
                            var a = e.getComDim(C.a.DIM_COM.P2P),
                              n = e.getComDim(C.a.DIM_COM.H265),
                              o = e.getComDim(C.a.DIM_COM.CDN_CIP),
                              h = e.getComDim(C.a.DIM_COM.CDN_SIP);
                            p.a.log(
                              'AutoTestHelper.addFail: line'
                                .concat(this._line, '_')
                                .concat(this._sDisplayName, '_')
                                .concat(this._bitrate, '_p2p=')
                                .concat(a, '_h265=')
                                .concat(n, ', loadTime=')
                                .concat(i, ' connectTime=')
                                .concat(s, ', recvDataTime=')
                                .concat(r, ', cdn_cip=')
                                .concat(o, ', cdn_sip=')
                                .concat(h),
                            );
                            var u = ''
                                .concat(this._line, '_')
                                .concat(this._sDisplayName, '_')
                                .concat(this._bitrate, '_')
                                .concat(a, '_')
                                .concat(n),
                              d = '';
                            0 === s
                              ? (d = '"拉流连接不上"')
                              : ((d =
                                  0 === r
                                    ? '拉流连接成功没收到数据'
                                    : '拉流连接耗时='.concat(s, 'ms,收数据耗时=').concat(r, 'ms')),
                                (d += ',CDNIP='.concat(h)),
                                (d = '"'.concat(d, '"'))),
                              this._fails.hasOwnProperty(u)
                                ? this._fails[u].push(d)
                                : (this._fails[u] = [d]),
                              ss.setItem(as, JSON.stringify(this._fails));
                          }
                        },
                      },
                      {
                        key: 'isOpen',
                        value: function () {
                          return '1' === ss.getItem(rs);
                        },
                      },
                      {
                        key: 'bindEvent',
                        value: function (e, t, i, s, r) {
                          var a = this;
                          this._sessionId !== t && ss.removeItem(as),
                            (this._sessionId = t),
                            (this._line = i),
                            (this._sDisplayName = s),
                            (this._bitrate = r),
                            this.isOpen() &&
                              ((this._tsdb = e),
                              (window._autoTestComplete = function (e) {
                                a._tsdb.sendAutoTestResult(e);
                              }));
                        },
                      },
                    ]),
                    e
                  );
                })())(),
                os = (function () {
                  function e(t) {
                    var i = t.eventEmiter,
                      r = t.stat,
                      a = t.statVod;
                    Object(s.a)(this, e),
                      (this.eventEmiter = i),
                      (this.stat = r),
                      (this.statVod = a),
                      (this.isSendLoadTime = !1),
                      (this.isSendHlsLoadTime = !1),
                      (this.isSendH265 = !1),
                      (this.hasP2P = 0),
                      (this.restartReason = -1),
                      (this.restartTimes = 0),
                      (this.turnToFlvReason = -1),
                      (this.turnToFlvTimes = 0),
                      (this.httpError = !1),
                      (this.busiSource = ''),
                      (this.isSendM3u8LoadTime = !1),
                      (this.isSendVodLoadTime = !1),
                      (this.isSendVodM3u8LoadTime = !1),
                      (this.isClosedSendVodLoadTime = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'closeSendVodLoadTime',
                        value: function () {
                          var e =
                            !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                          this.isClosedSendVodLoadTime = e;
                        },
                      },
                      {
                        key: 'sendCdnTime',
                        value: function (e, t, i) {
                          var s =
                              arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                            r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0;
                          if (t) {
                            var a = Math.max(0, e.connectVideoTime - e.startTime),
                              n = e.firstVideoPkgTime - e.connectVideoTime,
                              o = e.firstIFrameTime1 - e.connectVideoTime,
                              h = e.firstIFrameTime2 - e.firstIFrameTime1,
                              u = e.firstRenderTime - e.firstIFrameTime2,
                              d = e.onPlayTime - e.firstRenderTime,
                              c = e.recvDataTime - e.startTime,
                              l = (e.onPlayTime, e.startTime, e.firstP2POnDataTime - e.startTime);
                            l = l < 0 ? 0 : l;
                            var f = 0;
                            e.firstP2PIframeTime > 0 &&
                              (f = (f = e.firstP2PIframeTime - e.startTime) < 0 ? 0 : f);
                            var m = 0;
                            r && (m += 1),
                              s && (m += 2),
                              this.stat.setComDim(C.a.DIM_COM.ACT_LOAD_TYPE, m);
                            var _ = [e.hyPlayerLoadTs, c, a, s, r, i, 0, 0, 0, l, f],
                              v = [
                                this.stat.createAct(C.a.ACT.CONNECT_VIDEO_TS, { value: [a] }),
                                this.stat.createAct(C.a.ACT.FIRST_VIDEO_PKG_TS, { value: [n] }),
                                this.stat.createAct(C.a.ACT.FIRST_VIDEO_IFRAME_TS, { value: [o] }),
                                this.stat.createAct(C.a.ACT.VIDEO_IFRAME_TS, { value: [h] }),
                                this.stat.createAct(C.a.ACT.FIRST_VIDEO_RENDER_TS, { value: [u] }),
                                this.stat.createAct(C.a.ACT.VIDEO_PLAYED_TS, { value: [d] }),
                                this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS, { value: _ }),
                              ];
                            if (
                              (p.a.log(
                                'TsdbUtils.sendCdnTime, loadTime='
                                  .concat(e.hyPlayerLoadTs, ', connectTime=')
                                  .concat(a, ', recvDataTime=')
                                  .concat(c),
                              ),
                              this.sendMetrics([
                                this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS_V2, { value: _ }),
                              ]),
                              this.isSendLoadTime)
                            )
                              return;
                            (this.isSendLoadTime = !0), this.sendMetrics(v);
                          } else {
                            var y = e.getVPTime - e.startTime,
                              S = Math.max(0, e.connectVideoTime - e.getVPTime),
                              g = e.loginTime - e.connectVideoTime,
                              T = e.firstVideoPkgTime - e.loginTime,
                              E = e.firstIFrameTime - e.firstVideoPkgTime,
                              D = e.firstRenderTime - e.firstIFrameTime,
                              P = e.onPlayTime - e.firstRenderTime,
                              A = e.onPlayTime - e.startTime,
                              I = [
                                this.stat.createAct(C.a.ACT.VIDEO_GET_VP_TS, { value: [y] }),
                                this.stat.createAct(C.a.ACT.CONNECT_VIDEO_TS, { value: [S] }),
                                this.stat.createAct(C.a.ACT.VIDEO_LOGIN_TS, { value: [g] }),
                                this.stat.createAct(C.a.ACT.FIRST_VIDEO_PKG_TS, { value: [T] }),
                                this.stat.createAct(C.a.ACT.FIRST_VIDEO_IFRAME_TS, { value: [E] }),
                                this.stat.createAct(C.a.ACT.FIRST_VIDEO_RENDER_TS, { value: [D] }),
                                this.stat.createAct(C.a.ACT.VIDEO_PLAYED_TS, { value: [P] }),
                                this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS, { value: [A] }),
                              ];
                            this.sendMetrics(I);
                          }
                        },
                      },
                      {
                        key: 'sendFlvTime',
                        value: function (e, t, i, s) {
                          var r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
                            a = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : 0,
                            n = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0,
                            o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0,
                            h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,
                            u = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : 0,
                            d = 0;
                          n && (d += 1),
                            a && (d += 2),
                            this.stat.setComDim(C.a.DIM_COM.ACT_LOAD_TYPE, d);
                          var c = [e, i, t, a, n, o, 0, 0, 0, h, u],
                            l = [
                              this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS, { value: c }),
                              this.stat.createAct(C.a.ACT.CONNECT_VIDEO_TS, { value: [t] }),
                              this.stat.createAct(C.a.ACT.RECV_VIDEO_TS, { value: [i, s] }),
                            ];
                          e > 1e4 ||
                            t > 1e4 ||
                            (p.a.log(
                              'TsdbUtils.sendCdnTime, loadTime='
                                .concat(e, ', connectTime=')
                                .concat(t, ', recvDataTime=')
                                .concat(i),
                            ),
                            this.sendMetrics([
                              this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS_V2, { value: c }),
                            ]),
                            (this.isSendLoadTime && !r) ||
                              ((this.isSendLoadTime = !0), this.sendMetrics(l)));
                        },
                      },
                      {
                        key: 'sendWebRtcTime',
                        value: function (e, t, i, s, r) {
                          (this.isSendLoadTime = !0), this.stat.setActDim('p2p', '3');
                          var a = [
                            this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS, {
                              value: [e, 0, 0, 0, 0, t, i, s, r],
                            }),
                          ];
                          this.sendMetrics(a);
                        },
                      },
                      {
                        key: 'sendHlsTime',
                        value: function (e, t, i, s, r, a) {
                          var n =
                              arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : 0,
                            o = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : 0,
                            h = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : 0,
                            u = arguments.length > 9 ? arguments[9] : void 0;
                          if (!this.isSendHlsLoadTime) {
                            var d = 0;
                            if (
                              (o && (d += 1),
                              n && (d += 2),
                              this.stat.setComDim(C.a.DIM_COM.ACT_LOAD_TYPE, d),
                              (this.isSendHlsLoadTime = !0),
                              !(t > 1e4 || i > 1e4 || r > 1e4))
                            ) {
                              var c = [
                                this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS, {
                                  value: [t, e, 0, n, o, r, h],
                                  str: [this.busiSource],
                                }),
                                this.stat.createAct(C.a.ACT.VIDEO_LOAD_SEG, { value: u }),
                                this.stat.createAct(C.a.ACT.FIRST_FRAG_LOAD_TS, { value: [s, e] }),
                                this.stat.createAct(C.a.ACT.FIRST_FRAG_LOADED_TS, {
                                  value: [r, e, h],
                                }),
                                this.stat.createAct(C.a.ACT.FIRST_FRAG_SIZE, { value: [a, e] }),
                              ];
                              i > 0 &&
                                !this.isSendM3u8LoadTime &&
                                (c.push(
                                  this.stat.createAct(C.a.ACT.LOAD_M3U8_TS, { value: [i, e] }),
                                ),
                                (this.isSendM3u8LoadTime = !0)),
                                this.sendMetrics(c);
                            }
                          }
                        },
                      },
                      {
                        key: 'sendM3u8LoadedTime',
                        value: function (e, t) {
                          if (!(this.isSendM3u8LoadTime || t > 1e4)) {
                            this.isSendM3u8LoadTime = !0;
                            var i = [this.stat.createAct(C.a.ACT.LOAD_M3U8_TS, { value: [t, e] })];
                            this.sendMetrics(i);
                          }
                        },
                      },
                      {
                        key: 'sendVodHlsTime',
                        value: function (e) {
                          var t = e.loadType,
                            i = e.loadTime,
                            s = e.loadM3u8Time,
                            r = e.firstFragLoadTs,
                            a = e.firstFragLoadedTs,
                            n = e.firstFragSize,
                            o = e.businessCost,
                            h = void 0 === o ? 0 : o,
                            u = e.UICost,
                            d = void 0 === u ? 0 : u,
                            c = e.firstFragParsedTs,
                            l = void 0 === c ? 0 : c,
                            p = e.playTs,
                            f = e.startTs,
                            m = e.m3u8Status,
                            _ = e.firstTsStatus,
                            v = e.costTimes;
                          if (
                            !this.isClosedSendVodLoadTime &&
                            !(
                              this.isSendVodLoadTime ||
                              ((this.isSendVodLoadTime = !0), i > 1e4 && 99999 != i)
                            )
                          ) {
                            var y = [
                              this.statVod.createAct(C.a.ACT.VIDEO_LOAD_TS, {
                                value: [i, t, m, _, s, a, l, h, d, f, p],
                              }),
                              this.statVod.createAct(C.a.ACT.VIDEO_LOAD_SEG, { value: v }),
                            ];
                            i < 1e4 &&
                              (y = y.concat([
                                this.statVod.createAct(C.a.ACT.FIRST_FRAG_LOAD_TS, {
                                  value: [r, t],
                                }),
                                this.statVod.createAct(C.a.ACT.FIRST_FRAG_LOADED_TS, {
                                  value: [a, t, l],
                                }),
                                this.statVod.createAct(C.a.ACT.FIRST_FRAG_SIZE, { value: [n, t] }),
                              ])),
                              s > 0 &&
                                !this.isSendVodM3u8LoadTime &&
                                (y.push(
                                  this.statVod.createAct(C.a.ACT.LOAD_M3U8_TS, { value: [s, t] }),
                                ),
                                (this.isSendVodM3u8LoadTime = !0)),
                              this.sendMetrics(y);
                          }
                        },
                      },
                      {
                        key: 'sendVodM3u8LoadedTime',
                        value: function (e, t) {
                          if (!(this.isSendVodM3u8LoadTime || t > 1e4)) {
                            this.isSendVodM3u8LoadTime = !0;
                            var i = [
                              this.statVod.createAct(C.a.ACT.LOAD_M3U8_TS, { value: [t, e] }),
                            ];
                            this.sendMetrics(i);
                          }
                        },
                      },
                      {
                        key: 'sendNoPictureTime',
                        value: function (e, t, i, s) {
                          var r =
                              arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : '',
                            a = D.a.now(),
                            n = [e, (i = i > 0 ? i : 0), (t = t > 0 ? t : 0)],
                            o = a - this.stat.create_time;
                          p.a.log(
                            'TsdbUtils.sendNoPictureTime, loadTime='
                              .concat(e, ', connectTime=')
                              .concat(t, ', recvDataTime=')
                              .concat(i, ', type=')
                              .concat(s, ', now=')
                              .concat(a, ', create_time=')
                              .concat(this.stat.create_time, ', timeDelta=')
                              .concat(o),
                          );
                          var h = [
                            this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS, { value: n, str: [r, s] }),
                          ];
                          this.sendMetrics(h);
                        },
                      },
                      {
                        key: 'sendNoPictureTimeAll',
                        value: function (e, t, i, s) {
                          var r =
                              arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : '',
                            a = D.a.now(),
                            n = [e, (i = i > 0 ? i : 0), (t = t > 0 ? t : 0)],
                            o = a - this.stat.create_time;
                          p.a.log(
                            'TsdbUtils.sendNoPictureTimeAll, loadTime='
                              .concat(e, ', connectTime=')
                              .concat(t, ', recvDataTime=')
                              .concat(i, ', type=')
                              .concat(s, ', now=')
                              .concat(a, ', create_time=')
                              .concat(this.stat.create_time, ', timeDelta=')
                              .concat(o),
                          );
                          var h = [
                            this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS_V2, {
                              value: n,
                              str: [r, s],
                            }),
                          ];
                          e >= I.a.autoReportTime &&
                            (ns.addFail(this.stat, {
                              loadTime: e,
                              connectTime: t,
                              recvDataTime: i,
                            }),
                            this.autoReport(!1)),
                            this.sendMetrics(h);
                        },
                      },
                      {
                        key: 'autoReport',
                        value: function () {
                          ((arguments.length > 0 && void 0 !== arguments[0] && arguments[0]) ||
                            -1 !== I.a.autoReportUsers.indexOf(U.a.uid) ||
                            1 === Number(ss.getItem(rs))) &&
                            this.eventEmiter.trigger(l.P2P_REPORT);
                        },
                      },
                      {
                        key: 'sendAutoTestResult',
                        value: function (e) {
                          p.a.log('TsdbUtils.sendAutoTestResult, result='.concat(e));
                          var t = [this.stat.createAct(C.a.ACT.AUTO_TEST_RESULT, { str: [e] })];
                          this.sendMetrics(t);
                        },
                      },
                      {
                        key: 'setBusiSource',
                        value: function (e) {
                          this.busiSource = e;
                        },
                      },
                      {
                        key: 'sendMP4Time',
                        value: function () {
                          var e = (
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                          ).loadTime;
                          if (!(e > 1e4)) {
                            var t = [
                              this.stat.createAct(C.a.ACT.VIDEO_LOAD_TS, {
                                value: [e],
                                str: [this.busiSource],
                              }),
                            ];
                            this.sendMetrics(t);
                          }
                        },
                      },
                      {
                        key: 'sendVodMP4Time',
                        value: function () {
                          var e =
                              arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                            t = e.loadTime,
                            i = e.errorLoadTime,
                            s = [
                              this.statVod.createAct(C.a.ACT.VIDEO_LOAD_TS, {
                                value: [t, 0, 0, i],
                                str: [this.busiSource],
                              }),
                            ];
                          this.sendMetrics(s);
                        },
                      },
                      {
                        key: 'sendMetrics',
                        value: function (e) {
                          this.stat.checkFilter(e), this.eventEmiter.trigger(l.DATA_METRIC2, e);
                        },
                      },
                      {
                        key: 'sendOldMetrics',
                        value: function (e) {
                          this.eventEmiter.trigger(l.DATA_METRIC, e);
                        },
                      },
                    ]),
                    e
                  );
                })();
              (os.METRIC = {
                VIDEO_FLOW_LINE: 'video.flow.line',
                VIDEO_FLOW_P2P: 'video.flow.p2p',
                VIDEO_BAD_QUALITY_RATIO: 'video.video_bad_quality_ratio',
                WEB_HLS_PLAY_VIDEO_RATIO: 'web.hls.play_video_ratio',
                WEB_HLS_PLAY_SUC_RATIO: 'web.hls.play_suc_ratio',
                WEB_P2P_PLAY_RATIO: 'web.p2p.play_ratio',
                WEB_P2P_PUNCH: 'web.p2p.punch',
                WEB_P2P_BW_P2P_VALID: 'web.p2p.bw_p2p_valid',
                WEB_P2P_BW_P2P_REPEAT: 'web.p2p.bw_p2p_repeat',
                WEB_P2P_BW_P2P_TOTAL: 'web.p2p.bw_p2p_total',
                WEB_P2P_BW_CDN_VALID: 'web.p2p.bw_cdn_valid',
                WEB_P2P_BW_CDN_REPEAT: 'web.p2p.bw_cdn_repeat',
                WEB_P2P_BW_CDN_TOTAL: 'web.p2p.bw_cdn_total',
                WEB_P2P_BW_RANGE_VALID: 'web.p2p.bw_range_valid',
                WEB_P2P_BW_RANGE_TOTAL: 'web.p2p.bw_range_total',
                WEB_P2P_PLAY_FAIL: 'web.p2p.play_fail',
                WEB_P2P_LOAD_RATIO: 'web.p2p.load_ratio',
                WEB_P2P_CDN_RESTART: 'web.p2p.cdn_restart',
                WEB_P2P_TCP_NO_SLICE: 'web.p2p.tcp_no_slice',
                WEB_P2P_TCP_OPEN_TIME: 'web.p2p.tcp_open_time',
                WEB_P2P_HTTP_CODE: 'web.p2p.http_code_',
                WEB_P2P_TCP_TIMEOUT: 'web.p2p.tcp_timeout',
                WEB_H265: 'web.h265',
                SDK_P2P_TCP: 'sdk.p2p.tcp',
                SDK_VIDEO_LOGIN_SUC: 'sdk.video.login_suc',
                SDK_P2P_COOLING: 'sdk.p2p.cooling',
                SDK_P2P_SERVER_OPEN: 'sdk.p2p.server_open',
                SDK_P2P_USER_PROPERTY: 'sdk.p2p.user_property',
                VIDEO_VIDEO_BAD_QUALITY_5M_RATIO: 'video.video_bad_quality_5m_ratio',
                VIDEO_VIDEO_LOAD_ERROR: 'video_load_error',
                RECV_DANMU_CARTON: 'recv_danmu_carton',
                SDK_P2P_DETAILS: 'sdk.p2p.details',
                SDK_P2P_FORCE_REASON: 'sdk.p2p.force_reason',
                SDK_P2P_DEFAULT_REASON: 'sdk.p2p.default_reason',
                SDK_P2P_VALID_RET: 'sdk.p2p.valid_ret',
                SDK_P2P_GET_NODE: 'sdk.p2p.get_node',
                WEB_USER: 'web.user',
              }),
                (os.INTERVAL = {
                  SDK_VIDEO_QUALITY: 'sdk.video.quality',
                  SDK_VIDEO_QUALITY_5M: 'sdk.video.quality_5m',
                  SDK_CALC_FLOW: 'sdk.calc.flow',
                  SDK_P2P_TCP: 'sdk.p2p.tcp',
                  SDK_P2P_FLOW: 'sdk.p2p.flow',
                  SDK_P2P_PUNCH: 'sdk.p2p.punch',
                  SDK_P2P_SUB: 'sdk.p2p.sub',
                  SDK_P2P_RESEND: 'sdk.p2p.resend',
                  SDK_P2P_DELAY: 'sdk.p2p.resend',
                  SDK_P2P_OTHER: 'sdk.p2p.other',
                }),
                (os.TRIGGER = {
                  SDK_HLS_PLAY: 'sdk.hls.play',
                  SDK_HLS_LOAD: 'sdk.hls.load',
                  SDK_MSE_ERROR: 'sdk.mse.error',
                  SDK_P2P_LOAD: 'sdk.p2p.load',
                  SDK_P2P_LOAD_SAMPLE: 'sdk.p2p.load_sample',
                  SDK_P2P_RESTART: 'sdk.p2p.restart',
                  SDK_WEB_H265: 'sdk.web.h265',
                });
              var hs = os,
                us = new ((function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.hlsPlayer = null),
                      (this.cachedVodBlock = {}),
                      (this.vodBlockReasons = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setHlsPlayer',
                        value: function (e) {
                          this.hlsPlayer = e;
                        },
                      },
                      {
                        key: 'cacheBlockReason',
                        value: function (e, t) {
                          !e ||
                            t <= 0 ||
                            (p.a.log('VodBlockHelper.checkInBufBlock: reason=', e, t),
                            (this.cachedVodBlock[e.CODE] = t));
                        },
                      },
                      {
                        key: 'checkInBufBlock',
                        value: function () {
                          if (this.hlsPlayer) {
                            var e = Y,
                              t = this.hlsPlayer.getCurrentTime();
                            for (var i in this.cachedVodBlock) {
                              var s = this.cachedVodBlock[i];
                              if (Math.abs(s - t) < 1) {
                                if (i === Z.CODE) {
                                  (e = Z), delete this.cachedVodBlock[i];
                                  break;
                                }
                                if (e === $.CODE) {
                                  (e = $), delete this.cachedVodBlock[i];
                                  break;
                                }
                                if (e === Q.CODE) {
                                  (e = Q), delete this.cachedVodBlock[i];
                                  break;
                                }
                              }
                            }
                            e === Y && this.hlsPlayer.getBufferLen() > 1e3 && (e = X),
                              p.a.log('VodBlockHelper.checkInBufBlock: reason code =', e.CODE),
                              this.vodBlockReasons.push(e);
                          }
                        },
                      },
                      {
                        key: 'checkNoBufBlock',
                        value: function () {
                          if (this.hlsPlayer) {
                            var e = Y,
                              t = this.hlsPlayer.playlist.currFrag;
                            if (t) {
                              var i = q,
                                s = K;
                              e = t.isPcdn ? i : s;
                              var r = this.vodBlockReasons.find(function (e) {
                                  return e.code === i.CODE;
                                }),
                                a = this.vodBlockReasons.find(function (e) {
                                  return e.code === s.CODE;
                                });
                              r && a && (e = J);
                              var n = q,
                                o = K;
                              t.isLoadError && (e = t.isPcdn ? n : o);
                              var h = this.vodBlockReasons.find(function (e) {
                                  return e.code === i.CODE;
                                }),
                                u = this.vodBlockReasons.find(function (e) {
                                  return e.code === s.CODE;
                                });
                              h && u && (e = z),
                                p.a.log('VodBlockHelper.checkNoBufBlock: reason code =', e.CODE),
                                this.vodBlockReasons.push(e);
                            }
                          }
                        },
                      },
                      {
                        key: 'checkVodBlock',
                        value: function () {
                          this.hlsPlayer &&
                            (this.checkInBufBlock(),
                            this.hlsPlayer.getBufferLen() < 1e3 && this.checkNoBufBlock());
                        },
                      },
                      {
                        key: 'getBlockReason',
                        value: function () {
                          return this.vodBlockReasons.length <= 0
                            ? 0
                            : ((this.vodBlockReasons = this.vodBlockReasons.sort(function (e, t) {
                                return e.PRIORITY - t.PRIORITY;
                              })),
                              this.vodBlockReasons[0].CODE);
                        },
                      },
                      {
                        key: 'resetBlockReason',
                        value: function () {
                          this.vodBlockReasons = [];
                        },
                      },
                    ]),
                    e
                  );
                })())(),
                ds = (function () {
                  function e(t) {
                    var i = t.presenterUid,
                      r = t.lineType;
                    Object(s.a)(this, e),
                      (this.heartMode = x.b.getCfgValue(I.a.heartMode, i, r, 1)),
                      (this.heartQpsOpen = x.b.isOpen(I.a.heartQpsPids, i, r, !1)),
                      (this.heartQps = x.b.getCfgValue(I.a.heartQps, i, r, 0)),
                      (this.batch_id = 0),
                      (this.heartList = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'sendQps',
                        value: function (e, t, i) {
                          var s = this,
                            r = Math.floor(Date.now() / 1e3);
                          0 === this.batch_id && (this.batch_id = r);
                          var a = [];
                          t.forEach(function (e) {
                            if (
                              ((e.vDimension[C.a.DIM_CORE.REPROT_TIME] = r),
                              2 === s.heartMode && s.heartQpsOpen)
                            )
                              (e.vDimension[C.a.DIM_CORE.BATCH_ID] = s.batch_id),
                                (e.vDimension[C.a.DIM_CORE.REPORT_TYPE] = 1);
                            else if (3 === s.heartMode) {
                              var t = {
                                sMetricName: e.sMetricName,
                                vDimension: {},
                                vField: {},
                                vExLog: {},
                              };
                              Object.assign(t.vDimension, e.vDimension),
                                Object.assign(t.vField, e.vField),
                                Object.assign(t.vExLog, e.vExLog),
                                (t.vDimension[C.a.DIM_CORE.BATCH_ID] = s.batch_id),
                                (t.vDimension[C.a.DIM_CORE.REPORT_TYPE] = 1),
                                a.push(t);
                            }
                          }),
                            1 === this.heartMode
                              ? e.sendMetrics(t)
                              : 2 === this.heartMode
                              ? this.heartQpsOpen
                                ? this.storeAndSend(e, t, i)
                                : e.sendMetrics(t)
                              : 3 === this.heartMode &&
                                (e.sendMetrics(t, i), this.storeAndSend(e, a, i));
                        },
                      },
                      {
                        key: 'storeAndSend',
                        value: function (e, t, i) {
                          if (
                            (this.heartList.push(t), this.heartList.length >= this.heartQps || i)
                          ) {
                            for (var s = [], r = 0; r < this.heartList.length; r++)
                              s = s.concat(this.heartList[r]);
                            (this.heartList = []), (this.batch_id = 0), e.sendMetrics(s);
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                cs = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e) {
                    var r;
                    return (
                      Object(s.a)(this, i),
                      ((r = t.call(this, e)).handlerPlayer = e),
                      (r.stat = r.handlerPlayer.stat),
                      (r.statVod = r.handlerPlayer.statVod),
                      (r.tsdbUtil = r.handlerPlayer.tsdb),
                      (r.isPaused = !1),
                      (r.tsOpens = []),
                      (r.tsLoadeds = []),
                      (r.tsSpeeds = []),
                      (r.tsSizes = []),
                      (r._statQps = null),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'setPause',
                        value: function () {
                          (this.isPaused = !0),
                            this.stat.setCore(C.a.DIM_CORE.VIDEO_BAD_QUALITY, 100);
                        },
                      },
                      {
                        key: 'start',
                        value: function () {
                          this.stop(),
                            F.once(this.checkSuc, this, 1e4),
                            F.once(this.checkVideo, this, 2e4);
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          (this.tsOpens = []),
                            (this.tsLoadeds = []),
                            (this.tsSpeeds = []),
                            (this.tsSizes = []),
                            F.remove(this.checkSuc, this),
                            F.remove(this.checkVideo, this);
                        },
                      },
                      {
                        key: 'checkSuc',
                        value: function () {
                          var e = this.handlerPlayer,
                            t = e._loaderType,
                            i = e.hasVideo,
                            s = e.url,
                            r = e.playTs,
                            a = i ? 100 : 0,
                            n = [];
                          n.push(
                            this.stat.createAct(C.a.ACT.HLS_PLAY_SUCC, {
                              value: [a, t],
                              str: [s, ''.concat(r)],
                            }),
                          ),
                            this.tsdbUtil.sendMetrics(n);
                        },
                      },
                      {
                        key: 'checkVideo',
                        value: function () {
                          var e = this.handlerPlayer.hasVideo ? 100 : 0,
                            t = [];
                          t.push(this.stat.createAct(C.a.ACT.HLS_LOAD_SUCC, { value: [e] })),
                            this.tsdbUtil.sendMetrics(t);
                        },
                      },
                      {
                        key: 'report',
                        value: function () {
                          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                            t = [];
                          if (
                            (0 === I.a.statLv[15] &&
                              t.push({
                                sMetricName: hs.METRIC.VIDEO_BAD_QUALITY_RATIO,
                                vField: { value: this.isPaused ? 100 : 0 },
                                vDimension: { p2p: 2 },
                              }),
                            this.handlerPlayer.mse.metadata.recvAudioFps &&
                              this.stat.setComp(
                                C.a.DIM_LINK_SAM.name,
                                C.a.DIM_LINK_SAM.AUDIO_RATE,
                                this.handlerPlayer.mse.metadata.recvAudioFps,
                              ),
                            this.handlerPlayer.mse.metadata.recvVideoFps &&
                              this.stat.setComp(
                                C.a.DIM_LINK_SAM.name,
                                C.a.DIM_LINK_SAM.VIDEO_RATE,
                                this.handlerPlayer.mse.metadata.recvVideoFps,
                              ),
                            this.stat.setComp(
                              C.a.DIM_LINK_SAM.name,
                              C.a.DIM_LINK_SAM.SPEED,
                              this.handlerPlayer.getSpeed(),
                            ),
                            this.stat.setComp(
                              C.a.DIM_LINK_SAM.name,
                              C.a.DIM_LINK_SAM.VIDEO_DTS,
                              this.handlerPlayer.mse.curVideoDts,
                            ),
                            this.stat.setComp(
                              C.a.DIM_LINK_SAM.name,
                              C.a.DIM_LINK_SAM.AUDIO_DTS,
                              this.handlerPlayer.mse.curAudioDts,
                            ),
                            this.stat.setCompFormat(C.a.DIM_LINK_SAM.name, ':', ','),
                            this.stat.setCore(
                              C.a.CORE.PLAY_DELAY,
                              this.handlerPlayer.getBufferLen(),
                            ),
                            this.stat.setCore(
                              C.a.CORE.FRAME_BUFFER_DELAY,
                              this.handlerPlayer.getFrameBufferLen(),
                            ),
                            this.handlerPlayer.h265Proxy.rendering &&
                              (this.h265PauseProps = this.handlerPlayer.h265Proxy.getStats(e)),
                            this.recordBaseStat(),
                            this.reportVideoBadQuality(this.isPaused, e),
                            this.isPaused)
                          ) {
                            var i = us.getBlockReason();
                            i && this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_REASON, i);
                          }
                          this.stat.setComp(
                            C.a.HLS_INFO.name,
                            C.a.HLS_INFO.TS_OPEN_AVG,
                            this.getAvg(this.tsOpens),
                          ),
                            this.stat.setComp(
                              C.a.HLS_INFO.name,
                              C.a.HLS_INFO.TS_LOADED_AVG,
                              this.getAvg(this.tsLoadeds),
                            ),
                            this.stat.setComp(
                              C.a.HLS_INFO.name,
                              C.a.HLS_INFO.TS_SPEED_AVG,
                              this.getAvg(this.tsSpeeds),
                            ),
                            this.stat.setComp(
                              C.a.HLS_INFO.name,
                              C.a.HLS_INFO.TS_SIZE_AVG,
                              this.getAvg(this.tsSizes),
                            ),
                            this.stat.fill(t, e),
                            this.handlerPlayer &&
                              !this.handlerPlayer.isLive &&
                              this.reportVod(t, e),
                            this.statQps.sendQps(this.tsdbUtil, t, e),
                            (this.isPaused = !1),
                            this.handlerPlayer &&
                              (us.resetBlockReason(), this.handlerPlayer.resetHeartTsTime()),
                            (this.tsOpens = []),
                            (this.tsLoadeds = []),
                            (this.tsSpeeds = []),
                            (this.tsSizes = []);
                        },
                      },
                      {
                        key: 'reportVideoBadQuality',
                        value: function (e, t) {
                          this.handlerPlayer.h265Proxy && this.handlerPlayer.h265Proxy.rendering
                            ? this.reportH265(e, t)
                            : this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY, e ? 100 : 0);
                        },
                      },
                      {
                        key: 'reportH265',
                        value: function (e, t) {
                          var i = this.h265PauseProps,
                            s = i.videoPauseCnt,
                            r = i.isVideoPaused,
                            a = i.hiddenTime,
                            n = i.statProps,
                            o = e ? 100 : 0,
                            h = r || s > 0 ? 100 : 0;
                          for (var u in (this.handlerPlayer.h265Proxy.render.isHidden && a >= 2e4
                            ? (this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_H265_BAD_QUALITY, h),
                              this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY, o))
                            : (this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_H265_BAD_QUALITY, o),
                              this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY, h)),
                          n))
                            'toDecode' == u
                              ? this.recordH265Frame(n[u], C.a.DIM_COM.V_TO_DECODE_FRAMES)
                              : 'decoded' == u
                              ? this.recordH265Frame(n[u], C.a.DIM_COM.V_DECODE_FRAME)
                              : 'render' == u
                              ? this.recordH265Frame(n[u], C.a.DIM_COM.V_PLAY_FRAME)
                              : 'rawList' == u
                              ? this.recordH265Frame(n[u], C.a.DIM_COM.V_RECV_FRAME)
                              : 'frameList' == u ||
                                this.stat.setComp(C.a.DIM_H265_SAM.name, u, n[u].join('|'));
                        },
                      },
                      {
                        key: 'recordH265Frame',
                        value: function (e, t) {
                          var i = this;
                          this.stat.setComp(t, 'size', e.length),
                            e.map(function (e, s) {
                              i.stat.setComp(t, 'k' + (s + 1), e),
                                i.stat.setCompFormat(t, ':', ',');
                            }),
                            this.handlerPlayer &&
                              !this.handlerPlayer.isLive &&
                              (this.statVod.setComp(t, 'size', e.length),
                              e.map(function (e, s) {
                                i.statVod.setComp(t, 'k' + (s + 1), e),
                                  i.statVod.setCompFormat(t, ':', ',');
                              }));
                        },
                      },
                      {
                        key: 'reportVod',
                        value: function (e, t) {
                          if (
                            (this.handlerPlayer.mse.metadata.recvAudioFps &&
                              this.statVod.setComp(
                                C.a.DIM_LINK_SAM.name,
                                C.a.DIM_LINK_SAM.AUDIO_RATE,
                                this.handlerPlayer.mse.metadata.recvAudioFps,
                              ),
                            this.handlerPlayer.mse.metadata.recvVideoFps &&
                              this.statVod.setComp(
                                C.a.DIM_LINK_SAM.name,
                                C.a.DIM_LINK_SAM.VIDEO_RATE,
                                this.handlerPlayer.mse.metadata.recvVideoFps,
                              ),
                            this.statVod.setComp(
                              C.a.DIM_LINK_SAM.name,
                              C.a.DIM_LINK_SAM.SPEED,
                              this.handlerPlayer.getSpeed(),
                            ),
                            this.statVod.setComp(
                              C.a.DIM_LINK_SAM.name,
                              C.a.DIM_LINK_SAM.VIDEO_DTS,
                              this.handlerPlayer.mse.curVideoDts,
                            ),
                            this.statVod.setComp(
                              C.a.DIM_LINK_SAM.name,
                              C.a.DIM_LINK_SAM.AUDIO_DTS,
                              this.handlerPlayer.mse.curAudioDts,
                            ),
                            this.statVod.setCompFormat(C.a.DIM_LINK_SAM.name, ':', ','),
                            this.statVod.setComp(
                              C.a.HLS_INFO.name,
                              C.a.HLS_INFO.TS_OPEN_AVG,
                              this.getAvg(this.tsOpens),
                            ),
                            this.statVod.setComp(
                              C.a.HLS_INFO.name,
                              C.a.HLS_INFO.TS_LOADED_AVG,
                              this.getAvg(this.tsLoadeds),
                            ),
                            this.statVod.setComp(
                              C.a.HLS_INFO.name,
                              C.a.HLS_INFO.TS_SPEED_AVG,
                              this.getAvg(this.tsSpeeds),
                            ),
                            this.statVod.setComp(
                              C.a.HLS_INFO.name,
                              C.a.HLS_INFO.TS_SIZE_AVG,
                              this.getAvg(this.tsSizes),
                            ),
                            this.statVod.setCoreDim(
                              C.a.VOD_DIM_CORE.TS_START_TIME,
                              this.handlerPlayer.heartTsStartTime,
                            ),
                            this.statVod.setCoreDim(
                              C.a.VOD_DIM_CORE.TS_END_TIME,
                              this.handlerPlayer.heartTsEndTime,
                            ),
                            this.handlerPlayer.h265Proxy.rendering)
                          ) {
                            var i = this.h265PauseProps,
                              s = i.videoPauseCnt,
                              r = i.isVideoPaused,
                              a = i.hiddenTime,
                              n = this.isPaused ? 100 : 0,
                              o = r || s > 0 ? 100 : 0;
                            this.handlerPlayer.h265Proxy.render.isHidden && a >= 2e4
                              ? (this.statVod.setCoreDim(C.a.VOD_CORE.VIDEO_H265_BAD_QUALITY, o),
                                this.statVod.setCore(C.a.VOD_CORE.VOD_BAD_QUALITY, n))
                              : (this.statVod.setCoreDim(C.a.VOD_CORE.VIDEO_H265_BAD_QUALITY, n),
                                this.statVod.setCore(C.a.VOD_CORE.VOD_BAD_QUALITY, o));
                          } else
                            this.statVod.setCore(
                              C.a.VOD_CORE.VOD_BAD_QUALITY,
                              this.isPaused ? 100 : 0,
                            );
                          if (this.isPaused) {
                            var h = us.getBlockReason();
                            h && this.statVod.setCore(C.a.VOD_CORE.VOD_BAD_REASON, h);
                          }
                          this.statVod.fill(e, t);
                        },
                      },
                      {
                        key: 'getAvg',
                        value: function (e) {
                          var t = e.length;
                          if (0 === t) return 0;
                          for (var i = 0, s = 0; s < t; s++) i += e[s];
                          return Math.floor(i / t);
                        },
                      },
                      {
                        key: 'statQps',
                        get: function () {
                          return (
                            this._statQps ||
                              (this._statQps = new ds({
                                presenterUid: this.handlerPlayer.info.presenterUid,
                                lineType: this.handlerPlayer.info.lineType,
                              })),
                            this._statQps
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(
                  (function () {
                    function e(t) {
                      Object(s.a)(this, e),
                        (this.handlerPlayer = t),
                        (this.stat = t.stat),
                        (this.tsdb = t.tsdb),
                        (this.statVod = t.statVod),
                        (this._statQps = null);
                    }
                    return (
                      Object(r.a)(e, [
                        {
                          key: 'recordBaseStat',
                          value: function () {
                            var e = null;
                            if (
                              (this.handlerPlayer.mse &&
                                this.handlerPlayer.mse.getWebCodecsStats &&
                                (e = this.handlerPlayer.mse.getWebCodecsStats()),
                              this.handlerPlayer &&
                                this.handlerPlayer.mse &&
                                this.handlerPlayer.mse.getRealFps)
                            ) {
                              var t = this.handlerPlayer.mse.getRealFps();
                              t > 30 && t <= 33 && (t = 30),
                                t > 24 && t < 27 && (t = 24),
                                this.stat.setCoreDim(C.a.DIM_COM.FRAMERATE, t);
                            }
                            if (
                              this.handlerPlayer &&
                              !this.handlerPlayer.isLive &&
                              this.handlerPlayer.getFps
                            ) {
                              var i = this.handlerPlayer.getFps();
                              i > 30 && i <= 33 && (i = 30),
                                i > 24 && i < 27 && (i = 24),
                                this.stat.setCoreDim(C.a.DIM_COM.FRAMERATE, i),
                                this.statVod &&
                                  this.statVod.setComDim(C.a.VOD_DIM_COM.FRAMERATE, i);
                            }
                            e && this.recordWebCodecsStat(e), this.recordEnhanceStat(e);
                          },
                        },
                        {
                          key: 'recordWebCodecsStat',
                          value: function (e) {
                            for (var t in e)
                              'decodedList' == t
                                ? this.recordFrameInfo(e[t], C.a.DIM_COM.V_DECODE_FRAME)
                                : 'renderList' == t
                                ? this.recordFrameInfo(e[t], C.a.DIM_COM.V_PLAY_FRAME)
                                : 'videoToDecodeList' == t
                                ? this.recordFrameInfo(e[t], C.a.DIM_COM.V_TO_DECODE_FRAMES)
                                : 'delayList' == t
                                ? this.recordFrameInfo(e[t], C.a.DIM_COM.V_TO_PLAY_FRAME)
                                : 'deltaList' == t &&
                                  this.recordFrameInfo(e[t], C.a.DIM_COM.AV_DELTA);
                          },
                        },
                        {
                          key: 'recordFrameInfo',
                          value: function (e, t) {
                            var i = this;
                            this.stat.setComp(t, 'size', e.length),
                              e.map(function (e, s) {
                                i.stat.setComp(t, 'k' + (s + 1), e),
                                  i.stat.setCompFormat(t, ':', ',');
                              }),
                              this.handlerPlayer &&
                                !this.handlerPlayer.isLive &&
                                this.statVod &&
                                (this.statVod.setComp(t, 'size', e.length),
                                e.map(function (e, s) {
                                  i.statVod.setComp(t, 'k' + (s + 1), e),
                                    i.statVod.setCompFormat(t, ':', ',');
                                }));
                          },
                        },
                        {
                          key: 'recordHeart',
                          value: function () {
                            this.recordAudioEmpty();
                          },
                        },
                        {
                          key: 'recordAudioEmpty',
                          value: function () {
                            var e = this,
                              t = this.handlerPlayer.getEmptyAudioRecord(),
                              i = C.a.DIM_COM.A_RENDER_SILENCE_TIME,
                              s = t.length;
                            t.reverse(),
                              this.stat.setComp(i, 'size', s),
                              t.map(function (t, r) {
                                e.stat.setComp(i, 'k' + 4 * (s - r), t),
                                  e.stat.setCompFormat(i, ':', ',');
                              }),
                              this.stat.setCore(C.a.CORE.A_VOL, this.handlerPlayer.getVolume()),
                              this.stat.setCore(
                                C.a.CORE.A_E_DUR,
                                this.handlerPlayer.getEmptyAudioDurationHeart(),
                              ),
                              this.stat.setCoreDim(
                                C.a.DIM_COM.A_CFG,
                                this.handlerPlayer.hasAudioCfg() ? 1 : 0,
                              );
                          },
                        },
                        {
                          key: 'sendRecordMetrics',
                          value: function () {
                            this.recordMosaicData(), this.recordMuffleData();
                          },
                        },
                        {
                          key: 'recordMosaicData',
                          value: function () {
                            if (this.handlerPlayer._hyPlayer.getMosaicStat) {
                              var e = this.handlerPlayer._hyPlayer.getMosaicStat().data;
                              if (null == e) return;
                              var t = e.statDatas.length,
                                i = 0,
                                s = 0,
                                r = 0,
                                a = [],
                                n = {};
                              e.statDatas.map(function (e, o) {
                                t - o <= 3 && a.push(e.pixelateKey),
                                  0 == e.suc ? i++ : 1 == e.suc ? s++ : 2 == e.suc && r++,
                                  (n.dts_type = e.dtsType);
                              }),
                                (n.success_cnt = i),
                                (n.fail_cnt = s),
                                (n.partial_success_cnt = r),
                                (n.req_keys = a.join(',')),
                                (n.buss = 'video_pixelate'),
                                (n = JSON.stringify(n)),
                                p.a.log('BaseQaStat.recordMosaicData', n),
                                t > 0 && this.stat.setCoreDim(C.a.DIM_COM.MOSAIC_DATA, n),
                                this.stat.setCore(C.a.CORE.MOSAIC_COUNT, e.mosaicCnt),
                                this.stat.setCore(C.a.CORE.MOSAIC_DURATION, e.mosaicDuration);
                            }
                          },
                        },
                        {
                          key: 'recordMuffleData',
                          value: function () {
                            if (
                              this.handlerPlayer &&
                              this.handlerPlayer.mse &&
                              this.handlerPlayer.mse.getMuffleStat
                            ) {
                              var e = this.handlerPlayer.mse.getMuffleStat(),
                                t = e.muffleCnt,
                                i = e.muffleDuration;
                              this.stat.setCore(C.a.CORE.MUTE_COUNT, t),
                                this.stat.setCore(C.a.CORE.MUTE_DURATION, i);
                            }
                          },
                        },
                        {
                          key: 'recordEnhanceStat',
                          value: function (e) {
                            var t = { v_frames: 0, v_enhance_delay: -1 },
                              i = this.handlerPlayer.getEnhanceStats(),
                              s = this.handlerPlayer.getDpi(),
                              r = s.width,
                              a = s.height;
                            i &&
                              ((t.v_enhance = i.vEnhanceType),
                              (t.v_support = i.vSupport),
                              (t.v_gameId = i.vGameId),
                              (t.v_errorCode = i.vErrorCode),
                              (t.v_width = r),
                              (t.v_height = a));
                            var n = this.handlerPlayer.getRefreshRate();
                            if (((t.v_refreshRate = n), e)) {
                              var o = [],
                                h = [],
                                u = 0,
                                d = 0,
                                c = 0,
                                l = 0,
                                p = 0;
                              for (var f in e) {
                                var m = e[f];
                                'videoEnhanceList' == f
                                  ? (o = m)
                                  : 'videoEnhanceCostList' == f
                                  ? (h = m)
                                  : 'ehLess30Nums' == f
                                  ? (u = m)
                                  : 'ehLess150Nums' == f
                                  ? (d = m)
                                  : 'ehLess200Nums' == f
                                  ? (c = m)
                                  : 'ehLarge200Nums' == f
                                  ? (l = m)
                                  : 'ehTotal' == f && (p = m);
                              }
                              if (
                                (this.stat.setCore(C.a.DIM_CORE.ENHACNE_LESS_30, u),
                                this.stat.setCore(C.a.DIM_CORE.ENHACNE_LESS_150, d),
                                this.stat.setCore(C.a.DIM_CORE.ENHACNE_LESS_200, c),
                                this.stat.setCore(C.a.DIM_CORE.ENHACNE_LARGE_200, l),
                                this.stat.setCore(C.a.DIM_CORE.ENHANCE_TOTAL, p),
                                this.handlerPlayer &&
                                  !this.handlerPlayer.isLive &&
                                  this.statVod &&
                                  (this.statVod.setCore(C.a.VOD_DIM_CORE.ENHACNE_LESS_30, u),
                                  this.statVod.setCore(C.a.VOD_DIM_CORE.ENHACNE_LESS_150, d),
                                  this.statVod.setCore(C.a.VOD_DIM_CORE.ENHACNE_LESS_200, c),
                                  this.statVod.setCore(C.a.VOD_DIM_CORE.ENHACNE_LARGE_200, l),
                                  this.statVod.setCore(C.a.VOD_DIM_CORE.ENHANCE_TOTAL, p)),
                                o.length > 0)
                              ) {
                                var _ = o.reduce(function (e, t) {
                                  return e + t;
                                });
                                t.v_frames = ~~(_ / o.length);
                              }
                              if (h.length > 0) {
                                var v = h.reduce(function (e, t) {
                                  return e + t;
                                });
                                t.v_enhance_delay = ~~(v / h.length);
                              }
                            }
                            this.stat.setCoreDim(C.a.DIM_COM.FEATURE_STATUS, JSON.stringify(t)),
                              this.handlerPlayer &&
                                !this.handlerPlayer.isLive &&
                                this.statVod &&
                                this.statVod.setCoreDim(
                                  C.a.VOD_DIM_COM.FEATURE_STATUS,
                                  JSON.stringify(t),
                                );
                          },
                        },
                        {
                          key: 'reportVideoBadQuality',
                          value: function (e, t, i, s, r, a) {
                            p.a.log(
                              'QAStat.reportVideoBadQuality, isPaused='
                                .concat(e, ', pauseCnt=')
                                .concat(t, ', pauseWorkerCnt=')
                                .concat(s, ', isFramePaused=')
                                .concat(a),
                            );
                            var n = this.handlerPlayer.getPause500Cnt();
                            if (
                              this.handlerPlayer.h265Proxy &&
                              this.handlerPlayer.h265Proxy.rendering
                            )
                              this.reportH265(e, t, i, n, s, r);
                            else {
                              var o = document.visibilityState,
                                h = e || t > 0 ? 100 : 0,
                                u =
                                  this.handlerPlayer.mse &&
                                  this.handlerPlayer.mse.getVideoCBLargeCnt(),
                                d =
                                  this.handlerPlayer.mse &&
                                  this.handlerPlayer.mse.getVideoFrameCallBackNums();
                              1 == I.a.isFilterMsePause &&
                              this.handlerPlayer.isMse &&
                              'visible' == o &&
                              d > 0
                                ? (e || t > 0) && u > 0
                                  ? this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY, 100)
                                  : (this.stat.setCore(C.a.CORE.VIDEO_BLOCK_COUNT, 0),
                                    this.stat.setCore(C.a.CORE.VIDEO_BLOCK_DURATION, 0))
                                : this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY, h),
                                this.stat.setCoreDim(
                                  C.a.DIM_CORE.VIDEO_BAD_QUALITY_OLD,
                                  e ? 100 : 0,
                                ),
                                this.handlerPlayer.mse &&
                                  this.handlerPlayer.mse.getMseRenderList &&
                                  this.recordFrameInfo(
                                    this.handlerPlayer.mse.getMseRenderList(),
                                    C.a.DIM_COM.V_PLAY_FRAME,
                                  ),
                                this.stat.setCoreDim(
                                  C.a.DIM_CORE.VIDEO_H265_BAD_QUALITY,
                                  n > 0 || r || s > 0 ? 100 : 0,
                                ),
                                this.handlerPlayer &&
                                  (this.handlerPlayer.isWebCodec
                                    ? this.stat.setCoreDim(C.a.DIM_COM.MP_EXPERIMENT, a ? 100 : 0)
                                    : this.stat.setCoreDim(
                                        C.a.DIM_COM.MP_EXPERIMENT,
                                        e || t > 0 ? 100 : 0,
                                      )),
                                100 === h && this.tsdb.autoReport();
                            }
                          },
                        },
                        {
                          key: 'reportH265',
                          value: function (e, t, i, s, r, a) {
                            var n = this.handlerPlayer.h265Proxy.getStats(i),
                              o = n.h265PauseCnt,
                              h = n.videoPauseCnt,
                              u = n.videoPauseTime,
                              d = n.isVideoPaused,
                              c = n.hiddenTime,
                              l = n.statProps,
                              f = n.pause500CntH265,
                              m = n.isFramePaused;
                            p.a.log(
                              'QAStat.reportH265, videoPauseCnt='
                                .concat(h, ', pause500CntH265=')
                                .concat(f, ', isFramePaused=')
                                .concat(m),
                            );
                            var _ = o > 0 ? 100 : 0,
                              v = e || t > 0 ? 100 : 0,
                              y = d || h > 0 ? 100 : 0;
                            for (var S in (this.handlerPlayer.h265Proxy.render.isHidden && c >= 2e4
                              ? (this.stat.setCoreDim(
                                  C.a.DIM_CORE.VIDEO_H265_BAD_QUALITY,
                                  s > 0 || a || r > 0 ? 100 : 0,
                                ),
                                this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY, v))
                              : (this.stat.setCoreDim(
                                  C.a.DIM_CORE.VIDEO_H265_BAD_QUALITY,
                                  f > 0 && y ? 100 : 0,
                                ),
                                this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY, y),
                                this.stat.setCore(C.a.CORE.VIDEO_BLOCK_COUNT, h),
                                this.stat.setCore(C.a.CORE.VIDEO_BLOCK_DURATION, u)),
                            this.stat.setCoreDim(C.a.DIM_CORE.VIDEO_BAD_QUALITY_OLD, _),
                            this.stat.setComDim(C.a.DIM_COM.MP_EXPERIMENT, m ? 100 : 0),
                            l))
                              'toDecode' == S
                                ? this.recordFrameInfo(l[S], C.a.DIM_COM.V_TO_DECODE_FRAMES)
                                : 'decoded' == S
                                ? this.recordFrameInfo(l[S], C.a.DIM_COM.V_DECODE_FRAME)
                                : 'render' == S
                                ? this.recordFrameInfo(l[S], C.a.DIM_COM.V_PLAY_FRAME)
                                : 'rawList' == S ||
                                  ('frameList' == S
                                    ? this.recordFrameInfo(l[S], C.a.DIM_COM.V_TO_PLAY_FRAME)
                                    : this.stat.setComp(C.a.DIM_H265_SAM.name, S, l[S].join('|')));
                            100 === v && this.tsdb.autoReport();
                          },
                        },
                        {
                          key: 'rcordCaptureJitter',
                          value: function (e) {
                            if (e)
                              for (var t in e) {
                                var i = e[t];
                                for (var s in i) this.stat.setCore(s, i[s]);
                              }
                          },
                        },
                        {
                          key: 'statQps',
                          get: function () {
                            return (
                              this._statQps ||
                                (this._statQps = new ds({
                                  presenterUid: this.handlerPlayer.info.presenterUid,
                                  lineType: this.handlerPlayer.info.lineType,
                                })),
                              this._statQps
                            );
                          },
                        },
                      ]),
                      e
                    );
                  })(),
                ),
                ls = (function () {
                  function e(t) {
                    Object(s.a)(this, e), (this._hlsPlayer = t), (this._seekTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'seek',
                        value: function (e) {
                          this._seekTime = e;
                        },
                      },
                      {
                        key: 'check',
                        value: function () {
                          this._seekTime > 0 &&
                            (this._seek() ? (this._seekTime = 0) : this._reseek());
                        },
                      },
                      {
                        key: '_seek',
                        value: function () {
                          var e = this._seekTime,
                            t = !1;
                          if (
                            this._hlsPlayer &&
                            this._hlsPlayer.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE
                          ) {
                            for (
                              var i = this._hlsPlayer.mse.video.video.buffered, s = [], r = 0;
                              r < i.length;
                              r++
                            ) {
                              var a = i.start(r),
                                n = i.end(r);
                              if (
                                (s.push('['.concat(a, ', ').concat(n, ']')),
                                a - 0.5 <= e && e < n + 1)
                              ) {
                                t = !0;
                                break;
                              }
                              if (e < a) {
                                this._seekTime = a;
                                break;
                              }
                            }
                            t &&
                              (this._hlsPlayer.onVideoSeek(e),
                              !this._hlsPlayer.userPaused && this._hlsPlayer.play()),
                              p.a.log('HlsSeek.buffered', s.join(' '));
                          }
                          return t;
                        },
                      },
                      {
                        key: '_reseek',
                        value: function () {
                          if (
                            this._hlsPlayer &&
                            this._hlsPlayer.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE
                          ) {
                            p.a.log('HlsSeek._reseek');
                            var e = this._hlsPlayer.playlist.currDetails;
                            e &&
                              e.fragments &&
                              (e.fragIdx > 1 && e.fragIdx--,
                              this._hlsPlayer.mse.seek(this._seekTime),
                              this._hlsPlayer.mse.resetHls(),
                              (this._hlsPlayer.seekTime = this._seekTime),
                              p.a.log('HlsSeek._reseek', e.fragIdx));
                          }
                        },
                      },
                      {
                        key: '_findIdxFront',
                        value: function (e, t, i) {
                          for (var s = t.length, r = null, a = i; a < s; a++)
                            if ((e += (r = t[a]).duration) >= this._seekTime)
                              return (r.seeking = !0), a;
                          return s - 1;
                        },
                      },
                      {
                        key: '_findIdxBack',
                        value: function (e, t, i) {
                          for (var s = null, r = i; r > 0; r--)
                            if ((e -= (s = t[r]).duration) < this._seekTime)
                              return (s.seeking = !0), r;
                          return 0;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ps = i(36);
              function fs(e, t) {
                var i = (65535 & e) + (65535 & t);
                return (((e >> 16) + (t >> 16) + (i >> 16)) << 16) | (65535 & i);
              }
              function ms(e, t, i, s, r, a) {
                return fs(((n = fs(fs(t, e), fs(s, a))) << (o = r)) | (n >>> (32 - o)), i);
                var n, o;
              }
              function _s(e, t, i, s, r, a, n) {
                return ms((t & i) | (~t & s), e, t, r, a, n);
              }
              function vs(e, t, i, s, r, a, n) {
                return ms((t & s) | (i & ~s), e, t, r, a, n);
              }
              function ys(e, t, i, s, r, a, n) {
                return ms(t ^ i ^ s, e, t, r, a, n);
              }
              function Ss(e, t, i, s, r, a, n) {
                return ms(i ^ (t | ~s), e, t, r, a, n);
              }
              function gs(e, t) {
                var i, s, r, a, n;
                (e[t >> 5] |= 128 << t % 32), (e[14 + (((t + 64) >>> 9) << 4)] = t);
                var o = 1732584193,
                  h = -271733879,
                  u = -1732584194,
                  d = 271733878;
                for (i = 0; i < e.length; i += 16)
                  (s = o),
                    (r = h),
                    (a = u),
                    (n = d),
                    (o = _s(o, h, u, d, e[i], 7, -680876936)),
                    (d = _s(d, o, h, u, e[i + 1], 12, -389564586)),
                    (u = _s(u, d, o, h, e[i + 2], 17, 606105819)),
                    (h = _s(h, u, d, o, e[i + 3], 22, -1044525330)),
                    (o = _s(o, h, u, d, e[i + 4], 7, -176418897)),
                    (d = _s(d, o, h, u, e[i + 5], 12, 1200080426)),
                    (u = _s(u, d, o, h, e[i + 6], 17, -1473231341)),
                    (h = _s(h, u, d, o, e[i + 7], 22, -45705983)),
                    (o = _s(o, h, u, d, e[i + 8], 7, 1770035416)),
                    (d = _s(d, o, h, u, e[i + 9], 12, -1958414417)),
                    (u = _s(u, d, o, h, e[i + 10], 17, -42063)),
                    (h = _s(h, u, d, o, e[i + 11], 22, -1990404162)),
                    (o = _s(o, h, u, d, e[i + 12], 7, 1804603682)),
                    (d = _s(d, o, h, u, e[i + 13], 12, -40341101)),
                    (u = _s(u, d, o, h, e[i + 14], 17, -1502002290)),
                    (o = vs(
                      o,
                      (h = _s(h, u, d, o, e[i + 15], 22, 1236535329)),
                      u,
                      d,
                      e[i + 1],
                      5,
                      -165796510,
                    )),
                    (d = vs(d, o, h, u, e[i + 6], 9, -1069501632)),
                    (u = vs(u, d, o, h, e[i + 11], 14, 643717713)),
                    (h = vs(h, u, d, o, e[i], 20, -373897302)),
                    (o = vs(o, h, u, d, e[i + 5], 5, -701558691)),
                    (d = vs(d, o, h, u, e[i + 10], 9, 38016083)),
                    (u = vs(u, d, o, h, e[i + 15], 14, -660478335)),
                    (h = vs(h, u, d, o, e[i + 4], 20, -405537848)),
                    (o = vs(o, h, u, d, e[i + 9], 5, 568446438)),
                    (d = vs(d, o, h, u, e[i + 14], 9, -1019803690)),
                    (u = vs(u, d, o, h, e[i + 3], 14, -187363961)),
                    (h = vs(h, u, d, o, e[i + 8], 20, 1163531501)),
                    (o = vs(o, h, u, d, e[i + 13], 5, -1444681467)),
                    (d = vs(d, o, h, u, e[i + 2], 9, -51403784)),
                    (u = vs(u, d, o, h, e[i + 7], 14, 1735328473)),
                    (o = ys(
                      o,
                      (h = vs(h, u, d, o, e[i + 12], 20, -1926607734)),
                      u,
                      d,
                      e[i + 5],
                      4,
                      -378558,
                    )),
                    (d = ys(d, o, h, u, e[i + 8], 11, -2022574463)),
                    (u = ys(u, d, o, h, e[i + 11], 16, 1839030562)),
                    (h = ys(h, u, d, o, e[i + 14], 23, -35309556)),
                    (o = ys(o, h, u, d, e[i + 1], 4, -1530992060)),
                    (d = ys(d, o, h, u, e[i + 4], 11, 1272893353)),
                    (u = ys(u, d, o, h, e[i + 7], 16, -155497632)),
                    (h = ys(h, u, d, o, e[i + 10], 23, -1094730640)),
                    (o = ys(o, h, u, d, e[i + 13], 4, 681279174)),
                    (d = ys(d, o, h, u, e[i], 11, -358537222)),
                    (u = ys(u, d, o, h, e[i + 3], 16, -722521979)),
                    (h = ys(h, u, d, o, e[i + 6], 23, 76029189)),
                    (o = ys(o, h, u, d, e[i + 9], 4, -640364487)),
                    (d = ys(d, o, h, u, e[i + 12], 11, -421815835)),
                    (u = ys(u, d, o, h, e[i + 15], 16, 530742520)),
                    (o = Ss(
                      o,
                      (h = ys(h, u, d, o, e[i + 2], 23, -995338651)),
                      u,
                      d,
                      e[i],
                      6,
                      -198630844,
                    )),
                    (d = Ss(d, o, h, u, e[i + 7], 10, 1126891415)),
                    (u = Ss(u, d, o, h, e[i + 14], 15, -1416354905)),
                    (h = Ss(h, u, d, o, e[i + 5], 21, -57434055)),
                    (o = Ss(o, h, u, d, e[i + 12], 6, 1700485571)),
                    (d = Ss(d, o, h, u, e[i + 3], 10, -1894986606)),
                    (u = Ss(u, d, o, h, e[i + 10], 15, -1051523)),
                    (h = Ss(h, u, d, o, e[i + 1], 21, -2054922799)),
                    (o = Ss(o, h, u, d, e[i + 8], 6, 1873313359)),
                    (d = Ss(d, o, h, u, e[i + 15], 10, -30611744)),
                    (u = Ss(u, d, o, h, e[i + 6], 15, -1560198380)),
                    (h = Ss(h, u, d, o, e[i + 13], 21, 1309151649)),
                    (o = Ss(o, h, u, d, e[i + 4], 6, -145523070)),
                    (d = Ss(d, o, h, u, e[i + 11], 10, -1120210379)),
                    (u = Ss(u, d, o, h, e[i + 2], 15, 718787259)),
                    (h = Ss(h, u, d, o, e[i + 9], 21, -343485551)),
                    (o = fs(o, s)),
                    (h = fs(h, r)),
                    (u = fs(u, a)),
                    (d = fs(d, n));
                return [o, h, u, d];
              }
              function Ts(e) {
                var t,
                  i = '',
                  s = 32 * e.length;
                for (t = 0; t < s; t += 8) i += String.fromCharCode((e[t >> 5] >>> t % 32) & 255);
                return i;
              }
              function Es(e) {
                var t,
                  i = [];
                for (i[(e.length >> 2) - 1] = void 0, t = 0; t < i.length; t += 1) i[t] = 0;
                var s = 8 * e.length;
                for (t = 0; t < s; t += 8) i[t >> 5] |= (255 & e.charCodeAt(t / 8)) << t % 32;
                return i;
              }
              function Cs(e) {
                var t,
                  i,
                  s = '';
                for (i = 0; i < e.length; i += 1)
                  (t = e.charCodeAt(i)),
                    (s +=
                      '0123456789abcdef'.charAt((t >>> 4) & 15) +
                      '0123456789abcdef'.charAt(15 & t));
                return s;
              }
              function Ds(e) {
                return unescape(encodeURIComponent(e));
              }
              function Ps(e) {
                return (function (e) {
                  return Ts(gs(Es(e), 8 * e.length));
                })(Ds(e));
              }
              function As(e, t) {
                return (function (e, t) {
                  var i,
                    s,
                    r = Es(e),
                    a = [],
                    n = [];
                  for (
                    a[15] = n[15] = void 0, r.length > 16 && (r = gs(r, 8 * e.length)), i = 0;
                    i < 16;
                    i += 1
                  )
                    (a[i] = 909522486 ^ r[i]), (n[i] = 1549556828 ^ r[i]);
                  return (s = gs(a.concat(Es(t)), 512 + 8 * t.length)), Ts(gs(n.concat(s), 640));
                })(Ds(e), Ds(t));
              }
              var Is = function (e, t, i) {
                  return t ? (i ? As(t, e) : Cs(As(t, e))) : i ? Ps(e) : Cs(Ps(e));
                },
                ks = Object(x.a)('X2Zt'),
                Rs = Object(x.a)('Zm0='),
                Os = Object(x.a)('X3dzVGltZQ=='),
                bs = Object(x.a)('d3NUaW1l'),
                ws = Object(x.a)('X2ludmFsaWRUaW1l'),
                Ls = Object(x.a)('X25leHRSZWZyZXNoVGltZQ=='),
                Ms = Object(x.a)('X2N0eXBl'),
                Vs = Object(x.a)('Y3R5cGU='),
                Ns = Object(x.a)('d3NTZWNyZXQ='),
                Fs = Object(x.a)('X3BhcmFtcw=='),
                Bs = Object(x.a)('X3NGbHZBbnRpY29kZQ=='),
                Us = Object(x.a)('X3NGbHZVcmw='),
                xs = Object(x.a)('X3NTdHJlYW1OYW1l'),
                Hs = Object(x.a)('X3JlcQ=='),
                Ws = Object(x.a)('c2VxaWQ='),
                Gs = Object(x.a)('X3NlcWlk'),
                js = Object(x.a)('X3BjZG4='),
                Ys = Object(x.a)('JDA='),
                qs = Object(x.a)('JDE='),
                Ks = Object(x.a)('JDI='),
                Js = Object(x.a)('JDM='),
                zs = Object(x.a)('aW5pdA=='),
                Qs = Object(x.a)('aXNJbnZhbGlk'),
                Xs = Object(x.a)('Z2V0QW50aWNvZGU='),
                $s = Object(x.a)('cGFyc2VBbnRpY29kZQ=='),
                Zs = Object(x.a)('aGFzQW50aWNvZGU='),
                er = Object(x.a)('b25DaGVja1RpbWVy'),
                tr = Object(x.a)('X29uUmVmcmVzaA=='),
                ir = Object(x.a)('X29uUmVmcmVzaEJpbmQ='),
                sr = Object(x.a)('dmFsaWQ='),
                rr = Object(x.a)('Z2V0VG9rZW4='),
                ar = Object(x.a)('X2dldFRva2Vu'),
                nr = Object(x.a)('bGl2ZXVp'),
                or = Object(x.a)('Z2V0Q2RuVG9rZW5JbmZvRXg='),
                hr = (Object(x.a)('MTAw'), Object(x.a)('dmVyPTE=')),
                ur = Object(x.a)('Jg=='),
                dr = Object(x.a)('PQ=='),
                cr = Object(x.a)('UkVGUkVTSA=='),
                lr = Object(x.a)('cmVmcmVzaA=='),
                pr =
                  (Object(x.a)('ZGVjb2RlVVJJ'),
                  Object(x.a)('dW5lc2NhcGU='),
                  Object(x.a)('Z2V0U2VxaWQ=')),
                fr =
                  (Object(x.a)('bWVkaWF1aXNlYQ=='),
                  Object(x.a)('Z2V0QW50aUNvZGVGb3JTdHJlYW0='),
                  Object(x.a)('X25pbW9UaWQ=')),
                mr = i(20).default,
                _r = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this))[Os] = ''),
                      (e[ks] = ''),
                      (e[Ms] = ''),
                      (e[Fs] = []),
                      (e[Bs] = ''),
                      (e[Us] = ''),
                      (e[xs] = ''),
                      (e[Gs] = ''),
                      (e[ws] = Number.MAX_SAFE_INTEGER),
                      (e[Ls] = Number.MAX_SAFE_INTEGER),
                      (e[fr] = null),
                      (e[ir] = e[tr].bind(Object(fe.a)(e))),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: Zs,
                        value: function () {
                          return '' !== this[Bs];
                        },
                      },
                      {
                        key: zs,
                        value: function (e, t, i, s) {
                          (this[Us] = e), (this[xs] = t), this[$s](i), (this[fr] = s);
                        },
                      },
                      {
                        key: $s,
                        value: function (e) {
                          var t = this;
                          (this[ks] = ''),
                            (this[Os] = ''),
                            (this[Ms] = ''),
                            (this[Fs] = []),
                            (this[Bs] = e),
                            e.split(ur).forEach(function (e) {
                              var i = Nt(e.split(dr), 2),
                                s = i[0],
                                r = i[1];
                              if (s === Rs)
                                (r = decodeURI(r)), (r = unescape(r)), (r = atob(r)), (t[ks] = r);
                              else if (s === bs) {
                                t[Os] = r;
                                var a = 1e3 * parseInt(r, 16) + 3e5;
                                (t[ws] = D.a.now() + (a - Date.now())), (t[Ls] = t[ws] - 3e4);
                              } else s == Vs ? (t[Ms] = r) : s !== Ns && t[Fs].push(e);
                            });
                        },
                      },
                      {
                        key: Qs,
                        value: function (e) {
                          return e > this[ws];
                        },
                      },
                      {
                        key: Xs,
                        value: function (e) {
                          if ('' === this[ks]) return this[Bs];
                          var t = I.a.platform,
                            i = B.a.PLATFORM_TYPE[t] || B.a.PLATFORM_TYPE.web;
                          this[Gs] = Number(U.a.uid) + Date.now();
                          var s = Is(''.concat(this[Gs], '|').concat(this[Ms], '|').concat(i)),
                            r = t === B.a.PLATFORM_TYPE_NAME.wap ? U.a.uid : U.a.convertUid,
                            a = this[ks]
                              .replace(Ys, r)
                              .replace(qs, this[xs])
                              .replace(Ks, s)
                              .replace(Js, this[Os]);
                          e && (a += js);
                          var n = ''
                            .concat(Ns)
                            .concat(dr)
                            .concat(Is(a))
                            .concat(ur)
                            .concat(bs)
                            .concat(dr)
                            .concat(this[Os])
                            .concat(ur)
                            .concat(Ws)
                            .concat(dr)
                            .concat(this[Gs])
                            .concat(ur)
                            .concat(Vs)
                            .concat(dr)
                            .concat(this[Ms])
                            .concat(ur)
                            .concat(hr);
                          return this[Fs].length > 0 && (n += ur + this[Fs].join(ur)), n;
                        },
                      },
                      {
                        key: pr,
                        value: function () {
                          return this[Gs];
                        },
                      },
                      {
                        key: er,
                        value: function (e, t) {
                          e >= this[Ls] && this[rr]().then(this[ir]);
                        },
                      },
                      {
                        key: tr,
                        value: function () {
                          this.trigger(i.Events[cr]);
                        },
                      },
                      {
                        key: sr,
                        value: function () {
                          var e = this;
                          return new Promise(function (t) {
                            e[Qs](D.a.now()) ? e[rr]().then(t) : t();
                          });
                        },
                      },
                      {
                        key: rr,
                        value: function () {
                          var e = this;
                          return new Promise(function (t) {
                            Le.connected
                              ? e[ar](t)
                              : Le.on(Le.TAFLINK_INITED, function () {
                                  e[ar](t);
                                });
                          });
                        },
                      },
                      {
                        key: ar,
                        value: function (e) {
                          var t = this;
                          this[Hs] || (this[Hs] = new mr.GetCdnTokenExReq()),
                            (this[Hs].sFlvUrl = this._sFlvUrl),
                            (this[Hs].sStreamName = this._sStreamName),
                            (this[Hs].tId = Le.getUserId()),
                            (this[Hs].iAppId = U.a.appid),
                            p.a.log(''.concat(i.name, '.').concat(rr, '.req='), this._req),
                            (this[Ls] = Number.MAX_SAFE_INTEGER);
                          var s = nr,
                            r = or;
                          Le.sendWup(
                            s,
                            r,
                            this._req,
                            function (s) {
                              var r;
                              (r = s.sFlvToken),
                                p.a.log(
                                  ''
                                    .concat(i.name, '.')
                                    .concat(rr, ' sAntiCode=')
                                    .concat(r, ', rsp='),
                                  s,
                                ),
                                t[$s](r),
                                e();
                            },
                            !0,
                            Le.getRequestId(),
                          );
                        },
                      },
                    ]),
                    i
                  );
                })(Pe);
              _r.Events = Object(ps.a)({}, cr, lr);
              var vr = _r;
              if (!Object.values) {
                var yr = Function.bind.call(Function.call, Array.prototype.reduce),
                  Sr = Function.bind.call(Function.call, Object.prototype.propertyIsEnumerable),
                  gr = Function.bind.call(Function.call, Array.prototype.concat),
                  Tr = Reflect.ownKeys;
                Object.values = function (e) {
                  return yr(
                    Tr(e),
                    function (t, i) {
                      return gr(t, 'string' == typeof i && Sr(e, i) ? [e[i]] : []);
                    },
                    [],
                  );
                };
              }
              var Er = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.player = t),
                      (this.recordMap = new Map()),
                      this.init(),
                      this.reset();
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'init',
                        value: function () {
                          this.keys = Object.values(C.a.DIM_LINK_STA);
                          var e = this.keys.indexOf(C.a.DIM_LINK_STA.name);
                          -1 !== e && this.keys.splice(e, 1);
                        },
                      },
                      {
                        key: 'setStat',
                        value: function (e, t) {
                          this.recordMap.has(e) ||
                            (this.recordMap.set(e, 1), (this.exceptionStat[e] = t));
                        },
                      },
                      {
                        key: 'getStat',
                        value: function () {
                          var e = this;
                          this.player.getDurationTime &&
                            this.player.getDurationTime() > 2 &&
                            this.setStat(C.a.DIM_LINK_STA.DATA_ENOUGH, 1);
                          var t = [];
                          return (
                            Object.keys(this.exceptionStat).forEach(function (i) {
                              t.push(''.concat(i, ':').concat(e.exceptionStat[i]));
                            }),
                            t.join(',')
                          );
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          var e = this;
                          this.recordMap.clear(),
                            (this.exceptionStat = {}),
                            this.keys.forEach(function (t) {
                              e.exceptionStat[t] = 0;
                            });
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Cr = {
                  isClose: function (e, t) {
                    return this.isCloseSwiftshader(e, t) || this.isCloseCore(e);
                  },
                  isCloseSwiftshader: function (e, t) {
                    if (
                      !t ||
                      '' === t ||
                      (-1 !== t.indexOf('swiftshader') && I.a.vodAv1CloseCfg[0])
                    )
                      for (var i = I.a.vodAv1CloseCfg[0], s = i.length, r = 0; r < s; r++) {
                        var a = i[r],
                          n = a[0],
                          o = a[1];
                        if (e >= n) return navigator.hardwareConcurrency <= o;
                      }
                    return !1;
                  },
                  isCloseCore: function (e) {
                    if (I.a.vodAv1CloseCfg[1]) {
                      var t = I.a.vodAv1CloseCfg[1];
                      return e >= t[0] && navigator.hardwareConcurrency <= t[1];
                    }
                    return !1;
                  },
                },
                Dr = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.startTs = 0),
                      (this.m3u8StartTs = 0),
                      (this.m3u8OpenTs = 0),
                      (this.m3u8EndTs = 0),
                      (this.initStartTs = 0),
                      (this.initOpenTs = 0),
                      (this.initEndTs = 0),
                      (this.firstStartTs = 0),
                      (this.firstOpenTs = 0),
                      (this.firstBufTs = 0),
                      (this.playTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setStart',
                        value: function () {
                          (this.startTs = D.a.now()),
                            (this.m3u8StartTs = 0),
                            (this.m3u8OpenTs = 0),
                            (this.m3u8EndTs = 0),
                            (this.initStartTs = 0),
                            (this.initOpenTs = 0),
                            (this.initEndTs = 0),
                            (this.firstStartTs = 0),
                            (this.firstOpenTs = 0),
                            (this.firstBufTs = 0),
                            (this.loadedDataTs = 0);
                        },
                      },
                      {
                        key: 'setM3u8Start',
                        value: function () {
                          0 === this.m3u8StartTs && (this.m3u8StartTs = D.a.now());
                        },
                      },
                      {
                        key: 'setM3u8Open',
                        value: function () {
                          0 === this.m3u8OpenTs && (this.m3u8OpenTs = D.a.now());
                        },
                      },
                      {
                        key: 'setM3u8End',
                        value: function () {
                          0 === this.m3u8EndTs && (this.m3u8EndTs = D.a.now());
                        },
                      },
                      {
                        key: 'setInitStart',
                        value: function () {
                          0 === this.initStartTs && (this.initStartTs = D.a.now());
                        },
                      },
                      {
                        key: 'setInitOpen',
                        value: function () {
                          0 === this.initOpenTs && (this.initOpenTs = D.a.now());
                        },
                      },
                      {
                        key: 'setInitEnd',
                        value: function () {
                          0 === this.initEndTs && (this.initEndTs = D.a.now());
                        },
                      },
                      {
                        key: 'setFirstStart',
                        value: function () {
                          0 === this.firstStartTs &&
                            ((this.firstStartTs = D.a.now()),
                            0 === this.m3u8StartTs &&
                              (this.m3u8StartTs =
                                this.m3u8OpenTs =
                                this.m3u8EndTs =
                                  this.firstStartTs),
                            0 === this.initStartTs &&
                              (this.initStartTs =
                                this.initOpenTs =
                                this.initEndTs =
                                  this.firstStartTs));
                        },
                      },
                      {
                        key: 'setFirstOpen',
                        value: function () {
                          0 === this.firstOpenTs && (this.firstOpenTs = D.a.now());
                        },
                      },
                      {
                        key: 'setFirstBuf',
                        value: function () {
                          0 === this.firstBufTs && (this.firstBufTs = D.a.now());
                        },
                      },
                      {
                        key: 'setPlayTs',
                        value: function () {
                          0 === this.playTs && (this.playTs = D.a.now());
                        },
                      },
                      {
                        key: 'getCostTimes',
                        value: function () {
                          var e = 99999,
                            t = 99999,
                            i = 99999,
                            s = 99999,
                            r = 99999,
                            a = 99999,
                            n = 99999,
                            o = 99999,
                            h = 99999,
                            u = 99999;
                          return (
                            this.playTs > 0 && (e = this.playTs - this.startTs),
                            this.m3u8OpenTs > 0 && (t = this.m3u8OpenTs - this.startTs),
                            this.m3u8EndTs > 0 &&
                              this.m3u8OpenTs > 0 &&
                              (i = this.m3u8EndTs - this.m3u8OpenTs),
                            this.initStartTs > 0 &&
                              this.m3u8EndTs > 0 &&
                              (s = this.initStartTs - this.m3u8EndTs),
                            this.initOpenTs > 0 &&
                              this.initStartTs > 0 &&
                              (r = this.initOpenTs - this.initStartTs),
                            this.initEndTs > 0 &&
                              this.initOpenTs > 0 &&
                              (a = this.initEndTs - this.initOpenTs),
                            this.firstStartTs > 0 &&
                              this.m3u8EndTs > 0 &&
                              (n = this.firstStartTs - this.m3u8EndTs),
                            this.firstOpenTs > 0 &&
                              this.firstStartTs > 0 &&
                              (o = this.firstOpenTs - this.firstStartTs),
                            this.firstBufTs > 0 &&
                              this.firstOpenTs > 0 &&
                              (h = this.firstBufTs - this.firstOpenTs),
                            this.playTs > 0 &&
                              this.firstBufTs > 0 &&
                              this.initEndTs > 0 &&
                              (u = this.playTs - Math.max(this.firstBufTs, this.initEndTs)),
                            [e, t, i, s, r, a, n, o, h, u]
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Pr = (function () {
                  function e(t, i) {
                    var r = i.resumeFunc,
                      a = i.pauseFunc;
                    Object(s.a)(this, e),
                      (this._webCodecsPlayer = t),
                      (this._playResume = r),
                      (this._playPause = a),
                      (this._paused = !1),
                      (this._playedPts = 0),
                      (this._pausedTs = 0),
                      (this._lastCheckTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._paused = !1), (this._playedPts = 0), (this._pausedTs = 0);
                        },
                      },
                      {
                        key: 'check',
                        value: function (e) {
                          if (!(0 != this._lastCheckTime && e - this._lastCheckTime < 50)) {
                            var t = this._webCodecsPlayer.isBrowserHidden
                              ? this._webCodecsPlayer.getCurrentAudioDts()
                              : this._webCodecsPlayer.getVideoPts();
                            0 !== this._playedPts &&
                              (t === this._playedPts
                                ? this._paused || this._setPaused(e)
                                : this._paused && this._setResume(e)),
                              (this._playedPts = t),
                              (this._lastCheckTime = e);
                          }
                        },
                      },
                      {
                        key: '_setPaused',
                        value: function (e) {
                          (this._paused = !0),
                            (this._pausedTs = e),
                            p.a.log('WebCodecsPause._setPaused _pausedTs=', e),
                            this._playPause(e);
                        },
                      },
                      {
                        key: '_setResume',
                        value: function (e) {
                          var t = e - this._pausedTs;
                          p.a.log('WebCodecsPause._setResume pausedTime=', t, this._playedPts),
                            this._playResume(e, t),
                            (this._paused = !1),
                            (this._pausedTs = 0);
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this._paused;
                        },
                      },
                      {
                        key: 'pausedTs',
                        get: function () {
                          return this._pausedTs;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ar = (function () {
                  function e(t, i) {
                    var r = i.resumeFunc,
                      a = i.pauseFunc;
                    Object(s.a)(this, e),
                      (this._webCodecsPlayer = t),
                      (this._playResume = r),
                      (this._playPause = a),
                      (this._paused = !1),
                      (this._playedPts = 0),
                      (this._pausedTs = 0),
                      (this._lastCheckTime = 0),
                      (this._lastCheck500Time = 0),
                      (this._lastCheck500CurrntTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._paused = !1),
                            (this._playedPts = 0),
                            (this._pausedTs = 0),
                            (this._lastCheck500Time = 0),
                            (this._lastCheck500CurrntTime = 0);
                        },
                      },
                      {
                        key: 'check',
                        value: function (e) {
                          if (!(0 != this._lastCheckTime && e - this._lastCheckTime < 50)) {
                            var t = this._webCodecsPlayer.isBrowserHidden
                              ? this._webCodecsPlayer.getCurrentAudioDts()
                              : this._webCodecsPlayer.getVideoPts();
                            if (0 !== this._playedPts) {
                              t === this._playedPts
                                ? this._paused || this._setPaused(e)
                                : this._paused && this._setResume(e);
                              var i = e - this._lastCheck500Time,
                                s = Math.round(t - this._lastCheck500CurrntTime);
                              (0 == this._lastCheck500Time || i >= 500) &&
                                (0 != this._lastCheck500Time &&
                                  i - s >= I.a.pause500Cfg[0] &&
                                  (1 == Number(localStorage._printPauseCheckWorker) &&
                                    p.a.log(
                                      'WebCodecsPauseWorker.check.500ms check500Delta='
                                        .concat(i, ', check500CurrentTimeDelta=')
                                        .concat(s, ', pauseDelta=')
                                        .concat(i - s),
                                    ),
                                  this._webCodecsPlayer.check500Pause()),
                                (this._lastCheck500CurrntTime = t),
                                (this._lastCheck500Time = e));
                            }
                            (this._playedPts = t), (this._lastCheckTime = e);
                          }
                        },
                      },
                      {
                        key: '_setPaused',
                        value: function (e) {
                          (this._paused = !0),
                            (this._pausedTs = e),
                            p.a.log('WebCodecsPauseWorker._setPaused _pausedTs=', e),
                            this._playPause(e);
                        },
                      },
                      {
                        key: '_setResume',
                        value: function (e) {
                          var t = e - this._pausedTs;
                          p.a.log(
                            'WebCodecsPauseWorker._setResume pausedTime=',
                            t,
                            this._playedPts,
                          ),
                            this._playResume(e, t),
                            (this._paused = !1),
                            (this._pausedTs = 0);
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this._paused;
                        },
                      },
                      {
                        key: 'pausedTs',
                        get: function () {
                          return this._pausedTs;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ir = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._webCodecsPlayer = t),
                      (this.delayList = []),
                      (this.decodedList = []),
                      (this.renderList = []),
                      (this.deltaList = []),
                      (this.videoBufList = []),
                      (this.videoToDecodeList = []),
                      (this.audioToDecodeList = []),
                      (this.audioDecodedList = []),
                      (this.audioRenderList = []),
                      (this.videoDiscardList = []),
                      (this.videoThrowFpsList = []),
                      (this.videoRender5SecFpsList = []),
                      (this.videoEnhanceList = []),
                      (this.videoEnhanceCostList = []),
                      (this.lastEnhanceLess30Nums = 0),
                      (this.lastEnhanceLess150Nums = 0),
                      (this.lastEnhanceLess200Nums = 0),
                      (this.lastEnhanceLarge200Nums = 0),
                      (this.lastEnhanceTotal = 0),
                      (this.checkTimes = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'onCheckTimer',
                        value: function (e, t) {
                          var i = this._webCodecsPlayer.getDecodeFps(),
                            s = i.decodedVideoFps,
                            r = i.decodedAudioFps,
                            a = this._webCodecsPlayer.getVideoRenderFps(),
                            n = this._webCodecsPlayer.getAudioRenderFps(),
                            o = this._webCodecsPlayer.getVideoThrowFps(),
                            h = i.toDecodeAudioFps,
                            u = i.toDecodeVideoFps,
                            d = i.decodedVideoDelay,
                            c = i.videoFrameLen,
                            l = Math.floor(
                              this._webCodecsPlayer.getCurrentAudioDts() -
                                this._webCodecsPlayer.getCurrentDts(),
                            ),
                            f = this._webCodecsPlayer.getDecodedBuffer(),
                            m = this._webCodecsPlayer.getDiscardVideoFrames(),
                            _ = this._webCodecsPlayer.getBufferLen(),
                            v = this._webCodecsPlayer.getEnhanceVideoFrames();
                          this.delayList.push(d),
                            this.decodedList.push(s),
                            this.renderList.push(a),
                            this.videoEnhanceList.push(v),
                            this.videoEnhanceCostList.push(i.videoEnhanceCost),
                            this.videoRender5SecFpsList.length >= 5 &&
                              this.videoRender5SecFpsList.shift(),
                            this.videoRender5SecFpsList.push(a),
                            this.deltaList.push(l),
                            this.videoBufList.push(_),
                            this.audioToDecodeList.push(r),
                            this.videoToDecodeList.push(u),
                            this.audioDecodedList.push(r),
                            this.audioRenderList.push(n),
                            this.videoDiscardList.push(m),
                            this.videoThrowFpsList.push(o),
                            this.checkTimes % 5 == 0 &&
                              1 == Number(localStorage._printWebCodecsStat) &&
                              p.a.log(
                                'WebCodecsPlayer.getWebCodecsStats,',
                                'videoDecodeDelay='
                                  .concat(d, ', audioToDecodeFps=')
                                  .concat(h, ', audioDecodeFps=')
                                  .concat(r, ','),
                                'audioRenderFps='
                                  .concat(n, ', videoBufferLen=')
                                  .concat(this._webCodecsPlayer.getBufferLen(), ', delta=')
                                  .concat(l, ', videoToDecodeFps=')
                                  .concat(u, ','),
                                'videoDecodeFps='
                                  .concat(s, ', discardVideoFps=')
                                  .concat(m, ', videoRenderFps=')
                                  .concat(a, ', videoThrowFps=')
                                  .concat(o, ','),
                                'videoDecodedBuffer='.concat(f, ', videoFrameLen=').concat(c),
                              ),
                            this.checkTimes++;
                        },
                      },
                      {
                        key: 'getStats',
                        value: function () {
                          var e = Object(pe.a)(this.delayList),
                            t = Object(pe.a)(this.decodedList),
                            i = Object(pe.a)(this.renderList),
                            s = Object(pe.a)(this.deltaList),
                            r = Object(pe.a)(this.audioToDecodeList),
                            a = Object(pe.a)(this.videoToDecodeList),
                            n = Object(pe.a)(this.audioDecodedList),
                            o = Object(pe.a)(this.audioRenderList),
                            h = Object(pe.a)(this.videoDiscardList),
                            u = Object(pe.a)(this.videoThrowFpsList),
                            d = Object(pe.a)(this.videoEnhanceList),
                            c = Object(pe.a)(this.videoEnhanceCostList);
                          (this.delayList.length = 0),
                            (this.decodedList.length = 0),
                            (this.renderList.length = 0),
                            (this.deltaList.length = 0),
                            (this.audioToDecodeList.length = 0),
                            (this.videoToDecodeList.length = 0),
                            (this.audioDecodedList.length = 0),
                            (this.audioRenderList.length = 0),
                            (this.videoDiscardList.length = 0),
                            (this.videoThrowFpsList.length = 0),
                            (this.videoEnhanceList.length = 0),
                            (this.videoEnhanceCostList.length = 0);
                          var l = this._webCodecsPlayer.getDecodeFps(),
                            f = l.enhanceLess30Nums,
                            m = l.enhanceLess150Nums,
                            _ = l.enhanceLess200Nums,
                            v = l.enhanceLarge200Nums,
                            y = l.enhanceTotal,
                            S = f - this.lastEnhanceLess30Nums,
                            g = m - this.lastEnhanceLess150Nums,
                            T = _ - this.lastEnhanceLess200Nums,
                            E = v - this.lastEnhanceLarge200Nums,
                            C = y - this.lastEnhanceTotal;
                          (this.lastEnhanceLess30Nums = f),
                            (this.lastEnhanceLess150Nums = m),
                            (this.lastEnhanceLess200Nums = _),
                            (this.lastEnhanceLarge200Nums = v),
                            (this.lastEnhanceTotal = y);
                          var D = {
                              delayList: e,
                              decodedList: t,
                              renderList: i,
                              deltaList: s,
                              videoToDecodeList: a,
                              videoDiscardList: h,
                              audioToDecodeList: r,
                              auidoDecodedList: n,
                              audioRenderList: o,
                              videoThrowFpsList: u,
                              videoEnhanceList: d,
                              videoEnhanceCostList: c,
                              ehLess30Nums: S,
                              ehLess150Nums: g,
                              ehLess200Nums: T,
                              ehLarge200Nums: E,
                              ehTotal: C,
                            },
                            P = 'WebCodecsPlayer.getStats\n';
                          for (var A in D) P += ''.concat(A, ': ').concat(D[A].toString(), '\n');
                          return (
                            (P += 'bufferLen:'.concat(this.videoBufList.toString(), '\n')),
                            p.a.log(P),
                            (this.videoBufList.length = 0),
                            D
                          );
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this.videoRender5SecFpsList.length = 0;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                kr = {};
              self || (self = window),
                (function () {
                  var e = self.navigator.userAgent.toLowerCase(),
                    t =
                      /(edge)\/([\w.]+)/.exec(e) ||
                      /(edg)\/([\w.]+)/.exec(e) ||
                      /(opr)[\/]([\w.]+)/.exec(e) ||
                      /(chrome)[ \/]([\w.]+)/.exec(e) ||
                      /(iemobile)[\/]([\w.]+)/.exec(e) ||
                      /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) ||
                      /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(
                        e,
                      ) ||
                      /(webkit)[ \/]([\w.]+)/.exec(e) ||
                      /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) ||
                      /(msie) ([\w.]+)/.exec(e) ||
                      (e.indexOf('trident') >= 0 && /(rv)(?::| )([\w.]+)/.exec(e)) ||
                      (e.indexOf('compatible') < 0 && /(firefox)[ \/]([\w.]+)/.exec(e)) ||
                      [],
                    i =
                      /(ipad)/.exec(e) ||
                      /(ipod)/.exec(e) ||
                      /(windows phone)/.exec(e) ||
                      /(iphone)/.exec(e) ||
                      /(kindle)/.exec(e) ||
                      /(android)/.exec(e) ||
                      /(windows)/.exec(e) ||
                      /(mac)/.exec(e) ||
                      /(linux)/.exec(e) ||
                      /(cros)/.exec(e) ||
                      [],
                    s = {
                      browser: t[5] || t[3] || t[1] || '',
                      version: t[2] || t[4] || '0',
                      majorVersion: t[4] || t[2] || '0',
                      platform: i[0] || '',
                    },
                    r = {};
                  if (s.browser) {
                    r[s.browser] = !0;
                    var a = s.majorVersion.split('.');
                    (r.version = {
                      major: parseInt(s.majorVersion, 10),
                      string: s.version,
                      majorVersion: s.majorVersion,
                    }),
                      a.length > 1 && (r.version.minor = parseInt(a[1], 10)),
                      a.length > 2 && (r.version.build = parseInt(a[2], 10));
                  }
                  for (var n in (s.platform && (r[s.platform] = !0),
                  (r.chrome || r.opr || r.safari) && (r.webkit = !0),
                  (r.rv || r.iemobile) &&
                    (r.rv && delete r.rv, (s.browser = 'msie'), (r.msie = !0)),
                  r.edge && (delete r.edge, (s.browser = 'msedge'), (r.chrome = !0)),
                  r.edg && (delete r.edg, (s.browser = 'msedge'), (r.chrome = !0)),
                  r.opr && ((s.browser = 'opera'), (r.opera = !0)),
                  r.safari && r.android && ((s.browser = 'android'), (r.android = !0)),
                  (r.name = s.browser),
                  (r.platform = s.platform),
                  kr))
                    kr.hasOwnProperty(n) && delete kr[n];
                  Object.assign(kr, r);
                })(),
                kr.version || (kr.version = { major: 0, minor: 0, build: 0, string: '0.0.0' });
              var Rr = kr;
              function Or(e, t) {
                var i = e.toString().length,
                  s = Math.max(0, t - i),
                  r = '';
                if (s > 0) for (var a = 0; a < s; a++) r += '0';
                return r + e;
              }
              var br = 0,
                wr = {
                  now: function () {
                    if (void 0 !== window.performance) {
                      var e = window.performance;
                      if (void 0 !== e.now) return ~~e.now();
                      if (void 0 !== e.webkitNow) return ~~e.webkitNow();
                      if (void 0 !== e.mozNow) return ~~e.mozNow();
                      if (void 0 !== e.msNow) return ~~e.msNow();
                    }
                    0 === br && (br = Date.now() - 1);
                    var t = Date.now() - br;
                    return t > 4294967295 ? ((br += 4294967295), t - 4294967295) : t;
                  },
                  utc: function () {
                    return Math.round(Date.now() / 1e3);
                  },
                  getDateStr: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN,
                      t = null,
                      i = (t = e ? new Date(e) : new Date()).getFullYear(),
                      s = Or(t.getMonth() + 1, 2),
                      r = Or(t.getDate(), 2);
                    return ''.concat(i, '-').concat(s, '-').concat(r);
                  },
                  getTimeStr: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN,
                      t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                      i = null,
                      s = Or((i = e ? new Date(e) : new Date()).getHours(), 2),
                      r = Or(i.getMinutes(), 2),
                      a = Or(i.getSeconds(), 2),
                      n = ''.concat(s, ':').concat(r, ':').concat(a);
                    return t && (n += '.' + Or(i.getMilliseconds(), 3)), n;
                  },
                  getDateTimeStr: function () {
                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : NaN,
                      t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
                      i = null,
                      s = (i = e ? new Date(e) : new Date()).getFullYear(),
                      r = Or(i.getMonth() + 1, 2),
                      a = Or(i.getDate(), 2),
                      n = Or(i.getHours(), 2),
                      o = Or(i.getMinutes(), 2),
                      h = Or(i.getSeconds(), 2),
                      u = ''
                        .concat(s, '-')
                        .concat(r, '-')
                        .concat(a, ' ')
                        .concat(n, ':')
                        .concat(o, ':')
                        .concat(h);
                    return t && (u += '.' + Or(i.getMilliseconds(), 3)), u;
                  },
                },
                Lr = 99;
              function Mr() {
                return wr.getDateTimeStr() + ' ';
              }
              var Vr = !1,
                Nr = {
                  _data: [],
                  _length: 0,
                  debug: function () {
                    var e = Mr(),
                      t = Array.apply(null, arguments);
                    (t[0] = e + t[0]), Lr <= -1 && console.log.apply(console, t);
                  },
                  log: function (e) {
                    var t = Mr(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      Lr <= 0 && console.log.apply(console, i),
                      Nr.record(i, 'log');
                  },
                  info: function (e) {
                    var t = Mr(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      Lr <= 1 && console.info.apply(console, i),
                      Nr.record(i, 'info');
                  },
                  warn: function (e) {
                    var t = Mr(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      Lr <= 2 && console.warn.apply(console, i),
                      Nr.record(i, 'warn');
                  },
                  error: function (e) {
                    var t = Mr(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      Lr <= 3 && console.error.apply(console, i),
                      Nr.record(i, 'error');
                  },
                  group: function (e) {
                    var t = Mr(),
                      i = Array.apply(null, arguments);
                    (i[0] = t + i[0]),
                      Lr <= 1 &&
                        (console.groupCollapsed || console.group || console.log).apply(console, i),
                      Nr.record(i, 'group');
                  },
                  groupEnd: function () {
                    console.groupEnd && console.groupEnd.apply(console);
                  },
                  setLevel: function (e) {
                    e != Lr &&
                      (console.log(Mr() + ' set log level from ' + Lr + ' to ' + e), (Lr = e));
                  },
                  getLevel: function () {
                    return Lr;
                  },
                  record: function (e, t) {
                    1100 === Nr._length && (Nr._data.splice(0, 100), (Nr._length = 1e3));
                    var i = 0,
                      s = (e.shift() || '').toString();
                    for (
                      s = s.replace(/\%c/gi, function (e, t) {
                        return i++, '';
                      });
                      i-- && e.length;

                    )
                      e.shift();
                    for (var r = 0, a = e.length; r < a; r++)
                      'object' == typeof e[r] && (e[r] = '');
                    e.unshift(s);
                    var n = e.join(' ');
                    Nr._length++, Nr._data.push('['.concat(t, '][HYLineTrans]').concat(n));
                  },
                  getLog: function () {
                    return (
                      Vr ||
                        ((Vr = !0),
                        Nr._data.unshift(Rr.platform + ' ' + Rr.name + ' ' + Rr.version.string)),
                      Nr._data
                    );
                  },
                  logcss: function (e, t, i) {
                    var s = 'font-weight:900';
                    return (
                      e && (s += ';color:' + e),
                      t && (s += ';background:' + t),
                      i && (s += ';border:3px solid ' + i),
                      s
                    );
                  },
                  padNum: function (e, t) {
                    var i = e.toString().length,
                      s = Math.max(0, t - i);
                    return '0'.repeat(s) + e;
                  },
                },
                Fr = Nr,
                Br = {
                  logger: null,
                  TimeUtil: null,
                  init: function (e) {
                    (this.logger = e.logger || Fr), (this.TimeUtil = e.TimeUtil || wr);
                  },
                },
                Ur = i(7),
                xr = (function () {
                  function e(t, i, r) {
                    var a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                      n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
                      o = arguments.length > 5 ? arguments[5] : void 0,
                      h = arguments.length > 6 ? arguments[6] : void 0,
                      u = arguments.length > 7 ? arguments[7] : void 0;
                    Object(s.a)(this, e),
                      (this.data = r),
                      (this.timeStamp = i),
                      (this.type = t),
                      (this.startDecodeTime = 0),
                      (this.decodedTime = 0),
                      (this.discardAllow = a),
                      (this.isKeyFrame = n),
                      (this.compositionTime = o),
                      (this.naluType = h),
                      (this.isEmptyAudioFrame = !1),
                      u && u.spsUnit && (this.sps = u.spsUnit),
                      u && u.vpsUnit && (this.vps = u.vpsUnit),
                      u && u.ppsUnit && (this.pps = u.ppsUnit),
                      u && u.videoCodec && (this.codec = u.videoCodec),
                      u && u.videoWidth && (this.width = u.videoWidth),
                      u && u.videoHeight && (this.height = u.videoHeight);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setIsEmptyAudioFrame',
                        value: function (e) {
                          this.isEmptyAudioFrame = e;
                        },
                      },
                    ]),
                    e
                  );
                })();
              (xr.VIDEO = 0), (xr.AUIDO = 1);
              var Hr = xr,
                Wr = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._player = t),
                      (this._worker = t.getWorker()),
                      (this._workerErrorBind = this._workerError.bind(this)),
                      (this._workerMessageBind = this._workerMessage.bind(this)),
                      this._worker.addEventListener('message', this._workerMessageBind);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'postInitConfig',
                        value: function (e) {
                          this._post(Ur.c.INIT_CONFIG, e);
                        },
                      },
                      {
                        key: 'postAvcConfig',
                        value: function (e) {
                          this._post(Ur.c.AVCCONFIG, e);
                        },
                      },
                      {
                        key: 'postAv1InitSeg',
                        value: function (e) {
                          this._post(Ur.c.AV1_INIT_SEG, e);
                        },
                      },
                      {
                        key: 'postAVCPPS',
                        value: function (e) {
                          this._post(Ur.c.AVCPPS, e);
                        },
                      },
                      {
                        key: 'postAVCSPS',
                        value: function (e) {
                          this._post(Ur.c.AVCSPS, e);
                        },
                      },
                      {
                        key: 'postAVCVPS',
                        value: function (e) {
                          this._post(Ur.c.AVCVPS, e);
                        },
                      },
                      {
                        key: 'postVideoSamples',
                        value: function (e) {
                          this._post(Ur.c.VIDEOSAMPLES, e);
                        },
                      },
                      {
                        key: 'postAudioConfig',
                        value: function (e) {
                          this._post(Ur.c.AACCONFIG, e);
                        },
                      },
                      {
                        key: 'postAudioSamples',
                        value: function (e) {
                          this._post(Ur.c.AUDIOSAMPLES, e);
                        },
                      },
                      {
                        key: 'postFastOver',
                        value: function () {
                          this._post(Ur.c.FAST_OVER, {});
                        },
                      },
                      {
                        key: 'postClose',
                        value: function () {
                          this._post(Ur.c.CLOSE, {});
                        },
                      },
                      {
                        key: 'postLocalConfig',
                        value: function () {
                          this._post(Ur.c.LOCAL_CONFIG, {
                            _webcodecsNoRenderVideo: Number(localStorage._webcodecsNoRenderVideo),
                            _useSoftAcceleration: Number(localStorage._useSoftAcceleration),
                          });
                        },
                      },
                      {
                        key: 'postSetUseSoftAcceleration',
                        value: function () {
                          this._post(Ur.c.SET_USE_SOFTACCELERATION, {});
                        },
                      },
                      {
                        key: 'postUpdateSoftAcceleration',
                        value: function () {
                          this._post(Ur.c.UPDATE_SOFTACCELERATION, {});
                        },
                      },
                      {
                        key: 'postEnableDiscardVideo',
                        value: function (e) {
                          this._post(Ur.c.ENABLE_DISCARD_VIDEO, e);
                        },
                      },
                      {
                        key: 'postSetAudioWriter',
                        value: function (e) {
                          this._post(Ur.c.SET_AUDIO_WRITER, { writer: e }, [e]);
                        },
                      },
                      {
                        key: 'postSetPauseVideoDecode',
                        value: function (e) {
                          this._post(Ur.c.PAUSE_VIDEO_DECODE, e);
                        },
                      },
                      {
                        key: 'postSetPauseAudioDecode',
                        value: function (e) {
                          this._post(Ur.c.PAUSE_AUDIO_DECODE, e);
                        },
                      },
                      {
                        key: 'postUpdateCurBitrate',
                        value: function (e) {
                          this._post(Ur.c.UPDATE_CURBITRATE, e);
                        },
                      },
                      {
                        key: 'postSetJitter',
                        value: function (e) {
                          this._post(Ur.c.SET_JITTER, e);
                        },
                      },
                      {
                        key: 'postFrameInfo',
                        value: function (e) {
                          this._post(Ur.c.POSTFRAME, e);
                        },
                      },
                      {
                        key: 'postResize',
                        value: function (e) {
                          this._post(Ur.c.RESIZE, e);
                        },
                      },
                      {
                        key: 'postVisibilityChange',
                        value: function (e) {
                          this._post(Ur.c.VISIBILITYCHANGE, e);
                        },
                      },
                      {
                        key: 'postUpdateVideoFps',
                        value: function (e) {
                          this._post(Ur.c.UPDATE_VIDEOFPS, e);
                        },
                      },
                      {
                        key: 'postSetPlayMinBuffer',
                        value: function (e) {
                          this._post(Ur.c.SET_PLAY_MINBUFFER, e);
                        },
                      },
                      {
                        key: 'postVideoRenderStart',
                        value: function (e, t) {
                          this._post(Ur.c.START, e, t);
                        },
                      },
                      {
                        key: 'postAuidoTrack',
                        value: function (e, t) {
                          this._post(Ur.c.SET_AUDIO_WRITER, e, t);
                        },
                      },
                      {
                        key: 'postLogCfg',
                        value: function (e) {
                          this._post(Ur.c.LOG_CFG, e);
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (e) {
                          this._post(Ur.c.SET_ENHANCE, e);
                        },
                      },
                      {
                        key: 'setSegmenttion',
                        value: function (e) {
                          this._post(Ur.c.SET_SEGMENTTION, e);
                        },
                      },
                      {
                        key: 'onRevFastOver',
                        value: function () {
                          this._post(Ur.c.RECV_FAST_OVER);
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          this._post(Ur.c.SEEK_TIME, e);
                        },
                      },
                      {
                        key: 'postSetVodAv1',
                        value: function () {
                          this._post(Ur.c.SET_VOD_AV1);
                        },
                      },
                      {
                        key: 'postPlayBackRate',
                        value: function (e) {
                          this._post(Ur.c.SET_PLAYBACKRATE, e);
                        },
                      },
                      {
                        key: '_post',
                        value: function (e, t, i) {
                          e !== Ur.c.VIDEOSAMPLES &&
                            e !== Ur.c.AUDIOSAMPLES &&
                            e !== Ur.c.UPDATE_VIDEOFPS &&
                            e !== Ur.c.VISIBILITYCHANGE &&
                            e !== Ur.c.AVCPPS &&
                            e !== Ur.c.AVCSPS &&
                            e !== Ur.c.AVCVPS &&
                            Br.logger.log('WokerHolder.post type='.concat(e)),
                            i
                              ? this._worker && this._worker.postMessage({ type: e, data: t }, i)
                              : this._worker && this._worker.postMessage({ type: e, data: t });
                        },
                      },
                      {
                        key: '_workerError',
                        value: function (e) {
                          this._player.onWebcodecsError(Ur.d.WORKERERROR, e.message);
                        },
                      },
                      {
                        key: '_workerMessage',
                        value: function (e) {
                          var t = e.data;
                          switch (t.type) {
                            case Ur.b.WOREKR_READY:
                              this._onWorkerReady();
                              break;
                            case Ur.b.INTERVAL:
                              this._player.onWorkerInterval(wr.now());
                              break;
                            case Ur.b.TURN_TO_WEBCODECS_SOFT:
                              this._player.turnToWebcodecsSoft();
                              break;
                            case Ur.b.AUDIORENDERERROR:
                              this._player.onWebcodecsError(Ur.d.AUDIORENDERERROR);
                              break;
                            case Ur.b.SOFT_TURN_TO_MSE:
                              this._player.onWebcodecsError(Ur.d.SOFT_TURN_TO_MSE);
                              break;
                            case Ur.b.AUDIO_FRAME_DECODED:
                              this._player.getAudioRender().appendFrame(t.data);
                              break;
                            case Ur.b.WEBGLPLAY:
                              this._player.triggerWebcodecsPlay();
                              break;
                            case Ur.b.AUDIO_PLAY:
                              this._player.triggerAudioPlay();
                              break;
                            case Ur.b.STAT:
                              this._player.getVideoStatData(t.data);
                              break;
                            case Ur.b.PAUSE:
                            case Ur.b.WORKERSHAREBUFFER:
                              break;
                            case Ur.b.RENDERERROR:
                              this._player.onWebcodecsError(Ur.d.VIDEORENDEERROR);
                              break;
                            case Ur.b.LOG:
                              Br.logger.log('webCodecs worker log:\n', t.data.join('\n'));
                              break;
                            case Ur.b.VIDEODECODEERROR:
                              Br.logger.log(
                                'webCodecs worker.onDecoderError, video decode error',
                                t.data && t.data.msg,
                              ),
                                this._player.onWebcodecsError(
                                  Ur.d.VIDEODECODEERROR,
                                  t.data && t.data.msg,
                                );
                              break;
                            case Ur.b.AUDIODECODEERROR:
                              Br.logger.log(
                                'webCodecs worker.onDecoderError, audio decode error',
                                t.data && t.data.msg,
                              ),
                                this._player.onWebcodecsError(
                                  Ur.d.AUDIODECODEERROR,
                                  t.data & t.data.msg,
                                );
                              break;
                            case Ur.b.DECODE_COST:
                              Br.logger.log(
                                'webCodecs worker.onDecoderCostError, video decode_cost error',
                              ),
                                this._player.onWebcodecsError(Ur.d.DECODE_COST);
                              break;
                            case Ur.b.DECODE_DTS:
                              Br.logger.log('webCodecs worker.decodeByDts, video decode error'),
                                this._player.onWebcodecsError(Ur.d.DECODE_DTS);
                              break;
                            case Ur.b.WAIT_KEY_FRAME:
                              this._player.onWaitKeyFrame(t.data);
                              break;
                            case Ur.b.SET_FRAME_PAUSE:
                              this._player.setFramePause();
                              break;
                            case Ur.b.SET_FRMAE_RESUME:
                              this._player.setFrameRusume();
                              break;
                            case Ur.b.RENDER_FPS_PAUSE:
                              this._player.renderFpsPause();
                              break;
                            case Ur.b.AUDIO_FORMAT_ERROR:
                              this._player.onWebcodecsError(Ur.d.AUDIO_FORMAT_ERROR);
                              break;
                            case Ur.b.VIDEO_ENHANCE_ERROR:
                              this._player.onVideoEnhanceError(t.data);
                              break;
                            case Ur.b.VIDEO_ENHANCE_SUCCESS:
                              this._player.onVideoEnhanceSuccess();
                              break;
                            case Ur.b.ON_WCS_VIDEO_SEEK:
                              this._player.onVideoSeek(t.data);
                          }
                        },
                      },
                      {
                        key: '_onWorkerReady',
                        value: function () {
                          this.postLocalConfig(),
                            1 === Number(localStorage._useSoftAcceleration) &&
                              this._player.setUseSoftAcceleration();
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Gr = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.framelist = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'appendFrame',
                        value: function (e) {
                          this.framelist.push(e);
                        },
                      },
                      {
                        key: 'appendFrames',
                        value: function (e) {
                          for (; e.length > 0; ) this.framelist.push(e.shift());
                        },
                      },
                      {
                        key: 'dropFrames',
                        value: function (e) {
                          for (
                            var t = 0, i = 0;
                            i < this.framelist.length && this.framelist[i].timeStamp < e;
                            i++
                          )
                            t++;
                          t > 0 && this.framelist.splice(0, t);
                        },
                      },
                      {
                        key: 'dropInvalidFrames',
                        value: function (e, t) {
                          for (var i = -1, s = 0, r = 0; r < this.framelist.length; r++) {
                            var a = this.framelist[r];
                            if (!(a.timeStamp < e)) {
                              if ((-1 == i && a.timeStamp > e && (i = r), !(a.timeStamp < t)))
                                break;
                              s++;
                            }
                          }
                          s > 0 && this.framelist.splice(i, s);
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          for (; this.framelist.length > 0; ) this.framelist.pop().frame.close();
                          this.framelist = null;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                jr = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e) {
                    var r;
                    return (
                      Object(s.a)(this, i),
                      ((r = t.call(this)).rafNow = 0),
                      (r.renderedFrameNums = 0),
                      (r.webCodecsPlayer = e),
                      (r.frameRenderFps = 0),
                      (r.renderFpsList = []),
                      (r.canvas = null),
                      (r.pauseList = []),
                      (r.lastRenderNums = 0),
                      (r.lastVideoThrowNums = 0),
                      (r.lastFrameTimeStamp = 0),
                      (r.lastToDecodeAudioNums = 0),
                      (r.lastToDecodeVideoNums = 0),
                      (r.lastDecodedAudioNums = 0),
                      (r.lastDecodedVideoNums = 0),
                      (r.lastDiscardVideoNums = 0),
                      (r.lastEnhanceVideoNums = 0),
                      (r.videoPlayerElement = null),
                      (r.agenerator = null),
                      (r.processedStream = null),
                      (r.isPlayVideo = !1),
                      (r.isLive = r.webCodecsPlayer.isLive),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'start',
                        value: function (e, t) {
                          var i =
                            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                          Br.logger.log('VideoRender.start, videoElement=', i),
                            (this.videoPlayerElement = i || document.createElement('video')),
                            (this.videoPlayerElement.muted = !0),
                            (this.agenerator = new MediaStreamTrackGenerator({ kind: 'video' })),
                            (this.processedStream = new MediaStream([this.agenerator])),
                            (this.videoPlayerElement.srcObject = this.processedStream),
                            this.webCodecsPlayer.getWorkerHolder().postVideoRenderStart(
                              {
                                agenerator: this.agenerator.writable,
                                width: e,
                                height: t,
                                mainSharedArrayBuffer: this.webCodecsPlayer
                                  .getSharedArrayBufferHolder()
                                  .getMainBuffer(),
                              },
                              [this.agenerator.writable],
                            );
                        },
                      },
                      {
                        key: 'appendFrame',
                        value: function (e) {
                          this.webCodecsPlayer.getWorkerHolder().postFrameInfo({ frameInfo: e }),
                            (this.lastFrameTimeStamp = e.timeStamp),
                            e.frame.close(),
                            (e = null);
                        },
                      },
                      {
                        key: 'getVideoStatData',
                        value: function (e) {
                          1 == Number(localStorage._printVideoRenderStat) &&
                            Br.logger.log('VideoRender.getVideoStatData', e);
                        },
                      },
                      {
                        key: 'getVideoElement',
                        value: function () {
                          return this.videoPlayerElement;
                        },
                      },
                      {
                        key: 'onAudioPauseByBrowser',
                        value: function () {
                          this.videoPlayerElemen && this.videoPlayerElement.pause(),
                            Br.logger.log('VideoRender.onAudioPauseByBrowser');
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          var e = this;
                          if (
                            (!this.isPlayVideo || !this.webCodecsPlayer.audioBrowserPaused) &&
                            ((this.isPlayVideo = !0),
                            this.videoPlayerElement && this.videoPlayerElement.paused)
                          ) {
                            var t = this.videoPlayerElement.play();
                            t &&
                              t
                                .then(function () {
                                  Br.logger.log('VideoRender.play success'),
                                    e.webCodecsPlayer.audioBrowserPaused &&
                                      (e.videoPlayerElement.pause(),
                                      e.webCodecsPlayer && e.webCodecsPlayer.onPauseByBrowser());
                                })
                                .catch(function (t) {
                                  var i = t.toString();
                                  Fr.warn('VideoRender.play error: '.concat(i)),
                                    e.webCodecsPlayer &&
                                      (i.indexOf('NotAllowedError') >= 0 ||
                                        i.indexOf('request was interrupted') >= 0) &&
                                      e.webCodecsPlayer &&
                                      e.webCodecsPlayer.onPauseByBrowser();
                                });
                          }
                        },
                      },
                      {
                        key: 'getPauseStatList',
                        value: function () {
                          var e = [].slice.call(this.pauseList);
                          return (this.pauseList.length = 0), e;
                        },
                      },
                      {
                        key: 'getRenderedFrameNums',
                        value: function () {
                          return this.renderedFrameNums;
                        },
                      },
                      {
                        key: 'getVideoPts',
                        value: function () {
                          return this.webCodecsPlayer.getSharedArrayBufferHolder().getVideoPts();
                        },
                      },
                      {
                        key: 'getDecodedBuffer',
                        value: function () {
                          return this.webCodecsPlayer
                            .getSharedArrayBufferHolder()
                            .getDecodedBuffer();
                        },
                      },
                      {
                        key: 'getRenderFps',
                        value: function () {
                          var e = this.webCodecsPlayer.getSharedArrayBufferHolder().getRenderNums(),
                            t = e - this.lastRenderNums;
                          return (this.lastRenderNums = e), t < 0 && (t = 0), t;
                        },
                      },
                      {
                        key: 'getVideoThrowFps',
                        value: function () {
                          var e = this.webCodecsPlayer
                              .getSharedArrayBufferHolder()
                              .getVideoThrowNums(),
                            t = e - this.lastVideoThrowNums;
                          return (this.lastVideoThrowNums = e), t < 0 && (t = 0), t;
                        },
                      },
                      { key: 'containerResize', value: function (e) {} },
                      {
                        key: 'onVisibilitychange',
                        value: function () {
                          var e = document.visibilityState;
                          this.webCodecsPlayer.getWorkerHolder().postVisibilityChange({ state: e });
                        },
                      },
                      {
                        key: 'updateVideoFPS',
                        value: function (e, t) {
                          this.webCodecsPlayer
                            .getWorkerHolder()
                            .postUpdateVideoFps({ fps: e, noReferFps: t });
                        },
                      },
                      {
                        key: 'setPlayMinBuffer',
                        value: function (e) {
                          this.webCodecsPlayer
                            .getWorkerHolder()
                            .postSetPlayMinBuffer({ bufferLen: e });
                        },
                      },
                      {
                        key: 'getDecodeFps',
                        value: function () {
                          var e = this.webCodecsPlayer.getSharedArrayBufferHolder(),
                            t = e.getAudioTodecodeNums(),
                            i = e.getVideoTodecodeNums(),
                            s = e.getAudioDecodedNums(),
                            r = e.getVideoDecodedNums(),
                            a = e.getDecodedVideoDelay(),
                            n = e.getDecodedVideoDelaySmooth(),
                            o = e.getVideoReadyToRenderListLen(),
                            h = e.getVideoEnhanceCost(),
                            u = t - this.lastToDecodeAudioNums,
                            d = i - this.lastToDecodeVideoNums,
                            c = s - this.lastDecodedAudioNums,
                            l = r - this.lastDecodedVideoNums;
                          return (
                            (this.lastToDecodeAudioNums = t),
                            (this.lastToDecodeVideoNums = i),
                            (this.lastDecodedAudioNums = s),
                            (this.lastDecodedVideoNums = r),
                            {
                              toDecodeAudioFps: u,
                              toDecodeVideoFps: d,
                              decodedAudioFps: c,
                              decodedVideoFps: l,
                              decodedVideoDelay: a,
                              decodedVideoDelaySmooth: n,
                              videoFrameLen: o,
                              videoEnhanceCost: h,
                              enhanceLess30Nums: e.getEnhanceLess30Nums(),
                              enhanceLess150Nums: e.getEnhanceLess150Nums(),
                              enhanceLess200Nums: e.getEnhanceLess200Nums(),
                              enhanceLarge200Nums: e.getEnhanceLarge200Nums(),
                              enhanceTotal: e.getEnhanceTotal(),
                            }
                          );
                        },
                      },
                      {
                        key: 'getDiscardVideoFrames',
                        value: function () {
                          var e = this.webCodecsPlayer
                              .getSharedArrayBufferHolder()
                              .getVideoDecodeDiscardNums(),
                            t = e - this.lastDiscardVideoNums;
                          return (this.lastDiscardVideoNums = e), t;
                        },
                      },
                      {
                        key: 'getEnhanceVideoFrames',
                        value: function () {
                          var e = this.webCodecsPlayer
                              .getSharedArrayBufferHolder()
                              .getEnhanceVideoFrames(),
                            t = e - this.lastEnhanceVideoNums;
                          return (this.lastEnhanceVideoNums = e), t;
                        },
                      },
                      {
                        key: 'setAudioDecodedBuffer',
                        value: function (e) {
                          this.webCodecsPlayer
                            .getSharedArrayBufferHolder()
                            .storeMainBuffer(Ur.a.AUDIO_DECODED_BUFFER, e);
                        },
                      },
                      {
                        key: 'getVideoBufferLen',
                        value: function () {
                          var e = 0;
                          if (this.videoPlayerElement) {
                            var t = this.videoPlayerElement.buffered;
                            t.length > 0 &&
                              (e =
                                (1e3 *
                                  (t.end(t.length - 1) - this.videoPlayerElement.currentTime)) >>
                                0);
                          }
                          return e;
                        },
                      },
                      {
                        key: 'userPause',
                        value: function () {
                          Br.logger.log('VideoRenderWorker.userPause'),
                            this.webCodecsPlayer
                              .getSharedArrayBufferHolder()
                              .storeMainBuffer(Ur.a.PAUSE_STATUS, 1);
                        },
                      },
                      {
                        key: 'userPlay',
                        value: function () {
                          Br.logger.log('VideoRenderWorker.userPlay'),
                            this.webCodecsPlayer
                              .getSharedArrayBufferHolder()
                              .storeMainBuffer(Ur.a.PAUSE_STATUS, 0);
                        },
                      },
                      {
                        key: 'onVideoPause',
                        value: function () {
                          Br.logger.log('VideoRenderWorker.onVideoPause'),
                            this.isLive || this.videoPlayerElement.pause();
                        },
                      },
                      {
                        key: 'onVideoPlay',
                        value: function () {
                          Br.logger.log('VideoRenderWorker.onVideoPlay');
                        },
                      },
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          this.webCodecsPlayer
                            .getSharedArrayBufferHolder()
                            .storeMainBuffer(Ur.a.VIDEO_REAL_FPS, e);
                        },
                      },
                      {
                        key: 'getVideoWidth',
                        value: function () {
                          return this.videoPlayerElement ? this.videoPlayerElement.videoWidth : 0;
                        },
                      },
                      {
                        key: 'getVideoHeight',
                        value: function () {
                          return this.videoPlayerElement ? this.videoPlayerElement.videoHeight : 0;
                        },
                      },
                      {
                        key: 'startMuteRender',
                        value: function () {
                          Br.logger.log('VideoRenderWorker.startMuteRender'),
                            this.webCodecsPlayer.onVideoPlay(),
                            this.videoPlayerElement.play();
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function (e) {
                          this.webCodecsPlayer.getWorkerHolder().postPlayBackRate(e);
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          this.videoPlayerElement && this.videoPlayerElement.pause(),
                            Object(me.a)(Object(_e.a)(i.prototype), 'close', this).call(this),
                            (this.rafNow = 0),
                            (this.renderedFrameNums = 0),
                            (this.isBrowserHidden = !1),
                            (this.renderFpsList.length = 0),
                            (this.canvas = null),
                            (this.lastRenderNums = 0),
                            (this.lastVideoThrowNums = 0),
                            (this.lastToDecodeAudioNums = 0),
                            (this.lastToDecodeVideoNums = 0),
                            (this.lastDecodedAudioNums = 0),
                            (this.lastDecodedVideoNums = 0),
                            (this.lastDiscardVideoNums = 0),
                            (this.lastEnhanceVideoNums = 0),
                            this.videoPlayerElement &&
                              this.videoPlayerElement.removeEventListener(
                                'resize',
                                this.webCodecsPlayer.onVideoResizeBind,
                              ),
                            (this.videoPlayerElement = null),
                            (this.agenerator = null),
                            (this.processedStream = null);
                        },
                      },
                    ]),
                    i
                  );
                })(Gr),
                Yr = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e) {
                    var r;
                    return (
                      Object(s.a)(this, i),
                      ((r = t.call(this, e)).audioDuration = 0),
                      (r.ageneratorWriter = null),
                      (r.audioPlayerElement = null),
                      (r.processedStream = null),
                      (r.agenerator = null),
                      (r.renderTimer = 0),
                      (r.frameTimeStamps = []),
                      (r.renderQueueLimit = 5),
                      (r.audioSampleRate = 44100),
                      (r.volume = 1),
                      (r.paused = !1),
                      (r.renderNums = 0),
                      (r.lastRenderNums = 0),
                      (r.player = e),
                      (r.firstFrameRenderWriting = !1),
                      (r.firstFinshed = !1),
                      (r.isMuffled = !1),
                      (r.cacheVolume = 1),
                      (r.isPlaying = !1),
                      (r.userPaused = !1),
                      (r.audioPlayerElement = document.createElement('audio')),
                      r.audioPlayerElement.addEventListener('error', e.onVideoErrorBind),
                      r.audioPlayerElement.addEventListener('play', e.onVideoPlayBind),
                      r.audioPlayerElement.addEventListener('playing', e.onVideoPlayingBind),
                      (r.playing = !1),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'start',
                        value: function () {
                          'MediaStreamTrackProcessor' in window &&
                          'MediaStreamTrackGenerator' in window
                            ? ((this.agenerator = new MediaStreamTrackGenerator({ kind: 'audio' })),
                              (this.processedStream = new MediaStream([this.agenerator])),
                              (this.audioPlayerElement.srcObject = this.processedStream),
                              this.player
                                .getWorkerHolder()
                                .postAuidoTrack({ ageneratorWriter: this.agenerator.writable }, [
                                  this.agenerator.writable,
                                ]),
                              this.setVolume(this.volume))
                            : this.player.onWebcodecsError(Ur.d.NOT_SUPPORT_MEDIASRTREAMTRACK);
                        },
                      },
                      {
                        key: 'getCurrentDts',
                        value: function () {
                          return this.player.getSharedArrayBufferHolder().getAudioDts();
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this.audioPlayerElement && this.audioPlayerElement.currentTime
                            ? Math.round(1e3 * this.audioPlayerElement.currentTime)
                            : 0;
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          this.isMuffled
                            ? this.audioPlayerElement && (this.audioPlayerElement.volume = 0)
                            : this.audioPlayerElement && (this.audioPlayerElement.volume = e),
                            (this.volume = e),
                            (this.cacheVolume = e);
                        },
                      },
                      {
                        key: 'setMuffledVolume',
                        value: function (e) {
                          (this.isMuffled = e),
                            this.isMuffled
                              ? this.audioPlayerElement && (this.audioPlayerElement.volume = 0)
                              : this.setVolume(this.cacheVolume);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          (this.isMute = e),
                            e
                              ? this.audioPlayerElement && (this.audioPlayerElement.muted = !0)
                              : this.audioPlayerElement && (this.audioPlayerElement.muted = !1);
                        },
                      },
                      {
                        key: 'getRenderFps',
                        value: function () {
                          var e = this.player.getSharedArrayBufferHolder().getAudioRenderNums(),
                            t = e - this.lastRenderNums;
                          return t < 0 && (t = 0), (this.lastRenderNums = e), t;
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          this.audioPlayerElement.pause();
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          this._play();
                        },
                      },
                      {
                        key: '_checkPlay',
                        value: function () {
                          Fr.log('AudioRender.checkPlay playing='.concat(this.playing)),
                            this.playing ? Timer.remove(this._checkPlay, this) : this._play();
                        },
                      },
                      {
                        key: '_play',
                        value: function () {
                          var e = this,
                            t = this.audioPlayerElement.play();
                          t
                            ? t
                                .then(function () {
                                  (e.playing = !0), Fr.log('AudioRender.play success');
                                })
                                .catch(function (t) {
                                  e.playing = !1;
                                  var i = t.toString();
                                  Fr.warn('AudioRender.play error: '.concat(i)),
                                    e.player &&
                                      (i.indexOf('NotAllowedError') >= 0 ||
                                        i.indexOf('request was interrupted') >= 0 ||
                                        e.audioPlayerElement.paused) &&
                                      e.player &&
                                      e.player.onPauseByBrowser(),
                                    (e.userPaused = !0);
                                })
                            : (this.playing = !1);
                        },
                      },
                      {
                        key: 'userPlay',
                        value: function () {
                          Fr.log('AudioRender.userPlay'), (this.userPaused = !1), this.play();
                        },
                      },
                      {
                        key: 'userPause',
                        value: function () {
                          Fr.log('AudioRender.userPause'),
                            (this.userPaused = !0),
                            this.pause(),
                            this.player.onVideoPauseBind();
                        },
                      },
                      {
                        key: 'workerMessage',
                        value: function (e) {
                          switch (e.data.type) {
                            case Ur.b.WORKERSHAREBUFFER:
                              break;
                            case Ur.b.AUDIODECODEERROR:
                              Fr.log('webCodecs worker.onDecoderError, audio decode error'),
                                this.player.onWebcodecsError(Ur.d.AUDIODECODEERROR);
                          }
                        },
                      },
                      {
                        key: 'getAudioBufferLen',
                        value: function () {
                          var e = 0;
                          if (this.audioPlayerElement) {
                            var t = this.audioPlayerElement.buffered;
                            t.length > 0 &&
                              (e =
                                (1e3 *
                                  (t.end(t.length - 1) - this.audioPlayerElement.currentTime)) >>
                                0);
                          }
                          return e;
                        },
                      },
                      { key: 'initAudio', value: function () {} },
                      { key: 'onCheckFastTimer', value: function () {} },
                      {
                        key: 'close',
                        value: function () {
                          Object(me.a)(Object(_e.a)(i.prototype), 'close', this).call(this),
                            this.audioPlayerElement && this.audioPlayerElement.pause(),
                            this.audioPlayerElement.removeEventListener(
                              'pause',
                              this.player.onVideoPauseBind,
                            ),
                            this.audioPlayerElement.removeEventListener(
                              'error',
                              this.player.onVideoErrorBind,
                            ),
                            this.audioPlayerElement.removeEventListener(
                              'play',
                              this.player.onVideoPlayBind,
                            ),
                            this.audioPlayerElement.removeEventListener(
                              'playing',
                              this.player.onVideoPlayingBind,
                            ),
                            (this.agenerator = null),
                            (this.ageneratorWriter = null),
                            (this.audioPlayerElement = null),
                            (this.processedStream = null),
                            (this.renderNums = 0),
                            (this.lastRenderNums = 0),
                            (this.firstFinshed = !1),
                            (this.frameTimeStamps.length = 0),
                            (this.isPlaying = !1),
                            (this.userPaused = !1),
                            (this.playing = !1);
                        },
                      },
                    ]),
                    i
                  );
                })(Gr),
                qr = function e() {
                  Object(s.a)(this, e);
                };
              (qr.INIT = 'init'),
                (qr.INITED = 'inited'),
                (qr.STOP = 'stop'),
                (qr.PAUSE = 'pause'),
                (qr.RESUME = 'resume'),
                (qr.PLAY = 'play'),
                (qr.AUDIO_FRAME = 'audio_frame'),
                (qr.UPDATE_CURRENT_TIME = 'update_current_time'),
                (qr.TIME_STAMP = 'timestamp'),
                (qr.VOLUME = 'volume'),
                (qr.AUDIO_DATA_NAN = 'AUDIO_DATA_NAN'),
                (qr.AUDIO_DATA_MUTE = 'AUDIO_DATA_MUTE'),
                (qr.LOG_CFG = 'LOG_CFG'),
                (qr.UPDATE_PLAYBACKRATE = 'UPDATE_PLAYBACKRATE'),
                (qr.SEEK = 'SEEK'),
                (qr.ON_VIDEO_SEEK = 'ON_VIDEO_SEEK');
              var Kr = qr,
                Jr = i(76),
                zr = i.n(Jr),
                Qr = window.AudioContext || window.webkitAudioContext,
                Xr = 0,
                $r = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._id = Xr++),
                      (this.player = t),
                      (this.audioCtx = null),
                      (this.oscillator = null),
                      (this.bypasser = null),
                      (this.outputChannelCount = 2),
                      (this.sampleRate = 44100),
                      (this.currentDts = 0),
                      (this.isMuffled = !1),
                      (this.isMute = !1),
                      (this.cacheVolume = 1),
                      (this.isPlaying = !1),
                      (this.userPaused = !1),
                      (this.renderNums = 0),
                      (this.lastRenderNums = 0),
                      (this.isFirstFrameTs = 0),
                      (this.firstTimeStamp = 0),
                      (this.gainNode = null),
                      (this.audioContextState = ''),
                      (this.isFirstPlay = !1),
                      (this.onAudioStateChangeBind = this.onAudioStateChange.bind(this)),
                      (this.audioFrames = []),
                      (this._logCfg = {}),
                      (this._logTs = 0),
                      (this.volume = 1),
                      (this.playbackRate = 1),
                      this.player.isLive ? (this.playMode = 0) : (this.playMode = 1),
                      (this.sampleRate = 44100),
                      (this.outputChannelCount = 2),
                      (this.isInited = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'isSuspended',
                        value: function () {
                          return 'suspended' === this.audioContextState;
                        },
                      },
                      { key: 'start', value: function () {} },
                      {
                        key: 'initAudio',
                        value: function () {
                          var e =
                              arguments.length > 0 && void 0 !== arguments[0]
                                ? arguments[0]
                                : 44100,
                            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2;
                          if (44100 == e) {
                            if (
                              ((this.sampleRate = e),
                              (this.outputChannelCount = t),
                              Br.logger.log('AudioWorkletNodeRenderer.initAudio'),
                              (this.audioCtx = new Qr({ sampleRate: e })),
                              'suspended' == this.audioCtx.state)
                            )
                              return (
                                this.player.onAudioPauseByBrowser(), void (this.isAudioPause = !0)
                              );
                            this.initAudioContext(t);
                          } else this.player.onWebcodecsError(Ur.d.NOT_SUPPORT_AUDIO_SAMPLERATE);
                        },
                      },
                      {
                        key: 'initAudioContext',
                        value: function (e) {
                          var t = this;
                          Br.logger.log('AudioWorkletNodeRenderer.initAudioContext'),
                            (this.outputChannelCount = e),
                            this.audioCtx.audioWorklet.addModule(zr.a).then(function () {
                              t.audioCtx &&
                                ((t.bypasser = new AudioWorkletNode(
                                  t.audioCtx,
                                  'bypass-processor',
                                  { outputChannelCount: [e] },
                                )),
                                (t.bypasser.port.onmessage = t.onMessage.bind(t)),
                                t.bypasser.connect(t.audioCtx.destination));
                            }),
                            this.audioCtx.addEventListener(
                              'statechange',
                              this.onAudioStateChangeBind,
                            );
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function (e) {
                          Br.logger.log('AudioWorkletNodeRenderer.setPlaybackRate', e),
                            this.playbackRate != e &&
                              ((this.playbackRate = e),
                              this.postMessage(Kr.UPDATE_PLAYBACKRATE, e));
                        },
                      },
                      {
                        key: 'muteRecoverInit',
                        value: function () {
                          Br.logger.log('AudioWorkletNodeRenderer.muteRecoverInit'),
                            (this.isAudioPause = !1),
                            (this.audioCtx = null),
                            this.initAudio(this.sampleRate, this.outputChannelCount);
                        },
                      },
                      {
                        key: 'onAudioStateChange',
                        value: function () {
                          var e = this.audioCtx.state;
                          Br.logger.log(
                            'AudioWorkletNodeRenderer.onAudioStateChange, state='.concat(e),
                          ),
                            (this.audioContextState = e),
                            'suspended' == e
                              ? (this.player.onVideoPause(), (this.isAudioPause = !0))
                              : 'running' == e &&
                                (this.player.onAudioPlay(), (this.isAudioPause = !1));
                        },
                      },
                      {
                        key: 'seek',
                        value: function () {
                          (this.isSeek = !0), this.postMessage(Kr.SEEK);
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function () {
                          Br.logger.log('AudioWorkletNodeRenderer.onVideoSeek'),
                            (this.isSeek = !1),
                            this.postMessage(Kr.ON_VIDEO_SEEK);
                        },
                      },
                      {
                        key: 'appendFrame',
                        value: function (e) {
                          -1 != e.format.indexOf('32')
                            ? this.isAudioPause
                              ? !this.isSeek && this.audioFrames.push(e)
                              : this.isInited
                              ? this.postMessage(Kr.AUDIO_FRAME, e)
                              : this.audioFrames.push(e)
                            : this.player.onWebcodecsError(Ur.d.AUDIO_FORMAT_ERROR);
                        },
                      },
                      {
                        key: 'onWorkLetReady',
                        value: function () {
                          var e = this;
                          Br.logger.log(
                            'AudioWorkletNodeRenderer.onWorkLetReady, frameLen='.concat(
                              this.audioFrames.length,
                            ),
                          ),
                            this.audioFramesClear(),
                            this.audioFrames.length >= 0 &&
                              (this.audioFrames.map(function (t) {
                                e.postMessage(Kr.AUDIO_FRAME, t);
                              }),
                              this.audioFrames.length);
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function () {
                          if (
                            (this.audioFramesClear(),
                            this.bypasser && this.bypasser.port && this.bypasser.port.postMessage)
                          ) {
                            var e = wr.now();
                            if (e - this._logTs > 1e3) {
                              this._logTs = e;
                              var t = {
                                printProcess: 1 == localStorage._printProcess,
                                printAudioData: 1 == localStorage._printAudioData,
                                printRenderSkipAudio: 1 == localStorage._printRenderSkipAudio,
                              };
                              (t.printProcess == this._logCfg.printProcess &&
                                t.printAudioData === this._logCfg.printAudioData &&
                                t.printRenderSkipAudio === this._logCfg.printRenderSkipAudio) ||
                                ((this._logCfg = t), this.postMessage(Kr.LOG_CFG, t));
                            }
                          }
                        },
                      },
                      {
                        key: 'audioFramesClear',
                        value: function () {
                          for (var e = this.player.getVideoPts(); this.audioFrames.length > 0; ) {
                            var t = this.audioFrames[0];
                            if (!(t.timeStamp < e)) break;
                            this.audioFrames.shift(),
                              this.player.isLive ||
                                this.isAudioPause ||
                                this.player
                                  .getSharedArrayBufferHolder()
                                  .storeMainBuffer(Ur.e.AUDIO_DTS, t.timeStamp);
                          }
                        },
                      },
                      {
                        key: 'onMessage',
                        value: function (e) {
                          switch (e.data.type) {
                            case Kr.INITED:
                              Br.logger.log(
                                'AudioWorkletNodeRenderer.onMessage inited, playMode='.concat(
                                  this.playMode,
                                ),
                              ),
                                this.setVolume(this.volume),
                                this.postMessage(Kr.INIT, {
                                  outputChannelCount: this.outputChannelCount,
                                  id: this._id,
                                  playMode: this.playMode,
                                  playbackRate: this.playbackRate,
                                  mainSharedArrayBuffer: this.player
                                    .getSharedArrayBufferHolder()
                                    .getMainBuffer(),
                                }),
                                this.onWorkLetReady(),
                                this.isSeek
                                  ? this.postMessage(Kr.SEEK)
                                  : this.postMessage(Kr.ON_VIDEO_SEEK),
                                (this.isInited = !0);
                              break;
                            case Kr.TIME_STAMP:
                              var t = wr.now();
                              (this.currentDts = e.data.data.timeStamp),
                                (this.renderNums = e.data.data.renderNums),
                                this.isFirstPlay ||
                                  ((this.isFirstPlay = !0), this.player.triggerAudioPlay()),
                                this.player.audioPlayConsuming &&
                                  this.player.audioPlayConsuming.addRenderFrameData &&
                                  this.player.audioPlayConsuming.addRenderFrameData(
                                    this.currentDts,
                                    t,
                                  ),
                                0 == this.isFirstFrameTs
                                  ? ((this.isFirstFrameTs = t),
                                    (this.firstTimeStamp = this.currentDts))
                                  : Number(1 == localStorage._printWebcodecsWorkletDts) &&
                                    Br.logger.log(
                                      'AudioWorkLet, dts='
                                        .concat(this.currentDts, ',localPast=')
                                        .concat(wr.now() - this.isFirstFrameTs, ',audioPast=')
                                        .concat(this.currentDts - this.firstTimeStamp),
                                    );
                              break;
                            case Kr.AUDIO_DATA_NAN:
                              this.player.onWebcodecsError(Ur.d.AUDIO_DATA_NAN);
                          }
                        },
                      },
                      {
                        key: 'postMessage',
                        value: function (e, t) {
                          this.bypasser &&
                            this.bypasser.port &&
                            this.bypasser.port.postMessage &&
                            this.bypasser.port.postMessage({ type: e, data: t });
                        },
                      },
                      { key: 'workerMessage', value: function () {} },
                      {
                        key: 'getCurrentDts',
                        value: function () {
                          return (
                            this.player.getSharedArrayBufferHolder().getAudioDts() ||
                            this.currentDts
                          );
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this.audioCtx ? Math.round(this.audioCtx.currentTime) : 0;
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          this.isMuffled || this.isMute
                            ? this.postMessage(Kr.VOLUME, 0)
                            : this.postMessage(Kr.VOLUME, e),
                            (this.volume = e),
                            (this.cacheVolume = e);
                        },
                      },
                      {
                        key: 'setMuffledVolume',
                        value: function (e) {
                          (this.isMuffled = e),
                            this.isMuffled
                              ? this.postMessage(Kr.VOLUME, 0)
                              : this.setVolume(this.cacheVolume);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          (this.isMute = e),
                            e ? this.postMessage(Kr.VOLUME, 0) : this.setVolume(this.cacheVolume);
                        },
                      },
                      {
                        key: 'getRenderFps',
                        value: function () {
                          var e = this.renderNums,
                            t = e - this.lastRenderNums;
                          return t < 0 && (t = 0), (this.lastRenderNums = e), t;
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          Br.logger.log('AudioWorkletNodeRenderer.pause'),
                            this.postMessage(Kr.PAUSE);
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          this._play(), this.postMessage(Kr.PLAY);
                        },
                      },
                      {
                        key: '_play',
                        value: function () {
                          var e = this;
                          if (this.audioCtx) {
                            var t = this.audioCtx.resume();
                            t
                              ? t
                                  .then(function () {
                                    (e.playing = !0), Br.logger.log('AudioRender.play success');
                                  })
                                  .catch(function (t) {
                                    e.playing = !1;
                                    var i = t.toString();
                                    Br.logger.warn('AudioRender.play error: '.concat(i)),
                                      e.player && e.player.onAudioPauseByBrowser(),
                                      (e.userPaused = !0);
                                  })
                              : (this.playing = !1);
                          }
                        },
                      },
                      {
                        key: 'userPlay',
                        value: function () {
                          Br.logger.log('AudioRender.userPlay'),
                            this.isAudioPause && !this.player.isLive && this.muteRecoverInit(),
                            (this.userPaused = !1),
                            this.play();
                        },
                      },
                      {
                        key: 'userPause',
                        value: function () {
                          Br.logger.log('AudioRender.userPause'),
                            (this.userPaused = !0),
                            this.pause(),
                            this.player.onVideoPause();
                        },
                      },
                      {
                        key: 'workerMessage',
                        value: function (e) {
                          switch (e.data.type) {
                            case Ur.b.WORKERSHAREBUFFER:
                              break;
                            case Ur.b.AUDIODECODEERROR:
                              Br.logger.log('webCodecs worker.onDecoderError, audio decode error'),
                                this.player.onWebcodecsError(Ur.d.AUDIODECODEERROR);
                          }
                        },
                      },
                      {
                        key: 'getAudioBufferLen',
                        value: function () {
                          return 0;
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          (this.currentDts = 0),
                            this.audioCtx &&
                              (this.postMessage(Kr.STOP, null),
                              Br.logger.log('AudioWorkletNodeRenderer.close'),
                              this.bypasser &&
                                (this.bypasser.port.close(),
                                this.bypasser.disconnect(this.audioCtx),
                                (this.bypasser = null)),
                              this.audioCtx.removeEventListener(
                                'statechange',
                                this.onAudioStateChangeBind,
                              ),
                              this.audioCtx.close(),
                              (this.audioCtx = null)),
                            (this.renderNums = 0),
                            (this.lastRenderNums = 0),
                            (this.isFirstFrameTs = 0),
                            (this.firstTimeStamp = 0),
                            (this.isFirstPlay = !1);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Zr = (function () {
                  function e() {
                    Object(s.a)(this, e);
                    var t = new SharedArrayBuffer(1024);
                    (this._mainBuffer = new Uint32Array(t)), (this._workerBufferAudio = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getMainBuffer',
                        value: function () {
                          return this._mainBuffer;
                        },
                      },
                      {
                        key: 'setWorkerBufferVideo',
                        value: function (e) {
                          this._mainBuffer = e;
                        },
                      },
                      {
                        key: 'setWorkerBufferAudio',
                        value: function (e) {
                          this._workerBufferAudio = e;
                        },
                      },
                      {
                        key: 'storeMainBuffer',
                        value: function (e, t) {
                          this._mainBuffer && Atomics.store(this._mainBuffer, e, t);
                        },
                      },
                      {
                        key: 'storeMainShieldAudio',
                        value: function (e) {
                          this.storeMainBuffer(Ur.a.IS_SHIELD_AUDIO, e);
                        },
                      },
                      {
                        key: 'storeFrameBuffer',
                        value: function (e) {
                          this.storeMainBuffer(Ur.a.FRAME_BUFFER_LEN, e);
                        },
                      },
                      {
                        key: 'storeRecvVideoTs',
                        value: function (e) {
                          this.storeMainBuffer(Ur.a.LAST_VIDEO_RCV_TS, e);
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_BUFFER_LEN, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getVideoPts',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_PTS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getDecodedBuffer',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_NOT_RENDERD_BUFFER, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getRenderNums',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_RENDER_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getAudioRenderNums',
                        value: function () {
                          return this._loadWorker(Ur.e.AUDIO_RENDER_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getVideoThrowNums',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_THROW_FRAME_FPS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getAudioTodecodeNums',
                        value: function () {
                          return this._loadWorker(Ur.e.AUDIO_TODECODE_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getVideoTodecodeNums',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_TODECODE_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getAudioDecodedNums',
                        value: function () {
                          return this._loadWorker(Ur.e.AUDIO_DECODE_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getVideoDecodedNums',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_DECODE_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getDecodedVideoDelay',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_DECODED_DELAY, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getDecodedVideoDelaySmooth',
                        value: function () {
                          return this._loadWorker(
                            Ur.e.VIDEO_DECODED_DELAY_SMOOTH,
                            this._mainBuffer,
                          );
                        },
                      },
                      {
                        key: 'getVideoReadyToRenderListLen',
                        value: function () {
                          return this._loadWorker(
                            Ur.e.VIDEO_READY_TO_RENDER_LIST_LEN,
                            this._mainBuffer,
                          );
                        },
                      },
                      {
                        key: 'getVideoDecodeDiscardNums',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_DECODE_DISCARD_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getEnhanceVideoFrames',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_ENHANCE_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getVideoEnhanceCost',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_ENAHNCE_COST, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getEnhanceLess30Nums',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_ENHANCE_LESS30_NUMS, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getEnhanceLess150Nums',
                        value: function () {
                          return this._loadWorker(
                            Ur.e.VIDEO_ENHANCE_LESS150_NUMS,
                            this._mainBuffer,
                          );
                        },
                      },
                      {
                        key: 'getEnhanceLess200Nums',
                        value: function () {
                          return this._loadWorker(
                            Ur.e.VIDEO_ENHANCE_LESS200_NUMS,
                            this._mainBuffer,
                          );
                        },
                      },
                      {
                        key: 'getEnhanceLarge200Nums',
                        value: function () {
                          return this._loadWorker(
                            Ur.e.VIDEO_ENHANCE_LARGE200_NUMS,
                            this._mainBuffer,
                          );
                        },
                      },
                      {
                        key: 'getEnhanceTotal',
                        value: function () {
                          return this._loadWorker(Ur.e.VIDEO_ENHANCE_TOTAL, this._mainBuffer);
                        },
                      },
                      {
                        key: 'getAudioDts',
                        value: function () {
                          return this._loadWorker(Ur.e.AUDIO_DTS, this._mainBuffer);
                        },
                      },
                      {
                        key: '_loadWorker',
                        value: function (e, t) {
                          return t ? Atomics.load(t, e) : 0;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ea = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._config = t),
                      (this.isLive = t.isLive),
                      (this.videoElement = t.videoElement),
                      (this._callbacks = i),
                      (this._worker = A()(81)),
                      (this._workerHolder = new Wr(this)),
                      (this._sharedArrayBufferHolder = new Zr()),
                      (this._videoRender = new jr(this)),
                      1 == localStorage._enableAudioTrack
                        ? (this._audioRender = new Yr(this))
                        : (this._audioRender = new $r(this)),
                      (this._isAudioPause = !1),
                      (this._isRenderStart = !1),
                      (this._logCfgCheckTs = 0),
                      (this._logCfg = {}),
                      this._initConfig();
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: '_initConfig',
                        value: function () {
                          this._workerHolder.postInitConfig({
                            config: JSON.stringify(this._config),
                          }),
                            this._checkLogCfg(wr.now());
                        },
                      },
                      {
                        key: 'setVodAv1',
                        value: function () {
                          this._workerHolder.postSetVodAv1();
                        },
                      },
                      {
                        key: 'getWorker',
                        value: function () {
                          return this._worker;
                        },
                      },
                      {
                        key: 'getWorkerHolder',
                        value: function () {
                          return this._workerHolder;
                        },
                      },
                      {
                        key: 'getSharedArrayBufferHolder',
                        value: function () {
                          return this._sharedArrayBufferHolder;
                        },
                      },
                      {
                        key: 'getVideoRender',
                        value: function () {
                          return this._videoRender;
                        },
                      },
                      {
                        key: 'getAudioRender',
                        value: function () {
                          return this._audioRender;
                        },
                      },
                      {
                        key: 'getVideoElement',
                        value: function () {
                          return this._videoRender.getVideoElement();
                        },
                      },
                      {
                        key: 'getVideoPts',
                        value: function () {
                          return this._videoRender ? this._videoRender.getVideoPts() : 0;
                        },
                      },
                      {
                        key: 'getDecodeFps',
                        value: function () {
                          return this._videoRender.getDecodeFps();
                        },
                      },
                      {
                        key: 'getDecodedBuffer',
                        value: function () {
                          return this._videoRender.getDecodedBuffer();
                        },
                      },
                      {
                        key: 'getVideoRenderFps',
                        value: function () {
                          return this._videoRender.getRenderFps();
                        },
                      },
                      {
                        key: 'getAudioRenderFps',
                        value: function () {
                          return this._audioRender.getRenderFps();
                        },
                      },
                      {
                        key: 'getVideoThrowFps',
                        value: function () {
                          return this._videoRender.getVideoThrowFps();
                        },
                      },
                      {
                        key: 'getDiscardVideoFrames',
                        value: function () {
                          return this._videoRender.getDiscardVideoFrames();
                        },
                      },
                      {
                        key: 'getEnhanceVideoFrames',
                        value: function () {
                          return this._videoRender.getEnhanceVideoFrames();
                        },
                      },
                      {
                        key: 'getDecodedVideoDelaySmooth',
                        value: function () {
                          return this._sharedArrayBufferHolder.getDecodedVideoDelaySmooth();
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this._audioRender.getCurrentTime();
                        },
                      },
                      {
                        key: 'getCurrentAudioDts',
                        value: function () {
                          return this._audioRender.getCurrentDts();
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this._sharedArrayBufferHolder.getBufferLen();
                        },
                      },
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          this._videoRender.setRealFps(e);
                        },
                      },
                      {
                        key: 'updateVideoFPS',
                        value: function (e, t) {
                          this._videoRender.updateVideoFPS(e, t);
                        },
                      },
                      {
                        key: 'getAudioError',
                        value: function () {
                          return this._audioRender.audioPlayerElement.error;
                        },
                      },
                      {
                        key: 'userPause',
                        value: function () {
                          this._audioRender.userPause(), this._videoRender.userPause();
                        },
                      },
                      {
                        key: 'userPlay',
                        value: function () {
                          this._audioRender.userPlay(), this._videoRender.userPlay();
                        },
                      },
                      {
                        key: 'setPlayMinBuffer',
                        value: function (e) {
                          this._workerHolder.postSetPlayMinBuffer({ bufferLen: e });
                        },
                      },
                      {
                        key: 'startMuteRender',
                        value: function (e) {
                          this._audioRender.isAudioPause &&
                            (Br.logger.log(
                              'WebcodecsPlayer.startMuteRender.'
                                .concat(0 === e ? 'mute' : 'setVolume', ' val=')
                                .concat(e),
                            ),
                            0 === e
                              ? ((this._isAudioPause = !0),
                                (this.audioBrowserPaused = !1),
                                this._videoRender.startMuteRender())
                              : this._isAudioPause &&
                                (this.onAudioPlay(), this._audioRender.muteRecoverInit())),
                            this._audioRender.setVolume(e);
                        },
                      },
                      {
                        key: 'setMuffledVolume',
                        value: function (e) {
                          this._audioRender.setMuffledVolume(e);
                        },
                      },
                      {
                        key: 'setPauseVideoDecode',
                        value: function (e) {
                          this._workerHolder.postSetPauseVideoDecode({ isPause: e });
                        },
                      },
                      {
                        key: 'setPauseAudioDecode',
                        value: function (e) {
                          this._workerHolder.postSetPauseAudioDecode({ isPause: e });
                        },
                      },
                      {
                        key: 'isAudioSuspended',
                        value: function () {
                          return this._audioRender.isSuspended();
                        },
                      },
                      {
                        key: 'onVisibilitychange',
                        value: function () {
                          this._videoRender.onVisibilitychange();
                        },
                      },
                      {
                        key: 'onAudioPauseByBrowser',
                        value: function () {
                          Br.logger.log('WebcodecsPlayer.onAudioPauseByBrowser'),
                            this.getSharedArrayBufferHolder().storeMainBuffer(
                              Ur.a.BROWSER_PAUSE_STATUS,
                              1,
                            ),
                            (this.audioBrowserPaused = !0),
                            this._videoRender.onAudioPauseByBrowser();
                        },
                      },
                      {
                        key: 'onPauseByBrowser',
                        value: function () {
                          this._callbacks && this._callbacks.onPauseByBrowser();
                        },
                      },
                      {
                        key: 'onVideoPause',
                        value: function () {
                          this._videoRender.onVideoPause();
                        },
                      },
                      {
                        key: 'onVideoPlay',
                        value: function () {
                          this._videoRender.onVideoPlay(),
                            this._callbacks.onVideoPlay && this._callbacks.onVideoPlay();
                        },
                      },
                      {
                        key: 'onAudioPlay',
                        value: function () {
                          Br.logger.log('WebcodecsPlayer.onAudioPlay'),
                            (this.audioBrowserPaused = !1),
                            this._videoRender.onVideoPlay(),
                            this.getSharedArrayBufferHolder().storeMainBuffer(
                              Ur.a.BROWSER_PAUSE_STATUS,
                              0,
                            );
                        },
                      },
                      {
                        key: 'triggerAudioPlay',
                        value: function () {
                          this._audioRender.play(), this.triggerPlay();
                        },
                      },
                      {
                        key: 'triggerPlay',
                        value: function () {
                          this._videoRender.play(),
                            this._callbacks && this._callbacks.triggerPlay();
                        },
                      },
                      {
                        key: 'triggerWebcodecsPlay',
                        value: function () {
                          this.triggerPlay(),
                            this._callbacks && this._callbacks.triggerWebcodecsPlay();
                        },
                      },
                      {
                        key: 'setFramePause',
                        value: function () {
                          this._callbacks &&
                            this._callbacks.setFramePause &&
                            this._callbacks.setFramePause();
                        },
                      },
                      {
                        key: 'setFrameRusume',
                        value: function () {
                          this._callbacks &&
                            this._callbacks.setFrameRusume &&
                            this._callbacks.setFrameRusume();
                        },
                      },
                      {
                        key: 'renderFpsPause',
                        value: function () {
                          this._callbacks &&
                            this._callbacks.renderFpsPause &&
                            this._callbacks.renderFpsPause();
                        },
                      },
                      {
                        key: 'getVideoStatData',
                        value: function (e) {
                          1 == Number(localStorage._printVideoRenderStat) &&
                            Br.logger.log('VideoRender.getVideoStatData', e);
                        },
                      },
                      {
                        key: 'onWorkerInterval',
                        value: function (e) {
                          this._audioRender.onCheckFastTimer(),
                            this._callbacks && this._callbacks.onWorkerInterval(e),
                            this._checkLogCfg(e);
                        },
                      },
                      {
                        key: '_checkLogCfg',
                        value: function (e) {
                          if (0 === this._logCfgCheckTs || e - this._logCfgCheckTs > 1e3) {
                            this._logCfgCheckTs = e;
                            var t = {
                                printTodecodeVideo: 1 == localStorage._printTodecodeVideo,
                                printToDecodeAudio: 1 == localStorage._printToDecodeAudio,
                                printDecodedVideo: 1 == localStorage._printDecodedVideo,
                                printDecodedAudio: 1 == localStorage._printDecodedAudio,
                                printTorenderVideo: 1 == localStorage._printTorenderVideo,
                                printTorenderAudio: 1 == localStorage._printTorenderAudio,
                                printAppendVideo: 1 == localStorage._printAppendVideo,
                                printAppendAudio: 1 == localStorage._printAppendAudio,
                                printVideoDecodeFast: 1 == localStorage._printVideoDecodeFast,
                                printRenderSkipFrame: 1 == localStorage._printRenderSkipFrame,
                              },
                              i = !1;
                            for (var s in t)
                              if (this._logCfg[s] !== t[s]) {
                                i = !0;
                                break;
                              }
                            (this._logCfg = t), i && this._workerHolder.postLogCfg(t);
                          }
                        },
                      },
                      {
                        key: 'onWebcodecsError',
                        value: function (e, t) {
                          Br.logger.log('WebcodecsPlayer.onWebcodecsError type='.concat(e), t),
                            this._callbacks && this._callbacks.onWebcodecsError(e, t);
                        },
                      },
                      {
                        key: 'containerResize',
                        value: function (e) {
                          this._videoRender.containerResize(e);
                        },
                      },
                      {
                        key: 'setEnableDiscard',
                        value: function (e) {
                          this._workerHolder.postEnableDiscardVideo({ enableDiscard: e });
                        },
                      },
                      {
                        key: 'updateCurBitrate',
                        value: function (e) {
                          this._workerHolder.postUpdateCurBitrate({ curBitrate: e });
                        },
                      },
                      {
                        key: 'setJitter',
                        value: function () {
                          var e =
                              arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3e3,
                            t =
                              arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3,
                            i =
                              arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5e3,
                            s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [],
                            r = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 0,
                            a = arguments.length > 5 ? arguments[5] : void 0;
                          this._workerHolder.postSetJitter({
                            bufLen: e,
                            bufMin: t,
                            bufMax: i,
                            jumpBufferCfg: s,
                            shieldAudioCfgBufLen: r,
                            isRemuxBuf: 1 === a,
                          });
                        },
                      },
                      {
                        key: 'updateAVCConfig',
                        value: function (e) {
                          var t = e.width,
                            i = e.height;
                          Br.logger.log(
                            'WebcodecsPlayer.updateAVCConfig width='
                              .concat(t, ' height=')
                              .concat(i),
                          ),
                            this._isRenderStart ||
                              (this._videoRender.start(t, i, this.videoElement),
                              this._audioRender.start(),
                              (this._isRenderStart = !0)),
                            this._workerHolder.postAvcConfig(e);
                        },
                      },
                      {
                        key: 'initSegmentSuc',
                        value: function (e) {
                          this._workerHolder.postAv1InitSeg(e);
                        },
                      },
                      {
                        key: 'updateAVCPPS',
                        value: function (e, t) {
                          this._workerHolder.postAVCPPS({ data: e, timestamp: t });
                        },
                      },
                      {
                        key: 'updateAVCSPS',
                        value: function (e, t) {
                          this._workerHolder.postAVCSPS({ data: e, timestamp: t });
                        },
                      },
                      {
                        key: 'updateAVCVPS',
                        value: function (e, t) {
                          this._workerHolder.postAVCVPS({ data: e, timestamp: t });
                        },
                      },
                      {
                        key: 'appendVideoSample',
                        value: function (e) {
                          var t = Math.floor(e.ts),
                            i = e.key,
                            s = Math.floor(e.cts),
                            r = e.units,
                            a = 0,
                            n = 0,
                            o = 0;
                          r.map(function (e) {
                            (n += e.data.byteLength), o++;
                          });
                          var h = new Uint8Array(n + 4 * o),
                            u = new DataView(h.buffer);
                          u.setUint32(0, h.byteLength);
                          var d = !1,
                            c = 0;
                          r.map(function (e, t) {
                            var i = e,
                              s = i.data.byteLength;
                            (c = i.naluType),
                              (d = i.discardAllow),
                              u.setUint32(a, s),
                              (a += 4),
                              h.set(i.data, a),
                              (a += s);
                          });
                          var l = new EncodedVideoChunk({
                              type: i ? 'key' : 'delta',
                              timestamp: t,
                              duration: 3e3,
                              data: u.buffer,
                            }),
                            p = new Hr(Hr.VIDEO, t, l, d, i, s, c, e);
                          1 !== Number(localStorage._dropVideoUnit) &&
                            this._workerHolder.postVideoSamples({ videoSamples: [p] });
                        },
                      },
                      {
                        key: 'appendAv1VideoSample',
                        value: function (e) {
                          var t = Math.floor(e.ts),
                            i = e.key,
                            s = new EncodedVideoChunk({
                              type: i ? 'key' : 'delta',
                              timestamp: t,
                              duration: 3e3,
                              data: e.data,
                            }),
                            r = new Hr(Hr.VIDEO, t, s, !1, i, 0, void 0, e);
                          1 !== Number(localStorage._dropVideoUnit) &&
                            this._workerHolder.postVideoSamples({ videoSamples: [r] });
                        },
                      },
                      {
                        key: 'updateAudioConfig',
                        value: function (e) {
                          Br.logger.log(
                            'WebcodecsPlayer.updateAudioConfig '.concat(JSON.stringify(e)),
                          );
                          var t = e.codec,
                            i = e.audioSampleRate,
                            s = e.audioChannelCount,
                            r = e.timeStamp;
                          this._audioRender &&
                            (this._audioRender.initAudio(i, s),
                            this._workerHolder.postAudioConfig({
                              codec: t,
                              sampleRate: i,
                              numberOfChannels: s,
                              timestamp: r,
                            }));
                        },
                      },
                      {
                        key: 'appendAudioSample',
                        value: function (e) {
                          var t = e.unit,
                            i = e.ts,
                            s = new Uint8Array(t.byteLength + 4);
                          new DataView(s.buffer).setUint32(0, t.byteLength), s.set(t, 4);
                          var r = new EncodedAudioChunk({
                              type: 'key',
                              timestamp: 0,
                              duration: 3e3,
                              data: t,
                            }),
                            a = new Hr(Hr.AUIDO, i, r);
                          1 == e.empty && a.setIsEmptyAudioFrame(!0),
                            this._workerHolder.postAudioSamples({ audioSamples: [a] });
                        },
                      },
                      {
                        key: 'onFastOver',
                        value: function () {
                          this._workerHolder.postFastOver();
                        },
                      },
                      {
                        key: 'turnToWebcodecsSoft',
                        value: function () {
                          this._callbacks && this._callbacks.turnToWebcodecsSoft();
                        },
                      },
                      {
                        key: 'setUseSoftAcceleration',
                        value: function () {
                          this._workerHolder.postSetUseSoftAcceleration();
                        },
                      },
                      {
                        key: 'updateSoftAcceleration',
                        value: function () {
                          this._workerHolder.postUpdateSoftAcceleration();
                        },
                      },
                      {
                        key: 'onWaitKeyFrame',
                        value: function (e) {
                          this._callbacks && this._callbacks.onWaitKeyFrame(e);
                        },
                      },
                      {
                        key: 'storeMainShieldAudio',
                        value: function (e) {
                          this._sharedArrayBufferHolder.storeMainShieldAudio(e);
                        },
                      },
                      {
                        key: 'storeFrameBuffer',
                        value: function (e) {
                          this._sharedArrayBufferHolder.storeFrameBuffer(e);
                        },
                      },
                      {
                        key: 'storeRecvVideoTs',
                        value: function (e) {
                          this._sharedArrayBufferHolder.storeRecvVideoTs(e);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          this._audioRender && this._audioRender.setMuted(e);
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (e) {
                          this._workerHolder.setEnhance({ data: e });
                        },
                      },
                      {
                        key: 'setSegmenttion',
                        value: function (e) {
                          this._workerHolder.setSegmenttion({ data: e });
                        },
                      },
                      {
                        key: 'onVideoEnhanceError',
                        value: function (e) {
                          this._callbacks &&
                            this._callbacks.onVideoEnhanceError &&
                            this._callbacks.onVideoEnhanceError(e);
                        },
                      },
                      {
                        key: 'onVideoEnhanceSuccess',
                        value: function () {
                          this._callbacks &&
                            this._callbacks.onVideoEnhanceSuccess &&
                            this._callbacks.onVideoEnhanceSuccess();
                        },
                      },
                      {
                        key: 'onRevFastOver',
                        value: function () {
                          this._workerHolder.onRevFastOver();
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e, t) {
                          this._workerHolder.seek({ seekTime: e, initDts: t }),
                            this._audioRender && this._audioRender.seek(e);
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function (e) {
                          Br.logger.log('WebcodecsPlayer.onVideoSeek seekTime='.concat(e)),
                            this._audioRender && this._audioRender.onVideoSeek(e),
                            this._callbacks &&
                              this._callbacks.onVideoSeekBind &&
                              this._callbacks.onVideoSeekBind(e);
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          this._audioRender &&
                            this._audioRender.setPlaybackRate &&
                            this._audioRender.setPlaybackRate(e),
                            this._videoRender &&
                              this._videoRender.setPlaybackRate &&
                              this._videoRender.setPlaybackRate(e);
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          (this._callbacks = null),
                            this._worker &&
                              (this._workerHolder.postClose(),
                              this._worker.terminate(),
                              (this._worker = null)),
                            this._audioRender &&
                              (this._audioRender.close(), (this._audioRender = null)),
                            this._videoRender &&
                              (this._videoRender.close(), (this._videoRender = null));
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ta = {
                  setLogLevel: function (e) {
                    Fr.setLevel(e);
                  },
                  init: function (e) {
                    Br.init(e);
                  },
                  createIns: function (e, t) {
                    return new ea(e, t);
                  },
                  WebCodecsErrType: Ur.d,
                  MainSharedBufferType: Ur.a,
                },
                ia = 0,
                sa = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e) {
                    var r,
                      a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    Object(s.a)(this, i),
                      ((r = t.call(this, e, a, B.a.PLAYER_CORE_TYPE.WEBCODECS))._id = ++ia);
                    var n = a.h265Proxy;
                    r.h265Proxy = n;
                    var o = a.videoType,
                      h = void 0 === o ? 'flv' : o,
                      u = (a.videoElement, a.ignoreSei),
                      d = void 0 !== u && u,
                      c = a.closeFetch,
                      l = void 0 !== c && c;
                    (r.lowlatencyCfg = a.lowlatencyCfg || {
                      lowlatencyBuf: -1,
                      lowlatencyMin: -1,
                      lowlatencyMax: -1,
                      lowlatencyJit: -1,
                    }),
                      (r.lowlatency = -1 !== r.lowlatencyCfg.lowlatencyBuf),
                      (r.pushAvcDts = 0),
                      ta.init({ logger: p.a, TimeUtil: D.a });
                    var f = {};
                    return (
                      r.handler &&
                        r.handler.eventEmitter &&
                        r.handler.eventEmitter.videoEnhance &&
                        (f = {
                          isUseEnhance: r.handler.eventEmitter.isUseEnhance,
                          modelRes: r.handler.eventEmitter.videoEnhance.getModelRes(),
                          h5Root: r.handler.eventEmitter.videoEnhance.getH5Root(),
                        }),
                      (r._mediaWebcodecs = ta.createIns(
                        {
                          lowlatencyCfg: r.lowlatencyCfg,
                          webcodecCfg: I.a.webCodecCfg,
                          aiEnhanceCfg: f,
                          dtsJumpOpen: I.a.dtsJumpOpen,
                          dtsJumpThreshold: I.a.dtsJumpThreshold,
                          isLive: r.isLive,
                          videoElement: r.videoElement,
                        },
                        {
                          turnToWebcodecsSoft: r.turnToWebcodecsSoft.bind(Object(fe.a)(r)),
                          onPauseByBrowser: r.onPauseByBrowser.bind(Object(fe.a)(r)),
                          setUseSoftAcceleration: r.setUseSoftAcceleration.bind(Object(fe.a)(r)),
                          onWebcodecsError: r.onWebcodecsError.bind(Object(fe.a)(r)),
                          triggerWebcodecsPlay: r.triggerWebcodecsPlay.bind(Object(fe.a)(r)),
                          triggerPlay: r.triggerPlay.bind(Object(fe.a)(r)),
                          onWorkerInterval: r.onWorkerInterval.bind(Object(fe.a)(r)),
                          setFramePause: r.setFramePause.bind(Object(fe.a)(r)),
                          setFrameRusume: r.setFrameRusume.bind(Object(fe.a)(r)),
                          renderFpsPause: r.renderFpsPause.bind(Object(fe.a)(r)),
                          onVideoEnhanceError: r.onVideoEnhanceError.bind(Object(fe.a)(r)),
                          onVideoEnhanceSuccess: r.onVideoEnhanceSuccess.bind(Object(fe.a)(r)),
                          onVideoSeekBind: r.onVideoSeek.bind(Object(fe.a)(r)),
                          onVideoPlay: r.onVideoPlay.bind(Object(fe.a)(r)),
                          onVideoPause: r.onVideoPause.bind(Object(fe.a)(r)),
                        },
                      )),
                      (r.toDecodeVideoFrameNums = 0),
                      (r.decodedVideoFrameNums = 0),
                      (r.decodeNums = 0),
                      (r.destroyed = !1),
                      (r.count = 0),
                      (r.width = 1280),
                      (r.height = 720),
                      (r.playbackrateChangeAccess = !0),
                      (r.mediaDelay = null),
                      (r.seiAnchorDelay = -1),
                      (r.pushVideoStartRenderTime = 0),
                      (r.offsetDts = 0),
                      (r.curVideoDts = 0),
                      (r.curAudioDts = 0),
                      (r.playing = !1),
                      (r.pause500checked = !1),
                      (r.lastFrameTs = 0),
                      (r.lastVideoDts = 0),
                      (r.lastAudioDts = 0),
                      (r.videoWebcodecsPauseTs = 0),
                      (r.audioWebcodecsPauseTs = 0),
                      (r.isVideoWebCodecsPaused = !1),
                      (r.isAudioWebCodecsPaused = !1),
                      'ts' === h
                        ? ((r.parser = new kt(Object(fe.a)(r), r.remuxer)),
                          (r.parser.ignoreSei = d),
                          (r.parser.closeFetch = l))
                        : ((r.parser = new _t(Object(fe.a)(r), r.remuxer, 1)),
                          (r.parser2 = new _t(Object(fe.a)(r), r.remuxer, 2))),
                      r.ctrlBuffer.setBuffered(r.buffered),
                      (r.pauseHanlder = new Pr(Object(fe.a)(r), {
                        pauseFunc: r._playPause.bind(Object(fe.a)(r)),
                        resumeFunc: r._playResume.bind(Object(fe.a)(r)),
                      })),
                      (r.pauseWorkerHanlder = new Ar(Object(fe.a)(r), {
                        pauseFunc: r._playWorkerPause.bind(Object(fe.a)(r)),
                        resumeFunc: r._playWorkerResume.bind(Object(fe.a)(r)),
                      })),
                      (r.webCodecsStat = new Ir(Object(fe.a)(r))),
                      n && n.initRender && n.initRender(Object(fe.a)(r)),
                      (r.isRenderStart = !1),
                      (r.onVisibilityChangedBind = r.onVisibilitychange.bind(Object(fe.a)(r))),
                      r.addEvents(),
                      (r.checkQuickTime = 0),
                      (r.firstGetCurrentTime = 0),
                      (r.firstPerformentTime = 0),
                      (r.lastToDecodeAudioTs = 0),
                      (r.lastToDecodeVideoTs = 0),
                      (r.startAudioFastTs = 0),
                      (r.startVideoFastTs = 0),
                      (r.quickTime = D.a.now()),
                      (r.userPaused = !1),
                      (r.onVideoErrorBind = r.onVideoError.bind(Object(fe.a)(r))),
                      (r.onVideoPauseBind = r.onVideoPause.bind(Object(fe.a)(r))),
                      (r.onVideoPlayBind = r.onVideoPlay.bind(Object(fe.a)(r))),
                      (r.onVideoPlayingBind = r.onVideoPlaying.bind(Object(fe.a)(r))),
                      (r.onVideoResizeBind = r.onVideoResize.bind(Object(fe.a)(r))),
                      (r.isWebcodecsError = !1),
                      (r.lastIFrameTs = 0),
                      (r.audioBrowserPaused = !1),
                      (r.isBrowserCloseHardAcc = !1),
                      (r.isAudioMuted = !1),
                      (r.PES_TIMESCALE = 9e4),
                      (r._initPTS = void 0),
                      (r._initDTS = void 0),
                      (r.seekTime = 0),
                      (r.isSeek = !1),
                      (r._lastVideoTs = -1e4),
                      (r._lastAudioTs = -1e4),
                      (r.audioSampleDuration = 1024e3 / 44100),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'appendTs',
                        value: function (e) {
                          this.parser.parseTs(e);
                        },
                      },
                      {
                        key: 'addEvents',
                        value: function () {
                          this.handler &&
                            this.handler.eventEmitter &&
                            this.handler.eventEmitter.on(
                              o.VISIBILITY_CHANGE,
                              this.onVisibilityChangedBind,
                            );
                        },
                      },
                      {
                        key: 'delEvents',
                        value: function () {
                          this.handler &&
                            this.handler.eventEmitter &&
                            this.handler.eventEmitter.off(
                              o.VISIBILITY_CHANGE,
                              this.onVisibilityChangedBind,
                            );
                        },
                      },
                      {
                        key: 'initTs',
                        value: function (e, t, i) {
                          if (null == this._initPTS) {
                            var s = e.samples,
                              r = t.samples,
                              a = s.length,
                              n = r.length,
                              o = this.PES_TIMESCALE;
                            0 === n
                              ? ((this._initPTS = s[0].pts - o * i),
                                (this._initDTS = s[0].dts - o * i))
                              : 0 === a
                              ? ((this._initPTS = r[0].pts - o * i),
                                (this._initDTS = r[0].dts - o * i))
                              : ((this._initPTS = Math.min(r[0].pts, s[0].pts) - o * i),
                                (this._initDTS = Math.min(r[0].dts, s[0].dts) - o * i)),
                              p.a.log(
                                'WebCodecsPlayer initDTS/initPTS=['
                                  .concat(this._initDTS, ', ')
                                  .concat(this._initPTS, ']'),
                              ),
                              this.isSeek && this.realSeek(this.seekTime);
                          }
                        },
                      },
                      {
                        key: 'getInitDts',
                        value: function () {
                          return this.isLive
                            ? Object(me.a)(Object(_e.a)(i.prototype), 'getInitDts', this).call(this)
                            : this._initDTS / 90;
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          var e = this.getVideoPts() - this.getInitDts();
                          return Number.isNaN(e) ? 0 : e;
                        },
                      },
                      {
                        key: 'getCurrentAudioDts',
                        value: function () {
                          return this._mediaWebcodecs.getCurrentAudioDts();
                        },
                      },
                      {
                        key: 'setMuffledVolume',
                        value: function (e) {
                          this._mediaWebcodecs.setMuffledVolume(e);
                        },
                      },
                      {
                        key: 'onWorkerInterval',
                        value: function (e) {
                          this.destroyed ||
                            (e - this.quickTime >= 1e3 &&
                              ((this.quickTime = e), this.webCodecsStat.onCheckTimer(e)),
                            (0 == this.checkQuickTime || e - this.checkQuickTime >= 2e4) &&
                              ((this.checkQuickTime = e),
                              p.a.log(
                                'WebCodecsPlayer('.concat(
                                  this._id,
                                  ').onCheckAudioQuickTimer aduio currentTime',
                                ),
                                this.getCurrentAudioDts(),
                              )));
                        },
                      },
                      {
                        key: 'setPlayMinBuffer',
                        value: function (e) {
                          this._mediaWebcodecs.setPlayMinBuffer(e);
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this._mediaWebcodecs.getBufferLen();
                        },
                      },
                      {
                        key: 'getCurrentDts',
                        value: function () {
                          return this.getVideoPts();
                        },
                      },
                      {
                        key: 'getCurrentRealTime',
                        value: function () {
                          return this.getCurrentDts();
                        },
                      },
                      {
                        key: 'getCorrentCurrentDts',
                        value: function () {
                          return this.isPureAudio && this.parser.timelineAudio
                            ? this.parser.timelineAudio.getCorrentDtsByCurrentTime(
                                this.getCurrentTime(),
                              )
                            : this.parser.timelineVideo
                            ? this.parser.timelineVideo.getCorrentDtsByCurrentTime(
                                this.getCurrentTime(),
                              )
                            : this.getCurrentTime() + this.getInitDts();
                        },
                      },
                      {
                        key: 'getVideoDecodeDelaySmooth',
                        value: function () {
                          return this._mediaWebcodecs.getDecodedVideoDelaySmooth();
                        },
                      },
                      {
                        key: 'triggerPlay',
                        value: function () {
                          if (!this.playing) {
                            var e = this._mediaWebcodecs.getVideoElement();
                            (this.playing = !0),
                              this.handler.onPlayVideo(
                                e,
                                this.widthCfg,
                                this.heightCfg,
                                !1,
                                null,
                                0,
                                this.getCodecType(),
                              ),
                              (this.isPlayVideo = !0);
                          }
                        },
                      },
                      {
                        key: 'triggerWebcodecsPlay',
                        value: function () {
                          if (
                            (this.handler.setWebCodecsSuccess(), this.isLive && I.a.renderStat[0])
                          ) {
                            var e = this.getVideoPts();
                            this.videoPlayConsuming.addRenderFrameData(e, D.a.now()),
                              this.renderFps.addRender();
                          }
                        },
                      },
                      {
                        key: 'setFramePause',
                        value: function () {
                          this.handler.setFramePause();
                        },
                      },
                      {
                        key: 'setFrameRusume',
                        value: function () {
                          this.handler.setFrameRusume();
                        },
                      },
                      {
                        key: 'renderFpsPause',
                        value: function () {
                          1 == I.a.mobVBlockCfg && this.handler.renderFpsPause(!0);
                        },
                      },
                      {
                        key: 'onFastOver',
                        value: function () {
                          this._mediaWebcodecs.onFastOver();
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e, t) {
                          if (this.playing) {
                            if (0 != this.shildAudioStartTs) {
                              var s = this.getCurrentAudioDts();
                              this.isAudioMuted &&
                                s >= this.shildAudioStartTs &&
                                (p.a.log('WebCodecsPlayer.shieldAudioMute recover'),
                                this.setMuted(!1),
                                (this.shildAudioStartTs = 0));
                            }
                            if (
                              (Object(me.a)(Object(_e.a)(i.prototype), 'onCheckTimer', this).call(
                                this,
                                e,
                                t,
                              ),
                              this.parser.fps && this.parser.fps.getNoReferFps)
                            ) {
                              var r = this.parser.fps.getNoReferFps();
                              this._mediaWebcodecs.updateVideoFPS(this.metadata.recvVideoFps, r);
                            }
                          } else
                            this.parser &&
                              this.parser.printPlayFrameInfo &&
                              this.parser.printPlayFrameInfo();
                        },
                      },
                      {
                        key: 'getWebCodecsStats',
                        value: function () {
                          return this.webCodecsStat.getStats();
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function (e, t) {
                          if (
                            (Object(me.a)(Object(_e.a)(i.prototype), 'onCheckFastTimer', this).call(
                              this,
                              e,
                              t,
                            ),
                            this.playing && !this.userPaused)
                          ) {
                            if (
                              (this.pauseHanlder.check(e),
                              !this.pause500checked &&
                                this.pauseHanlder.paused &&
                                e - this.pauseHanlder.pausedTs > 500)
                            ) {
                              this.pause500checked = !0;
                              var s = this.getBufferLen();
                              p.a.log(
                                'WebCodecsPlayer('
                                  .concat(this._id, ').onCheckFastTimer: play paused buf=')
                                  .concat(s),
                              );
                            }
                            this.isLive && this.checkPause5Sec(e);
                          }
                        },
                      },
                      {
                        key: 'onCheckFastWorkerTimer',
                        value: function (e) {
                          Object(me.a)(
                            Object(_e.a)(i.prototype),
                            'onCheckFastWorkerTimer',
                            this,
                          ).call(this, e),
                            this.playing &&
                              !this.userPaused &&
                              (this.pauseWorkerHanlder.check(e),
                              this._mediaWebcodecs.storeMainShieldAudio(this.isShieldAudio ? 1 : 0),
                              this._mediaWebcodecs.storeFrameBuffer(this.getFrameBufferLen()));
                        },
                      },
                      {
                        key: 'checkPause5Sec',
                        value: function (e) {
                          var t = this.getCurrentDts(),
                            i = this.getCurrentAudioDts(),
                            s = !1,
                            r = !1;
                          0 != t && 0 != this.lastVideoDts && t == this.lastVideoDts
                            ? this.isVideoWebCodecsPaused ||
                              ((this.videoWebcodecsPauseTs = e), (this.isVideoWebCodecsPaused = !0))
                            : ((this.videoWebcodecsPauseTs = 0),
                              (this.isVideoWebCodecsPaused = !1)),
                            0 != i && 0 != this.lastAudioDts && i == this.lastAudioDts
                              ? this.isAudioWebCodecsPaused ||
                                ((this.audioWebcodecsPauseTs = e),
                                (this.isAudioWebCodecsPaused = !0))
                              : ((this.audioWebcodecsPauseTs = 0),
                                (this.isAudioWebCodecsPaused = !1)),
                            0 != this.videoWebcodecsPauseTs &&
                              e - this.videoWebcodecsPauseTs >= 5e3 &&
                              (s = !0),
                            0 != this.audioWebcodecsPauseTs &&
                              e - this.audioWebcodecsPauseTs >= 5e3 &&
                              (r = !0),
                            s
                              ? p.a.warn('WebCodecsPlayer.onCheckTimer video paused 5 sec.')
                              : r && p.a.warn('WebCodecsPlayer.onCheckTimer audio paused 5 sec.'),
                            (s || r) && (this._onErrorEvent(3), this._onPlayerError(!0)),
                            (this.lastVideoDts = t),
                            (this.lastAudioDts = i);
                        },
                      },
                      {
                        key: 'onWebcodecsError',
                        value: function (e, t) {
                          if (!this.isWebcodecsError) {
                            (this.isWebcodecsError = !0),
                              p.a.log('WebCodecsPlayer.onWebcodecsError, type='.concat(e));
                            var i = [e];
                            t && i.push(t),
                              this.handler &&
                                this.handler.onActWebCodecs &&
                                this.handler.onActWebCodecs([22], i),
                              this.turnToMse(e);
                          }
                        },
                      },
                      {
                        key: 'turnToMse',
                        value: function (e) {
                          if (this.handler && this.handler._hyPlayer) {
                            if (e === ta.WebCodecsErrType.VIDEODECODEERROR)
                              this.autoReport(),
                                this.handler._hyPlayer.webcodecsErrCount++,
                                this.handler.decoderDecodeError();
                            else if (e === ta.WebCodecsErrType.AUDIODECODEERROR)
                              this.autoReport(), this.handler._hyPlayer.webcodecsErrCount++;
                            else if (e === ta.WebCodecsErrType.VIDEOFAST)
                              this.handler._hyPlayer.webcodecsErrCount++;
                            else if (e === ta.WebCodecsErrType.AUDIOFAST)
                              this.handler._hyPlayer.webcodecsErrCount++;
                            else {
                              if (e !== ta.WebCodecsErrType.WORKERERROR)
                                return (
                                  this.handler._hyPlayer &&
                                    (this.handler._hyPlayer.turnMseType = e),
                                  e === ta.WebCodecsErrType.DECODE_COST
                                    ? (localStorage.nextWcsTime = Date.now() + 2592e5)
                                    : e === ta.WebCodecsErrType.DECODE_DTS &&
                                      (localStorage.nextWcsTime = Number.MAX_SAFE_INTEGER),
                                  void this.handler.turnToMse()
                                );
                              this.handler._hyPlayer.webcodecsErrCount++;
                            }
                            this.handler._hyPlayer && this.handler._hyPlayer.webcodecsErrCount >= 3
                              ? ((this.handler._hyPlayer.turnMseType =
                                  ta.WebCodecsErrType.RETRY_MAX_TIMES),
                                this.handler.turnToMse())
                              : this.handler.webcodecsRetry();
                          }
                        },
                      },
                      {
                        key: 'initAv1M4sTs',
                        value: function (e, t, i) {
                          if (null == this._initPTS) {
                            var s = this.PES_TIMESCALE;
                            (this._initPTS = Math.min(e.pts, t.pts) - s * i),
                              (this._initDTS = Math.min(e.dts, t.dts) - s * i),
                              p.a.log(
                                'WebCodecsPlayer.initAv1M4sTs initDTS/initPTS=['
                                  .concat(this._initDTS, ', ')
                                  .concat(this._initPTS, ']'),
                              ),
                              this.isSeek && this.realSeek(this.seekTime);
                          }
                        },
                      },
                      {
                        key: 'setVodAv1',
                        value: function () {
                          this._mediaWebcodecs &&
                            this._mediaWebcodecs.setVodAv1 &&
                            this._mediaWebcodecs.setVodAv1();
                        },
                      },
                      {
                        key: 'remuxAv1',
                        value: function (e, t) {
                          var i = this,
                            s = e.sidxAudio.time_scale,
                            r = e.moof.trafAudio.tfdt.base_media_decode_time,
                            a = e.moof.trafAudio.tfhd.default_sample_duration,
                            n = e.moof.trafAudio.trun.samples,
                            o = (1e3 * r) / s,
                            h = e.sidxVideo.time_scale,
                            u = e.moof.trafVideo.tfdt.base_media_decode_time,
                            d = e.moof.trafVideo.tfhd.default_sample_duration,
                            c = e.moof.trafVideo.trun.samples,
                            l = (1e3 * u) / h,
                            f = 1024e3 / s;
                          f < this.audioSampleDuration - 1 && (f = this.audioSampleDuration);
                          var m = (1e3 * d) / h;
                          (this.audioSampleNums = 0),
                            (this.videoSampleNums = 0),
                            (this.audioNewSamples = []),
                            (this.videoNewSamples = []);
                          var _ = (1e3 * a) / s;
                          _ < 20 && p.a.log('WebCodecsPlayer.remuxAv1 audio sampleDuration', _),
                            n.map(function (e, t) {
                              if (e.units) {
                                var s = Math.floor(o + t * f),
                                  r = 90 * s,
                                  a = {
                                    type: 'aac',
                                    empty: 0,
                                    sampleDuration: f,
                                    pts: r,
                                    dts: r,
                                    ts: s,
                                    unit: e.units,
                                  };
                                i.audioNewSamples.push(a);
                              }
                            }),
                            c.map(function (e, t) {
                              if (e.units) {
                                i.videoSampleNums++;
                                var s = Math.floor(l + t * m),
                                  r = 90 * s,
                                  a = { pts: r, dts: r, ts: s, cts: 0, key: 0 == t, data: e.units };
                                i.videoNewSamples.push(a);
                              }
                            }),
                            this.audioNewSamples.length > 0 &&
                              this.videoNewSamples.length > 0 &&
                              this.initAv1M4sTs(
                                this.audioNewSamples[0],
                                this.videoNewSamples[0],
                                t.timeOffset,
                              ),
                            this.audioNewSamples.forEach(function (e) {
                              i._appendAudioSample(e);
                            }),
                            this.videoNewSamples.forEach(function (e) {
                              i._appendAv1VideoSample(e);
                            });
                        },
                      },
                      {
                        key: 'updateAVCConfig',
                        value: function (e) {
                          this._mediaWebcodecs.updateAVCConfig(e);
                        },
                      },
                      {
                        key: 'updateAudioConfig',
                        value: function (e, t, s) {
                          Object(me.a)(Object(_e.a)(i.prototype), 'updateAudioConfig', this).call(
                            this,
                            e,
                            t,
                            s,
                          ),
                            this._mediaWebcodecs && this._mediaWebcodecs.updateAudioConfig(e);
                        },
                      },
                      {
                        key: 'updateM4sAudioConfig',
                        value: function (e) {
                          this._mediaWebcodecs && this._mediaWebcodecs.updateAudioConfig(e);
                        },
                      },
                      {
                        key: 'updateAVCPPS',
                        value: function (e, t) {
                          this._mediaWebcodecs.updateAVCPPS(e, t);
                        },
                      },
                      {
                        key: 'updateAVCSPS',
                        value: function (e, t) {
                          this._mediaWebcodecs.updateAVCSPS(e, t);
                        },
                      },
                      {
                        key: 'updateAVCVPS',
                        value: function (e, t) {
                          this._mediaWebcodecs.updateAVCVPS(e, t);
                        },
                      },
                      {
                        key: 'pushAvcSample',
                        value: function (e) {
                          this._mediaWebcodecs &&
                            this._mediaWebcodecs.storeRecvVideoTs &&
                            this._mediaWebcodecs.storeRecvVideoTs(e.ts),
                            this.lowlatency
                              ? ((this.pushAvcDts = e.ts), this._appendVideoSample(e))
                              : Object(me.a)(Object(_e.a)(i.prototype), 'pushAvcSample', this).call(
                                  this,
                                  e,
                                );
                        },
                      },
                      {
                        key: 'pushAacSample',
                        value: function (e, t) {
                          this.lowlatency
                            ? this._appendAudioSample(e)
                            : Object(me.a)(Object(_e.a)(i.prototype), 'pushAacSample', this).call(
                                this,
                                e,
                                t,
                              );
                        },
                      },
                      {
                        key: 'appendAvcTrack',
                        value: function (e) {
                          var t = this;
                          e.samples.map(function (e) {
                            e && t._appendVideoSample(e);
                          }),
                            (e.samples.length = 0);
                        },
                      },
                      {
                        key: '_appendVideoSample',
                        value: function (e) {
                          if (this.isLive) {
                            var t = D.a.now();
                            this.videoPlayConsuming.pushRemuxedVideoFrameData(t),
                              this.videoPlayConsuming.addRemuxFrameData(e.ts, e.ts + e.cts, t);
                          }
                          this._mediaWebcodecs.appendVideoSample(e);
                        },
                      },
                      {
                        key: '_appendAv1VideoSample',
                        value: function (e) {
                          if (-1e4 != this._lastVideoTs) {
                            var t = e.ts - this._lastVideoTs;
                            t >= 200 &&
                              p.a.log(
                                'WebCodecsPlayer._appendAv1VideoSample ts delta=',
                                t,
                                e.ts,
                                this._lastVideoTs,
                              );
                          }
                          if (this.isLive) {
                            var i = D.a.now();
                            this.videoPlayConsuming.pushRemuxedVideoFrameData(i),
                              this.videoPlayConsuming.addRemuxFrameData(e.ts, e.ts + e.cts, i);
                          }
                          (this._lastVideoTs = e.ts), this._mediaWebcodecs.appendAv1VideoSample(e);
                        },
                      },
                      {
                        key: '_initSegmentSuc',
                        value: function (e) {
                          this._mediaWebcodecs && this._mediaWebcodecs.initSegmentSuc(e);
                        },
                      },
                      {
                        key: 'appendAacSample',
                        value: function (e) {
                          var t = this;
                          e.samples.map(function (e) {
                            e && t._appendAudioSample(e);
                          }),
                            (e.samples.length = 0);
                        },
                      },
                      {
                        key: '_appendAudioSample',
                        value: function (e) {
                          if (e && e.ts) {
                            if (-1e4 != this._lastAudioTs) {
                              var t = e.ts - this._lastAudioTs;
                              t >= 200 &&
                                p.a.log(
                                  'WebCodecsPlayer._appendAudioSample ts delta=',
                                  t,
                                  e.ts,
                                  this._lastAudioTs,
                                );
                            }
                            if (((this._lastAudioTs = e.ts), this.isLive)) {
                              var i = D.a.now();
                              this.audioPlayConsuming.addRemuxFrameData(e.ts, e.ts, i),
                                this.audioPlayConsuming.pushRemuxedVideoFrameData(i);
                            }
                            this._mediaWebcodecs.appendAudioSample(e);
                          }
                        },
                      },
                      {
                        key: 'onVisibilitychange',
                        value: function () {
                          Object(me.a)(Object(_e.a)(i.prototype), 'onVisibilitychange', this).call(
                            this,
                          ),
                            this._mediaWebcodecs.onVisibilitychange(),
                            'hidden' == document.visibilityState
                              ? (this.isBrowserHidden = !0)
                              : 'visible' == document.visibilityState &&
                                (this.isBrowserHidden = !1);
                        },
                      },
                      {
                        key: 'containerResize',
                        value: function (e) {
                          this._mediaWebcodecs.containerResize(e);
                        },
                      },
                      {
                        key: 'getVideoPts',
                        value: function () {
                          if (I.a.dtsJumpOpen) {
                            if (this.isPureAudio && this.parser.timelineAudio)
                              return this.parser.timelineAudio.getRealDtsByPts(
                                this._mediaWebcodecs.getVideoPts(),
                              );
                            if (this.parser.timelineVideo)
                              return this.parser.timelineVideo.getRealDtsByPts(
                                this._mediaWebcodecs.getVideoPts(),
                              );
                          }
                          return this._mediaWebcodecs.getVideoPts();
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          Object(me.a)(Object(_e.a)(i.prototype), 'reset', this).call(this);
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          Object(me.a)(Object(_e.a)(i.prototype), 'destroy', this).call(this),
                            this._mediaWebcodecs.destroy(),
                            (this.destroyed = !0),
                            (this.isRenderStart = !1),
                            (this.playing = !1),
                            (this.pause500checked = !1),
                            this.buffered.stop(),
                            this.parser.destroy(),
                            this.pauseStat.reset(),
                            this.pauseHanlder.reset(),
                            this.renderFps.reset(),
                            ni(this.rafId),
                            (this.startAudioFastTs = 0),
                            (this.startVideoFastTs = 0),
                            (this.userPaused = !1),
                            (this.quickTime = 0),
                            this.delEvents(),
                            (this.lastVideoDts = 0),
                            (this.lastAudioDts = 0),
                            (this.videoWebcodecsPauseTs = 0),
                            (this.audioWebcodecsPauseTs = 0),
                            (this.isVideoWebCodecsPaused = !1),
                            (this.isAudioWebCodecsPaused = !1),
                            (this.isWebcodecsError = !1),
                            (this.lastIFrameTs = 0),
                            this.webCodecsStat.destroy(),
                            (this.isBrowserCloseHardAcc = !1),
                            (this.isAudioMuted = !1);
                        },
                      },
                      {
                        key: '_playPause',
                        value: function (e) {
                          this.pauseStat.pause();
                          var t = this.getVideoPts() > 0;
                          this.handler.onPlayPause(e, t);
                        },
                      },
                      {
                        key: '_playResume',
                        value: function (e, t) {
                          this.pauseStat.resume(), (this.pause500checked = !1);
                          var i = this.getVideoPts() > 0;
                          this.handler.onPlayResume(e, i);
                        },
                      },
                      {
                        key: '_playWorkerPause',
                        value: function (e) {
                          this.handler._hyPlayer &&
                            this.handler._hyPlayer.roomRecordStat &&
                            this.handler._hyPlayer.roomRecordStat.roomNoRenderStat.pause();
                          var t = this.getVideoPts() > 0;
                          this.handler.onPlayPauseWorker && this.handler.onPlayPauseWorker(e, t);
                        },
                      },
                      {
                        key: '_playWorkerResume',
                        value: function (e, t) {
                          this.handler.eventEmitter &&
                            this.handler.eventEmitter.roomRecordStat &&
                            this.handler.eventEmitter.roomRecordStat.roomNoRenderStat.resume();
                          var i = this.getVideoPts() > 0;
                          this.handler.onPlayResumeWorker && this.handler.onPlayResumeWorker(e, i);
                        },
                      },
                      {
                        key: 'check500Pause',
                        value: function () {
                          this.handler.check500Pause && this.handler.check500Pause();
                        },
                      },
                      {
                        key: 'getDecodeFps',
                        value: function () {
                          return this._mediaWebcodecs.getDecodeFps();
                        },
                      },
                      {
                        key: 'getVideoRenderFps',
                        value: function () {
                          return this._mediaWebcodecs.getVideoRenderFps();
                        },
                      },
                      {
                        key: 'getAudioRenderFps',
                        value: function () {
                          return this._mediaWebcodecs.getAudioRenderFps();
                        },
                      },
                      {
                        key: 'getVideoThrowFps',
                        value: function () {
                          return this._mediaWebcodecs.getVideoThrowFps();
                        },
                      },
                      {
                        key: 'getDecodedBuffer',
                        value: function () {
                          return this._mediaWebcodecs.getDecodedBuffer();
                        },
                      },
                      {
                        key: 'getDiscardVideoFrames',
                        value: function () {
                          return this._mediaWebcodecs.getDiscardVideoFrames();
                        },
                      },
                      {
                        key: 'getEnhanceVideoFrames',
                        value: function () {
                          return (
                            this._mediaWebcodecs.getEnhanceVideoFrames &&
                            this._mediaWebcodecs.getEnhanceVideoFrames()
                          );
                        },
                      },
                      {
                        key: 'setJitter',
                        value: function () {
                          var e =
                              arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 3e3,
                            t =
                              arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1e3,
                            s =
                              arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 5e3;
                          Object(me.a)(Object(_e.a)(i.prototype), 'setJitter', this).call(
                            this,
                            e,
                            t,
                            s,
                          ),
                            this._mediaWebcodecs.setJitter(
                              e,
                              t,
                              s,
                              I.a.jumpBufferCfg,
                              I.a.shieldAudioCfg[1],
                              I.a.jumpBufferCfg2[0],
                            );
                        },
                      },
                      {
                        key: 'onVideoPause',
                        value: function (e) {
                          p.a.log('WebCodecsPlayer.onVideoPause'), (this.userPaused = !0);
                        },
                      },
                      {
                        key: 'onVideoPlaying',
                        value: function () {
                          if (this.handler && this.handler.updateStatus) {
                            if (this._mediaWebcodecs.isAudioSuspended()) return;
                            this.handler.updateStatus('VIDEO_PLAYING');
                          }
                        },
                      },
                      {
                        key: 'turnToWebcodecsSoft',
                        value: function () {
                          this.handler.turnToWebcodecsSoft();
                        },
                      },
                      {
                        key: 'onPauseByBrowser',
                        value: function () {
                          this.isBrowserPause ||
                            ((this.isBrowserPause = !0),
                            p.a.log('WebCodecsPlayer.onPauseByBrowser'),
                            (this.userPaused = !0),
                            this._mediaWebcodecs.onVideoPause(),
                            this.handler &&
                              (this.handler.onPauseByBrowser && this.handler.onPauseByBrowser(),
                              this.handler.updateStatus && this.handler.updateStatus(c),
                              this.handler.eventEmitter &&
                                this.handler.eventEmitter.trigger(o.BROWSER_PAUSE, {})));
                        },
                      },
                      {
                        key: 'onAudioPauseByBrowser',
                        value: function () {
                          this.audioBrowserPaused = !0;
                        },
                      },
                      {
                        key: 'onVideoPlay',
                        value: function (e) {
                          p.a.log('WebCodecsPlayer.onVideoPlay'),
                            (this.userPaused = !1),
                            (this.audioBrowserPaused = !1);
                        },
                      },
                      {
                        key: 'onVideoError',
                        value: function (e) {
                          var t = '',
                            i = this._mediaWebcodecs.getAudioError();
                          if (i) {
                            var s = i.code;
                            (t =
                              ' errCode=' +
                              s +
                              ' ' +
                              ['Unknow', '用户终止', '网络错误', '解码错误', '格式不支持'][s]),
                              (3 != s && 4 != s) ||
                                (this._onErrorEvent(3 == s ? 1 : 2), this._onPlayerError(!0));
                          }
                          p.a.warn('WebCodecsPlayer.onVideoError' + t);
                        },
                      },
                      {
                        key: '_onPlayerError',
                        value: function (e) {
                          !this.isPlayerError &&
                            this.handler &&
                            ((this.isPlayerError = !0), this.handler.onPlayerError(e));
                        },
                      },
                      {
                        key: '_onErrorEvent',
                        value: function (e) {
                          this.isErrorEvent ||
                            ((this.isErrorEvent = !0),
                            this.handler &&
                              this.handler.onErrorEvent &&
                              this.handler.onErrorEvent({ type: e }));
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          p.a.info('WebCodecsPlayer.pause'),
                            (this.userPaused = !0),
                            this._mediaWebcodecs.userPause(),
                            this.handler._hyPlayer &&
                              this.handler._hyPlayer.roomRecordStat &&
                              this.handler._hyPlayer.roomRecordStat.roomNoRenderStat.pause();
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          p.a.info('WebCodecsPlayer.play'),
                            (this.userPaused = !1),
                            this._mediaWebcodecs.userPlay();
                        },
                      },
                      {
                        key: 'setUseSoftAcceleration',
                        value: function () {
                          this._mediaWebcodecs.setUseSoftAcceleration(),
                            this.handler.setUseSoftAcceleration(!0);
                        },
                      },
                      {
                        key: 'setPauseVideoDecode',
                        value: function (e) {
                          this._mediaWebcodecs.setPauseVideoDecode(e);
                        },
                      },
                      {
                        key: 'setPauseAudioDecode',
                        value: function (e) {
                          this._mediaWebcodecs.setPauseVideoDecode(e);
                        },
                      },
                      {
                        key: 'disableHardAcc',
                        value: function () {
                          Object(me.a)(Object(_e.a)(i.prototype), 'disableHardAcc', this).call(
                            this,
                          ),
                            this.onWebcodecsError(
                              ta.WebCodecsErrType.DISABLE_HARDWARE_ACCELERATION,
                            );
                        },
                      },
                      {
                        key: 'win7PerfInsufficient',
                        value: function () {
                          this.onWebcodecsError(ta.WebCodecsErrType.WIN_PERF_INSUFFICIENT);
                        },
                      },
                      {
                        key: 'angelNullError',
                        value: function () {
                          this.onWebcodecsError(ta.WebCodecsErrType.ANGLE_NULL);
                        },
                      },
                      {
                        key: 'chromeH265RenderEmptyError',
                        value: function () {
                          this.isH265Mode &&
                            ((localStorage.isChromeH265RenderInfoEmpty = 1),
                            this.onWebcodecsError(
                              ta.WebCodecsErrType.CHROME_H265_RENDER_INFO_EMPTY,
                            ));
                        },
                      },
                      {
                        key: 'isNotSupportWebcodecsConfig',
                        value: function () {
                          this.onWebcodecsError(ta.WebCodecsErrType.IS_NOT_SUPPORT_CONFIGURE);
                        },
                      },
                      {
                        key: 'setEnableDiscard',
                        value: function (e) {
                          this._mediaWebcodecs.setEnableDiscard(e);
                        },
                      },
                      {
                        key: 'updateCurBitrate',
                        value: function (e) {
                          this._mediaWebcodecs.updateCurBitrate(e);
                        },
                      },
                      {
                        key: 'setDisableHardAcc',
                        value: function () {
                          this.isBrowserCloseHardAcc = !0;
                        },
                      },
                      {
                        key: 'autoReport',
                        value: function () {
                          g.a.name.indexOf('chrome') > -1 &&
                            this.isH265Mode &&
                            1e3 * Math.random() <= 100 &&
                            1 == I.a.isAutoWcsReport &&
                            this.handler.eventEmitter &&
                            this.handler.eventEmitter.trigger(o.P2P_REPORT);
                        },
                      },
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          this._mediaWebcodecs.setRealFps(e);
                        },
                      },
                      {
                        key: 'startMuteRender',
                        value: function (e) {
                          this._mediaWebcodecs.startMuteRender(e);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          (this.isAudioMuted = e), this._mediaWebcodecs.setMuted(e);
                        },
                      },
                      {
                        key: 'on265StartCodeError',
                        value: function () {
                          this.h265Proxy && this.h265Proxy.on265StartCodeError();
                        },
                      },
                      {
                        key: 'turnToH264',
                        value: function (e) {
                          this.h265Proxy && this.h265Proxy.stop(),
                            this.handler && this.handler.turnToH264(e);
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (e) {
                          this._mediaWebcodecs.setEnhance && this._mediaWebcodecs.setEnhance(e);
                        },
                      },
                      {
                        key: 'setSegmenttion',
                        value: function (e) {
                          this._mediaWebcodecs.setSegmenttion &&
                            this._mediaWebcodecs.setSegmenttion(e);
                        },
                      },
                      {
                        key: 'onVideoEnhanceError',
                        value: function (e) {
                          this.handler && this.handler && this.handler.onVideoEnhanceError(e);
                        },
                      },
                      {
                        key: 'onVideoEnhanceSuccess',
                        value: function () {
                          this.handler && this.handler && this.handler.onVideoEnhanceSuccess();
                        },
                      },
                      {
                        key: 'getRenderElement',
                        value: function () {
                          return this._mediaWebcodecs && this._mediaWebcodecs.getVideoElement();
                        },
                      },
                      {
                        key: 'onRevFastOver',
                        value: function () {
                          this._mediaWebcodecs.onRevFastOver();
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function (e) {
                          p.a.log('WebcodecsPlayer.onVideoSeek', e),
                            this.handler && this.handler.onVideoSeek && this.handler.onVideoSeek(e);
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          null == this._initPTS
                            ? ((this.isSeek = !0), (this.seekTime = e))
                            : this.realSeek(e);
                        },
                      },
                      {
                        key: 'realSeek',
                        value: function (e) {
                          var t = this.getInitDts();
                          p.a.log(
                            'WebcodecsPlayer.realSeek, seekTime='.concat(e, ', initDts=').concat(t),
                          ),
                            this._mediaWebcodecs &&
                              this._mediaWebcodecs.seek &&
                              this._mediaWebcodecs.seek(e, t),
                            (this.isSeek = !1);
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          p.a.log('WebcodecsPlayer.setPlaybackRate', e),
                            this._mediaWebcodecs &&
                              this._mediaWebcodecs.setPlaybackRate &&
                              this._mediaWebcodecs.setPlaybackRate(e);
                        },
                      },
                    ]),
                    i
                  );
                })($i),
                ra = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e);
                    var r = i.stat,
                      a = i.statVod,
                      n = i.tsdb,
                      o = i.videoElement,
                      h = i.h265Proxy;
                    (this.playerCoreType = i.playerCoreType),
                      (this.isSoftSolution = i.isSoftSolution),
                      (this.config = {
                        autoStartLoad: !0,
                        maxBufferLength: 30,
                        minBufferLength: 15,
                        secondBufferLength: 20,
                        bs2Delay: 3e3,
                        fragLoadingTimeOut: 5e3,
                        fragLoadingMaxRetry: o ? 3 : 1,
                        fragLoadingRetryDelay: 1e3,
                        listLoadingTimeOut: o ? 15e3 : 8e3,
                        listLoadingMaxRetry: o ? 0 : 3,
                        listLoadingRetryDelay: 1e3,
                        appendErrorMaxRetry: 200,
                        minFragBufferNum: 3,
                        autoReconnect: !0,
                        firstFragLoadTimeout: 15e3,
                      }),
                      (this.eventEmitter = t),
                      (this._hyPlayer = t),
                      (this.stat = r),
                      (this.statVod = a),
                      (this.tsdb = n),
                      (this.h265Proxy = h),
                      (this.isLive = !1),
                      (this.liveType = 0),
                      (this.url = null),
                      (this.cdnName = null),
                      (this.seekTime = 0),
                      (this.playlist = null),
                      (this.mse = null),
                      (this.m4sInitcb = this.onM4sInit.bind(this)),
                      (this.m4sInitOpenCb = this.onM4sInitOpen.bind(this)),
                      (this.onFirstBufCb = this.onFirstBuf.bind(this)),
                      (this.userPaused = !1),
                      (this.targetDuration = 0),
                      (this.isLoading = !1),
                      (this.fragStartTs = 0),
                      (this.fragOpenTs = 0),
                      (this.fragSize = 0),
                      (this.startTs = 0),
                      (this.pauseTs = 0),
                      (this.pauseCnt = 0),
                      (this.playTs = 0),
                      (this.started = !1),
                      (this.isTryAgain = !1),
                      (this.fragLoader = null),
                      (this.tryTimer = null),
                      (this.hasVideo = !1),
                      (this.playStat = new cs(this)),
                      (this.hlsSeek = new ls(this)),
                      (this.firstPlay = !0),
                      (this.firstFragLoadTs = 0),
                      (this.firstFragLoadedTs = 0),
                      (this.firstFragSize = 0),
                      (this.videoStatus = u),
                      (this.flvLoadTimeSended = !1),
                      (this.sOrigUrl = ''),
                      (this.curAppendFrag = null),
                      (this.seeking = !1),
                      (this.skipStatForSeek = !1),
                      (this.playTriggered = !1);
                    var d,
                      c,
                      l,
                      p,
                      f =
                        ((d =
                          I.a.hlsUseFetch > Math.floor(100 * Math.random()) && is.isSupported()),
                        (l = (c = B.a.HLS_LOAD_TYPE).FETCH),
                        (p = c.XHR),
                        'safari' === g.a.name && (d = !1),
                        { clz: d ? is : te, type: d ? l : p }),
                      m = f.clz,
                      _ = f.type;
                    (this._loaderClz = m),
                      (this._loaderType = _),
                      (this.videoElement = o),
                      (this.loadHlsStatus = B.a.LoadVideoTimeoutReason.HLS_DISCONNECTED),
                      (this.needReset = !1),
                      (this.resetPlayTs = 0),
                      (this.lastPlayTs = 0),
                      (this.pauseInBufferFullTimes = 0),
                      (this.sendPauseTimeout = 0),
                      (this.businessStartCost = 0),
                      (this.startTimeStamp = 0),
                      (this.loadStartTs = 0),
                      (this.anticode = new vr()),
                      (this.isSwitchSeamLessLine = !1),
                      (this.pausedByBrowser = !1),
                      (this._nextRefreshTime = Number.MAX_SAFE_INTEGER),
                      (this._pcdnFragStartTs = 0),
                      (this._cdnFragStartTs = 0),
                      (this.firstTsInfo = null),
                      (this._getPcdnDataTime = 0),
                      (this._getCdnDataTime = 0),
                      (this.forceUseCdn = !1),
                      (this.coolLoadFragment = !1),
                      (this.vodAbSwitch = !1),
                      (this.pcdnRepeatByteLen = 0),
                      (this.lastSN = -1),
                      (this.errorPcdnSN = -1),
                      (this.needStatPcdnRepeatBW = !1),
                      (this.tsFileSize = 0),
                      (this.heartTsStartTime = 0),
                      (this.heartTsEndTime = 0),
                      (this.videoLoadTimeSent = !1),
                      (this.videoLoadTime = 0),
                      (this.loadM3u8Time = 0),
                      (this.firstFragLoadTime = 0),
                      (this.firstFragLoadedTime = 0),
                      (this.firstFragParsedTime = 0),
                      (this.uiLoadTime = 0),
                      (this.businessLoadTime = 0),
                      (this.firstTsHttpCode = 0),
                      (this.avgSpeed = new ge(20)),
                      (this.exceptionStat = new Er(this)),
                      (this.realStartBind = this.realStart.bind(this)),
                      (this._clickEventBind = this._clickEvent.bind(this)),
                      (this.refreshAnticodeBind = this.refreshAnticode.bind(this)),
                      (this._sendVideoLoadTimeBind = this._sendVideoLoadTime.bind(this)),
                      (this._sendVideoLoadTimer = null),
                      this.anticode.on(vr.Events.REFRESH, this.refreshAnticodeBind),
                      (this.playerType = G.b.HLS),
                      (this.seekBeforeTime = 0),
                      (this.endTs = 0),
                      us.setHlsPlayer(this),
                      W.setHlsPlayer(this),
                      (this.vodSecHelper = new Dr()),
                      (this.codecType = G.a.H264),
                      (this.isAv1State = !1),
                      (this.stopLoadFragment = !1),
                      (this.playBackRate = 1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'selectXhrLoader',
                        value: function () {
                          (this._loaderClz = te), (this._loaderType = B.a.HLS_LOAD_TYPE.XHR);
                        },
                      },
                      {
                        key: 'selectFetchLoader',
                        value: function () {
                          (this._loaderClz = is), (this._loaderType = B.a.HLS_LOAD_TYPE.FETCH);
                        },
                      },
                      {
                        key: 'getSpeed',
                        value: function () {
                          var e = this.avgSpeed.average();
                          return e === x.b.UintMax ? 0 : e;
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          p.a.log('HlsPlayer.destroy'),
                            (this.started = !1),
                            this.removeTimer(),
                            this.tryTimer && (clearTimeout(this.tryTimer), (this.tryTimer = null)),
                            this.mse && (this.mse.destroy(), (this.mse = null)),
                            this.playlist && (this.playlist.destroy(), (this.playlist = null)),
                            this.releaseLoader(),
                            (this.isSwitchSeamLessLine = !1);
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          p.a.log('HlsPlayer.reset'),
                            this.exceptionStat.reset(),
                            this.avgSpeed.reset(),
                            this.removeTimer(),
                            (this.isLive = null),
                            (this.liveType = 0),
                            (this.url = null),
                            (this.cdnName = null),
                            (this.seekTime = 0),
                            (this.targetDuration = 0),
                            (this.isLoading = !1),
                            (this.startTs = 0),
                            (this.pauseTs = 0),
                            (this.pauseCnt = 0),
                            (this.playTs = 0),
                            (this.hasVideo = !1),
                            (this.started = !1),
                            (this.userPaused = !1),
                            (this.isTryAgain = !1),
                            this.playStat.stop(),
                            (this.firstFragLoadTs = 0),
                            (this.firstFragLoadedTs = 0),
                            (this.firstFragSize = 0),
                            (this.curAppendFrag = null),
                            (this.seeking = !1),
                            (this.skipStatForSeek = !1),
                            (this.firstPlay = !0),
                            (this.playTriggered = !1),
                            this.stat.clearFill(),
                            this.statVod.clearFill(),
                            (this.isSwitchSeamLessLine = !1),
                            (this.pausedByBrowser = !1),
                            (this.sOrigUrl = ''),
                            (this._pcdnFragStartTs = 0),
                            (this._cdnFragStartTs = 0),
                            (this.firstTsInfo = null),
                            (this._getPcdnDataTime = 0),
                            (this._getCdnDataTime = 0),
                            (this.forceUseCdn = !1),
                            (this.coolLoadFragment = !1),
                            (this.vodAbSwitch = !1),
                            (this.pcdnRepeatByteLen = 0),
                            (this.lastSN = -1),
                            (this.errorPcdnSN = -1),
                            (this.needStatPcdnRepeatBW = !1),
                            (this.seekBeforeTime = 0),
                            (this.isSeekBefore = !1),
                            (this.tsFileSize = 0),
                            (this.heartTsStartTime = 0),
                            (this.heartTsEndTime = 0),
                            (this.firstTsHttpCode = 0),
                            (this.endTs = 0),
                            (this.isAv1State = !1),
                            (this.stopLoadFragment = !1);
                        },
                      },
                      {
                        key: 'resetMediasource',
                        value: function () {
                          (this.resetPlayTs = 0), (this.needReset = !0);
                        },
                      },
                      {
                        key: 'reloadInError',
                        value: function () {
                          if (this.isLive) {
                            var e = this.playlist.currFrag;
                            e &&
                              (this.releaseLoader(),
                              this.destroyMse(),
                              (this.mse = this.createMse()),
                              (this.isLoading = !1),
                              p.a.log('HlsPlayer.reloadInError, seek'),
                              this.seek(e.start + 0.5));
                          } else if (this.info) {
                            var t = this.getCurrentTime();
                            (this.info.seekTime = t + 1),
                              this.start(this.info),
                              this.setPlaybackRate(this.playBackRate);
                          }
                        },
                      },
                      {
                        key: 'destroyMse',
                        value: function () {
                          this.mse && (this.mse.destroy(), (this.mse = null));
                        },
                      },
                      {
                        key: 'createMse',
                        value: function () {
                          var e = {
                            isLive: this.isLive,
                            videoType: 'ts',
                            videoElement: this.videoElement,
                            h265Proxy: this.h265Proxy,
                            ignoreSei: this.ignoreSei,
                            closeFetch: this.closeFetch,
                          };
                          if (
                            (1 == localStorage._isPureAudio && (e.isPureAudio = !0),
                            1 == localStorage._isPureVideo && (e.isPureVideo = !0),
                            this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS)
                          ) {
                            var t = localStorage.hasOwnProperty('_minBuffer')
                                ? Number(localStorage._minBuffer)
                                : 3e3,
                              i = new sa(this, {
                                videoType: 'ts',
                                isLive: this.isLive,
                                isPureAudio: this.isPureAudio,
                                isPureVideo: this.isPureVideo,
                                h265Proxy: this.h265Proxy,
                                videoElement: this.videoElement,
                                isH265Mode: this.h265Proxy.isReady || this.h265Proxy.isH265MseCodec,
                                lowlatencyCfg: {
                                  lowlatencyBuf: -1,
                                  lowlatencyMin: t + 500,
                                  lowlatencyMax: t + 1e3,
                                  openRenderSync: 1,
                                },
                              });
                            return this.isAv1State && i.setVodAv1 && i.setVodAv1(), i;
                          }
                          var s = new ts(this, e);
                          return (
                            (s.onInitSegmentCb = this.onFirstBuf.bind(this)),
                            (s.m4sPlayer.onFirstBufCb = this.onFirstBufCb),
                            s
                          );
                        },
                      },
                      {
                        key: 'releaseLoader',
                        value: function () {
                          this.fragLoader && (this.fragLoader.destroy(), (this.fragLoader = null));
                        },
                      },
                      {
                        key: 'removeTimer',
                        value: function () {
                          F.remove(this.onCheckTimer, this),
                            F.remove(this.onCheckFastTimer, this),
                            F.remove(this.onCheckIfCanPCDN, this);
                        },
                      },
                      { key: 'setConfig', value: function (e, t) {} },
                      {
                        key: 'setVodPcdnConfig',
                        value: function (e) {
                          var t = e.vid || x.b.getQueryString('vid', e.url),
                            i = e.presenterUid;
                          I.a.setVodPcdnConfig({
                            vid: t,
                            anchoruid: i,
                            useVodPcdnAbCfg: this.vodAbSwitch,
                          }),
                            p.a.log(
                              'vodPcdnOpenBuffer='
                                .concat(I.a.vodPcdnOpenBuffer, ', vodPcdnCloseBuffer=')
                                .concat(I.a.vodPcdnCloseBuffer, ', vodPcdnCoolTime=')
                                .concat(I.a.vodPcdnCoolTime),
                            );
                        },
                      },
                      {
                        key: 'start',
                        value: function (e) {
                          this.stop(), this.checkParams(e, this.realStartBind);
                        },
                      },
                      {
                        key: 'checkParams',
                        value: function (e, t) {
                          if ((p.a.log('HlsPlayer.checkParams', JSON.stringify(e), e), !e.isLive)) {
                            this.vodAbSwitch = x.b.getSdkAbRandom(e, I.a.vodAbSwitch);
                            var i = this.vodAbSwitch ? 1 : 2;
                            this.stat.setComDim(C.a.VOD_DIM_COM.VOD_AB_SWITCH, i),
                              this.statVod.setComDim(C.a.VOD_DIM_COM.VOD_AB_SWITCH, i),
                              p.a.log(
                                '%cVOD_AB_SWITCH = '.concat(i),
                                'color:#A23400;background:#FFF5C2',
                              ),
                              this.setVodPcdnConfig(e);
                          }
                          (this.started = !0),
                            e.isLive && e.sHlsUrl && e.sStreamName
                              ? ((e.sHlsUrl = e.sHlsUrl.replace('http://', 'https://')),
                                e.sHlsAntiCode
                                  ? (this.anticode.init(e.sHlsUrl, e.sStreamName, e.sHlsAntiCode),
                                    this.anticode.valid().then(function () {
                                      t(e);
                                    }))
                                  : t(e))
                              : e.url
                              ? t(e)
                              : p.a.warn(
                                  'HlsPlayer.checkParams has no params(sHlsUrl,sStreamName,url)',
                                ),
                            this.h265Proxy &&
                              this.h265Proxy.onStarted &&
                              this.h265Proxy.onStarted();
                        },
                      },
                      {
                        key: 'initInfo',
                        value: function (e) {
                          var t = this.h265Proxy.isReady || this.h265Proxy.isH265MseCodec;
                          this.info = e;
                          var i = e.url;
                          1 == e._av1State ? (i = e.av1Url) : t && (i = e.h265Url),
                            e.sHlsUrl &&
                              e.sStreamName &&
                              (i = e.sHlsUrl + '/' + e.sStreamName + '.m3u8'),
                            (i = this.replaceProtocl(i)),
                            (this.sOrigUrl = i);
                          var s = [];
                          return (
                            this.anticode.hasAnticode() && s.push(this.anticode.getAnticode()),
                            e.iBitRate > 0 && s.push('ratio='.concat(e.iBitRate)),
                            s.length > 0 &&
                              (i += (-1 !== i.indexOf('?') ? '&' : '?') + ''.concat(s.join('&'))),
                            (this.lineType = e.lineType),
                            i
                          );
                        },
                      },
                      {
                        key: 'realStart',
                        value: function (e) {
                          var t = this.h265Proxy.isReady || this.h265Proxy.isH265MseCodec;
                          if (
                            ((this.isAv1State = 1 == e._av1State), (this.isH265 = t), this.started)
                          ) {
                            (this.url = this.initInfo(e)),
                              (this.h265Proxy.isLive = !!e.isLive),
                              (this.h265Proxy.isH265Stream = !1),
                              1 == e._av1State
                                ? (this.firstTsInfo = e.tsAv1Info)
                                : t
                                ? ((this.firstTsInfo = e.tsH265Info),
                                  (this.h265Proxy.isH265Stream = !0))
                                : (this.firstTsInfo = e.tsInfo),
                              this.firstTsInfo && (this.firstTsInfo.sn = 1e3);
                            var i = new Date().getTime();
                            if (
                              ((this.businessStartCost = 0),
                              (this.UIStartCost = 0),
                              (this.loadStartTs = 0),
                              (this.startTimeStamp = Number(e.startTimeStamp) || 0),
                              e.noNeedSendVideoLoadTime
                                ? (this.noNeedSendVideoLoadTime = !0)
                                : ((this.businessStartCost = e.startTimeStamp
                                    ? Math.floor(i - e.startTimeStamp)
                                    : 0),
                                  (this.noNeedSendVideoLoadTime = !1)),
                              e.uistartTs &&
                                e.uistartTs > 0 &&
                                (this.UIStartCost = Math.floor(i - e.uistartTs)),
                              p.a.log(
                                'HlsPlayer.start startTimeStamp=' + e.startTimeStamp,
                                'uistartTs=' + e.uistartTs,
                                'businessStartCost=' + this.businessStartCost,
                                'UIStartCost=' + this.UIStartCost,
                                'now=' + i,
                                'uistartTs=' + e.uistartTs,
                              ),
                              this.url)
                            ) {
                              (this.loadHlsStatus = B.a.LoadVideoTimeoutReason.HLS_DISCONNECTED),
                                (this.isLive = e.isLive),
                                (this.closeFetch = Boolean(e.closeFetch)),
                                (this.ignoreSei = Boolean(e.ignoreSei)),
                                (this.cdnName = e.cdnName),
                                (this.liveType = e.liveType),
                                this.closeFetch && this.selectXhrLoader(),
                                p.a.log(
                                  'HlsPlayer.start isLive='
                                    .concat(this.isLive, ' url=')
                                    .concat(this.url),
                                ),
                                (this.playlist = new le(this)),
                                this.playlist.setOrigUrl(this.url),
                                this.destroyMse(),
                                (this.mse = this.createMse());
                              var s = 1;
                              this.playerCoreType === B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                                (s = this.isSoftSolution ? 3 : 2),
                                this.stat.setComDim(C.a.DIM_COM.MSE_PLAYER, s),
                                this.isLive ||
                                  this.statVod.setComDim(C.a.VOD_DIM_COM.MSE_PLAYER, s),
                                this.playerCoreType === B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                                  this.isSoftSolution &&
                                  this.mse.setUseSoftAcceleration(),
                                -1 !== this.url.indexOf('hyscence=vodadv') && this.mse.setMuted(!0);
                              var r = e.seekTime || this.seekTime;
                              if (
                                (this.firstTsInfo &&
                                  r &&
                                  (this.firstTsInfo.tsDuration
                                    ? r <= this.firstTsInfo.tsDuration
                                      ? (this.firstTsInfo.seeking = !0)
                                      : r > this.firstTsInfo.tsDuration && (this.firstTsInfo = null)
                                    : (this.firstTsInfo = null)),
                                (this.startTs = D.a.now()),
                                this.vodSecHelper.setStart(),
                                this.firstTsInfo &&
                                  this.playlist.loadFirstFragment(this.firstTsInfo),
                                this.playlist.loadManifest(this.url),
                                (function (e, t, i) {
                                  i = i || '';
                                  var s = 'cdndomain',
                                    r = (t = t || '').match(/\/\/(.+?)\//i);
                                  r && r.length > 1 && (s = r[1]),
                                    e.setComDim(C.a.DIM_COM.CDNDOMAIN, s),
                                    e.setComDim(C.a.DIM_COM.STREAM, i || 'stream');
                                })(this.stat, this.url, this.info.sStreamName),
                                H(this.statVod, this.url),
                                this.seek(e.seekTime || this.seekTime),
                                this.playStat.start(),
                                this.stat.setComDim(C.a.DIM_COM.STREAM_URL, this.url),
                                this.stat.setComDim(C.a.DIM_COM.P2P, C.a.LIVE_TYPE.HLS),
                                this.stat.setComDim(C.a.DIM_COM.STREAM_TYPE, 3),
                                this.stat.setComDim(C.a.DIM_COM.HLS_TYPE, e.isLhls ? 2 : 1),
                                this.stat.setComDim(
                                  C.a.DIM_COM.V_DECODEC,
                                  1 == e._av1State ? 2 : t ? 1 : 0,
                                ),
                                this.statVod.setComDim(C.a.DIM_COM.STREAM_URL, this.url),
                                this.statVod.setComDim(C.a.DIM_COM.STREAM_TYPE, 3),
                                this.statVod.setComDim(
                                  C.a.DIM_COM.V_DECODEC,
                                  1 == e._av1State ? 2 : t ? 1 : 0,
                                ),
                                this.stat.setComDim(C.a.DIM_COM.H265, t ? 1 : 0),
                                t &&
                                  this.tsdb.sendMetrics([
                                    this.stat.createAct(C.a.ACT.H265_STATUS, {
                                      value: [0],
                                      str: [0],
                                    }),
                                  ]),
                                !this.isLive)
                              ) {
                                var a = e.vid || x.b.getQueryString('vid', this.url);
                                this.stat.setComDim(C.a.VOD_DIM_COM.VOD_VIDEOSOURCEID, a || ''),
                                  this.stat.setComDim(
                                    C.a.DIM_COM.CODERATE_BPS,
                                    1e3 * (e.curBitrate || e.coderate),
                                  ),
                                  this.stat.setComDim(C.a.DIM_COM.ANCHOR_UID, e.presenterUid || 0),
                                  this.stat.setComDim(
                                    C.a.VOD_DIM_COM.VOD_DURATION,
                                    e.duration || 0,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.VOD_CODERATE,
                                    e.curBitrate || e.coderate,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.VOD_VIDEOSOURCEID,
                                    a || '',
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.VODANCHORID,
                                    e.presenterUid || 0,
                                  ),
                                  this.statVod.setComDim(C.a.DIM_COM.H265, t ? 1 : 0),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.VOD_DURATION,
                                    e.duration || 0,
                                  );
                              }
                              this.isNotSupportWebcodecsConfigure();
                            } else p.a.warn('HlsPlayer.start invalid argument, pls check the url.');
                          }
                        },
                      },
                      {
                        key: 'onM3u8ContentError',
                        value: function () {
                          this.playlist.loadManifest(this.url);
                        },
                      },
                      {
                        key: 'refreshAnticode',
                        value: function () {
                          (this.url = this.initInfo(this.info)),
                            this.playlist.refreshManifsetUrl(this.url);
                        },
                      },
                      {
                        key: 'setVideoPlayTimeSended',
                        value: function () {
                          this.flvLoadTimeSended = !0;
                        },
                      },
                      {
                        key: 'setLoadStatus',
                        value: function (e) {
                          if (this.loadHlsStatus !== e) {
                            if (e === B.a.LoadVideoTimeoutReason.HLS_LOADMANIFEST_SUCCESS) {
                              this.exceptionStat.setStat(C.a.DIM_LINK_STA.CONNECT_SUC, 1);
                              var t = this.playlist.manifestLoadedTs - this.startTs;
                              this.tsdb.sendM3u8LoadedTime(this._loaderType, t),
                                this.tsdb.sendVodM3u8LoadedTime(this._loaderType, t);
                            }
                            this.loadHlsStatus = e;
                          }
                        },
                      },
                      {
                        key: 'sendLoadVideoErrorStatus',
                        value: function () {
                          this.tsdb.sendMetrics([
                            this.stat.createAct(TsdbUtil.METRIC.VIDEO_VIDEO_LOAD_ERROR, {
                              value: [this.loadHlsStatus],
                            }),
                          ]);
                        },
                      },
                      {
                        key: 'getPlayVideo',
                        value: function () {
                          return this.mse.getPlayVideo();
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          this.started &&
                            (p.a.log('HlsPlayer.stop'),
                            this.playTriggered && this.playStat.report(!0),
                            this.destroy(),
                            this.reset());
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          if (!this.isLive && null != e) {
                            if (
                              this.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE &&
                              this.mse &&
                              this.mse.getPlayVideo
                            ) {
                              var t = this.mse.getPlayVideo();
                              if (t && 'number' == typeof e) {
                                var i = t.currentTime;
                                (this.seekBeforeTime = i), (this.isSeekBefore = e < i);
                              }
                            }
                            this.h265Proxy && this.h265Proxy.seek && this.h265Proxy.seek(e);
                            var s = !1;
                            if (this.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE) {
                              var r = this.mse && this.mse.video && this.mse.video.video;
                              r &&
                                r.buffered.length > 0 &&
                                r.buffered.start(0) > 1 &&
                                r.currentTime > 0 &&
                                1 * e == 0 &&
                                (p.a.log(
                                  '%cHlsPlayer.seek first buffered fixed',
                                  'color:#A23400;background:#FFF5C2',
                                ),
                                this.releaseLoader(),
                                this.destroyMse(),
                                (this.mse = this.createMse()),
                                (this.isLoading = !1),
                                (s = !0));
                            }
                            (this.endTs = 0),
                              (this.seeking = !0),
                              (this.skipStatForSeek = !0),
                              (this.seekTime = e),
                              this.hlsSeek.seek(0);
                            var a = this.getCurrentTime();
                            if (
                              (p.a.log(
                                'HlsPlayer.seek curTime='.concat(a, ', seekTime=').concat(e),
                              ),
                              0 == e)
                            ) {
                              if (((this.firstPlay = !1), !this.mse)) return;
                              if (this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS) {
                                if (a < 1) return;
                              } else if (0 == a && !s) return;
                            }
                            this.playlist &&
                              (p.a.log('HlsPlayer.seek playlist ' + e),
                              (e = Math.max(0, Number(e))),
                              this.playlist.seek(e)
                                ? (this.mse.seek(e),
                                  this.mse.resetHls(),
                                  this.releaseLoader(),
                                  (this.isLoading = !1),
                                  this.loadFragment(),
                                  this.hlsSeek.seek(this.seekTime))
                                : this.playlist.m3u8Parsered &&
                                  this.playlist.firstLevelLoaded &&
                                  (p.a.warn('HlsPlayer.seek out of range.'),
                                  this.stop(),
                                  this.onAnchorStop()));
                          }
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          this.started &&
                            (p.a.info('HlsPlayer.pause'),
                            (this.userPaused = !0),
                            this.mse && this.mse.pause());
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          this.started &&
                            (p.a.info('HlsPlayer.play'),
                            (this.userPaused = !1),
                            this.mse && this.mse.play());
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          this.mse && this.mse.setVolume(e);
                        },
                      },
                      {
                        key: 'getVolume',
                        value: function () {
                          return this.mse ? this.mse.getVolume() : -1;
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS ||
                            this.isLive
                            ? this.mse
                              ? this.mse.getBufferLen()
                              : 0
                            : this.mse
                            ? (this.mse.getPlayVideo(),
                              this.mse && this.mse.isNoAudio && this.h265Proxy.isReady
                                ? this.h265Proxy.getVideoBufferLen()
                                : this.mse.getBufferLen())
                            : 0;
                        },
                      },
                      {
                        key: 'getFrameBufferLen',
                        value: function () {
                          return this.mse.getFrameBufferLen();
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return (
                            this.mse && this.mse.isNoAudio && this.h265Proxy.renderInited
                              ? (this.lastPlayTs = this.h265Proxy.getCurrentVideoTime() / 1e3)
                              : this.mse && (this.lastPlayTs = this.mse.getCurrentTime() / 1e3),
                            this.lastPlayTs > this.getDurationTime()
                              ? this.getDurationTime()
                              : this.lastPlayTs
                          );
                        },
                      },
                      {
                        key: 'getCurrentRealTime',
                        value: function () {
                          return (
                            (this.mse && this.mse.video && this.mse.video.getCurrentTime()) || 0
                          );
                        },
                      },
                      {
                        key: 'getCurrentDts',
                        value: function () {
                          return this.mse.getCurrentDts();
                        },
                      },
                      {
                        key: 'getCurrentSeiOffsetDts',
                        value: function () {
                          return this.mse.getCurrentSeiOffsetDts();
                        },
                      },
                      {
                        key: 'getDurationTime',
                        value: function () {
                          return Math.floor(
                            this.playlist && this.playlist.totalDuration
                              ? this.playlist.totalDuration
                              : 0,
                          );
                        },
                      },
                      {
                        key: 'getFixedDurationTime',
                        value: function () {
                          return this.playlist && this.playlist.totalDuration
                            ? this.playlist.totalDuration
                            : 0;
                        },
                      },
                      {
                        key: 'getAnticodeHandler',
                        value: function () {
                          return this.anticode;
                        },
                      },
                      {
                        key: 'updateFlvConfig',
                        value: function () {
                          this.mse &&
                            this.mse.setJitter(
                              I.a.hlsJitCfg[0],
                              I.a.hlsJitCfg[1],
                              I.a.hlsJitCfg[2],
                            );
                        },
                      },
                      {
                        key: 'updateLiveVodUrl',
                        value: function (e, t) {
                          t !== this.cdnName
                            ? this.eventEmitter.trigger(o.PLAYBACK_DIF_CDN)
                            : this.playlist.updateLiveVodUrl(e);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          this.mse && this.mse.setMuted(e);
                        },
                      },
                      {
                        key: 'getMuted',
                        value: function () {
                          return this.mse ? this.mse.getMuted() : -1;
                        },
                      },
                      {
                        key: 'addNoPictureReason',
                        value: function () {
                          var e = W.getHlsNoPictureReason();
                          this.stat.setActDim(C.a.VOD_DIM_COM.VOD_NO_PICTURE_REASON, e),
                            this.statVod.setActDim(C.a.VOD_DIM_COM.VOD_NO_PICTURE_REASON, e);
                        },
                      },
                      {
                        key: 'reconnectLive',
                        value: function () {
                          if ((p.a.log('HlsPlayer.reconnectLive'), this.isLive))
                            this.destroy(),
                              this.reset(),
                              this.start(this.info),
                              this.setPlaybackRate(this.playBackRate);
                          else {
                            var e = this.playlist.currFrag;
                            e.tryCnt > 0
                              ? (e.tryCnt--, this.loadFragment(!0))
                              : this.loadFragment(!1);
                          }
                        },
                      },
                      {
                        key: 'setTargetDuration',
                        value: function (e) {
                          this.targetDuration = e * this.config.minFragBufferNum;
                        },
                      },
                      {
                        key: 'setStopLoadFragment',
                        value: function () {
                          this.stopLoadFragment = !0;
                        },
                      },
                      {
                        key: 'loadFragment',
                        value: function () {
                          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
                            t = arguments.length > 1 ? arguments[1] : void 0;
                          if (!this.stopLoadFragment) {
                            if (this.playlist.fragHelper.isM4s() && !this.mse.isM4sInitLoaded()) {
                              this.vodSecHelper.setInitStart();
                              var i = this.playlist.fragHelper.getInitUrl();
                              (i = x.b.checkDMod(i, this.info._dMod, this.info._sMod)),
                                (i = this.replaceProtocl(i)),
                                this.mse.loadM4sInit(i, this.config, {
                                  initCb: this.m4sInitcb,
                                  openCb: this.m4sInitOpenCb,
                                });
                            }
                            if (
                              (this.vodSecHelper.setFirstStart(),
                              !this.isLoading &&
                                (null !== this.playlist.currDetails || t) &&
                                (this.hlsSeek.check(), this.started))
                            ) {
                              var s = this.getCurrentTime(),
                                r = void 0,
                                a = this.mse.getPlayVideo();
                              if (
                                ((r =
                                  this.mse && this.mse.isNoAudio && this.h265Proxy.renderInited
                                    ? this.h265Proxy.getVideoBufferLen()
                                    : this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS
                                    ? this.mse.getBufferLen() / 1e3
                                    : this.bufferedInfo(s, a.buffered).len),
                                0 == this.seekTime)
                              ) {
                                var n = this.config.maxBufferLength,
                                  o = this.config.secondBufferLength;
                                if (this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS) {
                                  if (!(this.isSeekBefore && s < this.seekBeforeTime)) {
                                    if (this.coolLoadFragment) {
                                      if (r >= o) return;
                                      this.coolLoadFragment = !1;
                                    }
                                    if (r >= n) return void (this.coolLoadFragment = !0);
                                    (this.seekBeforeTime = 0), (this.isSeekBefore = !1);
                                  }
                                } else if (
                                  !(
                                    this.h265Proxy.renderInited &&
                                    this.isSeekBefore &&
                                    s < this.seekBeforeTime
                                  )
                                ) {
                                  if (this.coolLoadFragment) {
                                    if (r >= o) return;
                                    this.coolLoadFragment = !1;
                                  }
                                  if (r >= n) return void (this.coolLoadFragment = !0);
                                  (this.seekBeforeTime = 0), (this.isSeekBefore = !1);
                                }
                              }
                              var h = null;
                              if (t)
                                ((h = new ae()).sn = Number(t.sn) || 1e3),
                                  h.setUrl(t.tsUrl),
                                  (h.start = ~~t.tsStartTime),
                                  (h.discontinuity = !!t.discontinuity),
                                  (h.seeking = !!this.firstTsInfo.seeking),
                                  (h.byteRangeStartOffset = t.byteRangeStartOffset),
                                  (h.byteRangeEndOffset = t.byteRangeEndOffset),
                                  (this.playlist.currFrag = h);
                              else if (
                                ((h = e ? this.playlist.currFrag : this.playlist.nextFrag),
                                !this.seeking && h && this.firstTsInfo)
                              ) {
                                var u = x.b.removeUrlAllParam(this.firstTsInfo.tsUrl),
                                  d = x.b.removeUrlAllParam(h.url);
                                h.byteRangeEndOffset && u === d
                                  ? (h =
                                      h.byteRangeEndOffset === this.firstTsInfo.byteRangeEndOffset
                                        ? this.playlist.nextFrag
                                        : h)
                                  : u === d && (h = this.playlist.nextFrag);
                              }
                              if (h) {
                                !this.isLive && I.a.vodDtsFixCfg[0] && this._ptsJumpTest(),
                                  !this.isLive && this.loadVodPcdnProxy();
                                var c = this.config,
                                  l = c.bs2Delay + (this.targetDuration / 3) * 1e3,
                                  f = h.getUrl({
                                    bufferLen: this.getBufferLen(),
                                    useCdn: this.forceUseCdn,
                                  });
                                this.playlist.fragHelper.isPcdnProxyOpen || (h.pcdnStatus = 3),
                                  this.playlist.fragHelper.isPcdnClientOpen || (h.pcdnStatus = 4),
                                  (I.a.vodPcdnStatCfg[0]
                                    ? h.hasPcdn()
                                    : 3 !== h.pcdnStatus && 4 !== h.pcdnStatus) &&
                                  this.getBufferLen() < I.a.vodPcdnOpenBuffer &&
                                  !this.forceUseCdn
                                    ? (7 !== h.pcdnStatus &&
                                        8 !== h.pcdnStatus &&
                                        (h.pcdnStatusBk1 = h.pcdnStatus),
                                      (h.pcdnStatus = 7))
                                    : this.forceUseCdn &&
                                      (7 !== h.pcdnStatus &&
                                        8 !== h.pcdnStatus &&
                                        (h.pcdnStatusBk2 = h.pcdnStatus),
                                      (h.pcdnStatus = 8)),
                                  0 == this.firstFragLoadTs &&
                                    ((this.firstFragLoadTs = D.a.now()),
                                    (h.pcdnStatus = 5),
                                    (h.isFirstLoad = !0),
                                    0 === W.getFirstFragStatus() && W.setFirstFragStatus(1)),
                                  h.isPcdn
                                    ? (this.statVod.addCore(C.a.CORE.GET_STREAM_CNT, 1),
                                      (this._pcdnFragStartTs = D.a.now()))
                                    : (this._cdnFragStartTs = D.a.now()),
                                  this.playlist.m3u8Parsered ||
                                    (l = this.config.firstFragLoadTimeout),
                                  (this.isLoading = !0),
                                  this.releaseLoader();
                                var m = null;
                                (m = new this._loaderClz(c)),
                                  (this.fragLoader = m),
                                  h.byteRangeEndOffset &&
                                    ((m.fromByte = h.byteRangeStartOffset),
                                    (m.toByte = h.byteRangeEndOffset - 1)),
                                  1 == localStorage._printFragSn &&
                                    p.a.log('HlsPlayer.loadFragment sn=' + h.sn, f),
                                  (this.fragStartTs = D.a.now()),
                                  (this.fragSize = 0),
                                  this.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.TS_CNT, 1),
                                  (f = x.b.checkDMod(f, this.info._dMod, this.info._sMod)),
                                  (f = this.replaceProtocl(f)),
                                  m.loadBuffer(
                                    f,
                                    this.loadOpen.bind(this),
                                    this.loadChunk.bind(this),
                                    this.loadSuccess.bind(this),
                                    this.loadError.bind(this),
                                    this.loadTimeout.bind(this),
                                    l,
                                    h.isPcdn ? 0 : c.fragLoadingMaxRetry,
                                    h.isPcdn ? 0 : c.fragLoadingRetryDelay,
                                  );
                              } else if (this.mse.parser.parseAllData())
                                this.mse.parser.pushAllData();
                              else if (null != r && r <= 2) {
                                var _ = D.a.now();
                                if (
                                  (0 === this.endTs && (this.endTs = _ + 1e3 * r + 300),
                                  _ >= this.endTs &&
                                    (p.a.log(
                                      'HlsPlayer.loadFragment ANCHOR_STOP bufferedLen=' +
                                        r.toFixed(2),
                                    ),
                                    !this.isLive))
                                ) {
                                  var v = 0,
                                    y = this.mse.getPlayVideo();
                                  v =
                                    this.mse && this.mse.isNoAudio && this.h265Proxy.renderInited
                                      ? this.h265Proxy.getCurrentVideoTime() / 1e3
                                      : this.mse.getCurrentTime() / 1e3;
                                  var S = this.getFixedDurationTime();
                                  S - v - r <= 2 &&
                                    (2 === Number(this.liveType)
                                      ? (this.stop(), this.onAnchorStop())
                                      : (p.a.log(
                                          'HlsPlayer.loadFragment.onEnded currentTime='.concat(v),
                                        ),
                                        this.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE &&
                                          (y.currentTime = S),
                                        this.onEnded()));
                                }
                              } else if (this.seekTime > 0)
                                if ((p.a.warn('HlsPlayer.loadFragment out of range.'), this.isLive))
                                  this.stop(), this.onAnchorStop();
                                else {
                                  var g = this.mse.getCurrentTime() / 1e3,
                                    T = this.getFixedDurationTime();
                                  T - g <= 2 && this.seek(T);
                                }
                            }
                          }
                        },
                      },
                      {
                        key: '_isEnded',
                        value: function () {
                          var e = this.getFixedDurationTime(),
                            t = this.getCurrentTime();
                          return e > 0 && e - t < 1;
                        },
                      },
                      {
                        key: 'loadVodPcdnProxy',
                        value: function () {
                          I.a.platform !== B.a.PLATFORM_TYPE_NAME.wap &&
                            this.playlist.m3u8Parsered &&
                            this.playTriggered &&
                            !this.forceUseCdn &&
                            this.playlist.fragHelper.getVodPcdnProxyCursor();
                        },
                      },
                      {
                        key: 'loadOpen',
                        value: function (e) {
                          this.vodSecHelper.setFirstOpen(), (this.fragOpenTs = D.a.now());
                          var t = this.fragOpenTs - this.fragStartTs;
                          t < 5e3 && this.playStat.tsOpens.push(t);
                          var i = this.playlist && this.playlist.currFrag;
                          i &&
                            i.isFirstLoad &&
                            (e && (this.firstTsHttpCode = e.code),
                            1 === W.getFirstFragStatus() && W.setFirstFragStatus(2));
                        },
                      },
                      {
                        key: 'loadChunk',
                        value: function (e) {
                          this.pushData(e);
                        },
                      },
                      {
                        key: 'loadSuccess',
                        value: function (e) {
                          (this.isLoading = !1), this.pushData(e);
                          var t = D.a.now() - this.fragOpenTs;
                          t < 1e4 &&
                            (this.playStat.tsLoadeds.push(t),
                            this.playStat.tsSpeeds.push(this.fragSize / t),
                            this.playStat.tsSizes.push(this.fragSize)),
                            this.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.TS_SUC_CNT, 1),
                            (this.fragSize = 0);
                        },
                      },
                      {
                        key: 'pushData',
                        value: function (e) {
                          if (e) {
                            var t = this.playlist.currLevel || {},
                              i = this.playlist.currFrag,
                              s = this.playlist.lastFrag,
                              r = this.playlist.totalDuration;
                            if (
                              (this.exceptionStat.setStat(C.a.DIM_LINK_STA.HAS_DATA, 1),
                              this.avgSpeed.addCur(e.byteLength),
                              (this.fragSize += e.byteLength),
                              this.statFragData(e),
                              (e = this.discardPcdnRepeatData(e)))
                            ) {
                              0 == this.firstFragLoadedTs &&
                                ((this.firstFragLoadedTs = D.a.now()),
                                (this.firstFragSize = (e.byteLength / 1024) | 0));
                              var a = i.discontinuity;
                              this.curAppendFrag && this.curAppendFrag.sn === i.sn
                                ? (a = !1)
                                : this.curAppendFrag &&
                                  this.curAppendFrag.sn !== i.sn &&
                                  (this.curAppendFrag = i),
                                this.curAppendFrag || (this.curAppendFrag = i),
                                this.lastSN !== i.sn && (this.lastSN = i.sn);
                              var n = {
                                timeOffset: i.start,
                                duration: r,
                                level: i.level,
                                sn: i.sn,
                                seeking: i.seeking,
                              };
                              if (
                                (this.playlist.fragHelper.isM4s()
                                  ? this.mse.appendM4sSegment(e, n)
                                  : this.mse.appendTs({
                                      data: e,
                                      audioCodec: t.audioCodec,
                                      videoCodec: t.videoCodec,
                                      timeOffset: i.start,
                                      duration: r,
                                      discontinuity: a,
                                      _discontinuity:
                                        i.seeking && s && i.discontinuityCnt !== s.discontinuityCnt,
                                      level: i.level,
                                      sn: i.sn,
                                      seeking: i.seeking,
                                      hlsDT: i.hlsDT,
                                      tsDT: i.tsDT,
                                    }),
                                i && i.seeking)
                              ) {
                                if (((i.seeking = !1), this.firstPlay)) {
                                  this.firstPlay = !1;
                                  var o = i.start;
                                  this.info.secUseSeekTime && (o = this.seekTime),
                                    this.mse.seek(o),
                                    this.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE &&
                                      (this.onVideoSeek(o), this.play());
                                }
                                this.seekTime = 0;
                              }
                              F.has(this.onCheckTimer, this) ||
                                (F.add(this.onCheckTimer, this, 1e3),
                                F.add(this.onCheckFastTimer, this, 100)),
                                this.setLoadStatus(
                                  B.a.LoadVideoTimeoutReason.HLS_LOADFRAMENT_SUCCESS,
                                );
                            }
                          }
                        },
                      },
                      {
                        key: 'onM4sInit',
                        value: function () {
                          this.vodSecHelper.setInitEnd(), this.loadFragment();
                        },
                      },
                      {
                        key: 'onM4sInitOpen',
                        value: function () {
                          this.vodSecHelper.setInitOpen();
                        },
                      },
                      {
                        key: 'onFirstBuf',
                        value: function () {
                          this.vodSecHelper.setFirstBuf();
                        },
                      },
                      {
                        key: 'loadError',
                        value: function (e) {
                          var t = e.code,
                            i = e.currentTarget,
                            s = e.msg,
                            r = this.playlist && this.playlist.currFrag;
                          r &&
                            (r.isPcdn &&
                              ((this.errorPcdnSN = this.playlist.currFrag.sn),
                              (this.needStatPcdnRepeatBW = !0),
                              this.statVod.addCore(C.a.CORE.GET_STREAM_LINK_ERROR_CNT, 1),
                              this.statVod.addCore(C.a.CORE.GET_STREAM_ERROR_CNT, 1),
                              (r.pcdnStatus = 16)),
                            r.isFirstLoad &&
                              1 === W.getFirstFragStatus() &&
                              W.setFirstFragStatus(-1),
                            r.isFirstLoad && (this.firstTsHttpCode = t)),
                            this.playlist &&
                              this.playlist.currFrag &&
                              this.playlist.currFrag.loadError(),
                            this.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.TS_FAIL_CNT, 1),
                            p.a.warn(
                              'HlsPlayer.loadError load fragment error:'
                                .concat(t || (i && i.status), ' ')
                                .concat(s || ''),
                            ),
                            (this.isLoading = !1),
                            this.config.autoReconnect && this.reconnectLive(),
                            this.setLoadStatus(B.a.LoadVideoTimeoutReason.HLS_LOADFRAMENT_ERROR);
                        },
                      },
                      {
                        key: 'loadTimeout',
                        value: function (e) {
                          var t = this.playlist && this.playlist.currFrag;
                          t &&
                            (t.loadError(),
                            t.isPcdn &&
                              (this.statVod.addCore(C.a.CORE.GET_STREAM_LINK_TIMEOUT_CNT, 1),
                              this.statVod.addCore(C.a.CORE.GET_STREAM_ERROR_CNT, 1),
                              (t.pcdnStatus = 16)),
                            t.isFirstLoad &&
                              1 === W.getFirstFragStatus() &&
                              W.setFirstFragStatus(-2),
                            t.isFirstLoad && (this.firstTsHttpCode = code)),
                            this.stat.addComp(C.a.HLS_INFO.name, C.a.HLS_INFO.TS_TIMEOUT_CNT, 1),
                            p.a.warn('load fragment timeout', e),
                            (this.isLoading = !1),
                            this.config.autoReconnect && this.reconnectLive();
                        },
                      },
                      {
                        key: 'discardPcdnRepeatData',
                        value: function (e) {
                          var t = this.playlist.currFrag;
                          if (
                            (this.lastSN !== t.sn &&
                              ((this.pcdnRepeatByteLen = 0),
                              this.playlist.fragHelper.isM4s() && this.mse.m4sPlayer.createMp4()),
                            !t.isPcdn && this.errorPcdnSN === t.sn && this.pcdnRepeatByteLen > 0)
                          ) {
                            if (
                              (this.needStatPcdnRepeatBW &&
                                (this.statVod.setCore(
                                  C.a.PCDN_DATA.PCDN_REPEAT_BW,
                                  this.pcdnRepeatByteLen,
                                ),
                                (this.needStatPcdnRepeatBW = !1)),
                              this.pcdnRepeatByteLen > e.byteLength)
                            )
                              return (this.pcdnRepeatByteLen -= e.byteLength), null;
                            var i = e.slice(this.pcdnRepeatByteLen, e.byteLength);
                            (this.pcdnRepeatByteLen = 0), (e = i);
                          }
                          return t.isPcdn && (this.pcdnRepeatByteLen += e.byteLength), e;
                        },
                      },
                      {
                        key: 'statFragData',
                        value: function (e) {
                          var t = this.playlist.currFrag;
                          if (
                            (t.isFirstLoad &&
                              2 === W.getFirstFragStatus() &&
                              W.setFirstFragStatus(3),
                            (this.tsFileSize += e.byteLength),
                            0 === this.heartTsStartTime &&
                              ((this.heartTsStartTime = t.start),
                              (this.heartTsEndTime = this.heartTsStartTime)),
                            this.lastSN > 0 &&
                              this.lastSN !== t.sn &&
                              ((this.heartTsEndTime += t.duration),
                              this.statVod.addCore(C.a.VOD_CORE.TS_PLAY_TIME, t.duration),
                              this.statVod.addCore(C.a.VOD_CORE.TS_SIZE, this.tsFileSize),
                              (this.tsFileSize = 0)),
                            this.lastSN !== t.sn &&
                              (this._getPcdnDataTime > 0 &&
                                (this.statVod.addCore(
                                  C.a.PCDN_DATA.GET_PCDN_DATA_TIME,
                                  this._getPcdnDataTime,
                                ),
                                this.statVod.addCore(C.a.PCDN_DATA.GET_PCDN_DATA_TIME_CNT, 1),
                                (this._getPcdnDataTime = 0)),
                              this._getCdnDataTime > 0 &&
                                (this.statVod.addCore(
                                  C.a.PCDN_DATA.GET_CDN_DATA_TIME,
                                  this._getCdnDataTime,
                                ),
                                this.statVod.addCore(C.a.PCDN_DATA.GET_CDN_DATA_TIME_CNT, 1),
                                (this._getCdnDataTime = 0))),
                            this.statVod.addKeyvalCoreDim(
                              C.a.VOD_CORE.VOD_PCDN_STATE,
                              ''.concat(t.pcdnStatus, ':').concat(e.byteLength),
                            ),
                            this.statBackupPcdnState(e),
                            t.isPcdn)
                          ) {
                            var i = t.pcdnFreetime
                              ? C.a.CORE.PCDN_FREETIME_BW
                              : C.a.CORE.PCDN_REALTIME_BW;
                            this.statVod.addCore(i, e.byteLength),
                              this.stat.addCore(C.a.CORE.PCDN_TOTAL_BW, e.byteLength),
                              this._pcdnFragStartTs > 0 &&
                                ((this._getPcdnDataTime += D.a.now() - this._pcdnFragStartTs),
                                (this._pcdnFragStartTs = D.a.now()));
                          } else
                            this.statVod.addCore(C.a.CORE.CDN_TOTAL_BW, e.byteLength),
                              this.stat.addCore(C.a.CORE.CDN_TOTAL_BW, e.byteLength),
                              this._cdnFragStartTs > 0 &&
                                ((this._getCdnDataTime += D.a.now() - this._cdnFragStartTs),
                                (this._cdnFragStartTs = D.a.now()));
                        },
                      },
                      {
                        key: 'statBackupPcdnState',
                        value: function (e) {
                          var t = this.playlist.currFrag;
                          if (t && e) {
                            var i = '';
                            I.a.vodUseBackupField[2] &&
                              this.statVod.setCoreDim(
                                C.a.VOD_DIM_COM.BACKUP_FIELD3,
                                String(I.a.vodUseBackupField[6]),
                              ),
                              7 === t.pcdnStatus
                                ? (I.a.vodUseBackupField[0] &&
                                    this.statVod.addKeyvalCoreDim(
                                      C.a.VOD_DIM_COM.BACKUP_FIELD1,
                                      ''.concat(t.pcdnStatusBk1, ':').concat(e.byteLength),
                                    ),
                                  (i = 0 === I.a.vodUseBackupField[6] && t.pcdnStatusBk1))
                                : 8 === t.pcdnStatus &&
                                  (I.a.vodUseBackupField[1] &&
                                    this.statVod.addKeyvalCoreDim(
                                      C.a.VOD_DIM_COM.BACKUP_FIELD2,
                                      ''.concat(t.pcdnStatusBk2, ':').concat(e.byteLength),
                                    ),
                                  (i = 1 === I.a.vodUseBackupField[6] && t.pcdnStatusBk2));
                            var s = 0 === I.a.vodUseBackupField[6] ? 10 : 6;
                            if (i)
                              switch (i) {
                                case 1:
                                case 2:
                                  I.a.vodUseBackupField[3] &&
                                    this.statVod.addCoreDim(
                                      C.a.VOD_DIM_COM.BACKUP_FIELD4,
                                      e.byteLength,
                                    );
                                  break;
                                case 9:
                                  I.a.vodUseBackupField[4] &&
                                    this.statVod.addCoreDim(
                                      C.a.VOD_DIM_COM.BACKUP_FIELD5,
                                      e.byteLength,
                                    );
                                  break;
                                case s:
                                  I.a.vodUseBackupField[5] &&
                                    this.statVod.addCoreDim(
                                      C.a.VOD_DIM_COM.BACKUP_FIELD6,
                                      e.byteLength,
                                    );
                              }
                          }
                        },
                      },
                      {
                        key: 'bufferedInfo',
                        value: function (e, t) {
                          var i,
                            s,
                            r,
                            a,
                            n,
                            o =
                              arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0.3,
                            h = [],
                            u = [];
                          for (n = 0; n < t.length; n++)
                            h.push({ start: t.start(n), end: t.end(n) });
                          for (
                            h.sort(function (e, t) {
                              return e.start - t.start || t.end - e.end;
                            }),
                              n = 0;
                            n < h.length;
                            n++
                          ) {
                            var d = u.length;
                            if (d) {
                              var c = u[d - 1].end;
                              h[n].start - c < o
                                ? h[n].end > c && (u[d - 1].end = h[n].end)
                                : u.push(h[n]);
                            } else u.push(h[n]);
                          }
                          for (n = 0, i = 0, s = r = e; n < u.length; n++) {
                            var l = u[n].start,
                              p = u[n].end;
                            if (e + o >= l && e < p) (s = l), (i = (r = p) - e);
                            else if (e + o < l) {
                              a = l;
                              break;
                            }
                          }
                          return { len: i, start: s, end: r, nextStart: a };
                        },
                      },
                      {
                        key: 'checkCatonError',
                        value: function () {
                          if (
                            this.playerCoreType != B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                            this.mse &&
                            this.mse.getBufferLen &&
                            this.mse.getBufferLen() > 8e3 &&
                            !this.mse.video.paused &&
                            Math.floor(this.mse.getCurrentTime() / 1e3) < 5
                          ) {
                            if (
                              (Math.floor(this.lastPlayTs) ==
                                Math.floor(this.mse.getCurrentTime() / 1e3) &&
                                this.pauseInBufferFullTimes++,
                              this.playTriggered)
                            )
                              return;
                            if (this.pauseInBufferFullTimes >= 5) {
                              var e = this.playlist.getNearFragStart(this.lastPlayTs + 1);
                              p.a.log('HlsPlayer.checkCatonError, seek'),
                                this.seek(e),
                                (this.pauseInBufferFullTimes = 0);
                            }
                          }
                        },
                      },
                      {
                        key: 'fixedByBuffered',
                        value: function () {
                          if (!this.isLive || this.playerCoreType != B.a.PLAYER_CORE_TYPE.MSE) {
                            var e = this.mse && this.mse.video && this.mse.video.video,
                              t =
                                this.playlist &&
                                this.playlist.currFrag &&
                                this.playlist.currFrag.duration;
                            if (e && t)
                              for (var i = 0; i < e.buffered.length; i++) {
                                var s = e.buffered.start(i);
                                if (
                                  i >= 1 &&
                                  e.buffered.end(i - 1) - e.currentTime <= 1 &&
                                  s > e.currentTime &&
                                  s <= e.currentTime + t
                                ) {
                                  p.a.log(
                                    '%cHlsPlayer.fixedByBuffered currentTime='
                                      .concat(e.currentTime, ' fixed time=')
                                      .concat(s),
                                    'color:#A23400;background:#FFF5C2',
                                  ),
                                    (e.currentTime = s);
                                  break;
                                }
                              }
                          }
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e, t) {
                          if (
                            (this.anticode.onCheckTimer(e, t),
                            this.avgSpeed.calculate(),
                            this.started &&
                              this.mse &&
                              !this.needReset &&
                              this.mse &&
                              !this.mse.userPaused)
                          ) {
                            if (
                              (this.mse && this.mse.onCheckTimer(e, t),
                              this.playlist && this.playlist.onCheckTimer(t),
                              this.playTs > 0)
                            ) {
                              var i = e - this.pauseTs;
                              this.playStat &&
                                (this.pauseTs > 0 &&
                                  i > 200 &&
                                  !this.skipStatForSeek &&
                                  0 == this.pauseCnt &&
                                  this.playStat.setPause(),
                                this.pauseCnt > 0 &&
                                  ((this.pauseCnt = 0), this.playStat.setPause()),
                                t % 20 == 0 && this.playStat.report()),
                                this.pauseTs > 0 &&
                                  i > I.a.vodRetryTime &&
                                  (p.a.warn(
                                    'HlsPlayer.onCheckTimer pauseTime='
                                      .concat(i, ', bufferLen=')
                                      .concat(this.getBufferLen()),
                                  ),
                                  this.isLive || (this.triggerH5PlayError(), (this.pauseTs = 0)));
                            }
                            this.checkCatonError();
                            var s = this.getCurrentTime(),
                              r = this.getDurationTime();
                            -1 == localStorage._printVodTimer &&
                              p.a.log('HlsPlayer.PlayTimeUpdate', s, r),
                              this.eventEmitter.trigger(o.PLAY_TIME_STATUS, {
                                current: s,
                                total: r,
                              }),
                              this.eventEmitter.trigger(o.PLAY_FRAME_BUFFER, {
                                frameStorage: this.mse && this.mse.getFrameReadyed(),
                                jitterBuffer: this.mse && this.mse.getBufferLen(),
                              });
                          }
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function (e, t) {
                          if (this.needReset)
                            return (
                              0 === this.resetPlayTs &&
                                (this.resetPlayTs = e + this.mse.getBufferLen() - 500),
                              void (
                                ((this.mse && this.mse.getBufferLen() < 500) ||
                                  e > this.resetPlayTs) &&
                                (this.reloadInError(),
                                (this.needReset = !1),
                                (this.resetPlayTs = 0))
                              )
                            );
                          if (this.started && this.mse && !this.mse.userPaused) {
                            var i = this.getBufferLen(),
                              s = this.playlist.currFrag;
                            -1 === Number(localStorage._print_pcdn_buf) &&
                              p.a.log(
                                '%cHlsPlayer.onCheckTimer isPcdn='
                                  .concat(s.isPcdn, ' sn=')
                                  .concat(s.sn, ' bufferlen=')
                                  .concat(this.getBufferLen(), ' forceUseCdn=')
                                  .concat(this.forceUseCdn),
                                'color:green',
                              ),
                              s.isPcdn && i < I.a.vodPcdnCloseBuffer && !this.forceUseCdn
                                ? (p.a.log(
                                    '%cHlsPlayer.onCheckTimer: pcdn close',
                                    'color:#A23400;background:#FFF5C2',
                                  ),
                                  this.fragLoader.abort(),
                                  (this.forceUseCdn = !0),
                                  (this.isLoading = !1),
                                  (this.errorPcdnSN = s.sn),
                                  (this.needStatPcdnRepeatBW = !0),
                                  (s.pcdnStatusBk2 = s.pcdnStatus),
                                  (s.pcdnStatus = 8),
                                  this.loadFragment(!0),
                                  this.statVod.addCore(C.a.CORE.GET_STREAM_LOW_DATA_CNT, 1),
                                  F.once(this.onCheckIfCanPCDN, this, I.a.vodPcdnCoolTime))
                                : this.loadFragment(),
                              this.mse && this.mse.onCheckFastTimer(e, t);
                            var r = e - this.pauseTs;
                            if (
                              (this.pauseTs > 0 && r > 200 && this.fixedByBuffered(),
                              this.info &&
                                this.info.type === G.b.PLAYBACK &&
                                this.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE)
                            ) {
                              var a = this.getBufferLen();
                              if (this.pauseTs > 0 && r >= 1e3 && a > 2e3) {
                                var n = this.mse.video.video;
                                (n.currentTime += 1),
                                  p.a.log(
                                    'HlsPlayer.onCheckFastTimer.playback pauseTime='
                                      .concat(r, ', currentTime + 1, currentTime=')
                                      .concat(n.currentTime),
                                  ),
                                  this.play();
                              }
                            }
                            this._isEnded() &&
                              3 === Number(this.liveType) &&
                              (p.a.log(
                                'HlsPlayer.check onEnded, curTime='
                                  .concat(this.getCurrentTime(), ', duration=')
                                  .concat(this.getFixedDurationTime()),
                              ),
                              this.onEnded());
                          }
                        },
                      },
                      {
                        key: 'onCheckIfCanPCDN',
                        value: function (e, t) {
                          p.a.log(
                            '%cHlsPlayer.onCheckIfCanPCDN: pcdn open',
                            'color:#A23400;background:#FFF5C2',
                          ),
                            (this.forceUseCdn = !1),
                            F.remove(this.onCheckIfCanPCDN, this);
                        },
                      },
                      {
                        key: 'sendNoPicture',
                        value: function (e) {
                          this._sendVideoLoadTime(e);
                        },
                      },
                      {
                        key: '_sendVideoLoadTime',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
                          if (!this.videoLoadTimeSent && !this.isLive) {
                            (this.videoLoadTimeSent = !0),
                              (e = e || D.a.now() - this.startTs),
                              this.isLive || this.statVod.setActDim(C.a.VOD_DIM_COM.CREATE_TIME, e);
                            var t = this.videoLoadTime,
                              i = this.loadM3u8Time,
                              s = this.firstFragLoadTime,
                              r = this.firstFragLoadedTime,
                              a = this.firstFragParsedTime;
                            if (!this.hasPicture) {
                              t = 99999;
                              var n = this.getCostTimes();
                              (i = n[0]), (s = n[1]), (r = n[2]), (a = n[3]);
                            }
                            var o = 0;
                            this.mse && (o = this.mse.isMediaSourceOpen ? 1 : 2);
                            var h = x.b.getBrowserHidden();
                            h && 2 == o
                              ? p.a.log(
                                  'HlsPlayer._sendVideoLoadTime browserHidden='
                                    .concat(h, ', isMediaSourceOpen=')
                                    .concat(o),
                                )
                              : this.tsdb.sendVodHlsTime({
                                  loadType: this._loaderType,
                                  loadTime: t,
                                  loadM3u8Time: i,
                                  firstFragLoadTs: s,
                                  firstFragLoadedTs: r,
                                  firstFragParsedTs: a,
                                  firstFragSize: this.firstFragSize,
                                  businessCost: this.businessLoadTime,
                                  UICost: this.uiLoadTime,
                                  playTs: this.playTs,
                                  startTs: this.startTs,
                                  m3u8Status: this.playlist.loadM3u8HttpCode,
                                  firstTsStatus: this.firstTsHttpCode,
                                  costTimes: this.vodSecHelper.getCostTimes(),
                                });
                          }
                        },
                      },
                      {
                        key: 'updateStatus',
                        value: function (e) {
                          this.videoStatus !== e &&
                            ((this.videoStatus = e),
                            this.eventEmitter.trigger(o.PLAY_STATUS, { status: e }));
                        },
                      },
                      {
                        key: 'cacheBlockReason',
                        value: function (e, t) {
                          us.cacheBlockReason(e, t);
                        },
                      },
                      {
                        key: 'resetHeartTsTime',
                        value: function () {
                          (this.heartTsStartTime = 0), (this.heartTsEndTime = 0);
                        },
                      },
                      {
                        key: 'onStartVideo',
                        value: function () {
                          this.loadStartTs = D.a.now();
                        },
                      },
                      {
                        key: 'onPlayVideo',
                        value: function (e, t, i, s, r, a, n) {
                          var u = D.a.now();
                          (this.playTs = u),
                            (this.hasVideo = s),
                            this.vodSecHelper.setPlayTs(),
                            0 !== this.startTs &&
                              ((this.videoLoadTime = u - this.startTs),
                              (this.loadM3u8Time = this.playlist.manifestLoadedTs - this.startTs),
                              (this.firstFragLoadTime =
                                this.firstFragLoadTs - this.playlist.manifestLoadedTs),
                              this.firstTsInfo &&
                                (this.firstFragLoadTime = this.firstFragLoadTs - this.startTs),
                              (this.firstFragLoadedTime =
                                this.firstFragLoadedTs - this.firstFragLoadTs),
                              (this.firstFragParsedTime = u - this.firstFragLoadedTs),
                              (this.uiLoadTime =
                                this.UIStartCost > 0 ? this.videoLoadTime + this.UIStartCost : 0),
                              (this.businessLoadTime = 0),
                              this.startTimeStamp > 1
                                ? (this.businessLoadTime =
                                    this.videoLoadTime + this.businessStartCost)
                                : 1 === this.startTimeStamp &&
                                  (this.businessLoadTime = u - this.loadStartTs),
                              this.tsdb.sendHlsTime(
                                this._loaderType,
                                this.videoLoadTime,
                                this.loadM3u8Time,
                                this.firstFragLoadTime,
                                this.firstFragLoadedTime,
                                this.firstFragSize,
                                this.businessLoadTime,
                                this.uiLoadTime,
                                this.firstFragParsedTime,
                                this.vodSecHelper.getCostTimes(),
                              ),
                              !this.isLive &&
                                !this.videoLoadTimeSent &&
                                this.videoLoadTime <= 1e4 &&
                                this._sendVideoLoadTime(),
                              p.a.log(
                                '%cHlsPlayer.onPlayVideo loadTime=' + this.videoLoadTime,
                                'color:#A23400;background:#FFF5C2',
                              )),
                            (this.seeking = !1),
                            (this.skipStatForSeek = !1),
                            (this.playTriggered = !0),
                            (this.codecType = n);
                          var d = { video: e, width: t, height: i, canvas: r, codec: n };
                          this.eventEmitter.trigger(o.VIDEO_PLAY, d),
                            p.a.log('HlsPlayer.onPlayVideo playInfo', d),
                            !this.pausedByBrowser && this.updateStatus(h),
                            !this.isLive && this.loadVodPcdnProxy(),
                            this.playlist.fragHelper.isM4s() &&
                              Cr.isCloseCore(this.info.curBitrate, $e()) &&
                              this.eventEmitter.trigger(o.H5_PLAYER_ERROR, {
                                video: e,
                                code: 1e3,
                                msg: '配置关闭av1',
                              });
                        },
                      },
                      {
                        key: 'onVideoStop',
                        value: function (e, t) {
                          p.a.log('HlsPlayer.onVideoStop hasVideo=' + t),
                            (this.hasVideo = !1),
                            t &&
                              (this.updateStatus(u),
                              this.eventEmitter.trigger(o.VIDEO_STOP, { video: e }));
                        },
                      },
                      {
                        key: 'onAnchorStop',
                        value: function () {
                          var e = this.mse ? this.mse.getPlayVideo() : null;
                          this.eventEmitter.trigger(o.ANCHOR_STOP, { video: e });
                        },
                      },
                      {
                        key: 'onEnded',
                        value: function () {
                          (this.started = !1),
                            this.eventEmitter.trigger(o.M3U8_PLAY_ENDED),
                            this.h265Proxy && this.h265Proxy.onEnded && this.h265Proxy.onEnded(),
                            this.mse && this.mse.onEnded && this.mse.onEnded();
                        },
                      },
                      {
                        key: 'onLoadM3u8Error',
                        value: function (e) {
                          var t = e && e.currentTarget && e.currentTarget.status;
                          (404 !== t && 0 !== t) ||
                            this.isLive ||
                            this.videoLoadTimeSent ||
                            (!this.hasPicture &&
                              this.addNoPictureReason &&
                              this.addNoPictureReason(),
                            this._sendVideoLoadTime()),
                            this.eventEmitter.trigger(o.HLS_URL_UNAVAILABLE);
                        },
                      },
                      {
                        key: 'onLoadManifestTimeout',
                        value: function () {
                          this.eventEmitter.trigger(o.HLS_MAINFEST_LOAD_TIMEOUT);
                        },
                      },
                      {
                        key: 'onConnectManifestTimeout',
                        value: function () {
                          this.eventEmitter.trigger(o.HLS_URL_LOAD_TIMEOUT);
                        },
                      },
                      {
                        key: 'onPlayerError',
                        value: function (e) {
                          this.videoElement;
                        },
                      },
                      {
                        key: 'triggerH5PlayError',
                        value: function () {
                          if (this.info.type !== G.b.PLAYBACK) {
                            var e = this.getCurrentTime();
                            p.a.log('HlsPlayer.triggerH5PlayError seekTime = '.concat(e)),
                              this.info &&
                                (this.eventEmitter.trigger(o.PAUSE_5S_RETRY),
                                (this.info.seekTime = e + 1),
                                this.start(this.info),
                                this.setPlaybackRate(this.playBackRate));
                          }
                        },
                      },
                      {
                        key: 'onErrorEvent',
                        value: function (e) {
                          var t = this.playlist && this.playlist.currFrag;
                          t &&
                            t.isFirstLoad &&
                            3 === W.getFirstFragStatus() &&
                            W.setFirstFragStatus(-3);
                          var i = this.mse ? this.mse.getPlayVideo() : null;
                          this.eventEmitter.trigger(o.H5_PLAYER_ERROR, {
                            video: i,
                            code: e.type,
                            msg: '播放错误',
                          }),
                            this.setLoadStatus(B.a.LoadVideoTimeoutReason.HLS_PLAY_ERROR);
                        },
                      },
                      {
                        key: 'onPlayPause',
                        value: function (e, t, i) {
                          if (
                            t &&
                            ((this.pauseTs = e),
                            this.updateStatus(d),
                            this.playlist && !this.isLive)
                          ) {
                            var s = 1e3 * this.playlist.totalDuration,
                              r = this.mse ? this.mse.getCurrentTime() / 1e3 : 0;
                            s > 0 &&
                              r > 0 &&
                              Math.abs(s - r) < 1e3 &&
                              this.isLive &&
                              (p.a.warn('HlsPlayer detect anchor stop.'),
                              this.onAnchorStop(),
                              this.stop()),
                              us.checkVodBlock(),
                              this.startSendPauseTimer();
                          }
                        },
                      },
                      {
                        key: 'onPlayResume',
                        value: function (e, t) {
                          if (this.pauseTs > 0) {
                            var i = e - this.pauseTs,
                              s = 200;
                            this.playBackRate < 1 &&
                              this.playBackRate > 0 &&
                              (s = Math.min(400, 200 * ~~(1 / this.playBackRate))),
                              i > 200 &&
                                !this.skipStatForSeek &&
                                (p.a.warn(
                                  'HlsPlayer.onPlayResume pauseTime='
                                    .concat(i, ', pauseDelta=')
                                    .concat(s),
                                ),
                                this.pauseCnt++,
                                this.stat.addCore(C.a.CORE.VIDEO_BLOCK_COUNT, 1),
                                this.stat.addCore(C.a.CORE.VIDEO_BLOCK_DURATION, i),
                                this.isLive ||
                                  (this.statVod.addCore(C.a.VOD_CORE.VOD_BLOCK_COUNT, 1),
                                  this.statVod.addCore(C.a.VOD_CORE.VOD_BLOCK_DURATION, i)),
                                this.eventEmitter.trigger(o.VIDEO_BAD_QUALITY)),
                              (this.pauseTs = 0);
                          }
                          (this.skipStatForSeek = this.seeking),
                            t &&
                              (this.updateStatus(h),
                              this.eventEmitter.trigger(o.VIDEO_PLAYING, {
                                video: this.videoElement,
                                event: event,
                              }));
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function (e) {
                          p.a.log('HlsPlayer.onVideoSeek', e),
                            this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                              (this.hlsSeek._seekTime = 0),
                            (this.seeking = !1),
                            (this.seekTime = 0);
                          var t = this.mse ? this.mse.getPlayVideo() : null;
                          this.eventEmitter.trigger(o.VIDEO_SEEK, { video: t, currentTime: e }),
                            this.h265Proxy &&
                              this.h265Proxy.onVideoSeek &&
                              this.h265Proxy.onVideoSeek(e);
                        },
                      },
                      {
                        key: 'onPauseByBrowser',
                        value: function () {
                          window &&
                            (p.a.warn(
                              'HlsPlayer.onPauseBrowser: video was paused by browser, define click listener',
                            ),
                            window.removeEventListener('click', this._clickEventBind, !0),
                            window.addEventListener('click', this._clickEventBind, !0),
                            (this.pausedByBrowser = !0));
                        },
                      },
                      {
                        key: '_clickEvent',
                        value: function () {
                          if (document) {
                            p.a.log('HlsPlayer._clickEvent: click for play a temp video');
                            var e = document.createElement('video').play();
                            e &&
                              e.catch(function (e) {
                                p.a.log('HlsPlayer._clickEvent err='.concat(e.message));
                              }),
                              (this.pausedByBrowser = !1),
                              window &&
                                window.removeEventListener('click', this._clickEventBind, !0);
                          }
                        },
                      },
                      {
                        key: 'startSendPauseTimer',
                        value: function () {
                          this.stopSendPauseTimer(),
                            (this.sendPauseTimeout = setTimeout(
                              this.sendPauseEvent.bind(this),
                              200,
                            ));
                        },
                      },
                      {
                        key: 'stopSendPauseTimer',
                        value: function () {
                          clearTimeout(this.sendPauseTimeout);
                        },
                      },
                      {
                        key: 'sendPauseEvent',
                        value: function () {
                          this.videoStatus !== h && this.eventEmitter.trigger(o.PLAY_CARTON);
                        },
                      },
                      {
                        key: 'getCostTimes',
                        value: function () {
                          if (!this.playlist) return [0, 0, 0, 0, -1, 0, 0];
                          var e =
                              this.playlist.manifestLoadedTs > 0
                                ? this.playlist.manifestLoadedTs - this.startTs
                                : 0,
                            t =
                              this.firstFragLoadedTs > 0
                                ? this.firstFragLoadTs - this.playlist.manifestLoadedTs
                                : 0;
                          return (
                            this.firstTsInfo &&
                              (t =
                                this.firstFragLoadedTs > 0
                                  ? this.firstFragLoadTs - this.startTs
                                  : 0),
                            [
                              e,
                              t,
                              this.firstFragLoadedTs > 0
                                ? this.firstFragLoadedTs - this.firstFragLoadTs
                                : 0,
                              this.playTs && this.firstFragLoadedTs > 0
                                ? this.playTs - this.firstFragLoadedTs
                                : 0,
                              this.playlist.loadM3u8HttpCode,
                              this.firstTsHttpCode,
                              this.startTs,
                              this.playTs,
                            ]
                          );
                        },
                      },
                      {
                        key: 'switchLevel',
                        value: function (e) {
                          var t = this.playlist.levels,
                            i = e.curBitRate;
                          if (t.length > 0 && this.playlist.isMasterPlayList) {
                            for (var s = 0; s < t.length; s++)
                              if (t[s].bitrate === i && this.playlist.currLevel.bitrate != i) {
                                (this.playlist.currLevel.bitrate = i),
                                  (this.playlist.currLevelId = s),
                                  (this.playlist.currLevel.url = t[s].url),
                                  this.mse.parser.switchLevel(),
                                  this.play();
                                break;
                              }
                          } else
                            (this.playlist.currLevel.url = e.url),
                              (this.playlist.currLevel.bitrate = i),
                              this.mse.parser.switchLevel(),
                              this.play();
                        },
                      },
                      {
                        key: 'turnToH264',
                        value: function (e) {
                          var t = this.getCurrentTime();
                          this.stop(),
                            this.eventEmitter.trigger(o.TURN_TO_H264, { seekTime: t, reason: e });
                        },
                      },
                      {
                        key: 'h265Retry',
                        value: function () {
                          var e = this.getCurrentTime();
                          this.stop(),
                            this.eventEmitter.trigger(o.H265_VIDEO_RETRY, { seekTime: e });
                        },
                      },
                      {
                        key: 'containerResize',
                        value: function (e) {
                          this.h265Proxy &&
                            this.h265Proxy.containerResize &&
                            this.h265Proxy.containerResize(e);
                        },
                      },
                      {
                        key: '_ptsJumpTest',
                        value: function () {
                          1 === Number(localStorage.ptsJumpTest) && (Ct.ptsJumpTest = !0);
                        },
                      },
                      {
                        key: 'getCodecType',
                        value: function () {
                          return this.codecType;
                        },
                      },
                      {
                        key: 'getVideoWidth',
                        value: function () {
                          return this.isAv1State
                            ? this.videoElement && this.videoElement.videoWidth
                            : this.mse.getMseAvcCfgWidth();
                        },
                      },
                      {
                        key: 'getVideoHeight',
                        value: function () {
                          return this.isAv1State
                            ? this.videoElement && this.videoElement.videoHeight
                            : this.mse.getMseAvcCfgHeight();
                        },
                      },
                      {
                        key: 'getFps',
                        value: function () {
                          if (this.isAv1State) {
                            if (this.mse && this.mse.m4sPlayer && this.mse.m4sPlayer.mp4) {
                              var e = this.mse.m4sPlayer.mp4.moof.trafVideo.trun.sample_count,
                                t =
                                  this.mse.m4sPlayer.mp4.moof.trafVideo.tfhd
                                    .default_sample_duration,
                                i = this.mse.m4sPlayer.mp4.sidxVideo.time_scale;
                              return Math.ceil(e / ((e * t) / i));
                            }
                            return -100;
                          }
                          return this.mse && this.mse.parser && this.mse.parser.getFps();
                        },
                      },
                      {
                        key: 'replaceProtocl',
                        value: function (e) {
                          return e.replace(/^https?\:/, 'https:');
                        },
                      },
                      {
                        key: 'setWebCodecsSuccess',
                        value: function () {
                          this.isWebcodecsPlaying = !0;
                        },
                      },
                      { key: 'setFrameRusume', value: function () {} },
                      { key: 'setFramePause', value: function () {} },
                      { key: 'renderFpsPause', value: function () {} },
                      {
                        key: 'getEnhanceStats',
                        value: function () {
                          return (
                            this.eventEmitter &&
                            this.eventEmitter.getEnhanceStats &&
                            this.eventEmitter.getEnhanceStats()
                          );
                        },
                      },
                      {
                        key: 'getDpi',
                        value: function () {
                          var e = 0,
                            t = 0;
                          return (
                            this.mse &&
                              this.mse.getMseAvcCfgWidth &&
                              (e = this.mse.getMseAvcCfgWidth()),
                            this.mse &&
                              this.mse.getMseAvcCfgHeight &&
                              (t = this.mse.getMseAvcCfgHeight()),
                            { width: e, height: t }
                          );
                        },
                      },
                      {
                        key: 'turnToWebcodecsSoft',
                        value: function () {
                          var e = this.getCurrentTime();
                          this.stop(),
                            x.b.isWebCodecsSupported() &&
                              (p.a.log('HlsPlayer.turnToWebcodecsSoft'),
                              this.eventEmitter.trigger(o.TURN_TO_WEBCODECS_SOFT, { seekTime: e }));
                        },
                      },
                      {
                        key: 'getRefreshRate',
                        value: function () {
                          return (
                            this.eventEmitter &&
                            this.eventEmitter.getRefreshRate &&
                            this.eventEmitter.getRefreshRate()
                          );
                        },
                      },
                      {
                        key: 'webcodecsRetry',
                        value: function () {
                          var e = this.getCurrentTime();
                          this.stop(),
                            this.eventEmitter.trigger(o.WEBCODECS_RETRY, { seekTime: e });
                        },
                      },
                      {
                        key: 'turntoH265Wasm',
                        value: function () {
                          var e = this.getCurrentTime();
                          this.stop(),
                            this.eventEmitter.trigger(o.TURN_TO_H265_WASM, { seekTime: e });
                        },
                      },
                      {
                        key: 'turnToMse',
                        value: function () {
                          var e = this.getCurrentTime();
                          this.stop(), this.eventEmitter.trigger(o.TURN_TO_MSE, { seekTime: e });
                        },
                      },
                      {
                        key: 'setUseSoftAcceleration',
                        value: function () {
                          var e =
                            !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
                          this.isLive ||
                            this.statVod.setComDim(
                              C.a.VOD_DIM_COM.DECODE_HARDWARE_ACCELERATION,
                              e ? 1 : 0,
                            ),
                            this.stat.setComDim(
                              C.a.DIM_COM.DECODE_HARDWARE_ACCELERATION,
                              e ? 1 : 0,
                            );
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (e) {
                          this.mse && this.mse.setEnhance && this.mse.setEnhance(e);
                        },
                      },
                      {
                        key: 'onVideoEnhanceSuccess',
                        value: function () {
                          this.eventEmitter &&
                            this.eventEmitter.trigger(o.ON_VIDEO_ENHANCE_SUCCESS);
                        },
                      },
                      {
                        key: 'onVideoEnhanceError',
                        value: function (e) {
                          this.eventEmitter &&
                            this.eventEmitter.trigger(o.ON_VIDEO_ENHANCE_ERROR, e);
                        },
                      },
                      {
                        key: 'isNotSupportWebcodecsConfigure',
                        value: function () {
                          var e = 'avc1.42E01E',
                            t = 'h264';
                          this.isAv1State
                            ? ((e = 'av01.0.08M.08'), (t = 'av1'))
                            : this.isH265 && ((e = 'hvc1.1.6.L93'), (t = 'h265'));
                          var i = this.mse;
                          ('h265' != t && 'h264' != t && 'av1' != t) ||
                            ('undefined' != typeof VideoDecoder &&
                              VideoDecoder.isConfigSupported({ codec: e })
                                .then(function (e) {
                                  p.a.log('HlsPlayer.isConfigSupported', e, t),
                                    e.supported
                                      ? 'h265' == t
                                        ? (localStorage.isCloseWebcodecsH265 = 0)
                                        : 'h264' == t
                                        ? (localStorage.isCloseWebcodecsH264 = 0)
                                        : 'av1' == t && (localStorage.isCloseWebcodecsAv1 = 0)
                                      : ('h265' == t
                                          ? (localStorage.isCloseWebcodecsH265 = 1)
                                          : 'h264' == t
                                          ? (localStorage.isCloseWebcodecsH264 = 1)
                                          : 'av1' == t && (localStorage.isCloseWebcodecsAv1 = 1),
                                        i &&
                                          i.isNotSupportWebcodecsConfig &&
                                          i.isNotSupportWebcodecsConfig());
                                })
                                .catch(function (e) {
                                  p.a.log('HlsPlayer.isConfigSupported.catch', e.message);
                                }));
                        },
                      },
                      {
                        key: 'setDisableHardAcc',
                        value: function () {
                          var e = this.mse;
                          e && e.setDisableHardAcc && e.setDisableHardAcc();
                        },
                      },
                      {
                        key: 'win7PerfInsufficient',
                        value: function () {
                          var e = this.mse;
                          e && e.win7PerfInsufficient && e.win7PerfInsufficient();
                        },
                      },
                      {
                        key: 'angelNullError',
                        value: function () {
                          var e = this.mse;
                          e && e.angelNullError && e.angelNullError();
                        },
                      },
                      {
                        key: 'chromeH265RenderEmptyError',
                        value: function () {
                          mse && mse.chromeH265RenderEmptyError && mse.chromeH265RenderEmptyError();
                        },
                      },
                      {
                        key: 'onMseHevcError',
                        value: function () {
                          p.a.log('HlsPlayer.onMseHevcError'),
                            this.turntoH265Wasm && this.turntoH265Wasm();
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          (this.playBackRate = e),
                            p.a.log('HlsPlayer.setPlaybackRate', e),
                            this.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE &&
                            this.mse &&
                            this.mse.getPlayVideo
                              ? (this.mse.getPlayVideo().playbackRate = Number(e))
                              : this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS &&
                                this.mse.setPlaybackRate(e);
                        },
                      },
                      {
                        key: 'isPlaying',
                        get: function () {
                          return this.videoStatus !== u;
                        },
                      },
                      {
                        key: 'hasPicture',
                        get: function () {
                          return this.videoLoadTime > 0;
                        },
                      },
                      {
                        key: 'isWebCodec',
                        get: function () {
                          return this.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                aa = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.video = null),
                      (this._startWaitingTs = 0),
                      (this._badQualityCnt = 0),
                      (this._badQualityTime = 0),
                      (this._badQuality = !1),
                      (this._paused = !1),
                      (this.onWaitingBind = this.onWaiting.bind(this)),
                      (this.onPlayingBind = this.onPlaying.bind(this)),
                      (this.onPauseBind = this.onPause.bind(this)),
                      (this.onCanplayThroughBind = this.onCanplayThrough.bind(this));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset20',
                        value: function () {
                          this._badQuality && (this._startWaitingTs = D.a.now()),
                            (this._badQuality = !1),
                            this.resetBadQuality();
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this.delEventListener(this.video),
                            this.resetBadQuality(),
                            this.resetStat(),
                            (this._paused = !1),
                            (this.video = null);
                        },
                      },
                      {
                        key: 'resetBadQuality',
                        value: function () {
                          (this._badQualityCnt = 0), (this._badQualityTime = 0);
                        },
                      },
                      {
                        key: 'resetStat',
                        value: function () {
                          (this._startWaitingTs = 0), (this._badQuality = !1);
                        },
                      },
                      {
                        key: 'start',
                        value: function (e) {
                          this.reset(),
                            this.addEventListener(e),
                            (this.video = e),
                            F.add(this.onCheckStat, this, 50);
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          this.reset(), F.remove(this.onCheckStat, this);
                        },
                      },
                      {
                        key: 'addEventListener',
                        value: function (e) {
                          e &&
                            (e.addEventListener('waiting', this.onWaitingBind),
                            e.addEventListener('playing', this.onPlayingBind),
                            e.addEventListener('pause', this.onPauseBind),
                            e.addEventListener('canplaythrough', this.onCanplayThroughBind));
                        },
                      },
                      {
                        key: 'delEventListener',
                        value: function (e) {
                          e &&
                            (e.removeEventListener('waiting', this.onWaitingBind),
                            e.removeEventListener('playing', this.onPlayingBind),
                            e.removeEventListener('pause', this.onPauseBind),
                            e.removeEventListener('canplaythrough', this.onCanplayThroughBind));
                        },
                      },
                      {
                        key: 'onCheckStat',
                        value: function (e, t) {
                          !this._paused &&
                            this._startWaitingTs > 0 &&
                            e - this._startWaitingTs > 200 &&
                            (this._badQuality || ((this._badQuality = !0), this._badQualityCnt++));
                        },
                      },
                      {
                        key: 'onWaiting',
                        value: function (e) {
                          0 === this._startWaitingTs && (this._startWaitingTs = D.a.now());
                        },
                      },
                      {
                        key: 'onPlaying',
                        value: function (e) {
                          this.checkBadQuality(), this.resetStat(), (this._paused = !1);
                        },
                      },
                      {
                        key: 'onPause',
                        value: function (e) {
                          this.checkBadQuality(), this.resetStat(), (this._paused = !0);
                        },
                      },
                      {
                        key: 'onCanplayThrough',
                        value: function (e) {
                          this._paused || (this.checkBadQuality(), this.resetStat());
                        },
                      },
                      {
                        key: 'checkBadQuality',
                        value: function () {
                          if (this._badQuality && this._startWaitingTs > 0) {
                            var e = D.a.now() - this._startWaitingTs;
                            p.a.log(
                              'PauseStat.checkBadQuality badQualityTime='
                                .concat(e, ', this.video.paused=')
                                .concat(this.video.paused),
                            ),
                              (this._badQualityTime += e);
                          }
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this._badQualityCnt > 0;
                        },
                      },
                      {
                        key: 'waiting',
                        get: function () {
                          return this._startWaitingTs > 0;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                na = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e);
                    var r = i.stat,
                      a = i.statVod,
                      n = i.tsdb,
                      o = i.videoElement,
                      h = i.h265Proxy;
                    (this.eventEmitter = t),
                      (this._videoElm = o),
                      (this._stat = r),
                      (this.statVod = a),
                      (this._tsdb = n),
                      (this.anticode = new vr()),
                      (this._pauseStat = new aa()),
                      (this.started = !1),
                      (this.startTs = 0),
                      (this.videoStatus = u),
                      (this.sysPause = !1),
                      (this.pauseByUser = !1),
                      (this.waiting = !1),
                      (this.ended = !1),
                      (this.hasEvents = !1),
                      (this.videoInfo = null),
                      (this._tickCnt = 0),
                      (this.lineType = 0),
                      (this.loadeddataTs = 0),
                      (this.allowedAutoPlay = !0),
                      (this.seekTime = 0),
                      (this.noPictureSent = !1),
                      (this.isLoadstart = !1),
                      (this.playTimeout = 5e3),
                      (this.urlNetworkstate = 0),
                      (this.startPlayTs = 0),
                      (this.h265Proxy = h),
                      (this._videoEvts = [
                        'loadstart',
                        'pause',
                        'loadedmetadata',
                        'loadeddata',
                        'error',
                        'canplay',
                        'canplaythrough',
                        'play',
                        'playing',
                        'stalled',
                        'suspend',
                        'volumechange',
                        'waiting',
                        'emptied',
                        'ended',
                        'durationchange',
                      ]),
                      (this._videoEvtHandlerBind = this._videoEvtHandler.bind(this)),
                      (this._startUrlBind = this._startUrl.bind(this)),
                      (this._refreshAnticodeBind = this._refreshAnticode.bind(this)),
                      this.anticode.on(vr.Events.REFRESH, this._refreshAnticodeBind);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'printBlackInfo',
                        value: function () {
                          this._videoElm &&
                            p.a.log(
                              'HlsTagPlayer.printNetworkState: '.concat(
                                this._videoElm.networkState,
                              ),
                            ),
                            this._videoElm &&
                              this._videoElm.error &&
                              p.a.log(
                                'HlsTagPlayer.printError: '
                                  .concat(this._videoElm.error.code, ', ')
                                  .concat(this._videoElm.error.message),
                              );
                        },
                      },
                      {
                        key: 'start',
                        value: function (e) {
                          e && (this.videoInfo = e),
                            this.videoInfo &&
                              this.videoInfo.playTimeout &&
                              (this.playTimeout = this.videoInfo.playTimeout),
                            (this.isLive = e.isLive),
                            this._checkParams(this.videoInfo, this._startUrlBind),
                            F.once(this._playVideoFailed, this, this.playTimeout),
                            F.once(this._checkUrlActive, this, 3e3);
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          this._videoElm.pause(),
                            (this._videoElm.src = ''),
                            this._delEvents(),
                            F.remove(this.onPlayTimeout, this),
                            F.remove(this.onCheckTimer, this),
                            F.remove(this.onCheckFastTimer, this),
                            F.remove(this._playVideoFailed, this),
                            F.remove(this._checkUrlActive, this),
                            this.reset(),
                            p.a.log('HlsTagPlayer.stop: player is stopped');
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          p.a.log('HlsTagPlayer.reset: player is reset'),
                            (this.started = !1),
                            (this.startTs = 0),
                            (this.videoStatus = u),
                            (this.sysPause = !1),
                            (this.pauseByUser = !1),
                            (this.waiting = !1),
                            (this.ended = !1),
                            (this.hasEvents = !1),
                            (this.videoInfo = null),
                            (this._tickCnt = 0),
                            (this.lineType = 0),
                            (this.loadeddataTs = 0),
                            (this.seekTime = 0);
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this._videoElm.pause(),
                            p.a.log('HlsTagPlayer.stop: player is destory'),
                            (this.isAutoplaying = !1),
                            (this.startPlayTs = 0),
                            (this.seekTime = 0);
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          var e = 0;
                          if (this._videoElm) {
                            var t = this._videoElm.buffered;
                            t.length > 0 &&
                              (e = (1e3 * (t.end(t.length - 1) - this._videoElm.currentTime)) >> 0);
                          }
                          return e;
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          this.setCurrentTime(e);
                        },
                      },
                      {
                        key: 'setCurrentTime',
                        value: function (e, t) {
                          0 !== this._videoElm.duration &&
                            (e !== Math.ceil(this._videoElm.duration)
                              ? ((this.seekTime = e),
                                (this._videoElm.currentTime = e),
                                p.a.log(
                                  'HlsTagPlayer.setCurrentTime seekTime='
                                    .concat(e, ', currentTime=')
                                    .concat(this._videoElm.currentTime, ', duration=')
                                    .concat(this._videoElm.duration),
                                ),
                                F.remove(this.onPlayTimeout, this),
                                F.once(this.onSeekTimeout, this, t || 2e4))
                              : this._setEnded());
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this._videoElm.currentTime;
                        },
                      },
                      {
                        key: 'getDurationTime',
                        value: function () {
                          return this._videoElm.duration;
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          this._videoElm && (this._videoElm.volume = e);
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          var e = this;
                          p.a.log('HlsTagPlayer.play: call play.'),
                            (this.pauseByUser = !1),
                            (this.sysPause = !1),
                            this._addEvents(),
                            this.playing || (this.startTs = D.a.now());
                          var t = this._videoElm.play();
                          return (
                            t
                              ? t
                                  .then(function () {
                                    p.a.log('HlsTagPlayer.play: play successfully');
                                  })
                                  .catch(function (t) {
                                    p.a.error(
                                      'HlsTagPlayer.play: playing error=',
                                      t.toString(),
                                      e._videoElm.paused,
                                    );
                                  })
                              : p.a.warn('HlsTagPlayer.play: play result is not a promise'),
                            t
                          );
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          (this.pauseByUser = !0), this._delEvents(), this._videoElm.pause();
                        },
                      },
                      {
                        key: 'getAnticodeHandler',
                        value: function () {
                          return this.anticode;
                        },
                      },
                      {
                        key: '_checkParams',
                        value: function (e, t) {
                          e.sHlsUrl && e.sStreamName
                            ? ((e.sHlsUrl = e.sHlsUrl.replace('http://', 'https://')),
                              e.sHlsAntiCode
                                ? (this.anticode.init(e.sHlsUrl, e.sStreamName, e.sHlsAntiCode),
                                  this.anticode.valid().then(function () {
                                    t(e);
                                  }))
                                : t(e))
                            : e.url
                            ? t(e)
                            : p.a.error(
                                'HlsTagPlayer.checkParams has no params(sHlsUrl, sStreamName, url)',
                              );
                        },
                      },
                      {
                        key: '_initInfo',
                        value: function (e) {
                          e.sHlsUrl &&
                            e.sStreamName &&
                            (e.url = e.sHlsUrl + '/' + e.sStreamName + '.m3u8');
                          var t = [];
                          this.anticode.hasAnticode() && t.push(this.anticode.getAnticode()),
                            e.iBitRate > 0 && t.push('ratio='.concat(e.iBitRate));
                          var i = I.a.platform,
                            s = B.a.PLATFORM_TYPE[i] || B.a.PLATFORM_TYPE.web,
                            r =
                              i === B.a.PLATFORM_TYPE_NAME.wap
                                ? 'uid='.concat(U.a.uid, '&uuid=').concat(U.a.uuid)
                                : 'u='.concat(U.a.convertUid),
                            a = ''.concat(r, '&t=').concat(s, '&sv=').concat(2401251130);
                          t.push(a),
                            t.length > 0 &&
                              (e.url +=
                                (-1 !== e.url.indexOf('?') ? '&' : '?') + ''.concat(t.join('&'))),
                            (this.lineType = e.lineType),
                            (this.url = e.url);
                        },
                      },
                      {
                        key: '_startUrl',
                        value: function (e) {
                          this._initInfo(e),
                            p.a.log('HlsTagPlayer.startUrl url=', this.url),
                            (this.startTs = D.a.now()),
                            this._stat.setComDim(C.a.DIM_COM.STREAM_URL, e.url),
                            this._stat.setComDim(C.a.DIM_COM.P2P, C.a.LIVE_TYPE.HLS),
                            this._stat.setComDim(C.a.DIM_COM.STREAM_TYPE, 3),
                            this._stat.setComDim(C.a.DIM_COM.HLS_TYPE, e.isLhls ? 2 : 1);
                          var t = e.vid || x.b.getQueryString('vid', e.url);
                          this.statVod.setComDim(C.a.DIM_COM.STREAM_URL, e.url),
                            this.statVod.setComDim(C.a.DIM_COM.STREAM_TYPE, 3),
                            this.statVod.setComDim(C.a.DIM_COM.P2P, C.a.LIVE_TYPE.HLS),
                            this.statVod.setComDim(C.a.VOD_DIM_COM.VOD_DURATION, e.duration || 0),
                            this.statVod.setComDim(C.a.VOD_DIM_COM.VOD_VIDEOSOURCEID, t || ''),
                            this.statVod.setComDim(
                              C.a.VOD_DIM_COM.VODANCHORID,
                              e.presenterUid || 0,
                            ),
                            F.add(this.onCheckTimer, this, 1e3),
                            (this._videoElm = this._createVideo(this.url)),
                            e.seekTime && ((this.seekTime = e.seekTime), (this.isSeek = !0)),
                            this._addEvents();
                        },
                      },
                      {
                        key: '_checkUrlActive',
                        value: function () {
                          var e = this,
                            t = new XMLHttpRequest();
                          t.open('HEAD', this.url),
                            (t.onreadystatechange = function () {
                              t.readyState == t.DONE &&
                                ((e.urlNetworkstate = t.status),
                                p.a.log(
                                  'HlsTagPlayer.checkUrlActive current status: ',
                                  e.urlNetworkstate,
                                  e.url,
                                ));
                            }),
                            t.send();
                        },
                      },
                      {
                        key: '_createVideo',
                        value: function (e) {
                          if (this._videoElm)
                            return (
                              (this._videoElm.src = this.url),
                              this._videoElm.getAttribute('x5-autoplay')
                                ? (this._videoElm.autoplay = !0)
                                : this._videoElm.autoplay &&
                                  this._videoElm.setAttribute('x5-autoplay', 'true'),
                              this._videoElm
                            );
                          var t = document.createElement('video');
                          return (
                            (t.src = e),
                            (t.autoplay = !0),
                            t.setAttribute('playsinline', !0),
                            t.setAttribute('webkit-playsinline', !0),
                            t.setAttribute('webkit-inline', !0),
                            t.setAttribute('x-webkit-airplay', 'allow'),
                            t.setAttribute('x5-video-player-type', 'h5'),
                            t.setAttribute('x5-autoplay', 'true'),
                            (t.preload = 'auto'),
                            t
                          );
                        },
                      },
                      {
                        key: '_refreshAnticode',
                        value: function () {
                          this.initInfo(this.videoInfo);
                        },
                      },
                      {
                        key: '_addEvents',
                        value: function () {
                          var e = this;
                          this._videoElm &&
                            !this.hasEvents &&
                            ((this.hasEvents = !0),
                            this._videoEvts.forEach(function (t) {
                              e._videoElm.addEventListener(t, e._videoEvtHandlerBind);
                            }));
                        },
                      },
                      {
                        key: '_delEvents',
                        value: function () {
                          var e = this;
                          this._videoElm &&
                            this.hasEvents &&
                            ((this.hasEvents = !1),
                            this._videoEvts.forEach(function (t) {
                              e._videoElm.removeEventListener(t, e._videoEvtHandlerBind);
                            }));
                        },
                      },
                      {
                        key: '_videoEvtHandler',
                        value: function (e) {
                          switch ((p.a.log('Trigger event: e.type=', e ? e.type : e), e.type)) {
                            case 'loadstart':
                              this.onLoadStart();
                              break;
                            case 'pause':
                              this.onVideoPause();
                              break;
                            case 'loadedmetadata':
                              this.onLoadedmetadata();
                              break;
                            case 'loadeddata':
                              this.onPlayVideo();
                              break;
                            case 'playing':
                              this.onPlayingVideo();
                              break;
                            case 'error':
                              this.onVideoError(e);
                              break;
                            case 'ended':
                              this.onEnded();
                              break;
                            case 'durationchange':
                              this.onDurationChange();
                          }
                        },
                      },
                      {
                        key: '_updateTime',
                        value: function () {
                          if (
                            !this.ended &&
                            this._videoElm &&
                            this._videoElm.buffered &&
                            this._videoElm.currentTime > 0
                          ) {
                            var e = this._videoElm.buffered;
                            if ('function' != typeof e.start || 'function' != typeof e.end)
                              return void p.a.warn('video.buffered start&end not a function');
                            for (var t = 0; t < e.length; t++)
                              if (
                                e.start(t) <= this._videoElm.currentTime &&
                                e.end(t) >= this._videoElm.currentTime
                              ) {
                                var i = e.end(t) - this._videoElm.currentTime;
                                (i = i < 0 ? 0 : i),
                                  this._videoElm.duration > 0 &&
                                  this._videoElm.currentTime >= this._videoElm.duration
                                    ? this._setEnded()
                                    : this.eventEmitter.onPlayTime &&
                                      this.eventEmitter.onPlayTime(
                                        Math.floor(this._videoElm.currentTime),
                                        Math.floor(this._videoElm.duration),
                                        Math.floor(i),
                                      );
                                break;
                              }
                          }
                        },
                      },
                      {
                        key: '_setEnded',
                        value: function () {
                          (this.ended = !0),
                            (this._videoElm.currentTime = this._videoElm.duration),
                            this._videoElm.pause(),
                            this.eventEmitter.onPlayEnded && this.eventEmitter.onPlayEnded();
                        },
                      },
                      {
                        key: '_checkPause',
                        value: function (e) {
                          !this.ended &&
                            !this.sysPause &&
                            !this.pauseByUser &&
                            this._setWaiting(this._pauseStat.waiting);
                        },
                      },
                      {
                        key: '_updateStatus',
                        value: function (e) {
                          this.videoStatus !== e &&
                            (p.a.log(
                              'HlsTagPlayer._updateStatus: '
                                .concat(this.videoStatus, ' -> ')
                                .concat(e),
                            ),
                            (this.videoStatus = e),
                            this.eventEmitter.trigger(o.PLAY_STATUS, { status: e }));
                        },
                      },
                      {
                        key: '_playVideoFailed',
                        value: function () {
                          !Ze.a.matches.Wechat || this.isLoadstart
                            ? (p.a.error(
                                'HlsTagPlayer._playVideoFailed: ; networkState=' +
                                  this._videoElm.networkState +
                                  '; errorcode=' +
                                  this._videoElm.error.code +
                                  '; details: ' +
                                  (this._videoElm.error.message || 'error'),
                              ),
                              this.eventEmitter.trigger(o.H5_PLAYER_ERROR, {
                                code: B.a.H5_ERROR_CODE.PLAY_TIMEOUT,
                                error: 'play failed',
                              }),
                              F.remove(this._playVideoFailed, this))
                            : p.a.log(
                                'HlsTagPlayer._playVideoFailed webchat not trigger loadstart',
                              );
                        },
                      },
                      {
                        key: 'onPlayTimeout',
                        value: function () {
                          this._videoElm &&
                            (p.a.warn(
                              'HlsTagPlayer.onPlayTimeout: userAgent=%s, paused=%s, pauseByUser=%s',
                              navigator.userAgent,
                              this._videoElm.paused,
                              this.pauseByUser,
                            ),
                            this._videoElm.paused
                              ? !this.pauseByUser && this.eventEmitter.trigger(o.VIDEO_PAUSE)
                              : Ze.a.matches.XiaoMi ||
                                0 !== this._videoElm.currentTime ||
                                this.eventEmitter.trigger(o.PLAY_TIMEOUT));
                        },
                      },
                      {
                        key: 'onSeekTimeout',
                        value: function () {
                          this.seekTime > 0 &&
                            this.seekTime === this._videoElm.currentTime &&
                            !this.pauseByUser &&
                            ((this.seekTime = 0), this.eventEmitter.trigger(o.SEEK_TIMEOUT));
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e, t) {
                          this._tickCnt++,
                            this._tickCnt % 20 == 0 &&
                              (!this.started || this.pauseByUser || this.sysPause
                                ? p.a.log(
                                    'HlsTagPlayer.onCheckTimer: heartbeat fail!{started='
                                      .concat(this.started, ', pauseByUser=')
                                      .concat(this.pauseByUser, ', sysPause=')
                                      .concat(this.sysPause, '}'),
                                  )
                                : (p.a.log('HlsTagPlayer.onCheckTimer: heartbeat suc'),
                                  this._reportVideoQuality())),
                            !this.started ||
                              this.pauseByUser ||
                              this.sysPause ||
                              this._tickCnt % 20 != 0 ||
                              this._reportVideoQuality();
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function (e, t) {
                          !this.playing ||
                            this.pauseByUser ||
                            this.sysPause ||
                            (this._checkPause(e), t % 10 == 0 && this._updateTime());
                        },
                      },
                      {
                        key: 'onLoadStart',
                        value: function () {
                          this.eventEmitter.onLoadStart && this.eventEmitter.onLoadStart(),
                            (this.isLoadstart = !0);
                        },
                      },
                      {
                        key: 'onLoadedmetadata',
                        value: function () {
                          p.a.log(
                            'HlsTagPlayer.onLoadedmetadata, paused=',
                            this._videoElm.paused,
                            this._videoElm.getAttribute('x5-autoplay'),
                          );
                        },
                      },
                      {
                        key: 'onVideoPause',
                        value: function () {
                          (this.sysPause = !0),
                            this.eventEmitter.trigger(o.VIDEO_PAUSE),
                            this._updateStatus(c);
                        },
                      },
                      {
                        key: 'onPlayVideo',
                        value: function () {
                          var e = this;
                          if (
                            !this.started &&
                            ((this.started = !0),
                            p.a.log(
                              'HlsTagPlayer.onPlayVideo, paused=',
                              this._videoElm.paused,
                              this._videoElm.getAttribute('x5-autoplay'),
                            ),
                            this.eventEmitter.trigger(o.VIDEO_PLAY, { video: this._videoElm }),
                            this.eventEmitter.onPlayVideo &&
                              this.eventEmitter.onPlayVideo({ video: this._videoElm }),
                            (this.loadeddataTs = D.a.now() - this.startTs),
                            F.remove(this.onPlayTimeout, this),
                            this._videoElm.autoplay || this._videoElm.getAttribute('x5-autoplay'))
                          ) {
                            var t = this._videoElm.play();
                            t
                              ? t
                                  .then(function () {
                                    p.a.log('Auto play is ok'),
                                      (e.allowedAutoPlay = !0),
                                      F.remove(e._playVideoFailed, e),
                                      F.remove(e._checkUrlActive, e);
                                    var t = e._videoElm.duration;
                                    e.isSeek &&
                                      0 != t &&
                                      (p.a.log(
                                        'HlsTagPlayer.onPlayVideo, seek, duration='.concat(t),
                                      ),
                                      e.startSeek());
                                  })
                                  .catch(function (t) {
                                    p.a.warn(
                                      'auto playing error: ',
                                      t.toString(),
                                      e._videoElm.paused,
                                    ),
                                      e.eventEmitter.trigger(o.BROWSER_PAUSE),
                                      e._videoElm.paused &&
                                        (e._updateStatus(c),
                                        (e.allowedAutoPlay = !1),
                                        F.remove(e._playVideoFailed, e),
                                        F.remove(e._checkUrlActive, e),
                                        e.eventEmitter.trigger(o.BROWSER_PAUSE, {
                                          video: e._videoElm,
                                        }));
                                  })
                              : (p.a.warn('video.play is not a promise'),
                                Ze.a.matches.UC && this._videoElm.paused
                                  ? (p.a.log(
                                      'UC Browser, this._videoElm.paused =',
                                      this._videoElm.paused,
                                    ),
                                    this._updateStatus(c),
                                    this.eventEmitter.trigger(o.BROWSER_PAUSE),
                                    (this.allowedAutoPlay = !1),
                                    F.remove(this._playVideoFailed, this),
                                    F.remove(this._checkUrlActive, this),
                                    this.eventEmitter.trigger(o.BROWSER_PAUSE, {
                                      video: this._videoElm,
                                    }),
                                    !this.isLive && this._videoElm && this._videoElm.pause())
                                  : F.once(this.onPlayTimeout, this, this.playTimeout || 2e3));
                          }
                        },
                      },
                      {
                        key: 'onPlayingVideo',
                        value: function () {
                          if (((this.sysPause = !1), this._updateStatus(h), !this.playing)) {
                            (this.playing = !0),
                              this._pauseStat.start(this._videoElm),
                              F.add(this.onCheckFastTimer, this, 100),
                              (this.playTs = D.a.now());
                            var e = this.playTs - this.startTs;
                            this._sendVideoLoadMetrics(e, this.loadeddataTs),
                              e <= 1e4 && this._sendVideoVodLoad(e),
                              F.remove(this._playVideoFailed, this);
                          }
                        },
                      },
                      {
                        key: 'onDurationChange',
                        value: function () {
                          var e = this._videoElm.duration;
                          this.isSeek &&
                            0 != e &&
                            this.started &&
                            (p.a.log('HlsTagPlayer.onDurationChange seek, duration='.concat(e)),
                            this.startSeek());
                        },
                      },
                      {
                        key: 'onVideoError',
                        value: function (e) {
                          p.a.error(
                            'HlsTagPlayer.onVideoError: ; networkState=' +
                              this._videoElm.networkState +
                              '; errorcode=' +
                              this._videoElm.error.code +
                              '; details: ' +
                              (this._videoElm.error.message || 'error'),
                          ),
                            this._checkUrlActive(this.url),
                            this.eventEmitter.trigger(o.H5_PLAYER_ERROR, {
                              code: B.a.H5_ERROR_CODE.VIDEO_ERROR,
                              video: this._videoElm,
                              error: e,
                            }),
                            this.eventEmitter.onPlayerError && this.eventEmitter.onPlayerError();
                        },
                      },
                      {
                        key: 'onEnded',
                        value: function (e) {
                          this._setEnded();
                        },
                      },
                      {
                        key: 'startSeek',
                        value: function () {
                          this.setCurrentTime(this.seekTime), (this.isSeek = !1);
                        },
                      },
                      {
                        key: '_sendVideoLoadMetrics',
                        value: function (e) {
                          var t =
                            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                          if (!(e > 1e4)) {
                            this._stat.setComDim(C.a.DIM_COM.ACT_LOAD_TYPE, B.a.HLS_LOAD_TYPE.XHR);
                            var i = [
                              this._stat.createAct(C.a.ACT.VIDEO_LOAD_TS, { value: [e, t] }),
                            ];
                            this._tsdb.sendMetrics(i);
                          }
                        },
                      },
                      {
                        key: '_sendVideoVodLoad',
                        value: function (e) {
                          p.a.log('HlsTagPlayer._sendVideoVodLoad', e),
                            this.statVod.setActDim(C.a.VOD_DIM_COM.CREATE_TIME, e),
                            this.hasPicture || (e = 99999),
                            this._tsdb.sendVodMP4Time({ loadTime: e });
                        },
                      },
                      {
                        key: '_setWaiting',
                        value: function (e) {
                          if (this.waiting !== e) {
                            (this.waiting = e), this.eventEmitter.trigger(o.PLAY_CARTON, e);
                            var t = e ? d : h;
                            this._updateStatus(t);
                          }
                        },
                      },
                      {
                        key: '_reportVideoQuality',
                        value: function () {
                          var e = [];
                          this._stat.setCore(C.a.CORE.PLAY_DELAY, this.getBufferLen()),
                            this._stat.setCore(
                              C.a.CORE.VIDEO_BLOCK_COUNT,
                              this._pauseStat._badQualityCnt,
                            ),
                            this._stat.setCore(
                              C.a.CORE.VIDEO_BLOCK_DURATION,
                              this._pauseStat._badQualityTime,
                            ),
                            this._stat.setCoreDim(
                              C.a.DIM_CORE.VIDEO_BAD_QUALITY,
                              this._pauseStat.paused ? 100 : 0,
                            ),
                            this.statVod.setCore(
                              C.a.VOD_CORE.VOD_BAD_QUALITY,
                              this._pauseStat.paused ? 100 : 0,
                            ),
                            this.statVod.setCore(
                              C.a.VOD_CORE.VOD_BLOCK_COUNT,
                              this._pauseStat._badQualityCnt,
                            ),
                            this.statVod.setCore(
                              C.a.VOD_CORE.VOD_BLOCK_DURATION,
                              this._pauseStat._badQualityTime,
                            ),
                            this._stat.fill(e, !1),
                            this.isLive || this.statVod.fill(e, !1),
                            this._tsdb.sendMetrics(e),
                            this._pauseStat.checkBadQuality(),
                            this._pauseStat.reset20();
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          this._videoElm && (this._videoElm.muted = e);
                        },
                      },
                      {
                        key: 'getCodecType',
                        value: function () {
                          return G.a.H264;
                        },
                      },
                      {
                        key: 'getVideoWidth',
                        value: function () {
                          return this._videoElm ? this._videoElm.videoWidth : 0;
                        },
                      },
                      {
                        key: 'getVideoHeight',
                        value: function () {
                          return this._videoElm ? this._videoElm.videoHeight : 0;
                        },
                      },
                      {
                        key: 'getFps',
                        value: function () {
                          return -100;
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          this._videoElm && (this._videoElm.playbackRate = Number(e));
                        },
                      },
                      {
                        key: 'isPlaying',
                        get: function () {
                          return this.videoStatus !== u;
                        },
                      },
                      {
                        key: 'hasPicture',
                        get: function () {
                          return this.isPlaying && 0 !== this.getCurrentTime();
                        },
                      },
                      {
                        key: 'notAllowedAutoplay',
                        get: function () {
                          return !this.allowedAutoPlay;
                        },
                      },
                      {
                        key: 'networkState',
                        get: function () {
                          return this._videoElm && this._videoElm.networkState;
                        },
                      },
                      {
                        key: 'networkStateCode',
                        get: function () {
                          return this.urlNetworkstate || 0;
                        },
                      },
                      {
                        key: 'errorCode',
                        get: function () {
                          return (
                            this._videoElm && this._videoElm.error && this._videoElm.error.code
                          );
                        },
                      },
                    ]),
                    e
                  );
                })(),
                oa = 'loaded',
                ha = 'error',
                ua = 'timeout',
                da = new Map(),
                ca = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i(e) {
                    var r;
                    return (
                      Object(s.a)(this, i),
                      ((r = t.call(this))._libName = e),
                      (r._script = null),
                      (r._loaded = !1),
                      (r._onLoadBind = r._onLoad.bind(Object(fe.a)(r))),
                      (r._onErrorBind = r._onError.bind(Object(fe.a)(r))),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'load',
                        value: function (e) {
                          var t =
                            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 6e4;
                          if (this._loaded) this.trigger(oa);
                          else {
                            var i = this._script;
                            i ||
                              (((i = document.createElement('script')).async = !0),
                              (i.onload = i.onreadystatechange = this._onLoadBind),
                              (i.onerror = this._onErrorBind),
                              (i.src = e.endsWith('/')
                                ? e + this._libName
                                : e + '/' + this._libName),
                              document.getElementsByTagName('head')[0].appendChild(i),
                              (this._script = i),
                              F.once(this._onTimeout, this, t));
                          }
                        },
                      },
                      {
                        key: '_onLoad',
                        value: function () {
                          var e = this._script,
                            t = e.readyState;
                          (t && 'loaded' !== t && 'complete' !== t) ||
                            ((e.onload = e.onreadystatechange = null),
                            (this._loaded = !0),
                            F.remove(this._onTimeout, this),
                            this.trigger(oa));
                        },
                      },
                      {
                        key: '_onTimeout',
                        value: function () {
                          this._clear(), this.trigger(ua);
                        },
                      },
                      {
                        key: '_onError',
                        value: function () {
                          this._clear(), this.trigger(ha);
                        },
                      },
                      {
                        key: '_clear',
                        value: function () {
                          var e = this._script;
                          e &&
                            ((e.onload = e.onreadystatechange = e.onerror = null),
                            (e.src = ''),
                            e.parentNode && e.parentNode.removeChild(e),
                            (this._script = null));
                        },
                      },
                    ]),
                    i
                  );
                })(Pe),
                la = new ((function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    var e;
                    return (
                      Object(s.a)(this, i),
                      ((e = t.call(this)).libName = 'HYThree.js'),
                      (e.loaded = !1),
                      (e.ON_LOAD = 'on_load'),
                      (e.callbacks = { onLoaded: e.onLoaded, thisObj: Object(fe.a)(e) }),
                      e
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'loadLib',
                        value: function (e) {
                          this.loaded
                            ? this.trigger(this.ON_LOAD)
                            : (function (e, t, i) {
                                var s = i.onLoaded,
                                  r = void 0 === s ? null : s,
                                  a = i.onError,
                                  n = void 0 === a ? null : a,
                                  o = i.onTimeout,
                                  h = void 0 === o ? null : o,
                                  u = i.thisObj,
                                  d = void 0 === u ? null : u,
                                  c = i.timeout,
                                  l = void 0 === c ? 6e4 : c,
                                  p = da.get(t);
                                p || ((p = new ca(t)), da.set(t, p)),
                                  r && p.on(oa, r, d),
                                  n && p.on(ha, n, d),
                                  h && p.on(ua, h, d),
                                  p.load(e, l);
                              })(e, this.libName, this.callbacks);
                        },
                      },
                      {
                        key: 'onLoaded',
                        value: function () {
                          (this.loaded = !0),
                            (function (e, t) {
                              var i = t.onLoaded,
                                s = void 0 === i ? null : i,
                                r = t.onError,
                                a = void 0 === r ? null : r,
                                n = t.onTimeout,
                                o = void 0 === n ? null : n,
                                h = t.thisObj,
                                u = void 0 === h ? null : h,
                                d = da.get(e);
                              d &&
                                (s && d.off(oa, s, u), a && d.off(ha, a, u), o && d.off(ua, o, u));
                            })(this.libName, this.callbacks),
                            window.HYThree && window.HYThree.default.init({ logger: p.a }),
                            this.trigger(this.ON_LOAD);
                        },
                      },
                      {
                        key: 'createVr',
                        value: function (e, t) {
                          return window.HYThree ? window.HYThree.default.createVr(e, t) : null;
                        },
                      },
                    ]),
                    i
                  );
                })(Pe))(),
                pa = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._hyPlayer = t),
                      (this._observer = E()),
                      (this._player = null),
                      (this._stat = i.stat),
                      (this._tsdb = i.tsdb),
                      (this._videoElement = i.videoElement),
                      (this._onObserverBind = this._onObserver.bind(this)),
                      this._observer.on(l.VIDEO_PLAY, this._onObserverBind),
                      this._observer.on(l.FLV_URL_UNAVAILABLE, this._onObserverBind),
                      this._observer.on(l.H5_PLAYER_ERROR, this._onObserverBind),
                      this._observer.on(l.NO_DATA_RECEIVED, this._onObserverBind),
                      this._observer.on(l.P2P_TIMEOUT, this._onObserverBind),
                      this._observer.on(l.FLV_TRY_TO_P2P, this._onObserverBind),
                      (this._info = null),
                      (this._data = null),
                      (this._vr = null),
                      (this._viewWidth = 0),
                      (this._viewHeight = 0),
                      (this._hyPlayer.setSize = this.setSize.bind(this)),
                      (this._hyPlayer.addViewport = this.addViewport.bind(this)),
                      (this._hyPlayer.getViewport = this.getViewport.bind(this)),
                      (this._hyPlayer.setViewport = this.setViewport.bind(this));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: '_onObserver',
                        value: function (e, t) {
                          switch (e) {
                            case l.VIDEO_PLAY:
                              this.onPlayVideo(e, t);
                              break;
                            case l.FLV_URL_UNAVAILABLE:
                            case l.H5_PLAYER_ERROR:
                            case l.NO_DATA_RECEIVED:
                            case l.P2P_TIMEOUT:
                              this._hyPlayer.trigger(e);
                              break;
                            case l.FLV_TRY_TO_P2P:
                              this._hyPlayer.lastP2PInfo &&
                                ((this._hyPlayer.lastP2PInfo.vr.playerType = 1),
                                this.start(this._hyPlayer.lastP2PInfo));
                          }
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this.stop(), (this._data = null);
                        },
                      },
                      {
                        key: 'disposeVr',
                        value: function () {
                          this._vr && (this._vr.dispose(), (this._vr = null));
                        },
                      },
                      {
                        key: 'disposePlayer',
                        value: function () {
                          this._player && (this._player.stop(), (this._player = null));
                        },
                      },
                      {
                        key: 'start',
                        value: function (e) {
                          this.disposeVr(),
                            this.disposePlayer(),
                            p.a.log('VrPlayer.play', e),
                            (this._info = e),
                            this._stat.setComDim(
                              C.a.DIM_COM.VR_MODE,
                              e.vr && e.vr.type ? e.vr.type : 0,
                            );
                          var t = Object.assign({}, e),
                            i = null;
                          (i = e.streamType === Ga.StreamType.MP4 ? ee : Ga.isSupported() ? ra : na)
                            ? ((this._player = new i(this._observer, {
                                stat: this._stat,
                                tsdb: this._tsdb,
                                videoElement: this._videoElement,
                              })),
                              this._player.start(t))
                            : p.a.error('play error, streamType=', e.streamType);
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          la.off(la.ON_LOAD, this.onLoadVrLib, this),
                            (this._viewWidth = 0),
                            (this._viewHeight = 0),
                            this.disposeVr(),
                            this.disposePlayer();
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function (e) {
                          this._player && this._player.setVolume(e);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          this._player && this._player.setMuted(e);
                        },
                      },
                      {
                        key: 'getMuted',
                        value: function () {
                          return !!this._player && this._player.getMuted();
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this._player ? this._player.getBufferLen() : 0;
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this._player ? this._player.getCurrentTime() : 0;
                        },
                      },
                      {
                        key: 'getCurrentDts',
                        value: function () {
                          return this._player ? this._player.getCurrentDts() : 0;
                        },
                      },
                      {
                        key: 'getCurrentSeiOffsetDts',
                        value: function () {
                          return this._player ? this._player.getCurrentSeiOffsetDts() : 0;
                        },
                      },
                      {
                        key: 'getDurationTime',
                        value: function () {
                          return this._player ? this._player.getDurationTime() : 0;
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          this._player && this._player.play();
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          this._player && this._player.pause();
                        },
                      },
                      {
                        key: 'updatePlayerStatus',
                        value: function (e) {
                          this._info.streamType === Ga.StreamType.HLS && (this._player.started = e);
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          this._player && this._player.seek(e);
                        },
                      },
                      {
                        key: 'setSize',
                        value: function (e, t) {
                          (this._viewWidth = e),
                            (this._viewHeight = t),
                            this._vr && this._vr.setSize(e, t);
                        },
                      },
                      {
                        key: 'getViewport',
                        value: function () {
                          return this._vr ? this._vr.getViewport() : { x: 0, y: 0, z: 0 };
                        },
                      },
                      {
                        key: 'setViewport',
                        value: function (e) {
                          this._vr && this._vr.setViewport(e);
                        },
                      },
                      {
                        key: 'addViewport',
                        value: function (e) {
                          this._vr && this._vr.addViewport(e);
                        },
                      },
                      {
                        key: 'onPlayVideo',
                        value: function (e, t) {
                          (this._data = t),
                            (this._info.vr.videoWidth = t.width),
                            (this._info.vr.videoHeight = t.height),
                            la.on(la.ON_LOAD, this.onLoadVrLib, this),
                            la.loadLib(this._info.h5Root);
                        },
                      },
                      {
                        key: 'onLoadVrLib',
                        value: function () {
                          la.off(la.ON_LOAD, this.onLoadVrLib, this),
                            (this._data.width = this._viewWidth || this._data.width),
                            (this._data.height = this._viewHeight || this._data.height),
                            (this._vr = la.createVr(this._data.video, this._info.vr)),
                            this._vr.play(),
                            this._hyPlayer.trigger(l.VIDEO_PLAY, {
                              video: this._vr.getView(),
                              width: this._data.width,
                              height: this._data.height,
                            });
                        },
                      },
                      {
                        key: 'connected',
                        get: function () {
                          return !!this._player && this._player.connected;
                        },
                      },
                      {
                        key: 'isPlaying',
                        get: function () {
                          return !!this._player && this._player.isPlaying;
                        },
                      },
                      {
                        key: 'hasPicture',
                        get: function () {
                          return !!this._player && this._player.hasPicture;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                fa = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._ignoreMap = new Map()),
                      (this._ignoreDefault = !1),
                      this.initLv();
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'addStreamUrl',
                        value: function (e, t) {
                          var i = I.a.statLv;
                          x.b.isOpen(I.a.statCfg, e, t, !1) &&
                            i[2] > 0 &&
                            this._ignoreMap.set(C.a.DIM_COM.STREAM_URL, 1);
                        },
                      },
                      {
                        key: 'initLv',
                        value: function (e, t) {
                          (this._ignoreDefault = !1), this._ignoreMap.clear();
                          var i = I.a.statLv,
                            s = x.b.isOpen(I.a.statCfg, e, t, !1);
                          if (
                            (p.a.log('StatFilter.init isOpen='.concat(s, ' statLv=').concat(i)), s)
                          ) {
                            this._ignoreDefault = 1 === i[0];
                            var r = this._ignoreMap;
                            r.clear(),
                              i[1] > 0 &&
                                (r.set(C.a.DIM_CORE.VIDEO_BAD_QUALITY_OLD, 1),
                                r.set(C.a.DIM_COM.P2P_COOL_FLAG, 1),
                                r.set(C.a.DIM_COM.ACT_LOAD_TYPE, 1)),
                              i[2] > 0 &&
                                (i[2] > 1 && r.set(C.a.DIM_COM.STREAM, 1),
                                r.set(C.a.DIM_COM.CDP_ID, 1)),
                              i[3] > 0 &&
                                (i[3] > 1 &&
                                  (r.set(C.a.DIM_COM.V_RECV_FRAMES, 1),
                                  r.set(C.a.DIM_COM.V_RECV_FRAME, 1),
                                  r.set(C.a.DIM_COM.V_PLAY_FRAME, 1),
                                  r.set(C.a.DIM_COM.V_TO_PLAY_FRAME, 1),
                                  r.set(C.a.DIM_COM.VISIBILITY_STATE, 1)),
                                r.set(C.a.DIM_COM.VIDEO_PAUSE_BUFFERS, 1),
                                r.set(C.a.DIM_COM.VIDEO_PAUSE_CONTINUE_BUFFERS, 1),
                                r.set(C.a.DIM_LINK_STA.name, 1),
                                r.set(C.a.DIM_LINK_SAM.name, 1),
                                r.set(C.a.FRAME_INFO.name, 1)),
                              i[4] > 0 && r.set(C.a.AI_CONTROL_DATA.name, 1),
                              i[5] > 0 &&
                                (i[5] > 1 &&
                                  (r.set(C.a.SUB_INFO.name, 1), r.set(C.a.PUNCH_INFO.name, 1)),
                                r.set(C.a.CORE.FORWARD_REJECT_CNT, 1),
                                r.set(C.a.DIM_COM.SUB_CHANGE_STATE, 1),
                                r.set(C.a.UPDOWN_INFO.name, 1),
                                r.set(C.a.PUNCH_BACK_RET.name, 1),
                                r.set(C.a.SUBSTREAM_INFO.name, 1),
                                r.set(C.a.FORCESUB_REASON.name, 1),
                                r.set(C.a.SUB_RETURN.name, 1),
                                r.set(C.a.NONODE_RETURN.name, 1),
                                r.set(C.a.P2P_TCP_TYPE.name, 1),
                                r.set(C.a.P2P_TCP_STATE.name, 1)),
                              i[6] > 0 &&
                                (r.set(C.a.DIM_COM.BROWSER_NAME, 1),
                                r.set(C.a.DIM_COM.BROWSER_VERSION, 1),
                                r.set(C.a.DIM_COM.BROWSER_KERNEL, 1),
                                r.set(C.a.DIM_COM.BROWSER_KERNEL_VERSION, 1),
                                r.set(C.a.DIM_COM.OS_NAME, 1),
                                r.set(C.a.DIM_COM.OS_VERSION, 1),
                                r.set(C.a.DIM_COM.RENDER_INFO, 1)),
                              i[7] > 0 &&
                                (r.set(C.a.DIM_COM.STREAM_INDEX, 1),
                                r.set(C.a.DIM_COM.OBS_RENDER_MODE, 1),
                                r.set(C.a.CORE.OBS_FPS, 1),
                                r.set(C.a.CORE.OBS_UPLOAD_TS, 1)),
                              i[8] > 0 &&
                                (r.set(C.a.DIM_COM.VR_ENABLE, 1), r.set(C.a.DIM_COM.VR_MODE, 1)),
                              i[9] > 0 &&
                                (r.set(C.a.DIM_COM.CDN_CIP, 1),
                                r.set(C.a.DIM_COM.CDN_SIP, 1),
                                r.set(C.a.DIM_COM.ALT_SVC, 1),
                                r.set(C.a.DIM_COM.QUIC, 1)),
                              i[10] > 0 &&
                                (i[10] > 3 &&
                                  (r.set('pcdn_hot_degree_in', 1),
                                  r.set('pcdn_hot_degree_kick', 1),
                                  r.set('pcdn_hot_degree', 1),
                                  r.set('get_pcdn_url_result', 1),
                                  r.set(C.a.DIM_COM.CLI_ISP, 1),
                                  r.set(C.a.DIM_COM.CLI_PROV, 1),
                                  r.set(C.a.DIM_COM.PCDN_SVR_ISP, 1),
                                  r.set(C.a.DIM_COM.PCDN_SVR_AREA, 1)),
                                i[10] > 2 &&
                                  (r.set(C.a.PCDN_DATA.GET_PCDN_URL_TOTAL_CNT, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_URL_SUCCESS, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_URL_SUC_FREETIME, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_ERR_NOT_REACHED, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_ERR_OVER_RUN, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_ERR_OVER_RUN_FREETIME, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_ERR_NOT_COVERD, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_ERR_OTHER, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_ERROR_REQ, 1),
                                  r.set(C.a.PCDN_DATA.GET_SUBS_URL_ERROR_CNT, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_DATA_TIME, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_DATA_TIME_CNT, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_SUBS_URL_TIME, 1),
                                  r.set(C.a.PCDN_DATA.GET_PCDN_SUBS_URL_TIME_CNT, 1),
                                  r.set(C.a.PCDN_DATA.GET_CDN_DATA_TIME, 1),
                                  r.set(C.a.PCDN_DATA.GET_CDN_DATA_TIME_CNT, 1)),
                                i[10] > 1 &&
                                  (r.set(C.a.DIM_COM.SUB_PCDN_STATE, 1),
                                  r.set(C.a.DIM_COM.FLV_PCDN_STATE, 1)),
                                r.set('pcdn_pull_stream_user_cnt', 1),
                                r.set('pcdn_get_proxy_user_cnt', 1),
                                r.set(C.a.PCDN_BW_DATA.name, 1)),
                              i[11] > 0 &&
                                (i[11] > 1 &&
                                  (r.set(C.a.CORE.REAL_KBPS_SAMPLE, 1),
                                  r.set(C.a.CORE.REAL_FLAC_KBPS_SAMPLE, 1),
                                  r.set(C.a.CORE.RECV_TOTAL_SAMPLE, 1),
                                  r.set(C.a.CORE.RECV_LAN_SAMPLE, 1)),
                                r.set(C.a.DIM_COM.AUTO_U_REASON, 1),
                                r.set(C.a.DIM_COM.AUTO_D_REASON, 1),
                                r.set(C.a.DIM_COM.AUTO_HEART_TYPE, 1),
                                r.set(C.a.DIM_COM.AUTO_CODEC_CHANGE_TYPE, 1),
                                r.set(C.a.DIM_COM.AUTO_BAD_REASON, 1),
                                r.set(C.a.DIM_COM.AUTO_BAD_MIN_REASON, 1),
                                r.set(C.a.CORE.AUTO_SWITCH_CNT, 1),
                                r.set(C.a.CORE.AUTO_SWITCH_SAME_CNT, 1),
                                r.set(C.a.CORE.AUTO_BAD_QUALITY, 1),
                                r.set(C.a.CORE.AUTO_BAD_QUALITY_UP, 1),
                                r.set(C.a.CORE.AUTO_BAD_DURATION, 1),
                                r.set(C.a.CORE.AUTO_BAD_DURATION_UP, 1),
                                r.set(C.a.CORE.AUTO_BAD_SWITCH, 1),
                                r.set(C.a.CORE.AUTO_BAD_SWITCH_SAME, 1),
                                r.set(C.a.CORE.AUTO_BAD_SWITCH_UP, 1),
                                r.set(C.a.CORE.AUTO_BAD_DONE, 1),
                                r.set(C.a.CORE.AUTO_BAD_BUFFER, 1),
                                r.set(C.a.CORE.AUTO_CONTINUE_BUFFER, 1),
                                r.set(C.a.AUTO_INFO.name, 1)),
                              1 === i[12] &&
                                (r.set(C.a.CORE.SVR_DELAY_INFOS, 1),
                                r.set(C.a.CORE.DELAY_NODE_INFO, 1),
                                r.set(C.a.CORE.SVR_LAST_P_DELAY, 1)),
                              1 === i[13] && r.set(C.a.HLS_INFO.name, 1),
                              i[14],
                              1 === i[16] &&
                                (r.set(C.a.VIDEO_LINK.PVSSC, 1),
                                r.set(C.a.VIDEO_LINK.PVFSC, 1),
                                r.set(C.a.VIDEO_LINK.PVLSC, 1),
                                r.set(C.a.VIDEO_LINK.PVLFC, 1),
                                r.set(C.a.VIDEO_LINK.PVPFC, 1),
                                r.set(C.a.VIDEO_LINK.PVPTC, 1),
                                r.set(C.a.VIDEO_LINK.PVPAFC, 1),
                                r.set(C.a.VIDEO_LINK.PVRFC, 1));
                          }
                        },
                      },
                      {
                        key: 'checkFilter',
                        value: function (e) {
                          var t = this;
                          e.forEach(function (e) {
                            t.filterObj(e.vField), t.filterObj(e.vDimension), t.filterObj(e.vExLog);
                          });
                        },
                      },
                      {
                        key: 'filterObj',
                        value: function (e) {
                          var t = [];
                          for (var i in e)
                            (0 === e[i] ||
                              ('' === e[i] && this._ignoreDefault) ||
                              this._ignoreMap.has(i)) &&
                              t.push(i);
                          for (var s = 0; s < t.length; s++) delete e[t[s]];
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ma = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.comDim = new Map()),
                      (this.coreDim = new Map()),
                      (this.actDim = new Map()),
                      (this.extDim = new Map()),
                      (this.comFormatMap = new Map()),
                      (this.coreMap = new Map()),
                      (this.compMap = new Map()),
                      (this.keyvalCoreDimMap = new Map()),
                      (this.heart_type = C.a.HEART_TYPE.START),
                      (this.recordTs = this.create_time = D.a.now()),
                      (this.filter = new fa());
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'startRecord',
                        value: function () {
                          this.recordTs = D.a.now();
                        },
                      },
                      {
                        key: 'checkFilter',
                        value: function (e) {
                          this.filter.checkFilter(e);
                        },
                      },
                      {
                        key: 'setCreateTime',
                        value: function (e) {
                          isNaN(e) || (this.create_time = e);
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this.comDim.clear(),
                            this.coreDim.clear(),
                            this.actDim.clear(),
                            this.extDim.clear(),
                            this.coreMap.clear(),
                            this.compMap.clear(),
                            this.keyvalCoreDimMap.clear(),
                            (this.heart_type = C.a.HEART_TYPE.START),
                            (this.create_time = D.a.now());
                        },
                      },
                      {
                        key: 'clearFill',
                        value: function () {
                          this.coreDim.clear(),
                            this.extDim.clear(),
                            this.coreMap.clear(),
                            this.compMap.clear(),
                            this.keyvalCoreDimMap.clear();
                        },
                      },
                      {
                        key: 'createAct',
                        value: function (e, t) {
                          return this._createAct(e, t);
                        },
                      },
                      {
                        key: 'createActs',
                        value: function (e) {
                          var t = [];
                          if (e)
                            for (var i = 0; i < e.length; i++) {
                              var s = e[i],
                                r = this._createAct(s.type, s.params);
                              t.push(r);
                            }
                          return t;
                        },
                      },
                      {
                        key: '_createAct',
                        value: function (e, t) {
                          var i = { sMetricName: C.a.ACT.name, vField: {}, vDimension: {} };
                          if (
                            ((i.vDimension[C.a.ACT.field] = e),
                            (i.vDimension[C.a.DIM_CORE.CREATE_TIME] = D.a.now() - this.create_time),
                            this._fillFromMap(i.vDimension, this.comDim),
                            this._fillFromMap(i.vDimension, this.actDim),
                            t)
                          ) {
                            var s = 0;
                            if (t.hasOwnProperty(C.a.KEY_VALUE)) {
                              var r = t[C.a.KEY_VALUE];
                              for (s = 0; s < r.length; s++)
                                i.vField[C.a.KEY_VALUE + (s + 1)] = r[s];
                            }
                            if (t.hasOwnProperty(C.a.KEY_STR)) {
                              var a = t[C.a.KEY_STR];
                              for (s = 0; s < a.length; s++)
                                i.vDimension[C.a.KEY_STR + (s + 1)] = a[s];
                            }
                            t.hasOwnProperty(C.a.KEY_DIM) &&
                              Object.assign(i.vDimension, t[C.a.KEY_DIM]);
                          }
                          return (i.vDimension.appid = U.a.appid), this.actDim.clear(), i;
                        },
                      },
                      {
                        key: 'fill',
                        value: function (e, t) {
                          t
                            ? ((this.heart_type = C.a.HEART_TYPE.END),
                              this._fill(e),
                              (this.heart_type = C.a.HEART_TYPE.START))
                            : this._fill(e);
                        },
                      },
                      {
                        key: '_fill',
                        value: function (e) {
                          if (0 != this.coreMap.size || 0 != this.compMap.size) {
                            var t = {
                                sMetricName: C.a.CORE.name,
                                vField: {},
                                vDimension: {},
                                vExLog: {},
                              },
                              i = D.a.now();
                            this.coreMap.set(C.a.CORE.HTD, i - this.recordTs),
                              (this.recordTs = i),
                              this.coreDim.set(C.a.DIM_CORE.HEART_TYPE, this.heart_type),
                              this._fillFromMap(t.vDimension, this.comDim),
                              this._fillFromMap(t.vDimension, this.coreDim),
                              this._fillFromMap(t.vExLog, this.extDim),
                              this._fillFromMap(t.vField, this.coreMap),
                              this._fillComp(t.vDimension),
                              this.coreDim.clear(),
                              this.extDim.clear(),
                              this.coreMap.clear(),
                              this.compMap.clear(),
                              this.heart_type == C.a.HEART_TYPE.START &&
                                (this.heart_type = C.a.HEART_TYPE.CONTINUS),
                              (t.vDimension.appid = U.a.appid),
                              e.push(t);
                          }
                        },
                      },
                      {
                        key: '_fillComp',
                        value: function (e) {
                          var t,
                            i = Object(Se.a)(this.compMap.keys());
                          try {
                            for (i.s(); !(t = i.n()).done; ) {
                              var s,
                                r = t.value,
                                a = this._getCompMapFormat(r),
                                n = a.get('ref') || ',',
                                o = a.get('split') || ';',
                                h = this.compMap.get(r),
                                u = '',
                                d = Object(Se.a)(h.keys());
                              try {
                                for (d.s(); !(s = d.n()).done; ) {
                                  var c = s.value;
                                  u.length > 0 && (u += o), (u += c + n + h.get(c));
                                }
                              } catch (e) {
                                d.e(e);
                              } finally {
                                d.f();
                              }
                              e[r] = u;
                            }
                          } catch (e) {
                            i.e(e);
                          } finally {
                            i.f();
                          }
                        },
                      },
                      {
                        key: '_fillFromMap',
                        value: function (e, t) {
                          var i,
                            s = Object(Se.a)(t.keys());
                          try {
                            for (s.s(); !(i = s.n()).done; ) {
                              var r = i.value;
                              e[r] = t.get(r);
                            }
                          } catch (e) {
                            s.e(e);
                          } finally {
                            s.f();
                          }
                        },
                      },
                      {
                        key: '_fillFromKeyvalMap',
                        value: function (e, t) {
                          var i,
                            s = Object(Se.a)(t.keys());
                          try {
                            for (s.s(); !(i = s.n()).done; ) {
                              for (
                                var r = i.value, a = t.get(r), n = a.entries(), o = '', h = 0;
                                h < a.size;
                                h++
                              ) {
                                var u = n.next().value;
                                (o += ''.concat(u[0], ':').concat(u[1])),
                                  h < a.size - 1 && (o += ',');
                              }
                              a.clear(), (e[r] = o);
                            }
                          } catch (e) {
                            s.e(e);
                          } finally {
                            s.f();
                          }
                        },
                      },
                      {
                        key: 'getComDim',
                        value: function (e) {
                          return this.comDim.get(e);
                        },
                      },
                      {
                        key: 'setComDim',
                        value: function (e, t) {
                          this.comDim.set(e, t);
                        },
                      },
                      {
                        key: 'setCoreDim',
                        value: function (e, t) {
                          this.coreDim.set(e, t);
                        },
                      },
                      {
                        key: 'addCoreDim',
                        value: function (e, t) {
                          this._addValue(this.coreDim, e, t);
                        },
                      },
                      {
                        key: 'addKeyvalCoreDim',
                        value: function (e, t) {
                          this._addKeyvalValue(this.keyvalCoreDimMap, e, t);
                        },
                      },
                      {
                        key: 'setActDim',
                        value: function (e, t) {
                          this.actDim.set(e, t);
                        },
                      },
                      {
                        key: 'setExtDim',
                        value: function (e, t) {
                          this.extDim.set(e, t);
                        },
                      },
                      {
                        key: 'delDim',
                        value: function (e) {
                          this.comDim.has(e)
                            ? this.comDim.delete(e)
                            : this.coreDim.has(e)
                            ? this.coreDim.delete(e)
                            : this.actDim.has(e) && this.actDim.delete(e);
                        },
                      },
                      {
                        key: 'setCore',
                        value: function (e, t) {
                          this.coreMap.set(e, t);
                        },
                      },
                      {
                        key: 'addCore',
                        value: function (e, t) {
                          this._addValue(this.coreMap, e, t);
                        },
                      },
                      {
                        key: 'setComp',
                        value: function (e, t, i) {
                          this._getCompMap(e).set(t, i);
                        },
                      },
                      {
                        key: 'addComp',
                        value: function (e, t, i) {
                          var s = this._getCompMap(e);
                          this._addValue(s, t, i);
                        },
                      },
                      {
                        key: 'setCompFormat',
                        value: function (e, t, i) {
                          var s = this._getCompMapFormat(e);
                          s.set('ref', t), s.set('split', i);
                        },
                      },
                      {
                        key: '_getCompMapFormat',
                        value: function (e) {
                          if (this.comFormatMap.has(e)) return this.comFormatMap.get(e);
                          var t = new Map();
                          return this.comFormatMap.set(e, t), t;
                        },
                      },
                      {
                        key: '_getCompMap',
                        value: function (e) {
                          if (this.compMap.has(e)) return this.compMap.get(e);
                          var t = new Map();
                          return this.compMap.set(e, t), t;
                        },
                      },
                      {
                        key: '_addValue',
                        value: function (e, t, i) {
                          if (e.has(t)) {
                            var s = e.get(t);
                            e.set(t, s + i);
                          } else e.set(t, i);
                        },
                      },
                      {
                        key: '_addKeyvalValue',
                        value: function (e, t, i) {
                          if (e.has(t)) {
                            var s = e.get(t),
                              r = i.split(':');
                            if (r.length < 2) return;
                            var a = r[0],
                              n = Number(r[1]);
                            if (s.has(a)) {
                              var o = s.get(a);
                              s.set(a, o + n);
                            } else s.set(a, n);
                          } else {
                            var h = i.split(':');
                            if (h.length < 2) return;
                            var u = new Map(),
                              d = h[0],
                              c = Number(h[1]);
                            u.set(d, c), e.set(t, u);
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                _a = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.speed = new ge(20)),
                      (this.rtt = new ge(20)),
                      (this.p2p = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'addSpeed',
                        value: function (e) {
                          var t = parseInt(e.replace('KB', ''));
                          this.speed.add(t);
                        },
                      },
                      {
                        key: 'addRtt',
                        value: function (e) {
                          this.rtt.add(e);
                        },
                      },
                      {
                        key: 'setP2p',
                        value: function (e) {
                          this.p2p = e;
                        },
                      },
                      {
                        key: 'getP2p',
                        value: function () {
                          return this.p2p;
                        },
                      },
                      {
                        key: 'getResult',
                        value: function () {
                          return {
                            speed: this.speed.getSamples(),
                            rtt: this.rtt.getSamples(),
                            p2p: this.p2p,
                          };
                        },
                      },
                    ]),
                    e
                  );
                })(),
                va = i(25),
                ya = i(39),
                Sa = i.n(ya),
                ga = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this.stat = t),
                      (this.tsdb = i),
                      (this.isP2PUseH265 = !0),
                      (this.isFlvUseH265 = !0),
                      (this.isHlsUseH265 = !0),
                      (this.costUs = 0),
                      (this.isCodecSupport = !1),
                      (this.codecSupportReason = -1e4),
                      (this.isBrowserSupport = !1),
                      (this.isCfgSupport = !1),
                      (this.serverSupported = !1),
                      (this.lastCurBitrate = 0),
                      (this.lastLine = 0),
                      (this.isUseH265Mse = !0);
                  }
                  return (
                    Object(r.a)(e, [
                      { key: 'destroy', value: function () {} },
                      {
                        key: 'onTurntoH264',
                        value: function (e) {
                          e === G.b.P2P
                            ? (this.isP2PUseH265 = !1)
                            : e === G.b.FLV
                            ? (this.isFlvUseH265 = !1)
                            : e == G.b.HLS && (this.isHlsUseH265 = !1);
                        },
                      },
                      {
                        key: 'onTurntoH265Wasm',
                        value: function () {
                          this.isUseH265Mse = !1;
                        },
                      },
                      {
                        key: 'init',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                          this.resetProps(e),
                            this._initCodec(e),
                            this._initBrowser(),
                            this._initRandom(e),
                            this._initCfg(e),
                            (this.lastCurBitrate = Number(e.curBitrate)),
                            (this.lastLine = Number(e.lineType)),
                            p.a.log(
                              'H265Support.init isCodecSupport='
                                .concat(this.isCodecSupport, ' isBrowserSupport=')
                                .concat(this.isBrowserSupport, ' isCfgSupport=')
                                .concat(this.isCfgSupport),
                            );
                        },
                      },
                      {
                        key: 'mseHevcInit',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                          this.resetMseHevcProps(e),
                            this._initBrowserMseHevcSupport(e),
                            this._initMseHevcCodec(e),
                            this._initMseHevcCfg(e),
                            (this.lastCurBitrate = Number(e.curBitrate)),
                            (this.lastLine = Number(e.lineType)),
                            p.a.log(
                              'H265Support.mseHevcInit isCodecSupport='
                                .concat(this.isCodecSupport, ' isBrowserSupport=')
                                .concat(this.isBrowserSupport, ' isCfgSupport=')
                                .concat(this.isCfgSupport),
                            );
                        },
                      },
                      {
                        key: 'resetProps',
                        value: function (e) {
                          (this.isCodecSupport = !1),
                            (this.codecSupportReason = -1e4),
                            (this.isBrowserSupport = !1),
                            (this.isCfgSupport = !1);
                          var t = Number(e.lineType),
                            i = Number(e.curBitrate);
                          ((0 != this.lastCurBitrate && this.lastCurBitrate != i) ||
                            (0 != this.lastLine && this.lastLine != t)) &&
                            ((this.isP2PUseH265 = !0),
                            (this.isFlvUseH265 = !0),
                            (this.isHlsUseH265 = !0));
                        },
                      },
                      {
                        key: 'resetMseHevcProps',
                        value: function (e) {
                          this.resetProps(e);
                          var t = Number(e.lineType),
                            i = Number(e.curBitrate);
                          ((0 != this.lastCurBitrate && this.lastCurBitrate != i) ||
                            (0 != this.lastLine && this.lastLine != t)) &&
                            (this.isUseH265Mse = !0);
                        },
                      },
                      {
                        key: '_initCodec',
                        value: function (e) {
                          var t = arguments;
                          if (
                            (1 == localStorage.open265 && (localStorage.w265LastCost = 0),
                            this.isReport265 ||
                              e.type === G.b.STREAM ||
                              (this.tsdb.sendMetrics([
                                this.stat.createAct(C.a.ACT.H265_STATUS, {
                                  value: [10],
                                  str: [x.b.is64bitSoftware() ? 1 : 2, navigator.userAgent],
                                }),
                              ]),
                              p.a.log(
                                'HYPlayer.initH265 support hardwareConcurrency hardwareConcurrency=',
                                navigator.hardwareConcurrency,
                              ),
                              (this.isReport265 = !0)),
                            this._isSupported(e) && Sa.a && Sa.a.getInstance)
                          ) {
                            var i = {
                                enableWebH265: 1,
                                baseCostUs: { 2e3: 32e3, 4e3: 3e4 },
                                loopCount: 100,
                                singleThreadBitKbps: [10],
                                multiThreadBitKbps: [4e3, 2e3, 500],
                                threadCount: 2,
                                degrade: 0,
                                statIntervalMs: 1e3,
                                fmt: 11,
                                share: 0,
                                wasmLoad: 500,
                                core: { 2e3: 3, 4e3: 4 },
                                x86: { 4e3: 1 },
                              },
                              s = {};
                            (i.x86 = { 4e3: 1 }),
                              I.a.h265Config[0][0].forEach(function (e, t) {
                                s[e] = I.a.h265Config[0][1][t];
                              }),
                              (i.baseCostUs = s),
                              (i.multiThreadBitKbps = I.a.h265Config[1]);
                            var r = {};
                            I.a.h265Config[3][0].forEach(function (e, t) {
                              r[e] = I.a.h265Config[3][1][t];
                            }),
                              (i.core = r),
                              Sa.a.getInstance().parseConfigs(i);
                            var a = e.curBitrate,
                              n = Sa.a.getInstance().isSupportH265(a);
                            p.a.log('H265Support.initH265 bitRate', a, n),
                              (this.isCodecSupport = n.isSupport),
                              0 == I.a.vodH265Config[2] &&
                                e.type === G.b.HLS &&
                                (this.isCodecSupport = !1),
                              (this.costUs = n.costUs),
                              (this.codecSupportReason = n.reason),
                              this.tsdb.sendMetrics([
                                this.stat.createAct(C.a.ACT.H265_STATUS, {
                                  value: [2],
                                  str: [n.reason],
                                }),
                              ]),
                              Sa.a.getInstance().setLogCallback(function () {
                                var e = ['H265 render setLogCallback'].concat(Array.apply(null, t));
                                p.a.log.apply(p.a, e);
                              });
                          }
                        },
                      },
                      {
                        key: '_initMseHevcCodec',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                          if (this.isUseH265Mse) {
                            if (this._isSupported(e)) {
                              this.isCodecSupport = !1;
                              var t = e.curBitrate;
                              if (g.a.version.major >= I.a.h265MseChromeConfig[0])
                                navigator.hardwareConcurrency < I.a.h265MseChromeConfig[2]
                                  ? (this.isCodecSupport = !1)
                                  : (this.isCodecSupport = !0);
                              else {
                                if (I.a.h265MseConfig[4].length > 0) {
                                  var i = {},
                                    s = {},
                                    r = {};
                                  if (
                                    (I.a.h265MseConfig[4][0].forEach(function (e, t) {
                                      (i[e] = I.a.h265MseConfig[4][1][t]),
                                        (s[e] = I.a.h265MseConfig[4][2][t]),
                                        (r[e] = I.a.h265MseConfig[4][3][t]);
                                    }),
                                    navigator.hardwareConcurrency <= i[t])
                                  ) {
                                    if (!(s[t] && navigator.hardwareConcurrency > s[t]))
                                      return void p.a.warn(
                                        'H265Support._initMseHevcCodec Mse Config: curThread='
                                          .concat(
                                            navigator.hardwareConcurrency,
                                            " isn't greater than thread=",
                                          )
                                          .concat(i[t]),
                                      );
                                    if (this.isBrowserSupport && r[t]) {
                                      var a = $e().toLowerCase();
                                      if (!(a.indexOf(r[t]) >= 0))
                                        return void p.a.warn(
                                          'H265Support._initMseHevcCodec Mse Render Config: curRender='
                                            .concat(a, " isn't suppored render=")
                                            .concat(r[t]),
                                        );
                                      this.isCodecSupport = !0;
                                    }
                                  }
                                }
                                this.isCodecSupport = !0;
                              }
                            }
                            0 == I.a.vodH265Config[1] &&
                              e.type === G.b.HLS &&
                              (this.isCodecSupport = !1);
                          } else this.isCodecSupport = !1;
                        },
                      },
                      {
                        key: '_isSupported',
                        value: function (e) {
                          var t = !1;
                          if (e.type === G.b.HLS) {
                            if (
                              (e.h265Url && (this.serverSupported = !0),
                              e.h265Url && this.isHlsUseH265)
                            )
                              return !0;
                          } else {
                            if (
                              ((t =
                                (e.iIsHEVCSupport > 0 && e.iHEVCBitRate >= 0) ||
                                (this._isH265(e.iCodecType) && 0 === e.iBitRate)),
                              (this.serverSupported = t),
                              e.type === G.b.FLV)
                            )
                              return (this.isFlvUseH265 && t) || 1 == localStorage._enableServer265;
                            if (e.type === G.b.P2P)
                              return (this.isP2PUseH265 && t) || 1 == localStorage._enableServer265;
                          }
                          return !1;
                        },
                      },
                      {
                        key: '_isH265',
                        value: function (e) {
                          return 1 === e || 4 === e || 6 === e || 8 === e;
                        },
                      },
                      {
                        key: '_initBrowser',
                        value: function () {
                          var e = g.a.version.major,
                            t = !1;
                          g.a.chrome && e >= I.a.h265Config[2] && (t = !0),
                            g.a.chrome &&
                              -1 !== I.a.wasm265BlackBrowVers.indexOf(e) &&
                              (p.a.log(
                                'H265Support._initBrowser wasm265BlackBrowVers',
                                I.a.wasm265BlackBrowVers,
                              ),
                              (t = !1)),
                            1 === Number(localStorage._enableBrowser) && (t = !0),
                            'undefined' == typeof SharedArrayBuffer && (t = !1),
                            (this.isBrowserSupport = t);
                        },
                      },
                      {
                        key: '_initBrowserMseHevcSupport',
                        value: function (e) {
                          var t = gi.a.isMseSupportedHevc();
                          if (t) {
                            var i = I.a.h265MseConfig[1];
                            if (i.length > 0) {
                              var s = g.a.version.major;
                              t = g.a.chrome && i.indexOf(s) >= 0 ? t && !0 : t && !1;
                            }
                            g.a.chrome &&
                              g.a.version.major >= I.a.h265MseChromeConfig[0] &&
                              (t = (t = !0) && this.getChromeHevcRenderSupport(e));
                          } else
                            p.a.warn(
                              "H265Support._initMseHevcCodec browser isn't supported mse h265",
                            );
                          1 == Number(localStorage._closeMseHevc) && (t = !1),
                            1 === Number(localStorage._enableMseHevcBrowser) && (t = !0),
                            (this.isBrowserSupport = t);
                        },
                      },
                      {
                        key: '_initRandom',
                        value: function (e) {
                          var t = this._getRandomUse(e);
                          this.isCodecSupport && (t || (this.isCodecSupport = !1)),
                            (e.randomH265 = t);
                        },
                      },
                      {
                        key: '_getRandomUse',
                        value: function (e) {
                          var t = localStorage.h265PresentUid,
                            i = e.presenterUid,
                            s = !0,
                            r = I.a.h265BlackUids;
                          if (
                            (e.liveType == va.a.REPLAY && (r = I.a.replayH265BlackUids),
                            r.forEach(function (e) {
                              i && e.toString() == i.toString() && (s = !1);
                            }),
                            !s)
                          )
                            return !1;
                          if (e.liveType == va.a.REPLAY || e.liveType == va.a.VOD) {
                            var a = I.a.whiteH265Uids;
                            if (0 == a[1]) {
                              var n = !1;
                              return (
                                a[0].forEach(function (e) {
                                  i && e.toString() == i.toString() && (n = !0);
                                }),
                                n
                              );
                            }
                          }
                          (localStorage.randomH265Percent && t == i) ||
                            (localStorage.randomH265Percent = I.a.randomH265Percent),
                            1 == localStorage.open265
                              ? (localStorage.randomH265Percent = 3e3)
                              : 2 == localStorage.open265 && (localStorage.randomH265Percent = 6e3);
                          var o = Number(localStorage.randomH265Percent);
                          return (
                            (localStorage.h265PresentUid = e.presenterUid),
                            o < I.a.h265PercentConfig
                          );
                        },
                      },
                      {
                        key: '_initCfg',
                        value: function (e) {
                          var t = 1 === Number(I.a.isConfigSupportH265);
                          e.type == G.b.HLS && (t = 1 === Number(I.a.isVodSupportH265)),
                            (I.a.isCloseAllFuncs(e.uid) ||
                              -1 != I.a.wcsSoft264Uids.indexOf(Number(e.uid))) &&
                              ((t = !1), p.a.log('H265Support._initCfg closeAllFuncs!')),
                            -1 !== I.a.h265BlackBrows.indexOf(g.a.version.major) && (t = !1),
                            I.a.wasmCloseCfg.length > 0 &&
                              1 == I.a.wasmCloseCfg[0] &&
                              (p.a.log('H265Support._initCfg wasm close!'), (t = !1)),
                            I.a.wasmCloseCfg.length > 0 &&
                              I.a.wasmCloseCfg[1].length > 0 &&
                              -1 != I.a.wasmCloseCfg[1].indexOf(Number(e.presenterUid)) &&
                              (p.a.log('H265Support._getConfigUse wasm black anchoruid'), (t = !1)),
                            (this.isCfgSupport = t);
                        },
                      },
                      {
                        key: '_initMseHevcCfg',
                        value: function (e) {
                          var t =
                            1 === Number(I.a.h265MseConfig[0]) &&
                            1 === Number(I.a.isConfigSupportH265);
                          if (
                            (e.type == G.b.HLS && (t = 1 === Number(I.a.isVodSupportH265)),
                            (I.a.isCloseAllFuncs(e.uid) ||
                              -1 !== I.a.wcsSoft264Uids.indexOf(Number(e.uid))) &&
                              ((t = !1), p.a.log('H265Support._initCfg closeAllFuncs!')),
                            -1 !== I.a.h265BlackBrows.indexOf(g.a.version.major) && (t = !1),
                            g.a.version.major >= I.a.h265MseChromeConfig[0] &&
                              e.curBitrate <= I.a.h265MseChromeConfig[1])
                          )
                            this.isCfgSupport = t;
                          else {
                            var i = I.a.h265MseConfig[2];
                            i.length > 0 && i.indexOf(e.curBitrate) >= 0
                              ? (t = t && !0)
                              : (p.a.warn(
                                  'H265Support._initMseHevcCodec Mse Config: bitrate '.concat(
                                    e.curBitrate,
                                    " isn't supported mse h265",
                                  ),
                                ),
                                (t = t && !1));
                            var s = I.a.h265MseConfig[3];
                            s.length > 0 &&
                              (s.indexOf(e.lineType) >= 0
                                ? (t = t && !0)
                                : (p.a.warn(
                                    'H265Support._initMseHevcCodec Mse Config: line '.concat(
                                      e.lineType,
                                      " isn't supported mse h265",
                                    ),
                                  ),
                                  (t = t && !1)));
                          }
                          var r = I.a.h265MseWhiteBlackUids[0];
                          r.length > 0 &&
                            (e.presenterUid && r.indexOf(Number(e.presenterUid)) >= 0
                              ? (t = t && !0)
                              : ((t = t && !1),
                                p.a.warn(
                                  'H265Support._initMseHevcCodec uid '.concat(
                                    e.presenterUid,
                                    " isn't in white list",
                                  ),
                                )));
                          var a = I.a.h265MseWhiteBlackUids[1];
                          a.length > 0 &&
                            e.presenterUid &&
                            a.indexOf(Number(e.presenterUid)) >= 0 &&
                            ((t = t && !1),
                            p.a.warn(
                              'H265Support._initMseHevcCodec uid '.concat(
                                e.presenterUid,
                                ' is in black list',
                              ),
                            )),
                            (this.isCfgSupport = t);
                        },
                      },
                      {
                        key: 'getChromeHevcRenderSupport',
                        value: function (e) {
                          return (
                            0 != I.a.h265MseChromeConfig[4] &&
                            -1 === I.a.wcs265BlackUids.indexOf(Number(e.uid)) &&
                            -1 === I.a.mse265BlackUids.indexOf(Number(e.uid)) &&
                            (-1 != I.a.enableEdgeBroMseCfg.indexOf(g.a.version.major) ||
                              -1 === g.a.name.indexOf('edg') ||
                              1 != e._isTurnTomse)
                          );
                        },
                      },
                      {
                        key: 'isSupported',
                        get: function () {
                          var e = this.isCodecSupport && this.isBrowserSupport && this.isCfgSupport;
                          return (
                            1 == Number(localStorage._localCloseHevc) && (e = !1),
                            1 === Number(localStorage._enableForceH265) && (e = !0),
                            e
                          );
                        },
                      },
                      {
                        key: 'canPreload',
                        get: function () {
                          return this.isBrowserSupport && this.isCfgSupport;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ta = {
                  NO_DATA: 1,
                  NO_DECODE: 2,
                  WORKER_ERROR: 3,
                  DECODE_ERROR: 4,
                  RENDER_ERROR: 5,
                  NO_RENDER: 6,
                  RECEIVE_LIST_OUT_LIMIT: 7,
                  YUV_OUT_LIMIT: 8,
                  WASM_TIMEOUT: 9,
                  CREATE_WEBGL_FAIL: 10,
                  CREATE_WORKER_ERROR: 11,
                  AUDIO_FAST: 12,
                  VIDEO_FAST: 13,
                  START_CODE_ERROR: 14,
                  WORKER_TIMEOUT: 15,
                  RETRY_MAX: 16,
                  dic: {
                    1: '20s无数据',
                    2: '10s无解码',
                    3: 'worker异常',
                    4: '解码失败',
                    5: '渲染失败',
                    6: '10s无渲染',
                    7: '解码前队列大于2000',
                    8: 'yuv队列大于300',
                    9: 'wasm timeout',
                    10: '创建webgl失败',
                    11: 'web worker异常',
                    12: '音频快，视频慢，切264',
                    13: '音频慢，视频快，切264',
                    14: 'hevcFindNextStartCode failed',
                    15: 'worker超时',
                    16: '重试超过最大次数',
                  },
                },
                Ea = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this._stat = t),
                      (this._tsdb = i),
                      (this._onMessageBind = this._onMessage.bind(this)),
                      (this._onErrorBind = this._onError.bind(this)),
                      (this._startTs = 0),
                      (this._readyTs = 0),
                      (this._isReady = !1),
                      (this._isTimeout = !1),
                      (this._isError = !1),
                      (this._decoder = null),
                      (this._callbacks = null),
                      (this._onMessageCb = null);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'terminate',
                        value: function () {
                          p.a.log('H265Decoder.terminate'),
                            this._destroyDecoder(),
                            F.remove(this._onTimeout, this),
                            (this._callbacks = null),
                            (this._onMessageCb = null),
                            (this._isReady = !1),
                            (this._startTs = 0),
                            (this._readyTs = 0);
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          p.a.log('H265Decoder.destroy'),
                            (this._stat = null),
                            (this._tsdb = null),
                            this.stopDecoder(),
                            this._decoder && this._decoder.terminate(),
                            F.remove(this._onTimeout, this);
                        },
                      },
                      {
                        key: '_destroyDecoder',
                        value: function () {
                          if (this._decoder) {
                            (this._decoder.onmessage = null),
                              (this._decoder.onerror = null),
                              this.stopDecoder();
                            try {
                              this._decoder.terminate();
                            } catch (e) {
                              p.a.log('H265Decoder._destroyDecoder', e);
                            }
                            this._decoder = null;
                          }
                        },
                      },
                      {
                        key: 'stopDecoder',
                        value: function () {
                          this._decoder && this._decoder.postMessage({ t: 6 });
                        },
                      },
                      {
                        key: 'load',
                        value: function (e, t) {
                          if ('undefined' != typeof SharedArrayBuffer)
                            if (((this._callbacks = t), this._decoder))
                              this._callbacks && this._callbacks.ready();
                            else {
                              var i = g.a.chrome && g.a.version.major >= 91;
                              1 == Number(localStorage._unSupportSimd) && (i = !1),
                                p.a.log('H265Decoder.load'),
                                (this._startTs = D.a.now());
                              var s = 'importScripts("'.concat(
                                  e + (i ? 'decoder.worker.simd.js' : 'decoder.worker.js'),
                                  '")',
                                ),
                                r = new Blob([s], { type: 'application/javascript' }),
                                a = window.URL.createObjectURL(r),
                                n = new Worker(a);
                              (n.onmessage = this._onMessageBind),
                                (n.onerror = this._onErrorBind),
                                (this._decoder = n),
                                F.remove(this._onTimeout, this),
                                F.once(this._onTimeout, this, 1e3);
                            }
                        },
                      },
                      {
                        key: '_onMessage',
                        value: function (t) {
                          switch (t.data.t) {
                            case 0:
                              this._decoder.postMessage({ t: 1 });
                              break;
                            case 2:
                              p.a.log('H265Decoder._onMessage worker isReady!'),
                                F.remove(this._onTimeout, this),
                                (e.preloaded = !0),
                                (this._isReady = !0),
                                (this._readyTs = D.a.now());
                              var i = this._readyTs - this._startTs;
                              this._tsdb &&
                                this._tsdb.sendMetrics([
                                  this._stat.createAct(C.a.ACT.H265_WORKER_LOAD_TS, { value: [i] }),
                                ]),
                                this._isError ||
                                  this._isTimeout ||
                                  (this._callbacks && this._callbacks.ready());
                          }
                          this._onMessageCb && this._onMessageCb(t);
                        },
                      },
                      {
                        key: '_onError',
                        value: function (e) {
                          p.a.error('H265Decoder._onError', e),
                            this._tsdb &&
                              this._tsdb.sendMetrics([
                                this._stat.createAct(C.a.ACT.H265_STATUS, {
                                  value: [1],
                                  str: [Ta.CREATE_WORKER_ERROR],
                                }),
                              ]),
                            this._destroyDecoder(),
                            F.remove(this._onTimeout, this),
                            (this._readyTs = 0),
                            (this._isReady = !1),
                            (this._isError = !0),
                            (localStorage.h265WorkerError = 1),
                            this._callbacks && this._callbacks.error();
                        },
                      },
                      {
                        key: '_onTimeout',
                        value: function () {
                          p.a.log('H265Decoder._onTimeout'),
                            this._tsdb &&
                              this._tsdb.sendMetrics([
                                this._stat.createAct(C.a.ACT.H265_STATUS, {
                                  value: [1],
                                  str: [Ta.WORKER_TIMEOUT],
                                }),
                              ]),
                            this._destroyDecoder(),
                            (this._readyTs = 0),
                            (this._isTimeout = !0),
                            (this._isReady = !1),
                            this._callbacks && this._callbacks.timeout();
                        },
                      },
                      {
                        key: 'onMessageCb',
                        set: function (e) {
                          this._onMessageCb = e;
                        },
                      },
                      {
                        key: 'decoder',
                        get: function () {
                          return this._decoder;
                        },
                      },
                      {
                        key: 'isReady',
                        get: function () {
                          return this._isReady;
                        },
                      },
                    ]),
                    e
                  );
                })();
              Object(ps.a)(Ea, 'preloaded', !1);
              var Ca = Ea,
                Da = (function () {
                  function e() {
                    Object(s.a)(this, e), (this.count = 0), (this.arr = []);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'inc',
                        value: function (e) {
                          this.count += e;
                        },
                      },
                      {
                        key: 'dec',
                        value: function (e) {
                          (this.count -= e), this.count < 0 && (this.count = 0);
                        },
                      },
                      {
                        key: 'collect',
                        value: function () {
                          this.arr.push(this.count), (this.count = 0);
                        },
                      },
                      {
                        key: 'stat',
                        value: function () {
                          var e = this.arr;
                          return (this.arr = []), e;
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this.count = 0), (this.arr = []);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Pa = {
                  toDecode: 0,
                  decoded: 1,
                  render: 2,
                  throwFrame: 3,
                  throwRaw: 4,
                  rawList: 5,
                  frameList: 6,
                },
                Aa = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.toDecodeItem = new Da()),
                      (this.decodedItem = new Da()),
                      (this.renderItem = new Da()),
                      (this.throwFraItem = new Da()),
                      (this.throwRawItem = new Da()),
                      (this.rawItem = new Da()),
                      (this.frameItem = new Da()),
                      (this.rafItem = new Da()),
                      (this.items = [
                        this.toDecodeItem,
                        this.decodedItem,
                        this.renderItem,
                        this.throwFraItem,
                        this.throwRawItem,
                        this.rawItem,
                        this.frameItem,
                        this.rafItem,
                      ]),
                      this.reset();
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'TYPES',
                        get: function () {
                          return Pa;
                        },
                      },
                    ]),
                    Object(r.a)(e, [
                      {
                        key: 'inc',
                        value: function (e, t) {
                          for (var i = 0; i < e.length; i++) {
                            var s = this.getItem(e[i]);
                            s && s.inc(t[i]);
                          }
                          this.collect();
                        },
                      },
                      {
                        key: 'dec',
                        value: function (e, t) {
                          for (var i = 0; i < e.length; i++) {
                            var s = this.getItem(e[i]);
                            s && s.dec(t[i]);
                          }
                          this.collect();
                        },
                      },
                      {
                        key: 'collect',
                        value: function () {
                          var e = Date.now();
                          if (
                            (0 == this.lastStatTime && (this.lastStatTime = e),
                            e - this.lastStatTime >= 1e3)
                          ) {
                            for (var t = 0; t < this.items.length; t++) this.items[t].collect();
                            this.lastStatTime = e;
                          }
                        },
                      },
                      {
                        key: 'getStat',
                        value: function () {
                          return {
                            toDecode: this.toDecodeItem.stat(),
                            decoded: this.decodedItem.stat(),
                            render: this.renderItem.stat(),
                            rawList: this.rawItem.stat(),
                            frameList: this.frameItem.stat(),
                          };
                        },
                      },
                      {
                        key: 'getItem',
                        value: function (e) {
                          return e >= this.items.length ? null : this.items[e];
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          this.lastStatTime = 0;
                          for (var e = 0; e < this.items.length; e++) this.items[e].reset();
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ia = (function () {
                  function e(t, i) {
                    var r = i.resumeFunc,
                      a = i.pauseFunc;
                    Object(s.a)(this, e),
                      (this._player = t),
                      (this._playResume = r),
                      (this._playPause = a),
                      (this._paused = !1),
                      (this._playedPts = 0),
                      (this._pausedTs = 0),
                      (this._lastCheckTime = 0),
                      (this._lastCheck500Time = 0),
                      (this._lastCheck500CurrntTime = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._paused = !1),
                            (this._playedPts = 0),
                            (this._pausedTs = 0),
                            (this._lastCheckTime = 0),
                            (this._lastCheck500Time = 0),
                            (this._lastCheck500CurrntTime = 0);
                        },
                      },
                      {
                        key: 'check',
                        value: function () {
                          var e = D.a.now(),
                            t = this._player.getVideoPts();
                          if (0 !== this._playedPts) {
                            t === this._playedPts
                              ? this._paused || this._setPaused(e)
                              : this._paused && this._setResume(e);
                            var i = e - this._lastCheck500Time,
                              s = Math.round(t - this._lastCheck500CurrntTime);
                            (0 == this._lastCheck500Time || i >= 500) &&
                              (0 != this._lastCheck500Time &&
                                i - s >= I.a.pause500Cfg[0] &&
                                (1 == Number(localStorage._printPauseCheck) &&
                                  p.a.log('H265Pause.check.500ms', i, s, i - s),
                                this._player.check500Pause()),
                              (this._lastCheck500CurrntTime = t),
                              (this._lastCheck500Time = e));
                          }
                          this._playedPts = t;
                        },
                      },
                      {
                        key: '_setPaused',
                        value: function (e) {
                          (this._paused = !0),
                            (this._pausedTs = e),
                            p.a.log('H265Pause._setPaused _pausedTs=', e),
                            this._playPause(e);
                        },
                      },
                      {
                        key: '_setResume',
                        value: function (e) {
                          var t = e - this._pausedTs;
                          p.a.log('H265Pause._setResume pausedTime=', t),
                            this._playResume(e, t),
                            (this._paused = !1),
                            (this._pausedTs = 0);
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this._paused;
                        },
                      },
                      {
                        key: 'pausedTs',
                        get: function () {
                          return this._pausedTs;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                ka = 'heart',
                Ra = 'resume',
                Oa = 'stop',
                ba = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this.stat = t),
                      (this.tsdb = i),
                      (this.fpsList = []),
                      (this.frameList = []),
                      (this.renderStat = []),
                      (this.decodedStat = []),
                      (this.toDecodeStat = []),
                      (this.frameListStat = []),
                      (this.avDeltaList = []),
                      (this.rafStat = []),
                      (this.rawListStat = []),
                      (this._videoTracks = []),
                      this.resetProps(),
                      (this.stat = new Aa()),
                      (this.avgFrameGap = 0),
                      (this.rafTime = 0),
                      (this.isHidden = !1),
                      (this.retryFlvTimes = 0),
                      (this.retryP2PTimes = 0),
                      (this.retryHlsTimes = 0),
                      (this.currentVideoDts = 0),
                      (this.isH265Error = !1),
                      (this.rafFrameBind = this.rafFrame.bind(this)),
                      (this.onVisibilityChangedBind = this.onVisibilityChanged.bind(this)),
                      (this.pauseHanlder = new Ia(this, {
                        pauseFunc: this._playPause.bind(this),
                        resumeFunc: this._playResume.bind(this),
                      })),
                      (this.workerSharedArrayBuffer = null),
                      (this.isH265Played = !1),
                      (this.videoPlayerElement = null);
                  }
                  return (
                    Object(r.a)(e, null, [
                      {
                        key: 'isSupported',
                        value: function () {
                          return 'object' == typeof WebAssembly;
                        },
                      },
                    ]),
                    Object(r.a)(e, [
                      {
                        key: 'addEvents',
                        value: function () {
                          this.mse &&
                            this.mse.handler &&
                            this.mse.handler.eventEmitter &&
                            this.mse.handler.eventEmitter.on(
                              l.VISIBILITY_CHANGE,
                              this.onVisibilityChangedBind,
                            );
                        },
                      },
                      {
                        key: 'delEvents',
                        value: function () {
                          this.mse &&
                            this.mse.handler &&
                            this.mse.handler.eventEmitter &&
                            this.mse.handler.eventEmitter.off(
                              l.VISIBILITY_CHANGE,
                              this.onVisibilityChangedBind,
                            );
                        },
                      },
                      {
                        key: 'addTimer',
                        value: function () {
                          F.add(this.timerHandler, this, 1e3);
                        },
                      },
                      {
                        key: 'delTimer',
                        value: function () {
                          F.remove(this.timerHandler, this);
                        },
                      },
                      {
                        key: 'attachMse',
                        value: function (e) {
                          p.a.log('H265Player.attachMse'),
                            (this.mse = e),
                            this.resetProps(),
                            (this.isH265Played = !1);
                          var t = D.a.now();
                          (this.onVideoFrameTime = t),
                            (this.pushVideoTime = 0),
                            (this.workerHeartTime = t),
                            (this.updteFpsTime = 0),
                            (this.rafId = null),
                            this.rafFrame(),
                            this._initGL(e),
                            this.addEvents(),
                            this.addTimer();
                        },
                      },
                      {
                        key: '_initGL',
                        value: function (e) {
                          var t = e.h265Proxy.decoder;
                          if (
                            ((t.onMessageCb = this._onMessage.bind(this)),
                            (this.decoder = t.decoder),
                            this.decoder.postMessage({ t: 8, d: I.a.h265Config }),
                            (this.isPlaying = !0),
                            (this.canvas = document.createElement('canvas')),
                            (this.canvas.width = e.getWidth()),
                            (this.canvas.height = e.getHeight()),
                            p.a.log(
                              'H265Player._initGL width='
                                .concat(e.getWidth(), ' height=')
                                .concat(e.getHeight()),
                            ),
                            (this.isSupportVideoTrack =
                              'undefined' != typeof MediaStreamTrackGenerator &&
                              'undefined' != typeof VideoFrame),
                            1 == Number(localStorage._forceWasmWebgl) &&
                              (this.isSupportVideoTrack = !1),
                            this.isSupportVideoTrack)
                          )
                            (this.videoPlayerElement = document.createElement('video')),
                              (this.videoPlayerElement.muted = !0),
                              (this.agenerator = new MediaStreamTrackGenerator({ kind: 'video' })),
                              (this.processedStream = new MediaStream([this.agenerator])),
                              (this.videoPlayerElement.srcObject = this.processedStream),
                              this.decoder.postMessage(
                                {
                                  t: 10,
                                  agenerator: this.agenerator.writable,
                                  width: this.mse.getWidth(),
                                  height: this.mse.getHeight(),
                                  config: I.a.h265Config[6],
                                  isPostRenderCallback: I.a.renderStat[0],
                                  devicePixelRatio: window.devicePixelRatio,
                                },
                                [this.agenerator.writable],
                              );
                          else {
                            var i = this.canvas.transferControlToOffscreen();
                            this.decoder.postMessage(
                              {
                                t: 10,
                                canvas: i,
                                width: this.mse.getWidth(),
                                height: this.mse.getHeight(),
                                config: I.a.h265Config[6],
                                isPostRenderCallback: I.a.renderStat[0],
                                devicePixelRatio: window.devicePixelRatio,
                              },
                              [i],
                            );
                          }
                          this._initDecodeWorker();
                        },
                      },
                      { key: 'updateSize', value: function () {} },
                      {
                        key: 'resetProps',
                        value: function () {
                          (this.canvas = null),
                            (this.frameList.length = 0),
                            (this.isPlaying = !1),
                            (this._audioErrorCnt = 0),
                            (this.onVideoFrameTime = 0),
                            (this.pushVideoTime = 0),
                            (this.workerHeartTime = 0),
                            (this.decodeNow = 0),
                            (this.renderTime = 0),
                            (this.curPic = null),
                            (this.pauseDecode = !1),
                            (this.avgFrameGap = 33),
                            (this.updteFpsTime = 0),
                            (this.rafTime = 0),
                            (this.pauseCnt = 0),
                            (this.videoPauseCnt = 0),
                            (this.countHeart = 0),
                            (this.rafNoRenderCount = 0),
                            (this.isFirsrToDecode = !1),
                            (this.toDecodeStamp = 0),
                            (this.isFirstDecoded = !1),
                            (this.decodedStamp = 0),
                            (this.isFirstRender = !1),
                            (this.renderStamp = 0),
                            (this.hlsStarted = !1),
                            (this.fpsList.length = 0),
                            (this.frameList.length = 0),
                            (this.renderStat.length = 0),
                            (this.decodedStat.length = 0),
                            (this.toDecodeStat.length = 0),
                            (this.frameListStat.length = 0),
                            (this.rafStat.length = 0),
                            (this.rawListStat.length = 0),
                            (this._videoTracks.length = 0),
                            (this.avDeltaList.length = 0),
                            (this.userPaused = !1),
                            (this.isH265Error = !1),
                            (this.pauseStartTs = 0),
                            (this.pauseMobStartTs = 0),
                            (this.isRenderFpsPaused = !1),
                            (this.isFramePaused = !1),
                            (this.pauseMobCnt = 0),
                            (this.rafLastNow = 0),
                            (this.hiddenStartTs = 0),
                            (this.pause500Cnt = 0),
                            (this.isWasmPlay = !1),
                            (this.currentVideoDts = 0),
                            (this.isSupportVideoTrack = !1);
                        },
                      },
                      {
                        key: 'timerHandler',
                        value: function () {
                          var e = D.a.now();
                          this.checkTimer(e), (this.timerTime = e);
                        },
                      },
                      {
                        key: 'checkTimer',
                        value: function () {
                          var e = this;
                          if (
                            this.mse &&
                            this.mse.handler &&
                            !this.userPaused &&
                            (this.mse.handler.playerType != G.b.HLS || this.hlsStarted) &&
                            !this.isH265Error
                          ) {
                            var t = D.a.now();
                            0 != this.workerHeartTime &&
                              t - this.workerHeartTime > 5e3 &&
                              this.mse.h265Proxy &&
                              (p.a.log('H265Player.checkTimer worker error'),
                              this.mse.h265Proxy.terminate(),
                              setTimeout(function () {
                                e.handlerError(Ta.WORKER_ERROR), e.turnToH264(Ta.WORKER_ERROR);
                              }, 200));
                            var i = this.getPts() - this.getVideoPts();
                            this.avDeltaList.push(Math.floor(i));
                          }
                        },
                      },
                      {
                        key: 'onVisibilityChanged',
                        value: function () {
                          document.hidden ||
                          document.webkitHidden ||
                          document.mozHidden ||
                          document.msHidden
                            ? ((this.hiddenStartTs = D.a.now()),
                              p.a.log(
                                'H265Player.onVisibilityChanged isHidden true',
                                this.hiddenStartTs,
                              ),
                              (this.isHidden = !0),
                              this.decoder && this.decoder.postMessage({ t: 12 }))
                            : (p.a.log('H265Player.onVisibilityChanged isHidden false'),
                              (this.renderTime = 0),
                              (this.isHidden = !1),
                              (this.hiddenStartTs = 0),
                              this.decoder && this.decoder.postMessage({ t: 13 }));
                        },
                      },
                      {
                        key: '_onMessage',
                        value: function (e) {
                          if (
                            this.mse &&
                            this.mse.handler &&
                            (this.mse.handler.playerType != G.b.HLS || this.hlsStarted)
                          ) {
                            var t = e.data;
                            if (!this.isH265Error) {
                              var i = D.a.now();
                              switch (t.t) {
                                case 5:
                                  break;
                                case 7:
                                  if (!this.isPlaying) return;
                                  t.d.logList &&
                                    t.d.logList.length > 0 &&
                                    (p.a.log(
                                      'H265Player.onmessage.worker.log',
                                      t.d.logList.join(','),
                                    ),
                                    (t.d.logList = [])),
                                    this.onDecodeError(t.d.data);
                                  break;
                                case 9:
                                  if (0 == t.d.length) return;
                                  p.a.log('H265Player.onmessage.worker.log', t.d.join(',')),
                                    (t.d = []);
                                  break;
                                case 10:
                                  (this.workerHeartTime = i),
                                    this.countHeart++,
                                    this.countHeart % 20 == 0 &&
                                      p.a.log('H265Player.onmessage.webWorker.heart');
                                  break;
                                case 11:
                                case 12:
                                  break;
                                case 13:
                                  this.onRenderError(t.d);
                                  break;
                                case 14:
                                  var s = t.d.renderNow,
                                    r = t.d.decodedNow,
                                    a = Date.now() - s;
                                  p.a.log('H265Player.onmessage render play postMessage cost', a),
                                    this.isFirstDecoded ||
                                      ((this.decodedStamp = r), (this.isFirstDecoded = !0)),
                                    this.isFirstRender ||
                                      ((this.renderStamp = s),
                                      (this.isFirstRender = !0),
                                      p.a.log(
                                        'H265Player.onmessage 送帧到解码，解码到渲染耗时',
                                        this.decodedStamp - this.toDecodeStamp,
                                        this.renderStamp - this.decodedStamp,
                                      )),
                                    this.mse &&
                                      this.mse.handler &&
                                      (this.mse.handler.setWasmPlaying &&
                                        this.mse.handler.setWasmPlaying(),
                                      (this.isH265Played = !0),
                                      this.mse.triggerH265Play(
                                        this.decodedStamp - this.toDecodeStamp,
                                        this.renderStamp - this.decodedStamp,
                                      ),
                                      this.triggerWasmPlay());
                                  break;
                                case 15:
                                  this.pauseCnt++,
                                    p.a.log('H265Player.onmessage pauseCnt', this.pauseCnt);
                                  break;
                                case 16:
                                  p.a.log(
                                    'H265Player.onmessage worker noRender 10s',
                                    this.isHidden,
                                  ),
                                    this.handlerError(Ta.NO_RENDER),
                                    this.autoReport();
                                  break;
                                case 17:
                                  this.handlerError(Ta.NO_DECODE);
                                  break;
                                case 18:
                                  t.d.render.length > 0 &&
                                    (this.renderStat = this.renderStat.concat(t.d.render)),
                                    t.d.decoded.length > 0 &&
                                      (this.decodedStat = this.decodedStat.concat(t.d.decoded)),
                                    t.d.toDecode.length > 0 &&
                                      (this.toDecodeStat = this.decodedStat.concat(t.d.toDecode)),
                                    t.d.frameList.length > 0 &&
                                      (this.frameListStat = this.frameListStat.concat(
                                        t.d.frameList,
                                      )),
                                    t.d.raf.length > 0 &&
                                      (this.rafStat = this.rafStat.concat(t.d.raf)),
                                    t.d.rawList.length > 0 &&
                                      (this.rawListStat = this.rawListStat.concat(t.d.rawList));
                                  break;
                                case 19:
                                  this.handlerError(Ta.YUV_OUT_LIMIT);
                                  break;
                                case 20:
                                  this.reportError(Ta.CREATE_WEBGL_FAIL),
                                    this.turnToH264(Ta.CREATE_WEBGL_FAIL);
                                  break;
                                case 21:
                                  if (
                                    (this.reportError(Ta.AUDIO_FAST),
                                    1 == localStorage._closeTurnTo264)
                                  )
                                    return;
                                  this.turnToH264(Ta.AUDIO_FAST);
                                  break;
                                case 22:
                                  if (
                                    (this.reportError(Ta.VIDEO_FAST),
                                    1 == localStorage._closeTurnTo264)
                                  )
                                    return;
                                  this.turnToH264(Ta.VIDEO_FAST);
                                  break;
                                case 23:
                                  var n = t.data.width,
                                    o = t.data.height;
                                  p.a.log(
                                    'H265Player.onMessage 23 width='
                                      .concat(n, ' height = ')
                                      .concat(o),
                                  ),
                                    this.mse.setResolution && this.mse.setResolution(n, o);
                                  break;
                                case 24:
                                  if (this.mse && t && t.d) {
                                    this.mse.setVideoCurrentTimeHand(
                                      t.d.minusBuffer,
                                      t.d.bufLen,
                                      t.d.type,
                                      t.d.timeNow,
                                    );
                                    var h = this.getPts();
                                    0 != h && this.storeAudioDts(h);
                                  }
                                  break;
                                case 25:
                                  this.isHidden && this.rafTimer();
                                  break;
                                case 26:
                                  this.workerSharedArrayBuffer = t.d.workerSharedArrayBuffer;
                                  break;
                                case 27:
                                  if (this.mse.isLive && I.a.renderStat[0]) {
                                    var u = this.getVideoPts();
                                    this.mse.videoPlayConsuming.addRenderFrameData(u, D.a.now()),
                                      this.mse.audioPlayConsuming.addRenderFrameData(u, D.a.now()),
                                      this.mse.renderFps.addRender();
                                  }
                                  break;
                                case 28:
                                  this.setFramePause(i);
                                  break;
                                case 29:
                                  this.setFrameRusume(i);
                                  break;
                                case 30:
                                  1 == I.a.mobVBlockCfg && (this.isRenderFpsPaused = !0);
                              }
                            }
                          }
                        },
                      },
                      {
                        key: 'setFramePause',
                        value: function (e) {
                          this.isFramePaused || (this._playMobPause(e), (this.isFramePaused = !0));
                        },
                      },
                      {
                        key: 'setFrameRusume',
                        value: function (e) {
                          this.isFramePaused && (this._playMobResume(e), (this.isFramePaused = !1));
                        },
                      },
                      {
                        key: 'triggerWasmPlay',
                        value: function () {
                          !this.isWasmPlay &&
                            this.videoPlayerElement &&
                            (this.videoPlayerElement.play(), (this.isWasmPlay = !0));
                        },
                      },
                      {
                        key: 'getRenderElement',
                        value: function () {
                          return this.isSupportVideoTrack ? this.videoPlayerElement : null;
                        },
                      },
                      {
                        key: '_initDecodeWorker',
                        value: function (e) {
                          var t = new SharedArrayBuffer(1024);
                          (this.mainSharedArrayBuffer = new Uint32Array(t)),
                            this.decoder.postMessage({ t: 16, d: this.mainSharedArrayBuffer });
                        },
                      },
                      {
                        key: 'rafFrame',
                        value: function () {
                          1 == Number(localStorage._print265RenderInterval) &&
                            !this.isRenderInterval &&
                            this.decoder &&
                            ((this.isRenderInterval = !0),
                            (this.isNotRenderInterval = !1),
                            this.decoder.postMessage({ t: 14, d: 0 })),
                            0 == Number(localStorage._print265RenderInterval) &&
                              !this.isNotRenderInterval &&
                              this.decoder &&
                              ((this.isNotRenderInterval = !0),
                              (this.isRenderInterval = !1),
                              this.decoder.postMessage({ t: 14, d: 1 })),
                            this.rafFrameBind && (this.rafId = ai(this.rafFrameBind)),
                            this.rafTimer();
                        },
                      },
                      {
                        key: 'rafTimer',
                        value: function () {
                          var e = D.a.now();
                          (0 == this.rafLastNow || e - this.rafLastNow >= 100) &&
                            !this.userPaused &&
                            this.isH265Played &&
                            (this.pauseHanlder.check(e), (this.rafLastNow = e)),
                            this.storeMainBuffer(),
                            this.getFps();
                        },
                      },
                      {
                        key: 'getFps',
                        value: function () {
                          if (this.mse.parser.fps) {
                            var e = D.a.now();
                            if (e - this.updteFpsTime >= 1e3) {
                              if (this.fpsList.length >= 5) {
                                var t = 0;
                                this.fpsList.forEach(function (e) {
                                  t += e;
                                });
                                var i = Math.floor(1e3 / (t / 5));
                                (this.avgFrameGap = i > this.avgFrameGap ? this.avgFrameGap : i),
                                  this.decoder.postMessage({ t: 9, d: this.avgFrameGap }),
                                  (this.fpsList.length = 0);
                              } else this.fpsList.push(this.mse.parser.fps.getFps());
                              this.updteFpsTime = e;
                            }
                          }
                        },
                      },
                      {
                        key: 'check500Pause',
                        value: function () {
                          1 != I.a.pause500Cfg && this.pause500Cnt++;
                        },
                      },
                      {
                        key: 'getStats',
                        value: function (e) {
                          var t = D.a.now();
                          e
                            ? (this._checkPaused(t, Oa), this._checkMobPaused(t, Oa))
                            : (this._checkPaused(t, ka), this._checkMobPaused(t, ka));
                          var i = this.stat.getStat();
                          (i.decoded = [].slice.call(this.decodedStat)),
                            (i.render = [].slice.call(this.renderStat)),
                            (i.toDecode = [].slice.call(this.toDecodeStat)),
                            (i.frameList = [].slice.call(this.rafStat)),
                            (i.deltaList = Object(pe.a)(this.avDeltaList)),
                            (i.rawListWorker = [].slice.call(this.rawListStat));
                          var s = 'H265Player.getStats\n';
                          for (var r in i) s += ''.concat(r, ': ').concat(i[r].toString(), '\n');
                          p.a.log(s), (this.avDeltaList.length = 0);
                          var a = {
                            frameListLen: this.frameList.length,
                            statProps: i,
                            h265PauseCnt: this.pauseCnt,
                            videoPauseCnt: this.videoPauseCnt,
                            videoPauseTime: this.pauseTime,
                            isVideoPaused: this.pauseStartTs > 0,
                            hiddenTime: 0 == this.hiddenStartTs ? 0 : t - this.hiddenStartTs,
                            pause500CntH265: this.pause500Cnt,
                            isFramePaused:
                              this.pauseMobCnt > 0 ||
                              this.pauseMobStartTs > 0 ||
                              this.isRenderFpsPaused,
                          };
                          return (
                            (this.isRenderFpsPaused = !1),
                            (this.pauseMobCnt = 0),
                            this.resetStats(),
                            a
                          );
                        },
                      },
                      {
                        key: 'resetStats',
                        value: function () {
                          (this.pauseCnt = 0),
                            (this.videoPauseCnt = 0),
                            (this.pauseTime = 0),
                            (this.renderStat.length = 0),
                            (this.decodedStat.length = 0),
                            (this.toDecodeStat.length = 0),
                            (this.frameListStat.length = 0),
                            (this.rafStat.length = 0),
                            (this.rawListStat.length = 0),
                            (this.pause500Cnt = 0);
                        },
                      },
                      {
                        key: 'pushVideoFrame',
                        value: function (e) {
                          if (this.isPlaying && !this.isH265Error) {
                            var t,
                              i = D.a.now();
                            for (
                              this.stat.inc([Aa.TYPES.rawList], [e.samples.length]);
                              e && e.samples && e.samples.length;

                            ) {
                              var s = {
                                units: (t = e.samples.shift()).units,
                                dtsInMs: t.dts / 90,
                                ptsInMs: t.pts / 90,
                                key: t.key ? 1 : 0,
                              };
                              (this.currentVideoDts = t.dts / 90),
                                this.isFirsrToDecode ||
                                  ((this.toDecodeStamp = Date.now()), (this.isFirsrToDecode = !0)),
                                1 == Number(localStorage._printH265VideoFrame) &&
                                  p.a.log('H265Player.pushVideoFrame objData', s),
                                this.decoder.postMessage({ t: 4, d: s });
                            }
                            this.mse.isLive &&
                              this.mse.videoPlayConsuming.pushRemuxedVideoFrameData(i),
                              (this.pushVideoTime = i);
                          }
                        },
                      },
                      {
                        key: 'toHexString',
                        value: function (e) {
                          return Array.prototype.map
                            .call(e, function (e) {
                              return ('0' + (255 & e).toString(16)).slice(-2);
                            })
                            .join(' ');
                        },
                      },
                      {
                        key: 'getPts',
                        value: function () {
                          if (I.a.dtsJumpOpen) {
                            if (this.mse && this.mse.getCorrentCurrentDts)
                              return this.mse.getCorrentCurrentDts();
                          } else if (this.mse && this.mse.getCurrentDts)
                            return this.mse.getCurrentDts();
                          return 0;
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          return this.mse && this.mse.getCurrentTime
                            ? this.mse.getCurrentTime()
                            : 0;
                        },
                      },
                      {
                        key: 'getInitDts',
                        value: function () {
                          return this.mse && this.mse.getInitDts ? this.mse.getInitDts() : 0;
                        },
                      },
                      {
                        key: 'autoReport',
                        value: function () {
                          1 == I.a.isAutoH265 &&
                            this.mse &&
                            this.mse.handler &&
                            this.mse.handler.eventEmitter &&
                            (p.a.log('H265Player.autoReport'),
                            this.mse.handler.eventEmitter.trigger(l.P2P_REPORT));
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this.delTimer(),
                            this.delEvents(),
                            this.resetStats(),
                            p.a.log('H265Player.destroy, rafid=', this.rafId),
                            ni(this.rafId),
                            (this.rafId = null),
                            clearInterval(this.timerHandler),
                            this.decoder && this.decoder.postMessage({ t: 6 }),
                            (this.isH265Played = !1),
                            this.resetProps(),
                            (this.mse = null),
                            (this.pauseDecode = !1),
                            this.stat.reset(),
                            this.mainSharedArrayBuffer &&
                              Atomics.store(this.mainSharedArrayBuffer, 0, 0);
                        },
                      },
                      {
                        key: 'onDecodeError',
                        value: function () {
                          var e =
                              arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                            t = e.code,
                            i = e.desc;
                          p.a.error('H265Player.onDecodeError desc', i, t),
                            7 == t
                              ? (this.reportError(Ta.WASM_TIMEOUT),
                                this.turnToH264(Ta.WASM_TIMEOUT))
                              : (this.autoReport(), this.handlerError(Ta.DECODE_ERROR, t));
                        },
                      },
                      {
                        key: 'onRenderError',
                        value: function () {
                          var e =
                              arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                            t = e.code,
                            i = e.desc;
                          p.a.error('H265Player.onRenderError desc', i, t),
                            this.handlerError(Ta.RENDER_ERROR);
                        },
                      },
                      {
                        key: 'turnToH264',
                        value: function (e) {
                          this.mse && this.mse.turnToH264(e);
                        },
                      },
                      {
                        key: 'retry',
                        value: function () {
                          if (this.mse && this.mse.handler) {
                            var e = this.mse.handler.playerType;
                            e == G.b.FLV
                              ? this.retryFlvTimes++
                              : e == G.b.P2P
                              ? this.retryP2PTimes++
                              : e == G.b.HLS && this.retryHlsTimes++;
                          }
                          this.mse && this.mse.h265Retry();
                        },
                      },
                      {
                        key: 'handlerError',
                        value: function (e, t) {
                          if (
                            this.isPlaying &&
                            (p.a.log('H265Player.handlerError', e),
                            this.reportError(e, t),
                            this.mse && this.mse.handler)
                          ) {
                            var i = this.mse.handler.playerType;
                            i == G.b.FLV
                              ? this.retryFlvTimes >= 10
                                ? this.turnToH264(Ta.RETRY_MAX)
                                : this.retry()
                              : i == G.b.P2P
                              ? this.retryP2PTimes >= 10
                                ? this.turnToH264(Ta.RETRY_MAX)
                                : this.retry()
                              : i == G.b.HLS &&
                                (this.retryHlsTimes >= 10
                                  ? this.turnToH264(Ta.RETRY_MAX)
                                  : this.retry());
                          }
                        },
                      },
                      {
                        key: 'reportError',
                        value: function (e, t) {
                          if (
                            this.isPlaying &&
                            ((this.isH265Error = !0),
                            p.a.log('H265Player.reportError', e, Ta.dic[e]),
                            this.mse && this.mse.handler)
                          ) {
                            var i = { value: [1], str: [e, null != t ? t : 1e4] };
                            this.mse.handler.tsdb.sendMetrics([
                              this.mse.handler.stat.createAct(C.a.ACT.H265_STATUS, i),
                            ]);
                          }
                        },
                      },
                      {
                        key: 'reportDecodeRenderTime',
                        value: function (e, t) {
                          if (
                            (p.a.log('H265Player.reportDecodeRenderTime', e, t),
                            this.mse && this.mse.handler)
                          ) {
                            var i = { value: [e, t] };
                            this.mse.handler.tsdb.sendMetrics([
                              this.mse.handler.stat.createAct('pcdn_video_load_ts', i),
                            ]);
                          }
                        },
                      },
                      {
                        key: 'containerResize',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                          if (this.canvas) {
                            var t = this.canvas.clientWidth,
                              i = this.canvas.clientHeight;
                            (e.width = t),
                              (e.height = i),
                              this.decoder && this.decoder.postMessage({ t: 15, d: e });
                          }
                        },
                      },
                      {
                        key: 'storeMainBuffer',
                        value: function () {
                          var e = this.getPts(),
                            t = this.getCurrentTime();
                          this.mainSharedArrayBuffer &&
                            this.isPlaying &&
                            (Atomics.store(this.mainSharedArrayBuffer, 0, e),
                            this.canvas &&
                              (Atomics.store(
                                this.mainSharedArrayBuffer,
                                1,
                                this.canvas.clientWidth,
                              ),
                              Atomics.store(
                                this.mainSharedArrayBuffer,
                                2,
                                this.canvas.clientHeight,
                              )),
                            Atomics.store(this.mainSharedArrayBuffer, 4, t));
                        },
                      },
                      {
                        key: 'storeAudioDts',
                        value: function (e) {
                          this.mainSharedArrayBuffer &&
                            this.isPlaying &&
                            Atomics.store(this.mainSharedArrayBuffer, 0, e);
                        },
                      },
                      {
                        key: 'jumpBuffer',
                        value: function (e, t, i, s) {
                          this.decoder &&
                            this.decoder.postMessage({
                              t: 17,
                              d: { minusBuffer: e, bufLen: t, type: i, timeNow: s },
                            });
                        },
                      },
                      {
                        key: 'onVideoPause',
                        value: function () {
                          p.a.log('H265Player.onVideoPause'),
                            (this.userPaused = !0),
                            this.mainSharedArrayBuffer &&
                              Atomics.store(this.mainSharedArrayBuffer, 3, 1);
                        },
                      },
                      {
                        key: 'onVideoPlay',
                        value: function () {
                          (this.pushVideoTime = 0),
                            p.a.log('H265Player.onVideoPlay'),
                            (this.userPaused = !1),
                            this.mainSharedArrayBuffer &&
                              Atomics.store(this.mainSharedArrayBuffer, 3, 0);
                        },
                      },
                      {
                        key: 'getVideoPts',
                        value: function () {
                          return this.workerSharedArrayBuffer
                            ? Atomics.load(this.workerSharedArrayBuffer, 5)
                            : 0;
                        },
                      },
                      {
                        key: '_playPause',
                        value: function (e) {
                          this.pauseStartTs = e;
                        },
                      },
                      {
                        key: '_playResume',
                        value: function (e, t) {
                          this._checkPaused(e, Ra);
                        },
                      },
                      {
                        key: '_playMobPause',
                        value: function (e) {
                          (this.pauseMobStartTs = e),
                            this.pauseMobCnt++,
                            p.a.log(
                              'H265Player._playMobPause,pauseMobStartTs=',
                              this.pauseMobStartTs,
                            );
                        },
                      },
                      {
                        key: '_playMobResume',
                        value: function (e, t) {
                          p.a.log('H265Player._playMobResume'), this._checkMobPaused(e, Ra);
                        },
                      },
                      {
                        key: '_checkMobPaused',
                        value: function (e, t) {
                          this.pauseMobStartTs > 0 && (this.pauseMobStartTs = t === ka ? e : 0);
                        },
                      },
                      {
                        key: '_checkPaused',
                        value: function (e, t) {
                          if (this.pauseStartTs > 0) {
                            var i = e - this.pauseStartTs;
                            i >= 200 &&
                              (p.a.warn(
                                'H265Player._checkPaused type='.concat(t, ' pauseTime=').concat(i),
                              ),
                              this.videoPauseCnt++,
                              (this.pauseTime += i)),
                              (this.pauseStartTs = t === ka ? e : 0);
                          }
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function (e) {
                          p.a.log('H265Player.onVideoSeek', this.getPts());
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          var t = this.getCurrentTime();
                          e *= 1e3;
                          var i = this.getInitDts();
                          p.a.log(
                            'H265Player.seek curTime='
                              .concat(t, ', time=')
                              .concat(e, ', initDts=')
                              .concat(i),
                          ),
                            this.decoder &&
                              this.decoder.postMessage({
                                t: 18,
                                d: { curTime: t, time: e, initDts: i },
                              }),
                            this.storeAudioDts(t + i);
                        },
                      },
                      {
                        key: 'onEnded',
                        value: function () {
                          this.hlsStarted = !1;
                        },
                      },
                      {
                        key: 'onStarted',
                        value: function () {
                          this.hlsStarted = !0;
                        },
                      },
                      {
                        key: '_getPlayerType',
                        value: function () {
                          if (this.mse && this.mse.handler) {
                            var e = this.mse.handler.playerType;
                            e == G.b.FLV
                              ? this.retryFlvTimes++
                              : e == G.b.P2P
                              ? this.retryP2PTimes++
                              : e == G.b.HLS && this.retryHlsTimes++;
                          }
                        },
                      },
                      {
                        key: 'on265StartCodeError',
                        value: function () {
                          this.isH265Error ||
                            ((this.isH265Error = !0),
                            this.handlerError(Ta.START_CODE_ERROR),
                            this.turnToH264(Ta.START_CODE_ERROR));
                        },
                      },
                      {
                        key: 'getCurrentVideoTime',
                        value: function () {
                          return this.getVideoPts() - this.getInitDts();
                        },
                      },
                      {
                        key: 'getVideoBufferLen',
                        value: function () {
                          return 0 == this.currentVideoDts
                            ? 0
                            : (this.currentVideoDts - this.getVideoPts()) / 1e3;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                wa = (function () {
                  function e(t, i) {
                    Object(s.a)(this, e),
                      (this.stat = t.stat),
                      (this.tsdb = t.tsdb),
                      (this.vodStat = t.vodStat),
                      (this.handler = i),
                      this.reset();
                  }
                  return (
                    Object(r.a)(e, [
                      { key: 'destroy', value: function () {} },
                      {
                        key: 'addH265Support',
                        value: function (e, t) {
                          var i = e;
                          if (-1e4 == i) {
                            var s = this.handler.h265Support,
                              r = s.serverSupported,
                              a = s.isCodecSupport,
                              n = s.isBrowserSupport,
                              o = s.isCfgSupport;
                            r
                              ? o
                                ? n
                                  ? a
                                    ? o && n && a && (i = 0)
                                    : (i = 6)
                                  : (i = 5)
                                : (i = 4)
                              : (i = 1);
                          }
                          this.stat.setComDim(C.a.DIM_COM.H265_SUPPORT_REASON, i),
                            !t.isLive &&
                              this.vodStat &&
                              this.vodStat.setComDim(C.a.DIM_COM.H265_SUPPORT_REASON, i);
                        },
                      },
                      {
                        key: 'addTurnTo264Support',
                        value: function (e, t) {
                          var i = 0;
                          switch (e) {
                            case Ta.WORKER_TIMEOUT:
                              i = 5;
                              break;
                            case Ta.WORKER_ERROR:
                            case Ta.CREATE_WORKER_ERROR:
                              i = 6;
                              break;
                            case Ta.START_CODE_ERROR:
                              i = 12;
                              break;
                            case Ta.WASM_TIMEOUT:
                              i = 13;
                              break;
                            case Ta.VIDEO_FAST:
                              i = 14;
                              break;
                            case Ta.AUDIO_FAST:
                              i = 15;
                              break;
                            case Ta.CREATE_WEBGL_FAIL:
                              i = 16;
                              break;
                            case Ta.RETRY_MAX:
                              i = 17;
                          }
                          this.stat.setComDim(C.a.DIM_COM.H265_SUPPORT_REASON, i),
                            !t.isLive &&
                              this.vodStat &&
                              this.vodStat.setComDim(C.a.DIM_COM.H265_SUPPORT_REASON, i);
                        },
                      },
                      {
                        key: 'addH265SupportNew',
                        value: function (e) {
                          var t,
                            i = this.handler.h265Support,
                            s = i.serverSupported,
                            r = i.isCodecSupport,
                            a = i.isBrowserSupport,
                            n = i.isCfgSupport,
                            o = i.codecSupportReason;
                          if (s)
                            if (n)
                              if (a) {
                                if (r) n && a && r && (t = 1);
                                else if (-1e4 != o)
                                  switch (o) {
                                    case 2:
                                      t = 7;
                                      break;
                                    case 3:
                                      t = 8;
                                      break;
                                    case 5:
                                      t = 9;
                                      break;
                                    case 6:
                                      t = 10;
                                      break;
                                    case 7:
                                      t = 11;
                                  }
                              } else t = 3;
                            else t = 4;
                          else t = 2;
                          this.stat.setComDim(C.a.DIM_COM.H265_SUPPORT_REASON, t),
                            !e.isLive &&
                              this.vodStat &&
                              this.vodStat.setComDim(C.a.DIM_COM.H265_SUPPORT_REASON, t);
                        },
                      },
                      { key: 'reset', value: function () {} },
                    ]),
                    e
                  );
                })(),
                La = (function () {
                  function e(t, i, r) {
                    Object(s.a)(this, e),
                      (this._stat = t),
                      (this._vodStat = r),
                      (this._tsdb = i),
                      (this._support = new ga(t, i)),
                      (this._decoder = new Ca(t, i)),
                      (this._render = new ba(t, i)),
                      (this._h265StatReport = new wa({ stat: t, tsdb: i, vodStat: r }, this)),
                      (this._renderInited = !1),
                      (this._rendering = !1),
                      (this._isH265WasmCodec = !0),
                      (this._isH265Stream = !1),
                      (this._isLive = !0),
                      (this.decodeType = 'wasm');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'stop',
                        value: function () {
                          p.a.log('H265Proxy.stop'),
                            (this._isH265Stream = !1),
                            (this._rendering = !1),
                            (this._renderInited = !1),
                            this._decoder && this._decoder.stopDecoder(),
                            this._render && this._render.destroy && this._render.destroy();
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this._render &&
                            (this._render.destroy(),
                            this._support.destroy(),
                            this._decoder.destroy(),
                            this._h265StatReport.destroy(),
                            (this._stat = null),
                            (this._tsdb = null),
                            (this._vodStat = null),
                            (this._render = null),
                            (this._support = null),
                            (this._decoder = null),
                            (this._h265StatReport = null),
                            (this._isH265Stream = !1));
                        },
                      },
                      {
                        key: 'initSupport',
                        value: function (e) {
                          this._support && ((this._isH265Stream = !1), this._support.init(e));
                        },
                      },
                      {
                        key: 'loadDecoder',
                        value: function (e, t) {
                          this._decoder.load(e, t);
                        },
                      },
                      {
                        key: 'initRender',
                        value: function (e) {
                          this.isSupported &&
                            (this._isLive || this._isH265Stream) &&
                            (p.a.log(
                              'H265Proxy.initRender isSupported='
                                .concat(this._support.isSupported, ' isReady=')
                                .concat(this._decoder.isReady),
                            ),
                            (this._rendering = !1),
                            (this._renderInited = !1),
                            this._render.destroy(),
                            this.isReady && ((this._renderInited = !0), this._render.attachMse(e)));
                        },
                      },
                      {
                        key: 'terminate',
                        value: function () {
                          this._decoder.terminate();
                        },
                      },
                      {
                        key: 'containerResize',
                        value: function (e) {
                          this.rendering && this._render.containerResize(e);
                        },
                      },
                      {
                        key: 'pushVideoFrame',
                        value: function (e, t) {
                          (this._rendering = !0), this._render && this._render.pushVideoFrame(e, t);
                        },
                      },
                      {
                        key: 'onTurnToH264',
                        value: function (e) {
                          (this._rendering = !1),
                            (this._renderInited = !1),
                            this._support.onTurntoH264(e);
                        },
                      },
                      {
                        key: 'checkUrl',
                        value: function (e) {
                          this.isReady &&
                            -1 === e.url.indexOf('codec=265') &&
                            (e.url += '&codec=265');
                        },
                      },
                      {
                        key: 'on265StartCodeError',
                        value: function () {
                          this._render && this._render.on265StartCodeError();
                        },
                      },
                      {
                        key: 'reportDecodeRenderTime',
                        value: function (e, t) {
                          this._render && this._render.reportDecodeRenderTime(e, t);
                        },
                      },
                      {
                        key: 'getStats',
                        value: function () {
                          return this._render && this._render.getStats();
                        },
                      },
                      {
                        key: 'jumpBuffer',
                        value: function (e, t, i, s) {
                          this._rendering && this._render.jumpBuffer(e, t, i, s);
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          this._render && this._render.seek && this._render.seek(e);
                        },
                      },
                      {
                        key: 'onVideoPause',
                        value: function () {
                          this._render.onVideoPause();
                        },
                      },
                      {
                        key: 'onVideoPlay',
                        value: function () {
                          this._render.onVideoPlay();
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function (e) {
                          this._render && this._render.onVideoSeek && this._render.onVideoSeek(e);
                        },
                      },
                      {
                        key: 'onStarted',
                        value: function () {
                          this._render && this._render.onStarted();
                        },
                      },
                      {
                        key: 'onEnded',
                        value: function () {
                          this._render && this._render.onEnded();
                        },
                      },
                      {
                        key: 'getCurrentVideoTime',
                        value: function () {
                          return this._render && this._render.getCurrentVideoTime
                            ? this._render.getCurrentVideoTime()
                            : 0;
                        },
                      },
                      {
                        key: 'getVideoBufferLen',
                        value: function () {
                          return this._render && this._render.getVideoBufferLen
                            ? this._render.getVideoBufferLen()
                            : 0;
                        },
                      },
                      {
                        key: 'getRenderElement',
                        value: function () {
                          return this._render && this._render.getRenderElement
                            ? this._render.getRenderElement()
                            : null;
                        },
                      },
                      {
                        key: 'isLive',
                        set: function (e) {
                          this._isLive = e;
                        },
                      },
                      {
                        key: 'isH265Stream',
                        set: function (e) {
                          this._isH265Stream = e;
                        },
                      },
                      {
                        key: 'render',
                        get: function () {
                          return this._render;
                        },
                      },
                      {
                        key: 'canvas',
                        get: function () {
                          return this._render.videoPlayerElement
                            ? this._render.videoPlayerElement
                            : this._render.canvas;
                        },
                      },
                      {
                        key: 'isVideoTrack',
                        get: function () {
                          return this._render.isSupportVideoTrack;
                        },
                      },
                      {
                        key: 'decoder',
                        get: function () {
                          return this._decoder;
                        },
                      },
                      {
                        key: 'isSupported',
                        get: function () {
                          return this._support && this._support.isSupported;
                        },
                      },
                      {
                        key: 'isReady',
                        get: function () {
                          return (
                            this._support && this._support.isSupported && this._decoder.isReady
                          );
                        },
                      },
                      {
                        key: 'needPreload',
                        get: function () {
                          return (
                            !Ca.preloaded && this._support.canPreload && !this._decoder.isReady
                          );
                        },
                      },
                      {
                        key: 'renderInited',
                        get: function () {
                          return this._renderInited;
                        },
                      },
                      {
                        key: 'rendering',
                        get: function () {
                          return this._rendering;
                        },
                      },
                      {
                        key: 'h265StatReport',
                        get: function () {
                          return this._h265StatReport;
                        },
                      },
                      {
                        key: 'h265Support',
                        get: function () {
                          return this._support;
                        },
                      },
                      {
                        key: 'isServerSupported',
                        get: function () {
                          return this._support && this._support.serverSupported;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ma = (function () {
                  function e(t, i, r) {
                    Object(s.a)(this, e),
                      (this._stat = t),
                      (this._vodStat = r),
                      (this._tsdb = i),
                      (this._support = new ga(t, i)),
                      (this._h265StatReport = new wa({ stat: t, tsdb: i, vodStat: r }, this)),
                      (this._isH265MseCodec = !0),
                      (this._mse = null),
                      (this.decodeType = 'mse_hevc');
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'stop',
                        value: function () {
                          p.a.log('H265MseProxy.stop');
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          this._support.destroy(),
                            this._h265StatReport.destroy(),
                            (this._stat = null),
                            (this._tsdb = null),
                            (this._vodStat = null),
                            (this._support = null),
                            (this._h265StatReport = null),
                            (this._mse = null);
                        },
                      },
                      {
                        key: 'initSupport',
                        value: function (e) {
                          this._support.mseHevcInit(e);
                        },
                      },
                      {
                        key: 'initRender',
                        value: function (e) {
                          this._mse = e;
                        },
                      },
                      {
                        key: 'checkUrl',
                        value: function (e) {
                          -1 === e.url.indexOf('codec=265') && (e.url += '&codec=265');
                        },
                      },
                      {
                        key: 'turnToH264',
                        value: function (e) {
                          this._mse && this._mse.turnToH264(e);
                        },
                      },
                      {
                        key: 'reportError',
                        value: function (e, t) {
                          p.a.log('H265MseProxy.reportError', e, Ta.dic[e]),
                            this._tsdb.sendMetrics([
                              this._stat.createAct(C.a.ACT.H265_STATUS, {
                                value: [1],
                                str: [e, null != t ? t : 1e4],
                              }),
                            ]);
                        },
                      },
                      {
                        key: 'onTurntoH265Wasm',
                        value: function (e) {
                          this._support.onTurntoH265Wasm(e);
                        },
                      },
                      {
                        key: 'onTurnToH264',
                        value: function (e) {
                          this._support.onTurntoH264(e);
                        },
                      },
                      {
                        key: 'on265StartCodeError',
                        value: function () {
                          this.reportError(Ta.START_CODE_ERROR),
                            this.turnToH264(Ta.START_CODE_ERROR);
                        },
                      },
                      {
                        key: 'isSupported',
                        get: function () {
                          return this._support && this._support.isSupported;
                        },
                      },
                      {
                        key: 'h265StatReport',
                        get: function () {
                          return this._h265StatReport;
                        },
                      },
                      {
                        key: 'h265Support',
                        get: function () {
                          return this._support;
                        },
                      },
                      {
                        key: 'isH265MseCodec',
                        get: function () {
                          return this._support && this._support.isSupported;
                        },
                      },
                      {
                        key: 'isServerSupported',
                        get: function () {
                          return this._support && this._support.serverSupported;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Va = (function (e) {
                  Object(ve.a)(i, e);
                  var t = Object(ye.a)(i);
                  function i() {
                    return Object(s.a)(this, i), t.call(this);
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: '_createAct',
                        value: function (e, t) {
                          var i = { sMetricName: C.a.VOD_ACT.name, vField: {}, vDimension: {} };
                          if (
                            ((i.vDimension[C.a.ACT.field] = e),
                            this._fillFromMap(i.vDimension, this.comDim),
                            this._fillFromMap(i.vDimension, this.actDim),
                            t)
                          ) {
                            var s = 0;
                            if (t.hasOwnProperty(C.a.KEY_VALUE)) {
                              var r = t[C.a.KEY_VALUE];
                              for (s = 0; s < r.length; s++)
                                0 === s
                                  ? (i.vField[C.a.KEY_VALUE] = r[s])
                                  : (i.vField[C.a.KEY_VALUE + s] = r[s]);
                            }
                            if (t.hasOwnProperty(C.a.KEY_STR)) {
                              var a = t[C.a.KEY_STR];
                              for (s = 0; s < a.length; s++)
                                i.vDimension[C.a.KEY_STR + (s + 1)] = a[s];
                            }
                            t.hasOwnProperty(C.a.KEY_DIM) &&
                              Object.assign(i.vDimension, t[C.a.KEY_DIM]);
                          }
                          return (i.vDimension.appid = U.a.appid), this.actDim.clear(), i;
                        },
                      },
                      {
                        key: '_fill',
                        value: function (e) {
                          if (0 != this.coreMap.size || 0 != this.compMap.size) {
                            var t = {
                              sMetricName: C.a.VOD_CORE.name,
                              vField: {},
                              vDimension: {},
                              vExLog: {},
                            };
                            this.coreDim.set(C.a.DIM_CORE.HEART_TYPE, this.heart_type),
                              this._fillFromMap(t.vDimension, this.comDim),
                              this._fillFromMap(t.vDimension, this.coreDim),
                              this._fillFromKeyvalMap(t.vDimension, this.keyvalCoreDimMap),
                              this._fillFromMap(t.vExLog, this.extDim),
                              this._fillFromMap(t.vField, this.coreMap),
                              this._fillComp(t.vDimension),
                              this.coreDim.clear(),
                              this.extDim.clear(),
                              this.coreMap.clear(),
                              this.compMap.clear(),
                              this.keyvalCoreDimMap.clear(),
                              this.heart_type == C.a.HEART_TYPE.START &&
                                (this.heart_type = C.a.HEART_TYPE.CONTINUS),
                              (t.vDimension.appid = U.a.appid),
                              e.push(t);
                          }
                        },
                      },
                    ]),
                    i
                  );
                })(ma),
                Na = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.eventEmitter = t),
                      (this.hasEvent = !1),
                      (this.isSupported =
                        void 0 !== document.addEventListener && void 0 !== document.hidden),
                      (this.onVisibilitychangeBind = this.onVisibilitychange.bind(this)),
                      (this.stat = null),
                      (this.vodStat = null),
                      (this.hiddenTs = 0),
                      (this.visibleTs = D.a.now()),
                      (this.lastStatHiddenTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setStat',
                        value: function (e, t) {
                          (this.stat = e),
                            (this.vodStat = t),
                            this.onVisibilitychange(),
                            this.addVisibilitychange();
                        },
                      },
                      {
                        key: 'addVisibilitychange',
                        value: function () {
                          !this.hasEvent &&
                            this.isSupported &&
                            ((this.hasEvent = !0),
                            document.addEventListener(
                              'visibilitychange',
                              this.onVisibilitychangeBind,
                            ));
                        },
                      },
                      {
                        key: 'delVisibilitychange',
                        value: function () {
                          this.hasEvent &&
                            ((this.hasEvent = !1),
                            document.removeEventListener(
                              'visibilitychange',
                              this.onVisibilitychangeBind,
                            ));
                        },
                      },
                      {
                        key: 'onVisibilitychange',
                        value: function () {
                          this.isSupported &&
                            (p.a.log(
                              'Visibility.onVisibilitychange visibilityState='.concat(
                                document.visibilityState,
                              ),
                            ),
                            this.stat &&
                              this.stat.setComDim(
                                C.a.DIM_COM.VISIBILITY_STATE,
                                document.visibilityState,
                              ),
                            this.vodStat &&
                              this.vodStat.setComDim(
                                C.a.DIM_COM.VISIBILITY_STATE,
                                document.visibilityState,
                              ),
                            this.eventEmitter.trigger(
                              o.VISIBILITY_CHANGE,
                              document.visibilityState,
                            ),
                            document.visibilityState === B.a.VISIBILITY_STATE.VISIBLE
                              ? ((this.visibleTs = D.a.now()),
                                this.eventEmitter.onVisibilitychange &&
                                  this.eventEmitter.onVisibilitychange(!0))
                              : document.visibilityState === B.a.VISIBILITY_STATE.HIDDEN &&
                                ((this.hiddenTs = D.a.now()),
                                this.eventEmitter.onVisibilitychange &&
                                  this.eventEmitter.onVisibilitychange(!1)));
                        },
                      },
                      {
                        key: 'setHiddenTimeStat',
                        value: function () {
                          if (this.isSupported) {
                            var e = D.a.now(),
                              t = 0;
                            0 != this.hiddenTs &&
                              (document.visibilityState === B.a.VISIBILITY_STATE.HIDDEN &&
                              this.hiddenTs >= this.visibleTs
                                ? (t = e - this.hiddenTs)
                                : document.visibilityState === B.a.VISIBILITY_STATE.VISIBLE &&
                                  e - this.visibleTs < e - this.lastStatHiddenTs &&
                                  0 != this.lastStatHiddenTs &&
                                  (t = this.visibleTs - this.hiddenTs)),
                              this.stat && this.stat.setCore(C.a.CORE.VISIBILITY_HIDDEN_TIME, t),
                              (this.lastStatHiddenTs = e);
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Fa = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.player = null),
                      (this.eventEmitter = null),
                      (this.backCd = I.a.vodAv1Cd),
                      (this.backCntMax = I.a.vodAv1CdCnt),
                      (this.backCnt = 0),
                      (this.backTs = 0),
                      (this.switchTs = -1),
                      (this.state = 0),
                      (this.pauseTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'isTimeToBack',
                        value: function () {
                          return 2 === this.state;
                        },
                      },
                      {
                        key: 'start',
                        value: function (e) {
                          this.backCnt >= this.backCntMax ||
                            ((this.player = e),
                            (this.eventEmitter = e.eventEmitter),
                            0 === this.state &&
                              (this.backCnt < this.backCntMax && this.backCnt++,
                              (this.backTs = D.a.now() + this.backCd * this.backCnt),
                              F.add(this.onCheckTimer, this, 1e3),
                              (this.state = 1),
                              p.a.log('BackToAV1.start')));
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          (this.state = 0), F.remove(this.onCheckTimer, this);
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e) {
                          if (1 === this.state)
                            e > this.backTs &&
                              (p.a.log('BackToAV1.onCheckTimer time to back'),
                              (this.state = 2),
                              this.player.setStopLoadFragment());
                          else if (2 === this.state) {
                            var t = this.player.getBufferLen();
                            if (t < 1e3) {
                              var i = this.player.getCurrentTime();
                              p.a.log('BackToAV1.onCheckTimer time to switch curTime='.concat(i)),
                                this.stop(),
                                (this.state = 0);
                              var s = i + t / 1e3;
                              this.eventEmitter.trigger(o.TRY_TO_AV1, s);
                            }
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Ba = [
                  '4090',
                  '4080',
                  '4070',
                  '4060',
                  '3090',
                  '3080',
                  '3070',
                  '3060',
                  '3050',
                  '2080',
                  '2070',
                  '2060',
                  '1660',
                  '1650',
                  '1080',
                  '1070',
                  '1060',
                  '1050',
                  'titan rtx',
                  'titan xp',
                  'titan x',
                ],
                Ua = (function () {
                  function e(t, i, r) {
                    Object(s.a)(this, e),
                      (this.handler = t),
                      (this.stat = i),
                      (this.statVod = r),
                      (this.h5Root = ''),
                      (this.modelRes = 'live'),
                      (this.isConfigSupport = !1),
                      (this.isHardSupport = !1),
                      (this.isPlayTypeSupport = !1),
                      (this._isGameIdSupport = !1),
                      (this._isSupport = !1),
                      (this.enhanceErrorCnt = 0),
                      (this.vEnhanceType = 0),
                      (this.vSupport = 0),
                      (this.vGameId = 0),
                      (this.vErrorCode = 0),
                      (this.vFrames = 0),
                      (this.vEnhanceDelay = -1),
                      (this.lastBitrate = -1),
                      (this.lastLine = -1),
                      (this.isCloseEnhance = !1),
                      (this.isLive = !0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'isGpuSupport',
                        value: function () {
                          return !!navigator.gpu;
                        },
                      },
                      {
                        key: 'resetProps',
                        value: function () {
                          (this.isConfigSupport = !1),
                            (this.isHardSupport = !1),
                            (this.isPlayTypeSupport = !1),
                            (this._isGameIdSupport = !1),
                            (this._isSupport = !1),
                            (this.enhanceErrorCnt = 0),
                            (this.vEnhanceType = 0),
                            (this.vSupport = 0),
                            (this.vGameId = 0),
                            (this.vErrorCode = 0),
                            (this.isCloseEnhance = !1);
                        },
                      },
                      {
                        key: 'setInfo',
                        value: function (e) {
                          e &&
                            (-1 != this.lastBitrate &&
                              this.lastBitrate != e.curBitrate &&
                              this.resetProps(),
                            (this.lastBitrate = e.curBitrate),
                            -1 != this.lastLine && this.lastLine != e.lineType && this.resetProps(),
                            (this.lastLine = e.lineType),
                            (this.h5Root = e.h5Root),
                            (e.liveType != va.a.VOD && e.liveType != va.a.REPLAY) ||
                              ((this.h5Root =
                                'https://a.msstatic.com/huya/h5player/sdk_static/vod/1.0.1/'),
                              (this.modelRes = 'vod')),
                            localStorage._h5Root && (this.h5Root = localStorage._h5Root),
                            (this._isGameIdSupport = !1),
                            (this.vGameId = e.gameId || 0));
                        },
                      },
                      {
                        key: 'getConfigSupport',
                        value: function (e) {
                          if (((this.isCloseEnhance = !1), e.liveType == va.a.LIVE)) {
                            var t = 1 == I.a.enhanceVCfg[0],
                              i = e.curBitrate <= I.a.enhanceVCfg[1];
                            if (
                              ((this.isConfigSupport = t && i),
                              this.handler &&
                                this.handler.player &&
                                this.handler.player.mse &&
                                this.handler.player.mse.getMseAvcCfgHeight)
                            ) {
                              var s = this.handler.player.mse.getMseAvcCfgHeight();
                              s > I.a.enhanceVCfg[3] &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport height unsupport!', s)),
                                (this._isGameIdSupport =
                                  -1 !== I.a.enhanceGameIds.indexOf(this.vGameId)),
                                this._isGameIdSupport &&
                                  I.a.enhanceGameIdRatioMap &&
                                  I.a.enhanceGameIdRatioMap[this.vGameId] &&
                                  s != I.a.enhanceGameIdRatioMap[this.vGameId] &&
                                  ((this.isConfigSupport = !1),
                                  p.a.log(
                                    'VideoEnhance.getConfigSupport game height unsupport!',
                                    s,
                                  ));
                            }
                            1 == I.a.ehWhiteAnchoruids[0] &&
                              -1 === I.a.ehWhiteAnchoruids[1].indexOf(Number(e.presenterUid)) &&
                              ((this.isConfigSupport = !1),
                              p.a.log(
                                'VideoEnhance.getConfigSupport anchorUid white not support!',
                              )),
                              -1 !== I.a.eHBlackUids.indexOf(Number(e.uid)) &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport uid black')),
                              -1 !== I.a.eHBlackAnchoruids.indexOf(Number(e.presenterUid)) &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport anchorUid black')),
                              -1 != I.a.eHBlackBrowVers.indexOf(g.a.version.major) &&
                                (p.a.log('VideoEnhance.getConfigSupport anchorUid black'),
                                (this.isConfigSupport = !1));
                          } else if (e.liveType == va.a.REPLAY || e.liveType == va.a.VOD) {
                            this.isLive = !1;
                            var r = 1 == I.a.enhanceVodVCfg[0],
                              a = e.curBitrate <= I.a.enhanceVodVCfg[1];
                            (this.isConfigSupport = r && a),
                              this.handler &&
                                this.handler.player &&
                                this.handler.player.mse &&
                                this.handler.player.mse.getMseAvcCfgHeight &&
                                this.handler.player.mse.getMseAvcCfgHeight() >
                                  I.a.enhanceVodVCfg[3] &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport height unsupport!')),
                              1 == I.a.ehVodWhiteAnchoruids[0] &&
                                -1 ===
                                  I.a.ehVodWhiteAnchoruids[1].indexOf(Number(e.presenterUid)) &&
                                ((this.isConfigSupport = !1),
                                p.a.log(
                                  'VideoEnhance.getConfigSupport anchorUid white not support!',
                                )),
                              1 == I.a.ehVodWhiteVids[0] &&
                                -1 === I.a.ehVodWhiteVids[1].indexOf(Number(e.vid)) &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport vid white not support!')),
                              -1 !== I.a.eHVodBlackUids.indexOf(Number(e.uid)) &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport uid black')),
                              -1 !== I.a.eHVodBlackAnchoruids.indexOf(Number(e.presenterUid)) &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport anchorUid black')),
                              -1 !== I.a.eHVodBlackVids.indexOf(Number(e.vid)) &&
                                ((this.isConfigSupport = !1),
                                p.a.log('VideoEnhance.getConfigSupport vid black')),
                              -1 != I.a.eHVodBlackBrowVers.indexOf(g.a.version.major) &&
                                (p.a.log('VideoEnhance.getConfigSupport anchorUid black'),
                                (this.isConfigSupport = !1));
                          }
                        },
                      },
                      {
                        key: 'getHardSupport',
                        value: function (e) {
                          var t = this.isGpuSupport(),
                            i = $e().toLowerCase(),
                            s = -1 != i.indexOf('nvidia'),
                            r = !1;
                          Ba.map(function (e) {
                            -1 != i.indexOf(e) && (r = !0);
                          }),
                            e.liveType == va.a.LIVE
                              ? I.a.eHBlackRenderList.forEach(function (e) {
                                  -1 != i.indexOf(e) &&
                                    ((r = !1),
                                    p.a.log('VideoEnhance.getHardSupport renderList black'));
                                })
                              : I.a.eHVodBlackRenderList.forEach(function (e) {
                                  -1 != i.indexOf(e) &&
                                    ((r = !1),
                                    p.a.log('VideoEnhance.getHardSupport renderList black'));
                                });
                          var a = r,
                            n = navigator.hardwareConcurrency >= I.a.enhanceVCfg[2];
                          p.a.log(
                            'VideoEnhance.getHardSupport gpu='
                              .concat(t, ',gType=')
                              .concat(s, ',gList=')
                              .concat(a, ',hardWare=')
                              .concat(n),
                          ),
                            (this.isHardSupport = t && s && a && n);
                        },
                      },
                      {
                        key: 'getPlayTypeSupport',
                        value: function (e) {
                          var t = this.handler.playerCoreType == B.a.PLAYER_CORE_TYPE.WEBCODECS;
                          this.isPlayTypeSupport = t;
                        },
                      },
                      {
                        key: 'getSupport',
                        value: function (e) {
                          return (
                            !!e &&
                            (1 != localStorage._enableEnhance
                              ? (e.liveType == va.a.LIVE
                                  ? (this._isGameIdSupport =
                                      -1 !== I.a.enhanceGameIds.indexOf(this.vGameId))
                                  : (this._isGameIdSupport =
                                      -1 !== I.a.enhanceVodGameIds.indexOf(this.vGameId)),
                                this.getConfigSupport(e),
                                this.getHardSupport(e),
                                this.getPlayTypeSupport(e),
                                p.a.log(
                                  'VideoEnhance.getSupport game='
                                    .concat(this._isGameIdSupport, ',cfg=')
                                    .concat(this.isConfigSupport, ',hard=')
                                    .concat(this.isHardSupport, ',playType=')
                                    .concat(this.isPlayTypeSupport, ',errCnt=')
                                    .concat(this.enhanceErrorCnt),
                                ),
                                this.isHardSupport
                                  ? (this.stat.setComDim(C.a.DIM_COM.V_ENHANCE_ENTRY, 1),
                                    (this.vSupport = 1),
                                    !this.isLive &&
                                      this.statVod &&
                                      this.statVod.setComDim(C.a.VOD_DIM_COM.V_ENHANCE_ENTRY, 1))
                                  : (this.stat.setComDim(C.a.DIM_COM.V_ENHANCE_ENTRY, '0'),
                                    !this.isLive &&
                                      this.statVod &&
                                      this.statVod.setComDim(C.a.VOD_DIM_COM.V_ENHANCE_ENTRY, '0'),
                                    (this.vSupport = 0)),
                                this.isConfigSupport
                                  ? this.isHardSupport
                                    ? 1 != this._isGameIdSupport
                                      ? ((this._isSupport = !1),
                                        this.onVideoEhanceError(10),
                                        void this.setUnSupportReport())
                                      : x.b.isWebcodecsBrowserSupported()
                                      ? this.handler &&
                                        ((this.handler.h265Proxy.isSupported &&
                                          1 == localStorage.isCloseWebcodecsH265) ||
                                          1 == localStorage.isCloseWebcodecsH264)
                                        ? (this.onVideoEhanceError(14),
                                          this.setUnSupportReport(),
                                          void (this._isSupport = !1))
                                        : this.isPlayTypeSupport
                                        ? this.enhanceErrorCnt >= 3
                                          ? ((this._isSupport = !1),
                                            void this.onVideoEhanceError(8))
                                          : void (1 != localStorage._closeLocalEnhance
                                              ? (this._isSupport = !0)
                                              : (this._isSupport = !1))
                                        : (this.onVideoEhanceError(2),
                                          1 == I.a.enhanceSupportMode && this.setUnSupportReport(),
                                          void (this._isSupport = !1))
                                      : (this.onVideoEhanceError(15),
                                        this.setUnSupportReport(),
                                        void (this._isSupport = !1))
                                    : (this.onVideoEhanceError(1),
                                      (this._isSupport = !1),
                                      void this.setUnSupportReport())
                                  : (this.onVideoEhanceError(11),
                                    this.setUnSupportReport(),
                                    void (this._isSupport = !1)))
                              : void (this._isSupport = !0))
                          );
                        },
                      },
                      {
                        key: 'setUnSupportReport',
                        value: function () {
                          this.stat.setComDim(C.a.DIM_COM.V_ENHANCE_TYPE, '0'),
                            !this.isLive &&
                              this.statVod &&
                              this.statVod.setComDim(C.a.VOD_DIM_COM.V_ENHANCE_TYPE, '0'),
                            (this.vEnhanceType = 0);
                        },
                      },
                      {
                        key: 'getModelRes',
                        value: function () {
                          var e = this.h5Root,
                            t = {
                              1: 'lol_web',
                              2336: 'kog_web',
                              5699: 'kog_web',
                              1663: 'xingxiu_web',
                              2168: 'xingxiu_web',
                              2633: 'xingxiu_web',
                            }[this.vGameId];
                          if (!t) return null;
                          if (
                            ((this.res = {
                              '360p':
                                e + 'models/'.concat(this.modelRes, '/').concat(t, '/360p.bin'),
                              '450p':
                                e + 'models/'.concat(this.modelRes, '/').concat(t, '/450p.bin'),
                              '720p':
                                e + 'models/'.concat(this.modelRes, '/').concat(t, '/720p.bin'),
                              '1080p':
                                e + 'models/'.concat(this.modelRes, '/').concat(t, '/1080p.bin'),
                            }),
                            localStorage._enhanceModelRes)
                          ) {
                            var i = JSON.parse(localStorage._enhanceModelRes);
                            i['360p'] && (this.res['360p'] = i['360p']),
                              i['450p'] && (this.res['450p'] = i['450p']),
                              i['720p'] && (this.res['720p'] = i['720p']),
                              i['1080p'] && (this.res['1080p'] = i['1080p']);
                          }
                          return this.res;
                        },
                      },
                      {
                        key: 'getH5Root',
                        value: function () {
                          return this.h5Root;
                        },
                      },
                      {
                        key: 'onVideoEhanceErrorCb',
                        value: function (e) {
                          var t = 0;
                          1 == e
                            ? (t = 3)
                            : 2 == e
                            ? (t = 4)
                            : 3 == e
                            ? (t = 5)
                            : 4 == e
                            ? (t = 7)
                            : 5 == e
                            ? (t = 6)
                            : 6 == e
                            ? (t = 9)
                            : 7 == e
                            ? (t = 12)
                            : 8 == e
                            ? (t = 13)
                            : 9 == e
                            ? (t = 18)
                            : 10 == e
                            ? (t = 19)
                            : 11 == e
                            ? (t = 20)
                            : 12 == e
                            ? (t = 21)
                            : 13 == e
                            ? (t = 22)
                            : 14 == e && (t = 23),
                            this.enhanceErrorCnt++,
                            this.onVideoEhanceError(t);
                        },
                      },
                      {
                        key: 'onVideoEhanceError',
                        value: function (e) {
                          (this.isCloseEnhance = !0),
                            (3 != e &&
                              4 != e &&
                              5 != e &&
                              7 != e &&
                              6 != e &&
                              9 != e &&
                              12 != e &&
                              13 != e &&
                              8 != e &&
                              2 != e &&
                              18 != e &&
                              19 != e &&
                              20 != e &&
                              21 != e) ||
                              (this.stat.setComDim(C.a.DIM_COM.V_ENHANCE_TYPE, 1),
                              !this.isLive &&
                                this.statVod &&
                                this.statVod.setComDim(C.a.VOD_DIM_COM.V_ENHANCE_TYPE, 1),
                              (this.vEnhanceType = 1)),
                            this.stat.setComDim(C.a.DIM_COM.ENHANCE_BACK_REASON, e),
                            (this.vErrorCode = e);
                        },
                      },
                      {
                        key: 'onVideoEhanceSuccess',
                        value: function () {
                          this.stat.setComDim(C.a.DIM_COM.V_ENHANCE_TYPE, 2),
                            this.stat.setComDim(C.a.DIM_COM.ENHANCE_BACK_REASON, 0),
                            !this.isLive &&
                              this.statVod &&
                              (this.statVod.setComDim(C.a.VOD_DIM_COM.V_ENHANCE_TYPE, 2),
                              this.statVod.setComDim(C.a.VOD_DIM_COM.ENHANCE_BACK_REASON, 0)),
                            (this.vEnhanceType = 2),
                            (this.vErrorCode = 0);
                        },
                      },
                      {
                        key: 'getEnhanceStats',
                        value: function () {
                          return {
                            vEnhanceType: this.vEnhanceType,
                            vSupport: this.vSupport,
                            vGameId: this.vGameId,
                            vErrorCode: this.vErrorCode,
                          };
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function () {
                          var e = 0;
                          this.isLive
                            ? this.handler &&
                              this.handler.player &&
                              this.handler.player.mse &&
                              this.handler.player.mse.getRealFps &&
                              (e = this.handler.player.mse.getRealFps())
                            : this.handler &&
                              this.handler.player &&
                              this.handler.player.getFps &&
                              (e = this.handler.player.getFps()),
                            e >= 40 &&
                              !this.isCloseEnhance &&
                              (this.onVideoEhanceError(17),
                              this.stat.setComDim(C.a.DIM_COM.V_ENHANCE_TYPE, '0'),
                              !this.isLive &&
                                this.statVod &&
                                this.statVod.setComDim(C.a.VOD_DIM_COM.V_ENHANCE_TYPE, '0'),
                              (this.vEnhanceType = 0),
                              p.a.log('VideoEnhance.RealFps Error'),
                              this.handler.player.setEnhance(!1));
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          (this.handler = null),
                            (this.stat = null),
                            (this.statVod = null),
                            (this.h5Root = ''),
                            (this.isConfigSupport = !1),
                            (this.isHardSupport = !1),
                            (this.isPlayTypeSupport = !1),
                            (this._isGameIdSupport = !1),
                            (this._isSupport = !1),
                            (this.enhanceErrorCnt = 0),
                            (this.vEnhanceType = 0),
                            (this.vSupport = 0),
                            (this.vGameId = 0),
                            (this.vErrorCode = 0),
                            (this.vFrames = 0),
                            (this.vEnhanceDelay = -1),
                            (this.lastBitrate = -1),
                            (this.lastLine = -1),
                            (this.isCloseEnhance = !1),
                            (this.isLive = !0);
                        },
                      },
                      {
                        key: 'isSupport',
                        get: function () {
                          return this._isSupport;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                xa = (function () {
                  function e(t) {
                    var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    Object(s.a)(this, e),
                      (this.player = null),
                      (this.playInfo = null),
                      (this.started = !1),
                      (this.ended = !1),
                      (this.playerType = ''),
                      (this._loop = !1),
                      (this._volume = 0),
                      (this._muteVal = !1),
                      (this._paused = !1),
                      (this._playbackRate = 1),
                      (this._duration = 0),
                      (this._coderate = '1000'),
                      (this.videoElement = i.videoElement),
                      (this.eventEmitter = t),
                      (this.createVideoElmInner = !1),
                      (this.busiSource = i.source),
                      (this.vrElement = null),
                      (this.streamType = ''),
                      (this.isRetrying = !1),
                      (this.hadPlayVideo = !1),
                      (this._type = 0),
                      (this.h264StreamBitrate = 0),
                      (this.h265StreamBitrate = 0),
                      (this.av1StreamBitrate = 0),
                      (this.av1State = 0),
                      (this.anchorUid = i.anchorUid),
                      (this.sdkInRoomTs = Date.now()),
                      (this.hlsNoPictureStartTs = 0),
                      (this.isSendNoPicture = !1),
                      (this.visibility = new Na(this.eventEmitter)),
                      (this.stat = new ma()),
                      (this.statVod = new Va()),
                      (this.metrics = new _a()),
                      (this.tsdbUtil = new hs({
                        stat: this.stat,
                        statVod: this.statVod,
                        eventEmiter: this.eventEmitter,
                      })),
                      (this.videoEnhance = new Ua(this, this.stat, this.statVod)),
                      (this.h265WasmProxy = new La(this.stat, this.tsdbUtil, this.statVod)),
                      (this.h265MseProxy = new Ma(this.stat, this.tsdbUtil, this.statVod)),
                      this.statVod.setComDim(C.a.DIM_COM.BROWSER_NAME, Ze.a.browser),
                      this.statVod.setComDim(C.a.DIM_COM.BROWSER_VERSION, Ze.a.version.major),
                      this.statVod.setComDim(C.a.DIM_COM.BROWSER_KERNEL, g.a.name),
                      this.statVod.setComDim(C.a.DIM_COM.BROWSER_KERNEL_VERSION, g.a.version.major),
                      this.statVod.setComDim(C.a.DIM_COM.OS_NAME, Ze.a.os),
                      this.statVod.setComDim(C.a.DIM_COM.OS_VERSION, Ze.a.osVersion),
                      this.statVod.setComDim(
                        C.a.VOD_DIM_COM.HARDWARE_CONCURRENCY,
                        navigator.hardwareConcurrency || 0,
                      ),
                      this.statVod.setComDim(C.a.VOD_DIM_COM.I_GPU, navigator.gpu ? 1 : 0),
                      this.statVod.setComDim(C.a.VOD_DIM_COM.RENDER_INFO, $e()),
                      this.statVod.setComDim(C.a.DIM_COM.SESSION_ID, this.sdkInRoomTs),
                      this.statVod.setComDim(C.a.VOD_DIM_COM.VOD_PLACE, this.busiSource || 'other');
                    var r = 0;
                    (r =
                      'zhixu_web' === this.busiSource
                        ? 3
                        : 'play' === this.busiSource
                        ? 2
                        : 'editor' === this.busiSource
                        ? 4
                        : 'diy' === this.busiSource
                        ? 5
                        : 'material' === this.busiSource
                        ? 6
                        : 'anchor_room_play' === this.busiSource
                        ? 7
                        : 'm-video' === this.busiSource
                        ? 8
                        : 'header_youliao_play' === this.busiSource
                        ? 10
                        : 'kj_youliao_play' === this.busiSource
                        ? 11
                        : 'ai_clip' === this.busiSource
                        ? 12
                        : 'endGameChallenge' === this.busiSource
                        ? 13
                        : 'ymzx_game_challenge' === this.busiSource
                        ? 14
                        : 'bainian' === this.busiSource
                        ? 15
                        : 99),
                      this.statVod.setComDim(C.a.DIM_COM.PLACE, r),
                      this.stat.setComDim(C.a.DIM_COM.BROWSER_NAME, Ze.a.browser),
                      this.stat.setComDim(C.a.DIM_COM.BROWSER_VERSION, Ze.a.version.major),
                      this.stat.setComDim(C.a.DIM_COM.BROWSER_KERNEL, g.a.name),
                      this.stat.setComDim(C.a.DIM_COM.BROWSER_KERNEL_VERSION, g.a.version.major),
                      this.stat.setComDim(C.a.DIM_COM.OS_NAME, Ze.a.os),
                      this.stat.setComDim(C.a.DIM_COM.OS_VERSION, Ze.a.osVersion),
                      this.stat.setComDim(
                        C.a.DIM_COM.HARDWARE_CONCURRENCY,
                        navigator.hardwareConcurrency || 0,
                      ),
                      this.stat.setComDim(C.a.DIM_COM.I_GPU, navigator.gpu ? 1 : 0),
                      this.stat.setComDim(C.a.DIM_COM.RENDER_INFO, $e()),
                      this.tsdbUtil.setBusiSource(i.source),
                      (this._onVideoPlayBind = this._onVideoPlay.bind(this)),
                      (this._onVideoProgressBind = this._onVideoProgress.bind(this)),
                      (this._onVideoSeekBind = this._onVideoSeek.bind(this)),
                      (this._onVideoHlsSeekBind = this._onVideoHlsSeek.bind(this)),
                      (this._onVideoEndedBind = this._onVideoEnded.bind(this)),
                      (this._onVideoCanplayBind = this._onVideoCanplay.bind(this)),
                      (this._onVideoTimeupdateBind = this._onVideoTimeupdate.bind(this)),
                      (this._onVideoErrorBind = this._onVideoError.bind(this)),
                      (this._onH5PlayerErrorBind = this._onH5PlayerError.bind(this)),
                      (this._onVideoPauseBind = this._onVideoPause.bind(this)),
                      (this._onVideoLoadStartBind = this._onVideoLoadStart.bind(this)),
                      (this._onVideoStartPlayBind = this._onVideoStartPlay.bind(this)),
                      (this._onVideoPause5sRetryBind = this._onVideoPause5sRetry.bind(this)),
                      (this._onM3u8PlayEndedBind = this._onM3u8PlayEnded.bind(this)),
                      (this._onBackToAV1Bind = this._onBackToAV1.bind(this)),
                      (this._onStartPlayBind = this._onStartPlay.bind(this)),
                      (this._onTurntoH264Bind = this.onTurntoH264.bind(this)),
                      (this._onWorkerTimeoutBind = this._onWorkerTimeout.bind(this)),
                      (this._onVideoNativePlayBind = this._onVideoNativePlay.bind(this)),
                      (this._onTurntoH264Bind = this.onTurntoH264.bind(this)),
                      (this._onH265RetryBind = this.onH265Retry.bind(this)),
                      (this._onTurnToMseBind = this.onTurnToMse.bind(this)),
                      (this._onWebcodecsRetryBind = this.onWebcodecsRetry.bind(this)),
                      (this._onTurnToWebcodecsSoftBind = this.onTurnToWebcodecsSoft.bind(this)),
                      (this._onVideoEhanceErrorBind = this.onVideoEhanceError.bind(this)),
                      (this._onVideoEhanceSuccessBind = this.onVideoEhanceSuccess.bind(this)),
                      (this._onPlayVideoBind = this.onPlayVideo.bind(this)),
                      this.eventEmitter.on(l.TURN_TO_H264, this._onTurntoH264Bind),
                      this.eventEmitter.on(l.H265_VIDEO_RETRY, this._onH265RetryBind),
                      this.eventEmitter.on(l.TURN_TO_MSE, this._onTurnToMseBind),
                      this.eventEmitter.on(
                        l.TURN_TO_WEBCODECS_SOFT,
                        this._onTurnToWebcodecsSoftBind,
                      ),
                      this.eventEmitter.on(l.WEBCODECS_RETRY, this._onWebcodecsRetryBind),
                      this.eventEmitter.on(l.ON_VIDEO_ENHANCE_ERROR, this._onVideoEhanceErrorBind),
                      this.eventEmitter.on(
                        l.ON_VIDEO_ENHANCE_SUCCESS,
                        this._onVideoEhanceSuccessBind,
                      ),
                      this.eventEmitter.on(l.VIDEO_PLAY, this._onPlayVideoBind),
                      this.eventEmitter.on(
                        l.PLAY_TIME_STATUS,
                        this._onVideoTimeupdateBind.bind(this),
                      ),
                      this.eventEmitter.on(l.VIDEO_SEEK, this._onVideoHlsSeekBind),
                      this.eventEmitter.on(l.H5_PLAYER_ERROR, this._onH5PlayerErrorBind),
                      this.eventEmitter.on(l.PAUSE_5S_RETRY, this._onVideoPause5sRetryBind),
                      this.eventEmitter.on(l.M3U8_PLAY_ENDED, this._onM3u8PlayEndedBind),
                      this.eventEmitter.on(l.TRY_TO_AV1, this._onBackToAV1Bind),
                      this.eventEmitter.on(l.TURN_TO_H265_WASM, this.onTurntoH265Wasm.bind(this)),
                      (this._backToAv1 = new Fa()),
                      (this.isTurnToMse = !1),
                      (this.isTurnToWebcodecsSoft = !1),
                      (this.isUseEnhance = !1),
                      (this.h264StreamInfo = null),
                      (this.h265StreamInfo = null),
                      (this.av1StreamInfo = null),
                      (this.hasPlayed = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'start',
                        value: function () {
                          var t =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                          this.started && this.stop(e.StopType.INNER),
                            (t = Object.assign({ isLive: !1 }, t)),
                            p.a.log('palyer info: ', t),
                            t.isCloseVodPcdn && (I.a.isCloseVodPcdn = 1),
                            t.uid && (U.a.uid = t.uid),
                            t.presenterUid || (t.presenterUid = this.anchorUid),
                            0 === U.a.convertUid &&
                              U.a.uid > 0 &&
                              (U.a.convertUid = x.b.rotUid(U.a.uid, t.presenterUid)),
                            this.visibility.setStat(this.stat, this.statVod),
                            (this.started = !0),
                            (this._coderate = t.coderate || '1000'),
                            (t.coderate = this._coderate),
                            this.stat.setComDim(C.a.DIM_COM.PLAYER_TYPE, t.type),
                            this.stat.setComDim(C.a.DIM_COM.LIVE_TYPE, t.liveType || va.a.VOD),
                            this.stat.setComDim(C.a.DIM_COM.PLAYBACK_RATE, this._playbackRate),
                            this.stat.setComDim(C.a.VOD_DIM_COM.LINE, t.lineType || 0),
                            this.stat.setComDim(
                              C.a.VOD_DIM_COM.PULLSTREAM_REASOM,
                              t.pullStreamFrom || 0,
                            ),
                            this.stat.setComDim(
                              C.a.VOD_DIM_COM.IS_MEMORY_GEAR,
                              t.isMemoryGear ? 1 : 0,
                            ),
                            this.statVod.setComDim(C.a.DIM_COM.PLAYER_TYPE, t.type),
                            this.statVod.setComDim(C.a.DIM_COM.LIVE_TYPE, t.liveType || va.a.VOD),
                            this.statVod.setComDim(C.a.DIM_COM.PLAYBACK_RATE, this._playbackRate),
                            this.statVod.setComDim(C.a.VOD_DIM_COM.LINE, t.lineType || 0),
                            this.statVod.setComDim(
                              C.a.VOD_DIM_COM.PULLSTREAM_REASOM,
                              t.pullStreamFrom || 0,
                            ),
                            this.statVod.setComDim(
                              C.a.VOD_DIM_COM.IS_MEMORY_GEAR,
                              t.isMemoryGear ? 1 : 0,
                            ),
                            this.stat.setComDim(C.a.DIM_COM.GAMEID, t.gameId),
                            this.statVod.setComDim(C.a.VOD_DIM_COM.GAMEID, t.gameId),
                            (this.playerType = t.type),
                            (this.streamType = t.streamType || this.playerType),
                            !this.videoElement && this._createVideoElm(),
                            this._addVideoListeners(),
                            this.videoElement && (this.videoElement.volume = this._volume),
                            (this.h265Info = t),
                            (this.playInfo = t),
                            (this._type = t.type),
                            x.b.isWebCodecsSupported()
                              ? (this.stat.setComDim(C.a.DIM_COM.DECODE_SUPPORT, 'webcodecs'),
                                this.stat.setComDim(C.a.DIM_COM.DECODE_CAPABILITY, 'webcodecs'),
                                this.statVod.setComDim(C.a.VOD_DIM_COM.DECODE_SUPPORT, 'webcodecs'),
                                this.statVod.setComDim(
                                  C.a.VOD_DIM_COM.DECODE_CAPABILITY,
                                  'webcodecs',
                                ))
                              : Ga.isSupported() &&
                                (this.stat.setComDim(C.a.DIM_COM.DECODE_CAPABILITY, 'mse'),
                                this.stat.setComDim(C.a.DIM_COM.DECODE_SUPPORT, 'mse'),
                                this.statVod.setComDim(C.a.VOD_DIM_COM.DECODE_CAPABILITY, 'mse'),
                                this.statVod.setComDim(C.a.VOD_DIM_COM.DECODE_SUPPORT, 'mse')),
                            gi.a.isMseSupportedHevc() &&
                              (this.stat.setComDim(C.a.DIM_COM.DECODE_SUPPORT, 'mse_hevc'),
                              this.statVod.setComDim(C.a.VOD_DIM_COM.DECODE_SUPPORT, 'mse_hevc')),
                            this.startByCodec(t);
                        },
                      },
                      {
                        key: 'startByCodec',
                        value: function (e) {
                          this._hasHttpPrefix(e.url) || (e.url = 'https:'.concat(e.url)),
                            e.tsInfo &&
                              !this._hasHttpPrefix(e.tsInfo.tsUrl) &&
                              (e.tsInfo.tsUrl = 'https:'.concat(e.tsInfo.tsUrl)),
                            (this.startTs = D.a.now()),
                            p.a.log('VodMgr.startNow', this.startTs),
                            (this.h265Info = e),
                            this.getVStreamInfo(e),
                            this.h265WasmProxy.initSupport(e);
                          var t = this.getMseHevcSupport(e);
                          if (
                            (F.add(this.onCheckTimer, this, 1e3),
                            t && I.a.useNextWcsTime && localStorage.hasOwnProperty('nextWcsTime'))
                          ) {
                            var i = Number(localStorage.nextWcsTime) || 0,
                              s = Date.now();
                            -1 === I.a.noNextWcsTimeUids.indexOf(Number(e.uid)) &&
                              i > s &&
                              -1 !== g.a.name.indexOf('edg') &&
                              (t = !1);
                          }
                          (this.h265Proxy = t ? this.h265MseProxy : this.h265WasmProxy),
                            this.av1StreamInfo && 1 == e._av1State
                              ? ((e.iBitRate = this.av1StreamInfo.iBitRate),
                                this.statVStreamExtInfo(this.av1StreamInfo, e))
                              : this.h265StreamInfo &&
                                (this.h265Proxy.isReady || this.h265Proxy.isH265MseCodec)
                              ? ((e.iBitRate = this.h265StreamInfo.iBitRate),
                                this.statVStreamExtInfo(this.h265StreamInfo, e))
                              : this.h264StreamInfo &&
                                this.statVStreamExtInfo(this.h264StreamInfo, e),
                            this.videoEnhance.setInfo(e),
                            (e._sMod = x.b.getSupportMod(
                              this.h265WasmProxy.isSupported,
                              this.h265Proxy.isServerSupported,
                              !!e._vodStates && e._vodStates.av1SvrOpen,
                              !!e._vodStates && e._vodStates.av1Support,
                            )),
                            t || 1 == e._av1State
                              ? (p.a.log('VodMgr.startByCodec Play MSE H265'),
                                this.stat.setComDim(C.a.DIM_COM.HARDDECODE, 1),
                                this.statVod.setComDim(C.a.VOD_DIM_COM.HARDDECODE, 1),
                                this.startPlayer(e))
                              : this.h265Proxy.isSupported
                              ? (this.stat.setComDim(C.a.DIM_COM.HARDDECODE, 2),
                                this.statVod.setComDim(C.a.VOD_DIM_COM.HARDDECODE, 2),
                                this.h265Proxy.loadDecoder(e.h5Root, {
                                  ready: this._onStartPlayBind,
                                  error: this._onWorkerErrorBind,
                                  timeout: this._onWorkerTimeoutBind,
                                }),
                                this.h265StreamBitrate &&
                                  (this.stat.setComDim(
                                    C.a.VOD_EXT_COM.BITRATE,
                                    this.h265StreamBitrate,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_EXT_COM.BITRATE,
                                    this.h265StreamBitrate,
                                  )))
                              : (this.h264StreamBitrate &&
                                  (this.stat.setComDim(
                                    C.a.VOD_EXT_COM.BITRATE,
                                    this.h264StreamBitrate,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_EXT_COM.BITRATE,
                                    this.h264StreamBitrate,
                                  )),
                                this.startPlayer(e));
                        },
                      },
                      {
                        key: 'getMseHevcSupport',
                        value: function (e) {
                          return (
                            this.h265MseProxy.initSupport(e),
                            1 == Number(localStorage._forceMseHevc)
                              ? (p.a.warn('VodMgr.getMseHevcSupport force mse h265'), !0)
                              : !!this.h265MseProxy.isSupported
                          );
                        },
                      },
                      {
                        key: '_onWorkerTimeout',
                        value: function () {
                          this.startPlayer(this.h265Info, !0);
                        },
                      },
                      {
                        key: 'startPlayer',
                        value: function (t, i) {
                          var s = x.b.checkWebCodec(t, this.stat, this.h265Proxy.isSupported);
                          if (
                            (this.checkWebCodecSoft(t),
                            this.isTurnToMse
                              ? ((s = !1),
                                this.stat.setComDim(
                                  C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                  this.eventEmitter.turnMseType,
                                ),
                                this.statVod.setComDim(
                                  C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                  this.eventEmitter.turnMseType,
                                ))
                              : t.isPureAudio
                              ? ((s = !1),
                                this.stat.setComDim(
                                  C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                  zi.a.IS_PUREAUDIO,
                                ),
                                this.statVod.setComDim(
                                  C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                  zi.a.IS_PUREAUDIO,
                                ))
                              : 1 == localStorage.isAngelNull
                              ? ((s = !1),
                                this.stat.setComDim(
                                  C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                  zi.a.ANGLE_NULL,
                                ),
                                this.statVod.setComDim(
                                  C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                  zi.a.ANGLE_NULL,
                                ))
                              : x.b.isWebcodecsBrowserSupported()
                              ? 1 == localStorage.isChromeH265RenderInfoEmpty
                                ? ((s = !1),
                                  this.stat.setComDim(
                                    C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.CHROME_H265_RENDER_INFO_EMPTY,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.CHROME_H265_RENDER_INFO_EMPTY,
                                  ))
                                : (this.h265Proxy.isSupported &&
                                    1 == localStorage.isCloseWebcodecsH265) ||
                                  1 == localStorage.isCloseWebcodecsH264 ||
                                  (1 == t._av1State && 1 == localStorage.isCloseWebcodecsAv1)
                                ? ((s = !1),
                                  this.stat.setComDim(
                                    C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.IS_NOT_SUPPORT_CONFIGURE,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.IS_NOT_SUPPORT_CONFIGURE,
                                  ))
                                : -1 != Ze.a.os.toLowerCase().indexOf('mac')
                                ? ((s = !1),
                                  this.stat.setComDim(
                                    C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.IS_NOT_SUPPORT_OS,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.IS_NOT_SUPPORT_OS,
                                  ))
                                : 1 == t._av1State &&
                                  0 == I.a.av1Webcodecs &&
                                  ((s = !1),
                                  this.stat.setComDim(
                                    C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.VOD_AV1_CLOSE_CFg,
                                  ),
                                  this.statVod.setComDim(
                                    C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                    zi.a.VOD_AV1_CLOSE_CFg,
                                  ))
                              : ((s = !1),
                                this.stat.setComDim(
                                  C.a.DIM_COM.WEBCODECS_BACK_REASON,
                                  zi.a.BROWSER_NOT_SUPPORTED,
                                ),
                                this.statVod.setComDim(
                                  C.a.VOD_DIM_COM.WEBCODECS_BACK_REASON,
                                  zi.a.BROWSER_NOT_SUPPORTED,
                                )),
                            this.h265Proxy &&
                              this.h265Proxy.h265StatReport &&
                              this.h265Proxy.h265StatReport.addH265Support)
                          ) {
                            var r = -1e4;
                            this.isTurnTo264 ? (r = 2) : i && (r = 3),
                              this.h265Proxy.h265StatReport.addH265Support(r, t);
                          }
                          p.a.log('VodMgr.useWebCodecs', s);
                          var a = s ? B.a.PLAYER_CORE_TYPE.WEBCODECS : B.a.PLAYER_CORE_TYPE.MSE;
                          (this.playerCoreType = a),
                            (t._dMod = x.b.getDecodeMod(s, this.h265Proxy.isReady, !1)),
                            this.h265Proxy.isSupported && (this.isTurnToWebcodecsSoft = !1);
                          var n = {
                            stat: this.stat,
                            statVod: this.statVod,
                            tsdb: this.tsdbUtil,
                            videoElement: this.videoElement,
                            h265Proxy: this.h265Proxy,
                            playerCoreType: a,
                            isSoftSolution: this.isTurnToWebcodecsSoft,
                          };
                          switch (((this._type = t.type), t.type)) {
                            case e.MP4:
                              this.player = new ee(this.eventEmitter, n);
                              break;
                            case e.HLS:
                              var o = null;
                              (o = t.isForceHlsTagPlayer ? na : Ga.isSupported() ? ra : na),
                                (this.player = new o(this.eventEmitter, n)),
                                2 === this.av1State && this._backToAv1.start(this.player);
                              break;
                            case e.VR:
                              this.player = new pa(this.eventEmitter, n);
                          }
                          F.has(this.onNoPicture, this) ||
                            ((this.hlsNoPictureStartTs = D.a.now()),
                            F.once(this.onNoPicture, this, 1e4)),
                            this.player.start(t),
                            this.setVolume(this._volume);
                        },
                      },
                      {
                        key: 'getVStreamInfo',
                        value: function (e) {
                          var t = this;
                          localStorage.hlsVStreamInfo &&
                            (e.vStreamInfo = JSON.parse(localStorage.hlsVStreamInfo));
                          var i = x.b.isOpen(I.a.vodAv1Cfg, this.anchorUid, e.lineType, !1);
                          this.statVod.setComDim('experiment', i ? 1 : 2);
                          var s = !1,
                            r = gi.a.isMseSupportedAV01(),
                            a = !1;
                          r &&
                            localStorage._renderInfo &&
                            (a = Cr.isClose(e.curBitrate, localStorage._renderInfo));
                          var n = 2 === this.av1State;
                          2 !== this.av1State && (this.av1State = 0);
                          var o = null,
                            h = null;
                          if (e.vStreamInfo && e.vStreamInfo.length > 0) {
                            if (
                              ((e.sWidth = e.vStreamInfo[0].sWidth || 0),
                              (e.sHeight = e.vStreamInfo[0].sHeight || 0),
                              e.vStreamInfo.map(function (e) {
                                'h265' == e.sCodec
                                  ? ((h = e), (t.h265StreamInfo = e))
                                  : 'av1' == e.sCodec
                                  ? ((o = e), (t.av1StreamInfo = e), (s = !0))
                                  : 'h264' == e.sCodec && (t.h264StreamInfo = e);
                              }),
                              'av1' == localStorage._vDecodec
                                ? (h = null)
                                : 'h265' == localStorage._vDecodec
                                ? (o = null)
                                : 'h264' == localStorage._vDecodec && ((h = null), (o = null)),
                              o &&
                                ((e.av1Url = o.sM3u8),
                                this._hasHttpPrefix(e.av1Url) ||
                                  (e.av1Url = 'https:'.concat(e.av1Url)),
                                1 == I.a.vodAv1UseFirst))
                            ) {
                              var u = this.changeOffset(o.sTs1Offset);
                              o.sTs1Url &&
                                (e.tsAv1Info = {
                                  initUrl: o.sM3u8.replace('.m3u8', '/init.mp4'),
                                  tsUrl: o.sTs1Url,
                                  byteRangeStartOffset: u.byteRangeStartOffset,
                                  byteRangeEndOffset: u.byteRangeEndOffset,
                                });
                            }
                            if (h) {
                              (e.h265Url = h.sM3u8),
                                this._hasHttpPrefix(e.h265Url) ||
                                  (e.h265Url = 'https:'.concat(e.h265Url));
                              var d = this.changeOffset(h.sTs1Offset);
                              h.sTs1Url &&
                                e.duration &&
                                ((e.tsH265Info = {
                                  tsUrl: h.sTs1Url,
                                  byteRangeStartOffset: d.byteRangeStartOffset,
                                  byteRangeEndOffset: d.byteRangeEndOffset,
                                  totalDuration: e.duration,
                                }),
                                e.tsH265Info &&
                                  !this._hasHttpPrefix(e.tsH265Info.tsUrl) &&
                                  (e.tsH265Info.tsUrl = 'https:'.concat(e.tsH265Info.tsUrl)));
                            }
                            o && s && !n && i && r && !a && (this.av1State = 1),
                              (e._av1State = this.av1State);
                          }
                          var c = x.b.getAv1Support(r, i, a, n);
                          this.statVod.setComDim(C.a.VOD_CORE.AV1_SVR, s ? (o ? 1 : 2) : 3),
                            this.statVod.setComDim(C.a.VOD_CORE.AV1_SPT, c),
                            this.statVod.setComDim(
                              C.a.VOD_CORE.AV1_USE,
                              1 === this.av1State ? 1 : 2,
                            ),
                            (e._vodStates = { av1SvrOpen: s, av1Support: c });
                        },
                      },
                      {
                        key: 'statVStreamExtInfo',
                        value: function () {
                          var e = this,
                            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
                            i = arguments.length > 1 ? arguments[1] : void 0,
                            s = t.extParam || t.mpExtraParam,
                            r = t.sCodec,
                            a = s.value;
                          a &&
                            (a.channel &&
                              I.a.vodEnhanceChannelMap.map(function (t) {
                                t[a.channel] &&
                                  ((i.gameId = t[a.channel]),
                                  e.stat.setComDim(C.a.DIM_COM.GAMEID, i.gameId),
                                  e.statVod.setComDim(C.a.VOD_DIM_COM.GAMEID, i.gameId));
                              }),
                            a.vid && (i.vid = a.vid),
                            a.pid && (i.presenterUid = a.pid),
                            this.stat.setComDim(C.a.VOD_EXT_COM.VID, a.vid),
                            this.stat.setComDim(C.a.VOD_EXT_COM.CLIENT, a.client),
                            this.stat.setComDim(C.a.VOD_EXT_COM.PID, a.pid),
                            this.stat.setComDim(C.a.VOD_EXT_COM.BITRATE, a.bitrate),
                            this.stat.setComDim(C.a.VOD_EXT_COM.DEFINITION, a.definition),
                            this.stat.setComDim(C.a.VOD_EXT_COM.SCENE, a.scene),
                            this.statVod.setComDim(C.a.VOD_EXT_COM.VID, a.vid),
                            this.statVod.setComDim(C.a.VOD_EXT_COM.CLIENT, a.client),
                            this.statVod.setComDim(C.a.VOD_EXT_COM.PID, a.pid),
                            this.statVod.setComDim(C.a.VOD_EXT_COM.BITRATE, a.bitrate),
                            this.statVod.setComDim(C.a.VOD_EXT_COM.DEFINITION, a.definition),
                            this.statVod.setComDim(C.a.VOD_EXT_COM.SCENE, a.scene),
                            'h265' === r && (this.h265StreamBitrate = a.bitrate),
                            'h264' === r && (this.h264StreamBitrate = a.bitrate),
                            'av1' === r && (this.av1StreamBitrate = a.bitrate));
                        },
                      },
                      {
                        key: 'changeOffset',
                        value: function (e) {
                          var t = 0,
                            i = 0,
                            s = e.split('@');
                          if (s.length > 1) {
                            var r = parseInt(s[0], 10),
                              a = parseInt(s[1], 10);
                            (t = a), (i = a + r);
                          }
                          return { byteRangeStartOffset: t, byteRangeEndOffset: i };
                        },
                      },
                      {
                        key: '_onStartPlay',
                        value: function () {
                          this.startPlayer(this.h265Info);
                        },
                      },
                      {
                        key: 'stop',
                        value: function () {
                          var t =
                            arguments.length > 0 && void 0 !== arguments[0]
                              ? arguments[0]
                              : e.StopType.OUTER;
                          p.a.log('VodMgr stop! type='.concat(t)),
                            F.remove(this.onCheckTimer, this),
                            this.visibility.delVisibilitychange(),
                            this.started && this.destory(t),
                            (this.isUseEnhance = !1);
                        },
                      },
                      {
                        key: 'reset',
                        value: function (e) {
                          (this.started = !1),
                            (this.ended = !1),
                            (this.playerType = ''),
                            (this._loop = !1),
                            (this._volume = 1),
                            (this._paused = !1),
                            (this._playbackRate = 1);
                        },
                      },
                      {
                        key: 'destory',
                        value: function (t) {
                          this.reset(),
                            this._removeVideoListeners(),
                            this.player && (this.player.stop(), (this.player = null)),
                            this.createVideoElmInner &&
                              ((this.videoElement = null), (this.createVideoElmInner = !1)),
                            t === e.StopType.OUTER && F.remove(this.onNoPicture, this),
                            this.stat.clearFill(),
                            this.statVod.clearFill(),
                            this._backToAv1.stop(),
                            p.a.log('VodMgr destoryed');
                        },
                      },
                      {
                        key: 'setTafHandler',
                        value: function (e) {
                          p.a.log('VodMgr.setTafHandler success'), ue.default.setTafHandler(e);
                        },
                      },
                      {
                        key: 'getDurationTime',
                        value: function () {
                          var e = 0;
                          return this.player
                            ? ((e = this.player.getDurationTime()), (this._duration = e), e)
                            : e;
                        },
                      },
                      {
                        key: 'getDurationRealTime',
                        value: function () {
                          var e = 0;
                          return this.player
                            ? ((e = this.player.getFixedDurationTime
                                ? this.player.getFixedDurationTime()
                                : this.player.getDurationTime()),
                              (this._duration = e),
                              e)
                            : e;
                        },
                      },
                      {
                        key: 'getCurrentTime',
                        value: function () {
                          var e = 0;
                          return this.player ? (e = this.player.getCurrentTime()) : e;
                        },
                      },
                      {
                        key: 'getCurrentRealTime',
                        value: function () {
                          var e = 0;
                          return this.player
                            ? (e = this.player.getCurrentRealTime
                                ? this.player.getCurrentRealTime() / 1e3
                                : this.player.getCurrentTime())
                            : e;
                        },
                      },
                      {
                        key: 'seekTime',
                        value: function (t) {
                          if (this.player) {
                            (t = Math.floor(t)),
                              this.streamType === e.StreamType.HLS &&
                                (this.playerType === e.VR
                                  ? this.player.updatePlayerStatus(!0)
                                  : (this.player.started = !0));
                            var i = this.getDurationTime();
                            t > i && (t = i),
                              (this.ended = !1),
                              this._backToAv1.isTimeToBack()
                                ? this._onBackToAV1('seek', t)
                                : this.player.seek(t);
                          }
                        },
                      },
                      {
                        key: 'play',
                        value: function () {
                          var t = '';
                          return (
                            this.videoElement &&
                              (this.streamType === e.StreamType.HLS &&
                                this.ended &&
                                (this._type == e.HLS && Ga.isSupported()
                                  ? this.restart()
                                  : this.seekTime(0)),
                              (this.ended = !1),
                              (this._paused = !1),
                              (t = this.videoElement.play())),
                            this.player && this.player.isWebCodec && this.player.play(),
                            t
                          );
                        },
                      },
                      {
                        key: 'pause',
                        value: function () {
                          this._paused ||
                            (this.player && this.player.isWebCodec
                              ? this.player.pause()
                              : ((this._paused = !0),
                                this.streamType === e.StreamType.HLS &&
                                  (this.playerType === e.VR
                                    ? this.player.updatePlayerStatus(!0)
                                    : (this.player.started = !0)),
                                this.player && this.player.pause()));
                        },
                      },
                      {
                        key: 'setLoop',
                        value: function (t) {
                          this.player &&
                            ((this._loop = t),
                            this.playerType === e.MP4 && (this.videoElement.loop = t));
                        },
                      },
                      {
                        key: 'getLoop',
                        value: function () {
                          return this._loop;
                        },
                      },
                      {
                        key: 'setVolume',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          (this._volume = e),
                            this.player && this.player.setVolume && this.player.setVolume(e);
                        },
                      },
                      {
                        key: 'getVolume',
                        value: function () {
                          return this.videoElement ? this.videoElement.volume : this._volume;
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                          p.a.log('VodMgr.setPlaybackRate', e),
                            (this._playbackRate = Number(e)),
                            this.player &&
                              this.player.setPlaybackRate &&
                              this.player.setPlaybackRate(this._playbackRate),
                            this.stat.setComDim(C.a.DIM_COM.PLAYBACK_RATE, this._playbackRate),
                            this.statVod.setComDim(C.a.DIM_COM.PLAYBACK_RATE, this._playbackRate);
                        },
                      },
                      {
                        key: 'getPlaybackRate',
                        value: function () {
                          return this._playbackRate;
                        },
                      },
                      {
                        key: 'setCodeRate',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : '1000';
                          (this._coderate = e),
                            this.stat.setComDim(C.a.DIM_COM.VOD_CODERATE, this._coderate);
                        },
                      },
                      {
                        key: 'getCodeRate',
                        value: function () {
                          return this._coderate;
                        },
                      },
                      {
                        key: 'getBuffered',
                        value: function () {
                          return this.videoElement && this.videoElement.buffered;
                        },
                      },
                      {
                        key: 'onNoPicture',
                        value: function () {
                          if (!this.isSendNoPicture) {
                            this.isSendNoPicture = !0;
                            var e = this.getCurrentTime(),
                              t = this.player.getCostTimes ? this.player.getCostTimes() : [],
                              i = [this.player.hasPicture || this.hadPlayVideo ? 0 : 100];
                            (i = i.concat(t)),
                              this.player.hasPicture ||
                                this.hadPlayVideo ||
                                !this.player.addNoPictureReason ||
                                this.player.addNoPictureReason();
                            var s = D.a.now() - this.hlsNoPictureStartTs;
                            this.player.sendNoPicture && this.player.sendNoPicture(s);
                            var r = [
                                this.stat.createAct(C.a.ACT.NO_PICTURE, {
                                  value: i,
                                  str: [g.a.platform, this.busiSource, 0 == e ? 0 : 1],
                                }),
                              ],
                              a = 0;
                            this.player &&
                              this.player.mse &&
                              (a = this.player.mse.isMediaSourceOpen ? 1 : 2);
                            var n = x.b.getBrowserHidden();
                            n && 2 == a
                              ? p.a.log(
                                  'VodMgr.onNoPicture browserHidden='
                                    .concat(n, ', isMediaSourceOpen=')
                                    .concat(a),
                                )
                              : this.eventEmitter.trigger(l.DATA_METRIC2, r);
                          }
                        },
                      },
                      {
                        key: 'getLog',
                        value: function () {
                          return p.a.getLog();
                        },
                      },
                      {
                        key: 'getNewLog',
                        value: function () {
                          return p.a.getNewLog();
                        },
                      },
                      {
                        key: 'pushMuffedData',
                        value: function (t) {
                          this.player &&
                            this.playerType === e.HLS &&
                            (this.player.voiceEliminationData ||
                              (this.player.voiceEliminationData = []),
                            this.player.voiceEliminationData.push(t));
                        },
                      },
                      {
                        key: 'getMuted',
                        value: function () {
                          return this.player && this.player.isWebCodec
                            ? this._muteVal
                            : this.videoElement && this.videoElement.muted;
                        },
                      },
                      {
                        key: 'getVideoWidth',
                        value: function () {
                          return this.videoElement && this.videoElement.videoWidth;
                        },
                      },
                      {
                        key: 'getVideoHeight',
                        value: function () {
                          return this.videoElement && this.videoElement.videoHeight;
                        },
                      },
                      {
                        key: 'getVideoElement',
                        value: function () {
                          return this.playerType === e.VR ? this.vrElement : this.videoElement;
                        },
                      },
                      {
                        key: 'showControls',
                        value: function () {
                          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                          this.videoElement && (this.videoElement.controls = e);
                        },
                      },
                      {
                        key: '_hasHttpPrefix',
                        value: function (e) {
                          return /^http(s)?/.test(e);
                        },
                      },
                      {
                        key: '_createVideoElm',
                        value: function () {
                          var t = j.create(this.videoElement);
                          this.playerType === e.VR && t.setAttribute('crossOrigin', 'anonymous'),
                            (this.videoElement = t),
                            (this.createVideoElmInner = !0),
                            p.a.log('VodMgr._craeteVideoElm id='.concat(t.id));
                        },
                      },
                      {
                        key: '_isEnded',
                        value: function () {
                          var e = this.getDurationRealTime(),
                            t = this.getCurrentRealTime();
                          return e > 0 && e - t < 0.1;
                        },
                      },
                      {
                        key: '_videoPlayEnded',
                        value: function () {
                          p.a.log('VodMgr end'),
                            this.streamType === e.StreamType.HLS &&
                              (this.playerType === e.VR
                                ? this.player.updatePlayerStatus(!1)
                                : (this.player.started = !1)),
                            (this.ended = !0),
                            this.eventEmitter.trigger(e.Event.VIDEO_ENDED, {
                              video: this.videoElement,
                            }),
                            this.streamType === e.StreamType.HLS &&
                              this._loop &&
                              ((this.ended = !1), this.seekTime(0));
                        },
                      },
                      {
                        key: '_addVideoListeners',
                        value: function () {
                          p.a.log('VodMgr._addVideoListeners id='.concat(this.videoElement.id)),
                            this.videoElement.addEventListener('playing', this._onVideoPlayBind),
                            this.videoElement.addEventListener(
                              'progress',
                              this._onVideoProgressBind,
                            ),
                            this.videoElement.addEventListener('canplay', this._onVideoCanplayBind),
                            this.videoElement.addEventListener('error', this._onVideoErrorBind),
                            this.videoElement.addEventListener('pause', this._onVideoPauseBind),
                            this.videoElement.addEventListener(
                              'loadstart',
                              this._onVideoLoadStartBind,
                            ),
                            this.videoElement.addEventListener('play', this._onVideoNativePlayBind),
                            this.playerType === e.MP4 &&
                              (this.videoElement.addEventListener('ended', this._onVideoEndedBind),
                              this.videoElement.addEventListener('seeked', this._onVideoSeekBind));
                        },
                      },
                      {
                        key: 'removeEventListener',
                        value: function () {
                          this.eventEmitter.off(l.VIDEO_SEEK, this._onVideoHlsSeekBind),
                            this.eventEmitter.off(l.H5_PLAYER_ERROR, this._onH5PlayerErrorBind),
                            this.eventEmitter.off(l.PAUSE_5S_RETRY, this._onVideoPause5sRetryBind),
                            this.eventEmitter.off(l.M3U8_PLAY_ENDED, this._onM3u8PlayEndedBind),
                            this.eventEmitter.off(l.TRY_TO_AV1, this._onBackToAV1Bind),
                            this.eventEmitter.off(l.TURN_TO_H264, this._onTurntoH264Bind),
                            this.eventEmitter.off(l.H265_VIDEO_RETRY, this._onH265RetryBind),
                            this.eventEmitter.off(l.TURN_TO_MSE, this._onTurnToMseBind),
                            this.eventEmitter.off(
                              l.TURN_TO_WEBCODECS_SOFT,
                              this._onTurnToWebcodecsSoftBind,
                            ),
                            this.eventEmitter.off(l.WEBCODECS_RETRY, this._onWebcodecsRetryBind),
                            this.eventEmitter.off(
                              l.ON_VIDEO_ENHANCE_ERROR,
                              this._onVideoEhanceErrorBind,
                            ),
                            this.eventEmitter.off(
                              l.ON_VIDEO_ENHANCE_SUCCESS,
                              this._onVideoEhanceSuccessBind,
                            ),
                            this.eventEmitter.off(l.VIDEO_PLAY, this._onPlayVideoBind),
                            this.eventEmitter.off(
                              l.PLAY_TIME_STATUS,
                              this._onVideoTimeupdateBind.bind(this),
                            ),
                            this.eventEmitter.off(
                              l.TURN_TO_H265_WASM,
                              this.onTurntoH265Wasm.bind(this),
                            );
                        },
                      },
                      {
                        key: '_removeVideoListeners',
                        value: function () {
                          p.a.log('VodMgr._removeVideoListeners id='.concat(this.videoElement.id)),
                            this.videoElement.removeEventListener('playing', this._onVideoPlayBind),
                            this.videoElement.removeEventListener(
                              'progress',
                              this._onVideoProgressBind,
                            ),
                            this.videoElement.removeEventListener(
                              'canplay',
                              this._onVideoCanplayBind,
                            ),
                            this.videoElement.removeEventListener('error', this._onVideoErrorBind),
                            this.videoElement.removeEventListener('pause', this._onVideoPauseBind),
                            this.videoElement.removeEventListener(
                              'loadstart',
                              this._onVideoLoadStartBind,
                            ),
                            this.videoElement.removeEventListener(
                              'play',
                              this._onVideoNativePlayBind,
                            ),
                            this.playerType === e.MP4 &&
                              (this.videoElement.removeEventListener(
                                'ended',
                                this._onVideoEndedBind,
                              ),
                              this.videoElement.removeEventListener(
                                'seeked',
                                this._onVideoSeekBind,
                              ));
                        },
                      },
                      {
                        key: '_onVideoPlay',
                        value: function (e) {
                          p.a.log(
                            'VodMgr._onVideoPlay id='
                              .concat(this.videoElement.id, ' ended=')
                              .concat(this.ended),
                          ),
                            this.ended ||
                              this.eventEmitter.trigger(l.VIDEO_PLAYING, {
                                video: this.videoElement,
                                event: e,
                              });
                        },
                      },
                      {
                        key: '_onVideoNativePlay',
                        value: function (e) {
                          this.ended ||
                            this.eventEmitter.trigger(l.VIDEO_NATIVE_PLAY, {
                              video: this.videoElement,
                              event: e,
                            });
                        },
                      },
                      {
                        key: '_onVideoProgress',
                        value: function (t) {
                          this.ended ||
                            this.eventEmitter.trigger(e.Event.VIDEO_PROGRESS, {
                              video: this.videoElement,
                              event: t,
                            });
                        },
                      },
                      {
                        key: '_onVideoSeek',
                        value: function (e) {
                          this.ended = !1;
                          var t = this.videoElement.currentTime;
                          this.eventEmitter.trigger(l.VIDEO_SEEK, {
                            video: this.videoElement,
                            currentTime: 1 * t,
                          }),
                            this._isEnded() || this._paused || this.ended || this.play();
                        },
                      },
                      {
                        key: '_onVideoHlsSeek',
                        value: function (e, t) {
                          (this.ended = !1), this._isEnded() && this._onVideoTimeupdate();
                        },
                      },
                      {
                        key: '_onVideoEnded',
                        value: function (e) {
                          this._videoPlayEnded();
                        },
                      },
                      {
                        key: '_onM3u8PlayEnded',
                        value: function () {
                          this._videoPlayEnded();
                        },
                      },
                      {
                        key: '_onVideoCanplay',
                        value: function (t) {
                          this.ended ||
                            this.eventEmitter.trigger(e.Event.VIDEO_CANPLAY, {
                              video: this.videoElement,
                              event: t,
                            });
                        },
                      },
                      {
                        key: '_onVideoTimeupdate',
                        value: function (t, i) {
                          if (!this.ended && !this.isRetrying) {
                            !this._duration && this.getDurationTime();
                            var s = this._duration,
                              r = this.getCurrentTime();
                            this.streamType === e.StreamType.HLS && this._isEnded()
                              ? ((r = s),
                                this.eventEmitter.trigger(e.Event.VIDEO_TIMEUPDATE, {
                                  duration: s,
                                  currentTime: r,
                                }),
                                this._videoPlayEnded())
                              : this.eventEmitter.trigger(e.Event.VIDEO_TIMEUPDATE, {
                                  duration: s,
                                  currentTime: r,
                                });
                          }
                        },
                      },
                      {
                        key: '_onVideoError',
                        value: function (t) {
                          p.a.log('VodMgr._onVideoError id='.concat(t.currentTarget.id)),
                            1 !== this.av1State &&
                              this.eventEmitter.trigger(e.Event.VIDEO_ERROR, { error: t });
                        },
                      },
                      {
                        key: '_onVideoPause',
                        value: function (e) {
                          p.a.log('VodMgr._onVideoPause id='.concat(this.videoElement.id)),
                            this.eventEmitter.trigger(l.VIDEO_PAUSE, {
                              video: this.videoElement,
                              event: e,
                            });
                        },
                      },
                      {
                        key: '_onVideoLoadStart',
                        value: function (t) {
                          this.isRetrying ||
                            this.eventEmitter.trigger(e.Event.VIDEO_LOAD_START, {
                              video: this.videoElement,
                              event: t,
                            });
                        },
                      },
                      {
                        key: '_onVideoStartPlay',
                        value: function (e, t) {
                          t && (this.vrElement = t.video),
                            (this.isRetrying = !1),
                            (this.hadPlayVideo = !0);
                        },
                      },
                      {
                        key: '_onH5PlayerError',
                        value: function (e, t) {
                          if (!t || t.code !== At) {
                            var i = this.getCurrentTime();
                            (this.playInfo.seekTime = i + 1),
                              (this.isRetrying = !0),
                              1 === this.av1State && (this.av1State = 2);
                            var s = this._volume;
                            this.start(this.playInfo),
                              this.setVolume(s),
                              this.setPlaybackRate(this._playbackRate);
                          }
                        },
                      },
                      {
                        key: '_onBackToAV1',
                        value: function (e, t) {
                          if (2 === this.av1State) {
                            p.a.log('VodMgr._onBackToAV1, seekTime='.concat(t)),
                              (this.av1State = 0),
                              (this.isRetrying = !0),
                              (this.playInfo.seekTime = t);
                            var i = this._volume;
                            this.start(this.playInfo),
                              this.setVolume(i),
                              this.setPlaybackRate(this._playbackRate);
                          }
                        },
                      },
                      {
                        key: '_onVideoPause5sRetry',
                        value: function () {
                          this.isRetrying = !0;
                        },
                      },
                      {
                        key: 'onTurntoH264',
                        value: function (e, t) {
                          p.a.log('VodMgr.onTurntoH264, turn to h264', e, t),
                            this.h265Proxy.onTurnToH264(this._type),
                            this.playInfo &&
                              (t &&
                                'number' == typeof t.seekTime &&
                                t.seekTime > 0 &&
                                (this.playInfo.seekTime = t.seekTime),
                              this.start(this.playInfo),
                              this.setVolume(this._volume),
                              this.setPlaybackRate(this._playbackRate));
                        },
                      },
                      {
                        key: 'onH265Retry',
                        value: function (e, t) {
                          p.a.log('VodMgr.onH265Retry, H265 retry!', e),
                            this.playInfo &&
                              (t &&
                                'number' == typeof t.seekTime &&
                                t.seekTime > 0 &&
                                (this.playInfo.seekTime = t.seekTime),
                              this.start(this.playInfo),
                              this.setVolume(this._volume),
                              this.setPlaybackRate(this._playbackRate));
                        },
                      },
                      {
                        key: 'onTurnToMse',
                        value: function (e, t) {
                          p.a.log('VodMgr.onTurnToMse, turn to MSE'),
                            (this.isTurnToMse = !0),
                            (this.isTurnToWebcodecsSoft = !1),
                            t &&
                              'number' == typeof t.seekTime &&
                              t.seekTime > 0 &&
                              (this.playInfo.seekTime = t.seekTime),
                            this.start(this.playInfo),
                            this.setVolume(this._volume),
                            this.setPlaybackRate(this._playbackRate);
                        },
                      },
                      {
                        key: 'onTurnToWebcodecsSoft',
                        value: function (e, t) {
                          p.a.log('VodMgr.onTurnToWebcodecsSoft', t),
                            localStorage._webcodecSoftNums ||
                              ((localStorage._webcodecSoftNums = 0),
                              (localStorage._webcodecSoftDate = Date.now()));
                          var i = Number(localStorage._webcodecSoftNums) + 1;
                          (localStorage._webcodecSoftNums = i),
                            (this.isTurnToMse = !1),
                            (this.isTurnToWebcodecsSoft = !0),
                            t &&
                              'number' == typeof t.seekTime &&
                              t.seekTime > 0 &&
                              (this.playInfo.seekTime = t.seekTime),
                            this.start(this.playInfo),
                            this.setVolume(this._volume),
                            this.setPlaybackRate(this._playbackRate);
                        },
                      },
                      {
                        key: 'onTurntoH265Wasm',
                        value: function (e, t) {
                          p.a.log('VodMgr.onTurntoH265Wasm, turn to h265 wasm', e),
                            1 === Number(localStorage._forceMseHevc) &&
                              localStorage.setItem &&
                              localStorage.setItem('_forceMseHevc', 0),
                            this.h265MseProxy.onTurntoH265Wasm(this.type),
                            t &&
                              'number' == typeof t.seekTime &&
                              t.seekTime > 0 &&
                              (this.playInfo.seekTime = t.seekTime),
                            this.start(this.playInfo),
                            this.setVolume(this._volume),
                            this.setPlaybackRate(this._playbackRate);
                        },
                      },
                      {
                        key: 'onWebcodecsRetry',
                        value: function (e, t) {
                          t &&
                            'number' == typeof t.seekTime &&
                            t.seekTime > 0 &&
                            (this.playInfo.seekTime = t.seekTime),
                            p.a.log('VodMgr.onWebcodecsRetry'),
                            this.start(this.playInfo),
                            this.setVolume(this._volume),
                            this.setPlaybackRate(this._playbackRate);
                        },
                      },
                      {
                        key: 'restart',
                        value: function () {
                          p.a.log(
                            'VodMgr.restart, volume='
                              .concat(this._volume, ', mute=')
                              .concat(this._muteVal),
                          ),
                            this.start(this.playInfo),
                            this.setVolume(this._volume),
                            this.setMuted(this._muteVal),
                            this.setPlaybackRate(this._playbackRate);
                        },
                      },
                      {
                        key: 'containerResize',
                        value: function () {
                          var e =
                            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                          this.player &&
                            this.player.containerResize &&
                            this.player.containerResize(e);
                        },
                      },
                      {
                        key: 'getVideoExtractData',
                        value: function () {
                          var e = {};
                          return (
                            (e.codec = this.player.getCodecType().toUpperCase()),
                            (e.videoWidth = this.getVideoWidth() || this.playInfo.sWidth),
                            (e.videoHeight = this.getVideoHeight() || this.playInfo.sHeight),
                            (e.frameRate = this.player.getFps()),
                            (e.bitrate = this.playInfo.curBitrate || 0),
                            p.a.log('VodMgr.getVideoExtractData', JSON.stringify(e)),
                            e
                          );
                        },
                      },
                      {
                        key: 'checkWebCodecSoft',
                        value: function (e) {
                          localStorage._webcodecSoftDate &&
                            (Date.now() - Number(localStorage._webcodecSoftDate) >= 864e5
                              ? (delete localStorage._webcodecSoftDate,
                                delete localStorage._webcodecSoftNums)
                              : Number(localStorage._webcodecSoftNums) >= 3 &&
                                (this.isTurnToWebcodecsSoft = !0)),
                            1 == I.a.isQQSoft &&
                              94 == g.a.version.major &&
                              -1 != navigator.userAgent.toLowerCase().indexOf('qq') &&
                              '7' == Ze.a.osVersion &&
                              (this.isTurnToWebcodecsSoft = !0),
                            1 != I.a.isWin7WcsSoft ||
                              ('7' != Ze.a.osVersion &&
                                (109 != g.a.version.major ||
                                  x.b.isMseSupportedHevc() ||
                                  -1 === g.a.name.indexOf('chrome'))) ||
                              (this.isTurnToWebcodecsSoft = !0),
                            -1 != I.a.wcsSoftBrows.indexOf(g.a.version.major) &&
                              -1 !== g.a.name.indexOf('chrome') &&
                              (this.isTurnToWebcodecsSoft = !0),
                            -1 != I.a.wcsSoft264Uids.indexOf(Number(e.uid)) &&
                              (this.isTurnToWebcodecsSoft = !0),
                            1 == localStorage._forceWebcodecsSoft &&
                              (this.isTurnToWebcodecsSoft = !0);
                        },
                      },
                      {
                        key: 'setMuted',
                        value: function (e) {
                          (this._muteVal = !!e),
                            p.a.log('VodMgr.setMuted', e),
                            this.player && this.player.setMuted(e);
                        },
                      },
                      {
                        key: 'setSegmenttion',
                        value: function (e) {
                          p.a.log('VodMgr.setSegmenttion', e),
                            this.player && this.player.setSegmenttion(e);
                        },
                      },
                      {
                        key: 'getModelRes',
                        value: function () {
                          return this.videoEnhance.getModelRes();
                        },
                      },
                      {
                        key: 'onVideoEhanceError',
                        value: function (e, t) {
                          this.player.setEnhance(!1),
                            this.videoEnhance &&
                              this.videoEnhance.onVideoEhanceErrorCb &&
                              this.videoEnhance.onVideoEhanceErrorCb(t.type);
                        },
                      },
                      {
                        key: 'onVideoEhanceSuccess',
                        value: function () {
                          this.videoEnhance &&
                            this.videoEnhance.onVideoEhanceSuccess &&
                            this.videoEnhance.onVideoEhanceSuccess();
                        },
                      },
                      {
                        key: 'getEnhanceStats',
                        value: function () {
                          return this.videoEnhance.getEnhanceStats();
                        },
                      },
                      {
                        key: 'onPlayVideo',
                        value: function (e, t) {
                          p.a.log('VodMgr.onPlayVideo'),
                            t && (this.vrElement = t.video),
                            (this.isRetrying = !1),
                            (this.hadPlayVideo = !0),
                            this.eventEmitter.trigger(l.VIDEO_PLAYING, {
                              video: this.videoElement,
                              event: e,
                            }),
                            this.setEnhance(!0);
                          var i = $e().toLowerCase();
                          this.stat.setComDim(C.a.DIM_COM.RENDER_INFO, i),
                            this.stat.setComDim(C.a.VOD_DIM_COM.RENDER_INFO, i),
                            (-1 == i.toLocaleLowerCase().indexOf('swiftshader device') &&
                              '' != i) ||
                              (this.player &&
                                this.player.setDisableHardAcc &&
                                this.player.setDisableHardAcc());
                          var s = Ze.a.os || '',
                            r = Ze.a.osVersion || '',
                            a = 'windows' == s.toLocaleLowerCase() && 7 == Number(r),
                            n = -1 != i.toLocaleLowerCase().indexOf('intel'),
                            o = -1 != i.toLocaleLowerCase().indexOf('angle (null'),
                            h = '' == i.toLocaleLowerCase(),
                            u = navigator.hardwareConcurrency;
                          a &&
                            n &&
                            u <= 4 &&
                            this.player &&
                            this.player.win7PerfInsufficient &&
                            this.player.win7PerfInsufficient(),
                            o
                              ? ((localStorage.isAngelNull = 1),
                                this.player &&
                                  this.player.angelNullError &&
                                  this.player.angelNullError())
                              : (localStorage.isAngelNull = 0),
                            h
                              ? this.player &&
                                this.player.chromeH265RenderEmptyError &&
                                this.player.chromeH265RenderEmptyError()
                              : (localStorage.isChromeH265RenderInfoEmpty = 0),
                            this.playerCoreType == B.a.PLAYER_CORE_TYPE.MSE &&
                              this.mse &&
                              this.mse.h265Proxy.isH265MseCodec &&
                              -1 != i.indexOf('amd') &&
                              -1 != i.indexOf('radeon') &&
                              (p.a.log('VodMgr.onPlayVideo.amd.hevError'),
                              this.player.onMseHevcError());
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e, t) {
                          this.videoEnhance &&
                            this.videoEnhance.onCheckTimer &&
                            this.videoEnhance.onCheckTimer(e, t);
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (t) {
                          this._type === e.HLS &&
                            (p.a.log('VodMgr.setEnhance', t),
                            (this.isUseEnhance = !!t),
                            this.videoEnhance.getSupport(this.playInfo, $e()),
                            this.isUseEnhance &&
                              (this.videoEnhance.isSupport ||
                                this.eventEmitter.trigger(l.ON_VIDEO_ENHANCE_UNSUPPORT),
                              (this.isUseEnhance = this.videoEnhance.isSupport)),
                            this.player &&
                              this.player.setEnhance &&
                              this.player.setEnhance(this.isUseEnhance));
                        },
                      },
                      {
                        key: 'paused',
                        get: function () {
                          return this._paused;
                        },
                      },
                      {
                        key: 'readyState',
                        get: function () {
                          return this.videoElement && this.videoElement.readyState;
                        },
                      },
                    ]),
                    e
                  );
                })();
              (xa.HLS = 3),
                (xa.MP4 = 11),
                (xa.VR = 7),
                (xa.StreamType = { HLS: xa.HLS, MP4: xa.MP4 }),
                (xa.Event = {
                  VIDEO_CANPLAY: f,
                  VIDEO_TIMEUPDATE: m,
                  VIDEO_PROGRESS: _,
                  VIDEO_ERROR: v,
                  VIDEO_ENDED: y,
                  VIDEO_LOAD_START: S,
                }),
                (xa.StopType = { INNER: 1, OUTER: 2 });
              var Ha = xa;
              'undefined' == typeof localStorage && (window.localStorage = {}),
                (I.a.isForceUseWorker = 1),
                F.initWorker();
              var Wa = (function () {
                function e() {
                  var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                  Object(s.a)(this, e);
                  var i = Number(localStorage.sdkLogLevel);
                  isNaN(i) || this._setLogLevel(i);
                  var r = E();
                  (this.on = r.on.bind(r)),
                    (this.off = r.off.bind(r)),
                    (this.trigger = r.trigger.bind(r)),
                    (this.videoElm = t.videoElement || null),
                    (this.appId = t.appId || 66),
                    (this.uid = t.uid || '0'),
                    (this.guid = t.guid || ''),
                    (this.ua = t.ua || ''),
                    (this.anchorUid = t.anchorUid || ''),
                    (this.source = t.source || ''),
                    (this.isMute = t.isMute || 0),
                    (this.gameid = t.gameid || 0);
                  var a = ''
                    .concat(Ze.a.os, '/')
                    .concat(Ze.a.osVersion, ' ')
                    .concat(Ze.a.browser, '/')
                    .concat(Ze.a.version.full);
                  p.a.warn(
                    'VOD SDK MAIN '
                      .concat(2401251130, ' | ')
                      .concat('2024-01-25 11:30:52', ' | ')
                      .concat('RELEASE', ' | ')
                      .concat(a, ' | ')
                      .concat(this.uid, ' | ')
                      .concat(this.guid),
                  ),
                    (this.config = I.a),
                    I.a.setMute(this.isMute),
                    (localStorage.appid = 67 === Number(this.appId) ? this.appId : ''),
                    U.a.initUUId(),
                    this.uid && (U.a.uid = this.uid),
                    this.appId && (U.a.appid = this.appId),
                    this.guid && (U.a.sGuid = this.guid),
                    (this.videoElmIncome = !!t.videoElement),
                    (this.mediaMuffedData = []),
                    (this.playerMgr = new Ha(this, t)),
                    (this.started = !1),
                    1 == localStorage._showVodSdk && (window.sdkPlayer = this),
                    (this.webcodecsErrCount = 0),
                    (this.turnMseType = 0);
                }
                return (
                  Object(r.a)(e, null, [
                    {
                      key: 'isSupported',
                      value: function () {
                        return gi.a.isMseSupportedH264();
                      },
                    },
                  ]),
                  Object(r.a)(e, [
                    {
                      key: '_setLogLevel',
                      value: function (e) {
                        p.a.setLevel(e);
                      },
                    },
                    {
                      key: 'start',
                      value: function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        this.started && this.stop(),
                          (e.guid = this.guid),
                          0 == this.gameid ||
                            e.hasOwnProperty('gameId') ||
                            (e.gameId = this.gameid),
                          (this.started = !0),
                          e.hasOwnProperty('curBitrate') || (e.curBitrate = e.coderate),
                          this.playerMgr.start(e);
                      },
                    },
                    {
                      key: 'setExtendConfig',
                      value: function (e) {
                        var t = {};
                        e.p2pConfig && (Object.assign(t, e.p2pConfig), delete e.p2pConfig),
                          e.sdk &&
                            (e.sdk.p2pConfig &&
                              (Object.assign(t, e.sdk.p2pConfig), delete e.sdk.p2pConfig),
                            Object.assign(t, e.sdk),
                            delete e.sdk),
                          Object.assign(t, e),
                          this.config.init(t);
                      },
                    },
                    {
                      key: 'stop',
                      value: function () {
                        this.started && this.reset();
                      },
                    },
                    {
                      key: 'reset',
                      value: function () {
                        (this.started = !1),
                          this.videoElmIncome || (this.videoElm = null),
                          this.playerMgr && this.playerMgr.stop();
                      },
                    },
                    {
                      key: 'destroy',
                      value: function () {
                        this.reset(), this.playerMgr.removeEventListener(), (this.playerMgr = null);
                      },
                    },
                    {
                      key: 'getVideoElement',
                      value: function () {
                        return this.playerMgr.getVideoElement();
                      },
                    },
                    {
                      key: 'setVolume',
                      value: function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                        this.playerMgr && this.playerMgr.setVolume(e);
                      },
                    },
                    {
                      key: 'getVolume',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getVolume();
                      },
                    },
                    {
                      key: 'setMuted',
                      value: function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        this.playerMgr && this.playerMgr.setMuted(e);
                      },
                    },
                    {
                      key: 'getMuted',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getMuted();
                      },
                    },
                    {
                      key: 'showControls',
                      value: function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
                        this.playerMgr && this.playerMgr.showControls(e);
                      },
                    },
                    {
                      key: 'getCurrentTime',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getCurrentTime();
                      },
                    },
                    {
                      key: 'getDuration',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getDurationTime();
                      },
                    },
                    {
                      key: 'seek',
                      value: function (e) {
                        this.playerMgr.streamType === Ha.StreamType.HLS && this.playerMgr.ended
                          ? p.a.log('HYVodPlayer.seek end!')
                          : this.playerMgr && this.playerMgr.seekTime(e);
                      },
                    },
                    {
                      key: 'getBuffered',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getBuffered();
                      },
                    },
                    {
                      key: 'fullScreen',
                      value: function () {
                        (this.videoElm = this.getVideoElement()),
                          this.videoElm &&
                            (this.videoElm.requestFullscreen
                              ? this.videoElm.requestFullscreen()
                              : this.videoElm.mozRequestFullScreen
                              ? this.videoElm.mozRequestFullScreen()
                              : this.videoElm.webkitRequestFullScreen &&
                                this.videoElm.webkitRequestFullScreen());
                      },
                    },
                    {
                      key: 'exitFullscreen',
                      value: function () {
                        this.videoElm.exitFullscreen
                          ? this.videoElm.exitFullscreen()
                          : this.videoElm.mozCancelFullScreen
                          ? this.videoElm.mozCancelFullScreen()
                          : this.videoElm.webkitCancelFullScreen &&
                            this.videoElm.webkitCancelFullScreen();
                      },
                    },
                    {
                      key: 'play',
                      value: function () {
                        return this.playerMgr && this.playerMgr.play();
                      },
                    },
                    {
                      key: 'pause',
                      value: function () {
                        this.playerMgr && this.playerMgr.pause();
                      },
                    },
                    {
                      key: 'getPaused',
                      value: function () {
                        return this.playerMgr && this.playerMgr.paused;
                      },
                    },
                    {
                      key: 'getEnded',
                      value: function () {
                        return this.playerMgr && this.playerMgr.ended;
                      },
                    },
                    {
                      key: 'getReadyState',
                      value: function () {
                        return this.playerMgr && this.playerMgr.readyState;
                      },
                    },
                    {
                      key: 'setPlaybackRate',
                      value: function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1;
                        this.playerMgr && this.playerMgr.setPlaybackRate(e);
                      },
                    },
                    {
                      key: 'getPlaybackRate',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getPlaybackRate();
                      },
                    },
                    {
                      key: 'getVideoWidth',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getVideoWidth();
                      },
                    },
                    {
                      key: 'getVideoHeight',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getVideoHeight();
                      },
                    },
                    {
                      key: 'setLoop',
                      value: function (e) {
                        this.playerMgr && this.playerMgr.setLoop(e);
                      },
                    },
                    {
                      key: 'getLoop',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getLoop();
                      },
                    },
                    {
                      key: 'setCodeRate',
                      value: function (e) {
                        this.playerMgr && this.playerMgr.setCodeRate(e);
                      },
                    },
                    {
                      key: 'getCodeRate',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getCodeRate();
                      },
                    },
                    {
                      key: 'getLog',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getLog();
                      },
                    },
                    {
                      key: 'getNewLog',
                      value: function () {
                        return this.playerMgr && this.playerMgr.getNewLog();
                      },
                    },
                    {
                      key: 'pushMuffedData',
                      value: function (e) {
                        (e = e || {}).begin && e.end
                          ? this.playerMgr.pushMuffedData(e)
                          : p.a.warn(
                              'muffed data error, beginDts='
                                .concat(e.begin, ', endDts=')
                                .concat(e.end),
                            );
                      },
                    },
                    {
                      key: 'setTafHandler',
                      value: function (e) {
                        this.playerMgr.setTafHandler(e);
                      },
                    },
                    {
                      key: 'containerResize',
                      value: function () {
                        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                        this.playerMgr &&
                          this.playerMgr.containerResize &&
                          this.playerMgr.containerResize(e);
                      },
                    },
                    {
                      key: 'getVideoExtractData',
                      value: function () {
                        return this.playerMgr.getVideoExtractData();
                      },
                    },
                    {
                      key: 'getEnhanceStats',
                      value: function () {
                        return (
                          this.playerMgr &&
                          this.playerMgr.getEnhanceStats &&
                          this.playerMgr.getEnhanceStats()
                        );
                      },
                    },
                    {
                      key: 'videoEnhance',
                      get: function () {
                        return this.playerMgr.videoEnhance;
                      },
                    },
                  ]),
                  e
                );
              })();
              (Wa.HLS = Ha.HLS),
                (Wa.MP4 = Ha.MP4),
                (Wa.VR = Ha.VR),
                (Wa.StreamType = Ha.StreamType),
                (Wa.Event = {
                  DATA_METRIC2: l.DATA_METRIC2,
                  VIDEO_PLAY: l.VIDEO_PLAY,
                  VIDEO_NATIVE_PLAY: l.VIDEO_NATIVE_PLAY,
                  PLAY_CARTON: l.PLAY_CARTON,
                  VIDEO_PLAYING: l.VIDEO_PLAYING,
                  VIDEO_SEEK: l.VIDEO_SEEK,
                  VIDEO_PAUSE: l.VIDEO_PAUSE,
                  BROWSER_PAUSE: l.BROWSER_PAUSE,
                  VIDEO_CANPLAY: Ha.Event.VIDEO_CANPLAY,
                  VIDEO_TIMEUPDATE: Ha.Event.VIDEO_TIMEUPDATE,
                  VIDEO_PROGRESS: Ha.Event.VIDEO_PROGRESS,
                  VIDEO_ERROR: Ha.Event.VIDEO_ERROR,
                  VIDEO_ENDED: Ha.Event.VIDEO_ENDED,
                  VIDEO_STOP: l.VIDEO_STOP,
                  VIDEO_LOAD_START: Ha.Event.VIDEO_LOAD_START,
                }),
                (window.HYVodPlayer = Wa);
              var Ga = (t.default = Wa);
            },
            function (e, t, i) {
              'use strict';
              i.r(t);
              var s = i(2),
                r = i(3),
                a = i(9),
                n = i(8),
                o = i(14),
                h = i(13),
                u = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.data = new Uint8Array(t)),
                      (this.idx = 0),
                      (this.size = t);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getData',
                        value: function () {
                          if (this.idx != this.size)
                            throw 'Mismatch between size reserved and sized used';
                          return this.data.slice(0, this.idx);
                        },
                      },
                      {
                        key: 'writeUint8',
                        value: function (e) {
                          this.data.set([e], this.idx), this.idx++;
                        },
                      },
                      {
                        key: 'writeUint16',
                        value: function (e) {
                          var t = new Uint16Array(1);
                          t[0] = e;
                          var i = new Uint8Array(t.buffer);
                          this.data.set([i[1], i[0]], this.idx), (this.idx += 2);
                        },
                      },
                      {
                        key: 'writeUint8Array',
                        value: function (e) {
                          this.data.set(e, this.idx), (this.idx += e.length);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                d = i(55),
                c = i(53),
                l = i(30),
                p = i(56);
              function f(e) {
                return Object(d.a)(e) || Object(c.a)(e) || Object(l.a)(e) || Object(p.a)();
              }
              var m = (function () {
                function e(t, i, r) {
                  Object(s.a)(this, e),
                    (this.timeStamp = i),
                    (this.frame = r),
                    (this.type = t),
                    (this.isEmptyAudioFrame = !1);
                }
                return (
                  Object(r.a)(e, [
                    {
                      key: 'setIsEmptyAudioFrame',
                      value: function (e) {
                        this.isEmptyAudioFrame = e;
                      },
                    },
                  ]),
                  e
                );
              })();
              (m.VIDEO = 0), (m.AUIDO = 1);
              var _ = m,
                v = i(6),
                y = function e(t, i, r) {
                  var a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
                    n = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
                  Object(s.a)(this, e),
                    (this.data = r),
                    (this.timeStamp = i),
                    (this.type = t),
                    (this.startDecodeTime = 0),
                    (this.decodedTime = 0),
                    (this.discardAllow = a),
                    (this.isKeyFrame = n);
                };
              (y.VIDEO = 0), (y.AUIDO = 1);
              var S = y,
                g = i(16),
                T = i(26),
                E = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.samples = []),
                      (this.decodedFrames = []),
                      (this.decoder = null),
                      (this.decodingTimeStamp = 0),
                      (this.decodingType = 0),
                      (this.decodeState = e.DECODE_STATE_PENDDING),
                      (this.decodeNums = 0),
                      (this.toDecodeNums = 0),
                      (this.lastToDecodeNums = 0),
                      (this.lastDecodedNums = 0),
                      (this.player = t),
                      (this.decodeDatas = []),
                      (this.decodIngAudioFrameTimeStamps = []),
                      (this.decodIngAudioFrameIsEmptyTypes = []),
                      (this.count = 0),
                      (this.closed = !1),
                      (this.toDecodeFrameLocalTimeMap = new Map()),
                      (this.frameDecodeDelays = []),
                      (this.smoothFrameDecodeDelay = 0),
                      (this.decodedFrameStamp = 0),
                      (this.printTodecodeCnt = 0),
                      (this.printDecodedCnt = 0),
                      (this.lastToDecodePts = 0),
                      (this.lastDecodedPts = 0),
                      (this.lastTodecodeDts = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'close',
                        value: function () {
                          (this.closed = !0),
                            (this.decodeDatas.length = 0),
                            (this.decodeNums = 0),
                            (this.toDecodeNums = 0),
                            (this.lastToDecodeNums = 0),
                            (this.lastDecodedNums = 0),
                            'closed' != this.decoder.state &&
                              (this.decoder.reset(), this.decoder.close()),
                            (this.decoder = null),
                            (this.player = null),
                            (this.decodedFrameStamp = 0);
                        },
                      },
                      {
                        key: 'appendSamples',
                        value: function (t, i) {
                          for (; t.length > 0; ) this.samples.push(t.shift());
                          this.decodeState == e.DECODE_STATE_PENDDING && this.decodeChunk(i);
                        },
                      },
                      {
                        key: 'getUnDecodeBuffer',
                        value: function () {
                          return this.lastToDecodePts > 0 && this.lastDecodedPts > 0
                            ? this.lastToDecodePts - this.lastDecodedPts
                            : 0;
                        },
                      },
                      {
                        key: 'decodeFrame',
                        value: function (e) {
                          this.toDecodeNums++,
                            (this.lastToDecodePts = e.timeStamp + (e.compositionTime || 0)),
                            e.type == S.AUIDO
                              ? this.player.storeWorkerShared(
                                  g.StoreWorkerType.AUDIO_TODECODE_NUMS,
                                  this.toDecodeNums,
                                )
                              : e.type == S.VIDEO &&
                                this.player.storeWorkerShared(
                                  g.StoreWorkerType.VIDEO_TODECODE_NUMS,
                                  this.toDecodeNums,
                                ),
                            this.toDecodeFrameLocalTimeMap.set(e.timeStamp, v.default.getNow()),
                            T.a.printTodecodeVideo &&
                              e.type === S.VIDEO &&
                              v.default.log(
                                'WebCodecsDecoder.decodeFrame isKey='
                                  .concat(e.isKeyFrame, ' dts=')
                                  .concat(e.timeStamp, ' cts=')
                                  .concat(e.compositionTime, ' pts=')
                                  .concat(e.timeStamp + e.compositionTime, ' gap=')
                                  .concat(e.timeStamp - this.lastTodecodeDts, ' lastDecodedPts=')
                                  .concat(this.lastDecodedPts, '  samples=')
                                  .concat(
                                    this.player.decodeJitter.videoSamples.length,
                                    ' decodedNum=',
                                  )
                                  .concat(this.player.videoRender.framelist.length),
                              ),
                            T.a.printToDecodeAudio &&
                              e.type === S.AUIDO &&
                              v.default.log(
                                'WebCodecsDecoder.decodeFrame dts='
                                  .concat(e.timeStamp, ' gap=')
                                  .concat(e.timeStamp - this.lastTodecodeDts, ' lastDecodedPts=')
                                  .concat(this.lastDecodedPts, ' samples=')
                                  .concat(
                                    this.player.decodeJitter.audioSamples.length,
                                    ' decodedNum=',
                                  )
                                  .concat(this.player.audioRender.framelist.length),
                              ),
                            (this.lastTodecodeDts = e.timeStamp);
                          try {
                            this.decoder.decode(e.data);
                          } catch (t) {
                            console.error(
                              t,
                              e,
                              e.naluType,
                              e.isKeyFrame,
                              e.timeStamp,
                              this.toDecodeNums,
                              'webCodecsDecoder',
                            ),
                              this.onDecoderError(t);
                          }
                        },
                      },
                      {
                        key: 'onFrame',
                        value: function (e) {
                          var t = v.default.getNow();
                          if (
                            ((this.decodedFrameStamp = t),
                            (this.lastDecodedPts = e.timestamp),
                            !this.closed)
                          ) {
                            this.decodeNums++;
                            var i = 0,
                              s = !1;
                            if (
                              (this.decodingType == S.AUIDO
                                ? ((i = this.decodIngAudioFrameTimeStamps.shift()),
                                  (s = this.decodIngAudioFrameIsEmptyTypes.shift()),
                                  this.player.storeWorkerShared(
                                    g.StoreWorkerType.AUDIO_DECODE_NUMS,
                                    this.decodeNums,
                                  ))
                                : this.decodingType == S.VIDEO &&
                                  (this.player.storeWorkerShared(
                                    g.StoreWorkerType.VIDEO_DECODE_NUMS,
                                    this.decodeNums,
                                  ),
                                  (i = e.timestamp)),
                              this.toDecodeFrameLocalTimeMap.has(i))
                            ) {
                              var r =
                                Math.floor(
                                  100 *
                                    (v.default.getNow() - this.toDecodeFrameLocalTimeMap.get(i)),
                                ) / 100;
                              T.a.printDecodedVideo &&
                                this.decodingType === S.VIDEO &&
                                v.default.log(
                                  'WebcodecsDecoder.decode timeStamp='
                                    .concat(i, ' delay=')
                                    .concat(r, ' samples=')
                                    .concat(
                                      this.player.decodeJitter.videoSamples.length,
                                      ' frames=',
                                    )
                                    .concat(this.player.videoRender.framelist.length),
                                ),
                                T.a.printDecodedAudio &&
                                  this.decodingType === S.AUIDO &&
                                  v.default.log(
                                    'WebcodecsDecoder.decode timeStamp='
                                      .concat(i, ' delay=')
                                      .concat(r, ' samples=')
                                      .concat(
                                        this.player.decodeJitter.audioSamples.length,
                                        ' frames=',
                                      )
                                      .concat(this.player.audioRender.framelist.length),
                                  ),
                                this.frameDecodeDelays.push(r),
                                this.toDecodeFrameLocalTimeMap.delete(i),
                                0 === this.smoothFrameDecodeDelay
                                  ? (this.smoothFrameDecodeDelay = r)
                                  : (this.smoothFrameDecodeDelay =
                                      (7 * this.smoothFrameDecodeDelay + r) / 8);
                            }
                            var a = i,
                              n = new _(this.decodingType, a, e);
                            n.setIsEmptyAudioFrame(s), this.player.onFrameDecoded(n);
                          }
                        },
                      },
                      {
                        key: 'getDecodeDelay',
                        value: function () {
                          var e = f(this.frameDecodeDelays).slice(0);
                          return (this.frameDecodeDelays.length = 0), e;
                        },
                      },
                      {
                        key: 'onDecoderError',
                        value: function (e) {
                          v.default.log(
                            'WebCodecsDecoder.onDecoderError, decodingType='.concat(
                              this.decodingType,
                            ),
                          );
                          var t = g.ToMainMessageType.VIDEODECODEERROR;
                          this.decodingType == S.VIDEO
                            ? (t = g.ToMainMessageType.VIDEODECODEERROR)
                            : this.decodingType == S.AUIDO &&
                              (t = g.ToMainMessageType.AUDIODECODEERROR),
                            this.player.handlerError(t, { msg: e && e.message });
                        },
                      },
                      {
                        key: 'getDecodeFps',
                        value: function () {
                          var e = {
                            toDecodeFps: this.toDecodeNums - this.lastToDecodeNums,
                            decodeFps: this.decodeNums - this.lastDecodedNums,
                          };
                          return (
                            (this.lastDecodedNums = this.decodeNums),
                            (this.lastToDecodeNums = this.toDecodeNums),
                            e
                          );
                        },
                      },
                      { key: 'resetDecoder', value: function () {} },
                      {
                        key: 'configured',
                        get: function () {
                          return this.decoder && 'configured' == this.decoder.state;
                        },
                      },
                    ]),
                    e
                  );
                })();
              (E.DECODE_STATE_PENDDING = 0),
                (E.DECODE_STATE_DECODEDING = 1),
                (E.DECODE_STATE_DECODEFINISH = 2),
                (E.DECODER_ERROR = 'video_deocde_error'),
                (E.DECODER_TYPE_VIDEO = 0),
                (E.DECODER_TYPE_AUDIO = 1);
              var C = E,
                D = (function (e) {
                  Object(o.a)(i, e);
                  var t = Object(h.a)(i);
                  function i(e) {
                    var r;
                    return (
                      Object(s.a)(this, i),
                      ((r = t.call(this, e)).decodingType = S.VIDEO),
                      (r.avcHeader = null),
                      (r.avcHeaderChanged = !1),
                      (r.lastToDecodeFrameTimeStamp = 0),
                      r.createDecoder(),
                      (r._isUseSoftAcceleration = !1),
                      (r.checkDecodedOutputFrameTypeTimes = 0),
                      (r.lastDecodedFrameTimeStamp = 0),
                      (r.outputFrameByPts = !1),
                      (r.outputFrameMode = -1),
                      (r.checkFrameCnt = 0),
                      (r.hasCts = !1),
                      (r.codecType = ''),
                      (r._lastDecodedTs = -1e4),
                      (r.decodedNum = 0),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'resetDecoder',
                        value: function () {
                          (this.decodeDatas.length = 0),
                            (this.decodeNums = 0),
                            (this.toDecodeNums = 0),
                            (this.lastToDecodeNums = 0),
                            (this.lastDecodedNums = 0),
                            'closed' != this.decoder.state &&
                              (this.decoder.reset(), this.decoder.close()),
                            (this.decoder = null),
                            (this.decodedFrameStamp = 0),
                            (this.lastToDecodePts = 0),
                            (this.lastDecodedPts = 0),
                            this.createDecoder(),
                            this.setAVCConfig();
                        },
                      },
                      {
                        key: 'createDecoder',
                        value: function () {
                          this.decoder = new VideoDecoder({
                            output: this.onFrame.bind(this),
                            error: this.onDecoderError.bind(this),
                          });
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          Object(a.a)(Object(n.a)(i.prototype), 'close', this).call(this),
                            (this.codecType = '');
                        },
                      },
                      {
                        key: 'decodeFrame',
                        value: function (e) {
                          e.isKeyFrame &&
                            'av01' != this.codecType &&
                            !this.player.isVodAv1 &&
                            this.updateAVCConfig(e.sps, e.pps, e.vps, e.codec, e.width, e.height),
                            (this.lastToDecodeFrameTimeStamp = e.timeStamp),
                            e.compositionTime > 0 && (this.hasCts = !0),
                            Object(a.a)(Object(n.a)(i.prototype), 'decodeFrame', this).call(
                              this,
                              e,
                            );
                        },
                      },
                      {
                        key: 'onFrame',
                        value: function (e) {
                          var t = v.default.getNow();
                          (this.decodedNum += 1),
                            -1e4 != this._lastDecodedTs &&
                              t - this._lastDecodedTs >= 200 &&
                              v.default.log(
                                'WebCodecsVideoDecoder.onFrame ts delta='
                                  .concat(t - this._lastDecodedTs, ', num=')
                                  .concat(this.decodedNum),
                              ),
                            (this._lastDecodedTs = t),
                            this.checkOutputMode(e.timestamp),
                            this.checkFrameOutputByPts(e.timestamp),
                            (this.lastDecodedFrameTimeStamp = e.timestamp),
                            Object(a.a)(Object(n.a)(i.prototype), 'onFrame', this).call(this, e);
                        },
                      },
                      {
                        key: 'checkFrameOutputByPts',
                        value: function (e) {
                          !this.outputFrameByPts &&
                            this.checkDecodedOutputFrameTypeTimes < 100 &&
                            e < this.lastDecodedFrameTimeStamp &&
                            (this.checkDecodedOutputFrameTypeTimes++,
                            (this.outputFrameByPts = !0),
                            this.player.setVideoOutputByPts(this.outputFrameByPts));
                        },
                      },
                      {
                        key: 'checkOutputMode',
                        value: function (e) {
                          -1 === this.outputFrameMode &&
                            this.checkFrameCnt < 100 &&
                            (this.checkFrameCnt++,
                            e < this.lastDecodedFrameTimeStamp
                              ? (this.outputFrameMode = 2)
                              : 100 === this.checkFrameCnt &&
                                -1 === this.outputFrameMode &&
                                (this.hasCts
                                  ? (this.outputFrameMode = 1)
                                  : (this.outputFrameMode = 2)));
                        },
                      },
                      {
                        key: 'isOutputFrameByDts',
                        value: function () {
                          return 1 === this.outputFrameMode;
                        },
                      },
                      {
                        key: 'updateAVCConfig',
                        value: function (e, t, i, s, r, a) {
                          (this.avcHeaderChanged = this.checkAVCConfigChanged(t, e, i)),
                            (this.avcHeader = {
                              sps: e,
                              pps: t,
                              vps: i,
                              codec: s,
                              width: r,
                              height: a,
                            }),
                            this.avcHeaderChanged &&
                              (v.default.log(
                                'WebCodecsDecoder.updateVideoConfig codec='
                                  .concat(s, ' width=')
                                  .concat(r, ' height=')
                                  .concat(a),
                              ),
                              this.setAVCConfig());
                        },
                      },
                      {
                        key: 'checkAVCConfigChanged',
                        value: function (e, t, i) {
                          if (!this.avcHeader) return !0;
                          if (this.avcHeader && -1 !== this.avcHeader.codec.indexOf('hvc')) {
                            if (
                              this.avcHeader.pps[0].nalu.toLocaleString() ==
                                e[0].nalu.toLocaleString() &&
                              this.avcHeader.sps[0].nalu.toLocaleString() ==
                                t[0].nalu.toLocaleString() &&
                              this.avcHeader.vps[0].nalu.toLocaleString() ==
                                i[0].nalu.toLocaleString()
                            )
                              return !1;
                          } else if (
                            this.avcHeader &&
                            -1 !== this.avcHeader.codec.indexOf('avc') &&
                            this.avcHeader.pps[0].nalu.toLocaleString() ==
                              e[0].nalu.toLocaleString() &&
                            this.avcHeader.sps[0].nalu.toLocaleString() ==
                              t[0].nalu.toLocaleString()
                          )
                            return !1;
                          return !0;
                        },
                      },
                      {
                        key: 'setAVCConfig',
                        value: function () {
                          v.default.log('WebCodecsDecoder.setAVCConfig'),
                            this.setDecoderConfig(),
                            (this.avcHeaderChanged = !1);
                        },
                      },
                      {
                        key: 'setDecoderConfig',
                        value: function () {
                          var e = this.getExtradata();
                          if (e) {
                            var t = {
                              codec: this.avcHeader.codec,
                              codedWidth: this.avcHeader.width,
                              codedHeight: this.avcHeader.height,
                              description: e,
                              optimizeForLatency: !1,
                            };
                            this._isUseSoftAcceleration &&
                              (t.hardwareAcceleration = 'prefer-software'),
                              (this.videoConfig = t),
                              v.default.log(
                                'WebCodecsDecoder.setDecoderConfig',
                                t.hardwareAcceleration,
                                this._isUseSoftAcceleration,
                              ),
                              this.decoder.configure(t);
                          } else
                            v.default.log('WebCodecsDecoder.setDecoderConfig extradata is null!');
                        },
                      },
                      {
                        key: 'initAv1Seg',
                        value: function (e) {
                          (this.codecType = 'av01'), this.setAv1DecoderConfig(e);
                        },
                      },
                      {
                        key: 'setAv1DecoderConfig',
                        value: function (e) {
                          var t = {
                            codec: e.codec,
                            codedWidth: e.width,
                            codedHeight: e.height,
                            description: e.configOBUs,
                          };
                          this._isUseSoftAcceleration &&
                            (t.hardwareAcceleration = 'prefer-software'),
                            (this.videoConfig = t),
                            v.default.log(
                              'WebCodecsDecoder.setAv1DecoderConfig,codec='.concat(e.codec),
                            ),
                            this.decoder.configure(t),
                            (this.isConfig = !0);
                        },
                      },
                      {
                        key: 'seek',
                        value: function () {
                          this.decoder.reset(), this.decoder.configure(this.videoConfig);
                        },
                      },
                      {
                        key: 'getExtradata',
                        value: function () {
                          return -1 !== this.avcHeader.codec.indexOf('hvc')
                            ? ((this.codecType = '265'), this.getExtradata265())
                            : -1 !== this.avcHeader.codec.indexOf('avc')
                            ? this.getExtradata264()
                            : null;
                        },
                      },
                      {
                        key: 'getExtradata265',
                        value: function () {
                          var e = this._getNumOfArrays(this.avcHeader.vps, 32),
                            t = this._getNumOfArrays(this.avcHeader.sps, 33),
                            i = this._getNumOfArrays(this.avcHeader.pps, 34),
                            s = this._getSPSOri(t),
                            r = [
                              1,
                              s[8],
                              s[9],
                              s[10],
                              s[11],
                              s[12],
                              s[13],
                              s[14],
                              s[15],
                              s[16],
                              s[17],
                              s[18],
                              s[19],
                              240,
                              0,
                              252,
                              253,
                              248,
                              248,
                              0,
                              0,
                              15,
                            ];
                          return (
                            r.push(3), (r = r.concat(e).concat(t).concat(i)), new Uint8Array(r)
                          );
                        },
                      },
                      {
                        key: '_getNumOfArrays',
                        value: function (e, t) {
                          var i = [];
                          i.push(128 | t), i.push((65280 & e.length) >> 8), i.push(255 & e.length);
                          for (var s = 0; s < e.length; s++) {
                            var r = e[s].nalu;
                            i.push((65280 & r.length) >> 8),
                              i.push(255 & r.length),
                              (i = i.concat(Array.prototype.slice.call(r)));
                          }
                          return i;
                        },
                      },
                      {
                        key: '_getSPSOri',
                        value: function (e) {
                          for (var t = [], i = 0, s = 0; s < e.length; ) {
                            var r = e[s];
                            2 !== i || 3 !== r
                              ? (0 === r ? i++ : (i = 0), t.push(r), ++s)
                              : (++s, (i = 0));
                          }
                          return t;
                        },
                      },
                      {
                        key: 'getExtradata264',
                        value: function () {
                          var e,
                            t = 7;
                          for (e = 0; e < this.avcHeader.sps.length; e++)
                            t += 2 + this.avcHeader.sps[e].length;
                          for (e = 0; e < this.avcHeader.pps.length; e++)
                            t += 2 + this.avcHeader.pps[e].length;
                          var i = new u(t),
                            s = this.avcHeader.sps[0].nalu[1],
                            r = this.avcHeader.sps[0].nalu[2],
                            a = this.avcHeader.sps[0].nalu[3];
                          for (
                            i.writeUint8(1),
                              i.writeUint8(s),
                              i.writeUint8(r),
                              i.writeUint8(a),
                              i.writeUint8(255),
                              i.writeUint8(this.avcHeader.sps.length + 224),
                              e = 0;
                            e < this.avcHeader.sps.length;
                            e++
                          )
                            i.writeUint16(this.avcHeader.sps[e].length),
                              i.writeUint8Array(this.avcHeader.sps[e].nalu);
                          for (
                            i.writeUint8(this.avcHeader.pps.length), e = 0;
                            e < this.avcHeader.pps.length;
                            e++
                          )
                            i.writeUint16(this.avcHeader.pps[e].length),
                              i.writeUint8Array(this.avcHeader.pps[e].nalu);
                          return i.getData();
                        },
                      },
                      {
                        key: 'setUseSoftAcceleration',
                        value: function () {
                          this._isUseSoftAcceleration = !0;
                        },
                      },
                      {
                        key: 'getDecodingBuffer',
                        value: function () {
                          return this.lastToDecodeFrameTimeStamp - this.lastDecodedFrameTimeStamp;
                        },
                      },
                    ]),
                    i
                  );
                })(C),
                P = i(15),
                A = (function (e) {
                  Object(o.a)(i, e);
                  var t = Object(h.a)(i);
                  function i(e) {
                    var r;
                    return (
                      Object(s.a)(this, i),
                      ((r = t.call(this, e)).decodingType = S.AUIDO),
                      (r.aacConfig = null),
                      (r.aacConfigChanged = !1),
                      (r.aacConfigInited = !1),
                      (r.decoder = new AudioDecoder({
                        output: r.onFrame.bind(Object(P.a)(r)),
                        error: r.onDecoderError.bind(Object(P.a)(r)),
                      })),
                      (r._lastDecodedTs = -1e4),
                      (r.decodedNum = -1),
                      (r.aacTimeLen = 1024e3 / 44100),
                      r
                    );
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: 'updateAudioConfig',
                        value: function (e, t, i, s) {
                          (this.aacConfig &&
                            this.aacConfig.codec == e &&
                            this.aacConfig.sampleRate == t &&
                            this.aacConfig.numberOfChannels == i) ||
                            ((this.aacConfig = {
                              codec: e,
                              sampleRate: t,
                              numberOfChannels: i,
                              timestamp: s,
                            }),
                            (this.aacConfigChanged = !0)),
                            this.aacConfigInited ||
                              this.setAACConfig(
                                this.aacConfig.codec,
                                this.aacConfig.sampleRate,
                                this.aacConfig.numberOfChannels,
                              );
                        },
                      },
                      {
                        key: 'setAACConfig',
                        value: function (e, t, i) {
                          var s = { codec: e, sampleRate: t, numberOfChannels: i };
                          (this.aacTimeLen = 1024e3 / t),
                            (this.audioConfig = s),
                            v.default.log(
                              'WebCodecsAudioDecoder.setAACConfig,c='
                                .concat(e, ',sr=')
                                .concat(t, ',nc=')
                                .concat(i, ',aacT=')
                                .concat(this.aacTimeLen),
                            ),
                            this.decoder.configure(s),
                            (this.aacConfigInited = !0);
                        },
                      },
                      {
                        key: 'seek',
                        value: function () {
                          this.decoder.reset(), this.decoder.configure(this.audioConfig);
                        },
                      },
                      {
                        key: 'decodeFrame',
                        value: function (e) {
                          this.aacConfigChanged &&
                            this.aacConfig.timestamp <= e.timeStamp &&
                            (this.setAACConfig(
                              this.aacConfig.codec,
                              this.aacConfig.sampleRate,
                              this.aacConfig.numberOfChannels,
                            ),
                            (this.aacConfigChanged = !1)),
                            Object(a.a)(Object(n.a)(i.prototype), 'decodeFrame', this).call(
                              this,
                              e,
                            ),
                            this.decodIngAudioFrameTimeStamps.push(e.timeStamp),
                            this.decodIngAudioFrameIsEmptyTypes.push(e.isEmptyAudioFrame);
                        },
                      },
                      {
                        key: 'onFrame',
                        value: function (e) {
                          this.decodedNum += 1;
                          var t = v.default.getNow();
                          -1e4 != this._lastDecodedTs &&
                            t - this._lastDecodedTs >= 200 &&
                            v.default.log(
                              'WebCodecsVideoDecoder.onFrame ts delta='
                                .concat(t - this._lastDecodedTs, ', num=')
                                .concat(this.decodedNum),
                            ),
                            Object(a.a)(Object(n.a)(i.prototype), 'onFrame', this).call(this, e);
                        },
                      },
                      {
                        key: 'getAacTimeLen',
                        value: function () {
                          return this.aacTimeLen;
                        },
                      },
                    ]),
                    i
                  );
                })(C),
                I = i(38),
                k = i.n(I);
              function R(e, t, i, s, r, a, n) {
                try {
                  var o = e[a](n),
                    h = o.value;
                } catch (e) {
                  return void i(e);
                }
                o.done ? t(h) : Promise.resolve(h).then(s, r);
              }
              function O(e) {
                return function () {
                  var t = this,
                    i = arguments;
                  return new Promise(function (s, r) {
                    var a = e.apply(t, i);
                    function n(e) {
                      R(a, s, r, n, o, 'next', e);
                    }
                    function o(e) {
                      R(a, s, r, n, o, 'throw', e);
                    }
                    n(void 0);
                  });
                };
              }
              var b = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._name = t),
                      (this._startTs = 0),
                      (this._startDts = 0),
                      (this._lastDts = 0),
                      (this._jumpTime = 0),
                      (this._lastDts = 0),
                      (this._lastTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setLast',
                        value: function (e, t) {
                          (this._lastDts = e), (this._lastTs = t);
                        },
                      },
                      {
                        key: 'getDtsSlowTime',
                        value: function (e, t) {
                          if (this._lastDts > 0) {
                            var i = e - this._lastDts;
                            return t - this._lastTs - i;
                          }
                          return 0;
                        },
                      },
                      {
                        key: 'setJumpTime',
                        value: function (e) {
                          var t =
                            !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
                          (this._jumpTime += e),
                            t &&
                              v.default.log(
                                'Timeline.setJumpTime name='
                                  .concat(this._name, ' jumpTime=')
                                  .concat(e, ' totalJumpTime=')
                                  .concat(this._jumpTime),
                              );
                        },
                      },
                      {
                        key: 'reset',
                        value: function () {
                          (this._startTs = 0), (this._startDts = 0), (this._lastDts = 0);
                        },
                      },
                      {
                        key: 'start',
                        value: function (e, t) {
                          var i =
                            !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2];
                          0 === this._startTs &&
                            (i &&
                              v.default.log(
                                'Timeline.start name='.concat(this._name, ' dts=').concat(t),
                              ),
                            (this._startTs = e),
                            (this._startDts = t));
                        },
                      },
                      {
                        key: 'getTsTime',
                        value: function (e) {
                          return Math.floor(e - this._startTs + this._jumpTime);
                        },
                      },
                      {
                        key: 'getDtsNow',
                        value: function (e) {
                          return this._startDts + this.getTsTime(e);
                        },
                      },
                      {
                        key: 'isDtsLess',
                        value: function (e, t) {
                          return t < this.getDtsNow(e);
                        },
                      },
                      {
                        key: 'lastDts',
                        get: function () {
                          return this._lastDts;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                w = i(7),
                L = eval,
                M = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.isUseEnhance = !1),
                      (this.aiEnhanceCfg = null),
                      (this.modelRes = null),
                      (this.isError = !1),
                      (this.isSuccess = !1),
                      (this.isInitSuccess = !1),
                      (this.segmentation = 0),
                      (this.width = 0),
                      (this.height = 0),
                      (this.enhanceNums = 0),
                      (this.lastEnhanceSecNums = 0),
                      (this.videoRender = t),
                      (this.enhanceState = 0),
                      (this.isUpdateVideoCfg = !1),
                      (this.costLargeCnt = 0),
                      (this.enhanceCostList = []),
                      (this.enhanceLess30Nums = 0),
                      (this.enhanceLess150Nums = 0),
                      (this.enhanceLess200Nums = 0),
                      (this.enhanceLarge200Nums = 0),
                      (this.enhanceTotal = 0),
                      (this.realFps = 24),
                      (this.enhanceSecTs = 0),
                      (this.modelHeight = 0),
                      (this.playbackRate = 1);
                  }
                  var t;
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'resetState',
                        value: function () {
                          (this.modelHeight = 0),
                            (this.enhanceState = 2),
                            this.m_cEnhance && this.m_cEnhance.release(),
                            (this.m_cEnhance = null);
                        },
                      },
                      { key: 'setRealFps', value: function (e) {} },
                      {
                        key: 'initConfig',
                        value: function (e) {
                          e && (this.aiEnhanceCfg = e);
                        },
                      },
                      {
                        key: 'loadHatSdk',
                        value: function () {
                          var e = this;
                          if (
                            this.aiEnhanceCfg &&
                            (5 == this.enhanceState || 0 == this.enhanceState)
                          ) {
                            var t = this.aiEnhanceCfg,
                              i = t.modelRes,
                              s = t.h5Root;
                            this.modelRes = i;
                            var r = s + 'hatsdk.min.js';
                            v.default.log('VideoEnhance.initConfig', JSON.stringify(t), r),
                              (this.enhanceState = 1),
                              fetch(r)
                                .then(function (e) {
                                  return e.text();
                                })
                                .then(function (t) {
                                  (e.enhanceState = 2),
                                    L(t),
                                    v.default.log('VideoEnhance.loadSuccess'),
                                    e.isUpdateVideoCfg && e.init(e.width, e.height),
                                    self.hatsdk.setLogLevel(self.hatsdk.LoggerLevel.info),
                                    self.hatsdk.setLogCallback(function (e) {
                                      v.default.log('hatSDKMsg', e);
                                    });
                                })
                                .catch(function (t) {
                                  console.error('VideoEnhance.loadError', t), e.handError(1);
                                });
                          }
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (e) {
                          v.default.log('VideoEnhance.setEnhance', JSON.stringify(e));
                          var t = e.data;
                          (this.isUseEnhance = !!t),
                            this.isUseEnhance ||
                              ((this.enhanceSecTs = 0), (this.isSuccess = !1), (this.isError = !1)),
                            this.isUseEnhance &&
                              (this.loadHatSdk(),
                              4 == this.enhanceState
                                ? this.handSuccess()
                                : 5 == this.enhanceState && this.handError(3));
                        },
                      },
                      {
                        key: 'setSegmenttion',
                        value: function (e) {
                          v.default.log('VideoEnhance.setSegmenttion', JSON.stringify(e));
                          var t = e.data;
                          this.segmentation = t;
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function (e) {
                          v.default.log('VideoEnhance.setPlaybackRate,rate='.concat(e)),
                            (this.playbackRate = e);
                        },
                      },
                      {
                        key: 'initCfg',
                        value: function (e, t) {
                          (this.width = e),
                            (this.height = t),
                            (this.isUpdateVideoCfg = !0),
                            2 == this.enhanceState && this.init(this.width, this.height);
                        },
                      },
                      {
                        key: 'init',
                        value: function (e, t) {
                          this.isUpdateVideoCfg && 2 == this.enhanceState && this.initMEnhance(t);
                        },
                      },
                      {
                        key: 'initMEnhance',
                        value: function (e) {
                          if (this.modelRes) {
                            var t = this.modelRes[e + 'p'];
                            t
                              ? ((this.modelHeight = e),
                                v.default.log(
                                  'VideoEnhance.initMEnhance,modelHeight='.concat(this.modelHeight),
                                ),
                                3 != this.enhanceState &&
                                  (self.hatsdk && self.hatsdk.CEnhance
                                    ? ((this.enhanceState = 3),
                                      (this.m_cEnhance = new hatsdk.CEnhance()),
                                      this.m_cEnhance.setEventCallback(
                                        this.enhanceEventHandle.bind(this),
                                      ),
                                      this.m_cEnhance.init({ modelUrl: t, isEncrypt: !0 }))
                                    : this.handError(3)))
                              : this.handError(2);
                          }
                        },
                      },
                      {
                        key: 'enhanceEventHandle',
                        value: function (e, t) {
                          var i = t.status;
                          switch (e) {
                            case 1:
                              v.default.log('VideoEnhance callback MODEL_INIT_STATUS: ' + i),
                                0 == i
                                  ? (this.enhanceState = 4)
                                  : 1 == i
                                  ? ((this.enhanceState = 5),
                                    this.isUseEnhance && this.handError(3))
                                  : 2 == i
                                  ? this.isUseEnhance && this.handError(13)
                                  : 3 == i && this.isUseEnhance && this.handError(14);
                              break;
                            case 2:
                              v.default.log('VideoEnhance callback WARMUP_STATUS: ' + t.status);
                              break;
                            case 3:
                              v.default.log('VideoEnhance callback UNKNOWN_ERROR: ' + t.status);
                              var s = 9;
                              0 == i
                                ? (s = 9)
                                : 1 == i
                                ? (s = 10)
                                : 2 == i
                                ? (s = 11)
                                : 3 == i && (s = 12),
                                this.isUseEnhance && this.handError(s);
                          }
                        },
                      },
                      {
                        key: 'enhance',
                        value:
                          ((t = O(
                            k.a.mark(function e(t) {
                              var i, s, r, a;
                              return k.a.wrap(
                                function (e) {
                                  for (;;)
                                    switch ((e.prev = e.next)) {
                                      case 0:
                                        if (
                                          (this.enhanceTotal++,
                                          this.videoRender.setEnhanceTotal(this.enhanceTotal),
                                          !(this.playbackRate > 1))
                                        ) {
                                          e.next = 4;
                                          break;
                                        }
                                        return e.abrupt('return', t);
                                      case 4:
                                        if (this.m_cEnhance) {
                                          e.next = 6;
                                          break;
                                        }
                                        return e.abrupt('return', t);
                                      case 6:
                                        if (this.isUseEnhance && 4 === this.enhanceState) {
                                          e.next = 8;
                                          break;
                                        }
                                        return e.abrupt('return', t);
                                      case 8:
                                        if (
                                          !this.videoRender.isBrowserHidden ||
                                          !this.isUseEnhance
                                        ) {
                                          e.next = 14;
                                          break;
                                        }
                                        return (
                                          this.enhanceCostList.push(0),
                                          this.enhanceLess30Nums++,
                                          this.videoRender.setEnhanceLess30Nums(
                                            this.enhanceLess30Nums,
                                          ),
                                          this.enhanceFrame(),
                                          e.abrupt('return', t)
                                        );
                                      case 14:
                                        if (
                                          ((i = v.default.getNow()),
                                          (s = t.displayHeight),
                                          0 == this.modelHeight || s == this.modelHeight)
                                        ) {
                                          e.next = 21;
                                          break;
                                        }
                                        return (
                                          v.default.log(
                                            'VideoEnhance.displayHeightChange, displayHeight='
                                              .concat(codedHeight, ', modelHeight=')
                                              .concat(this.modelHeight),
                                          ),
                                          this.resetState(),
                                          this.initMEnhance(s),
                                          e.abrupt('return', t)
                                        );
                                      case 21:
                                        return (
                                          (e.next = 23),
                                          this.m_cEnhance.run({
                                            videoFrame: t,
                                            segMode: 2,
                                            segmentation: this.segmentation,
                                          })
                                        );
                                      case 23:
                                        if (
                                          ((r = e.sent),
                                          (a = v.default.getNow() - i) >= 50 && this.costLargeCnt++,
                                          this.costLargeCnt >= 3 && this.handError(5),
                                          0 != r.result)
                                        ) {
                                          e.next = 35;
                                          break;
                                        }
                                        return (
                                          this.enhanceCostList.push(a),
                                          a <= 30
                                            ? (this.enhanceLess30Nums++,
                                              this.videoRender.setEnhanceLess30Nums(
                                                this.enhanceLess30Nums,
                                              ))
                                            : a <= 150
                                            ? (this.enhanceLess150Nums++,
                                              this.videoRender.setEnhanceLess150Nums(
                                                this.enhanceLess150Nums,
                                              ))
                                            : a <= 200
                                            ? (this.enhanceLess200Nums++,
                                              this.videoRender.setEnhanceLess200Nums(
                                                this.enhanceLess200Nums,
                                              ))
                                            : (this.enhanceLarge200Nums++,
                                              this.videoRender.setEnhanceLarge200Nums(
                                                this.enhanceLarge200Nums,
                                              )),
                                          this.enhanceFrame(),
                                          t.close(),
                                          e.abrupt('return', r.videoFrame)
                                        );
                                      case 35:
                                        return this.handError(4), e.abrupt('return', t);
                                      case 37:
                                      case 'end':
                                        return e.stop();
                                    }
                                },
                                e,
                                this,
                              );
                            }),
                          )),
                          function (e) {
                            return t.apply(this, arguments);
                          }),
                      },
                      {
                        key: 'handError',
                        value: function (e) {
                          if (((this.isSuccess = !1), !this.isError)) {
                            var t = { type: e };
                            (this.isError = !0),
                              v.default.log('VideoEnhance enhance fail'),
                              v.default.postMessage(g.ToMainMessageType.VIDEO_ENHANCE_ERROR, t),
                              this.m_cEnhance &&
                                (this.m_cEnhance && this.m_cEnhance.release(),
                                (this.m_cEnhance = null));
                          }
                        },
                      },
                      {
                        key: 'enhanceFrame',
                        value: function () {
                          0 == this.enhanceSecTs && (this.enhanceSecTs = v.default.getNow()),
                            this.enhanceNums++,
                            this.videoRender.setEnhanceNums(this.enhanceNums),
                            this.handSuccess();
                        },
                      },
                      {
                        key: 'handSuccess',
                        value: function () {
                          this.isSuccess ||
                            ((this.isSuccess = !0),
                            v.default.log('VideoEnhance enhance success', this.isUseEnhance),
                            v.default.postMessage(g.ToMainMessageType.VIDEO_ENHANCE_SUCCESS));
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e) {
                          if (
                            !this.isError &&
                            this.videoRender &&
                            this.videoRender.player &&
                            this.isSuccess
                          ) {
                            var t = this.videoRender.player.pageFps;
                            if (0 == t) return;
                            t < 40 ? this.lowFpsCnt++ : t >= 55 && (this.lowFpsCnt = 0),
                              this.lowFpsCnt >= 5 && (this.handError(6), (this.lowFpsCnt = 0));
                          }
                        },
                      },
                      {
                        key: 'rafHandler',
                        value: function (e) {
                          this.isError;
                        },
                      },
                      {
                        key: 'handleEnhanceError',
                        value: function () {
                          this.handError(8);
                        },
                      },
                      {
                        key: 'getEnhanceCostList',
                        value: function () {
                          var e = f(this.enhanceCostList).slice(0);
                          return (this.enhanceCostList.length = 0), e;
                        },
                      },
                      {
                        key: 'getEnhanceSuccess',
                        value: function () {
                          return this.isSuccess;
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          (this.isError = !1),
                            (this.isSuccess = !1),
                            (this.enhanceNums = 0),
                            (this.isUpdateVideoCfg = !1),
                            (this.costLargeCnt = 0),
                            (this.enhanceCostList.length = 0),
                            (this.lowFpsCnt = 0),
                            (this.enhanceLess30Nums = 0),
                            (this.enhanceLess150Nums = 0),
                            (this.enhanceLess200Nums = 0),
                            (this.enhanceLarge200Nums = 0),
                            (this.enhanceTotal = 0),
                            this.m_cEnhance &&
                              (this.m_cEnhance.release(), (this.m_cEnhance = null));
                        },
                      },
                    ]),
                    e
                  );
                })(),
                V = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.player = t),
                      (this.videoGlWrap = null),
                      (this.framelist = []),
                      (this.currentDts = 0),
                      (this.lastCurrentAudioDts = 0),
                      (this.lastPic = null),
                      (this.lastRenderRafTime = 0),
                      (this.lastRafNow = 0),
                      (this.renderFps = 0),
                      (this.videoCurrentDts = 0),
                      (this.noVideoRender = !1),
                      (this.throwFps = 0),
                      (this.curBitrate = 0),
                      (this.ageneratorWriter = null),
                      (this.isTriggerPlay = !1),
                      (this.renderedFrameTs = 0),
                      (this.printCnt = 0),
                      (this.fastPlayEndDts = 0),
                      (this.fastPlay = !1),
                      (this.checkLatencyTs = 0),
                      (this.latencyRenderCnt = 0),
                      (this.lastRenderTs = 0),
                      (this.lastRenderPts = 0),
                      (this.renderSecFps = 0),
                      (this.videoRender5SecFpsList = []),
                      (this.timeline = new b('video_render')),
                      (this.isBrowserHidden = !1),
                      (this.isPaused = !1),
                      (this.videoEnhance = new M(this)),
                      (this.isSync = !0);
                  }
                  var t;
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setNotSync',
                        value: function () {
                          (this.isSync = !1),
                            this.lastPic &&
                              ((this.startRenderTs = v.default.getNow() - 30),
                              (this.firstTimeStamp = this.lastPic.timeStamp - 30));
                        },
                      },
                      {
                        key: 'start',
                        value: function (e, t, i, s) {
                          this.ageneratorWriter = i.getWriter();
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          var t = this;
                          (this.renderedFrameTs = 0),
                            this.framelist.map(function (e) {
                              t.closeVideoFrameInfo(e), t.setVieoCurrentDts(e.timeStamp);
                            }),
                            this.setVieoCurrentDts(e),
                            (this.framelist.length = 0),
                            (this.isSeek = !0);
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function (e) {
                          this.videoEnhance.setPlaybackRate(e);
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function () {
                          this.isSeek = !1;
                        },
                      },
                      {
                        key: 'updateAVCConfig',
                        value: function (e, t) {
                          this.videoEnhance.initCfg(e, t);
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (e) {
                          this.videoEnhance.setEnhance(e);
                        },
                      },
                      {
                        key: 'setSegmenttion',
                        value: function (e) {
                          this.videoEnhance.setSegmenttion(e);
                        },
                      },
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          this.videoEnhance.setRealFps(e);
                        },
                      },
                      {
                        key: 'renderVideo',
                        value:
                          ((t = O(
                            k.a.mark(function e(t, i) {
                              var s, r, a, n;
                              return k.a.wrap(
                                function (e) {
                                  for (;;)
                                    switch ((e.prev = e.next)) {
                                      case 0:
                                        if ((this.checkSkipFrame(i), 0 != this.framelist.length)) {
                                          e.next = 3;
                                          break;
                                        }
                                        return e.abrupt('return');
                                      case 3:
                                        if (
                                          ((s = this.framelist[0]),
                                          (r = this.getAudioDts(t)),
                                          !this.getIsRender(r, s))
                                        ) {
                                          e.next = 31;
                                          break;
                                        }
                                        if (
                                          ((this.lastPic = s),
                                          this.renderFps++,
                                          this.setVieoCurrentDts(s.timeStamp),
                                          (a = s.timeStamp - this.renderedFrameTs),
                                          0 != this.renderedFrameTs &&
                                            a > 500 &&
                                            v.default.log(
                                              'VideoRender.renderVideo dis large, dis='.concat(a),
                                            ),
                                          this.player.storeWorkerShared(
                                            g.StoreWorkerType.VIDEO_RENDER_NUMS,
                                            this.renderFps,
                                          ),
                                          (this.lastRenderRafTime = i),
                                          this.framelist.shift(),
                                          (n = s.frame),
                                          (this.renderedFrameTs = s.timeStamp),
                                          this.player.avRenderSync.setRenderVideoTs(i),
                                          this.timeline.setLast(s.timeStamp, i),
                                          this.noVideoRender)
                                        ) {
                                          e.next = 29;
                                          break;
                                        }
                                        return (
                                          T.a.printTorenderVideo &&
                                            v.default.log(
                                              'VideoRender.renderVideo timeStamp='
                                                .concat(s.timeStamp, ' ptsNow=')
                                                .concat(this.timeline.getDtsNow(i), ' frames=')
                                                .concat(this.framelist.length),
                                            ),
                                          (e.next = 23),
                                          this.videoEnhance.enhance(n)
                                        );
                                      case 23:
                                        (n = e.sent),
                                          this.latencyRenderCnt++,
                                          this.ageneratorWriter.write(n),
                                          v.default.postMessage(g.ToMainMessageType.WebGLPLAY),
                                          this.checkPause(),
                                          this.isTriggerPlay ||
                                            ((this.startRenderTs = i),
                                            (this.firstTimeStamp = s.timeStamp),
                                            (this.isTriggerPlay = !0));
                                      case 29:
                                        (this.renderedFrameTs = s.timeStamp), n.close();
                                      case 31:
                                      case 'end':
                                        return e.stop();
                                    }
                                },
                                e,
                                this,
                              );
                            }),
                          )),
                          function (e, i) {
                            return t.apply(this, arguments);
                          }),
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e) {
                          if (0 != this.renderSecFps) {
                            var t = this.renderFps - this.renderSecFps;
                            this.videoRender5SecFpsList.length >= 5 &&
                              this.videoRender5SecFpsList.shift(),
                              this.videoRender5SecFpsList.push(t);
                          }
                          (this.renderSecFps = this.renderFps), this.videoEnhance.onCheckTimer(e);
                        },
                      },
                      {
                        key: 'checkPause',
                        value: function () {
                          if (!this.player.userPaused) {
                            var e = this.getCurrentDts(),
                              t = v.default.getNow();
                            if (this.isBrowserHidden)
                              this.isPaused &&
                                (v.default.postMessage(g.ToMainMessageType.SET_FRMAE_RESUME),
                                (this.isPaused = !1));
                            else if (0 != this.lastRenderPts && 0 != this.lastRenderTs) {
                              var i = e - this.lastRenderPts,
                                s = t - this.lastRenderTs,
                                r = s - i,
                                a = this.videoRender5SecFpsList.length,
                                n = !1;
                              a >= 5 &&
                                (n =
                                  this.videoRender5SecFpsList.reduce(function (e, t) {
                                    return e + t;
                                  }, 0) /
                                    a <=
                                  10),
                                s - i > 200 || (i > 300 && s > 200)
                                  ? (v.default.log(
                                      'VideoRender.mobPaused tsDelta:'
                                        .concat(s, ' ptsDelta:')
                                        .concat(i, ' delta:')
                                        .concat(r),
                                    ),
                                    v.default.postMessage(g.ToMainMessageType.SET_FRAME_PAUSE),
                                    (this.isPaused = !0))
                                  : this.isPaused &&
                                    (v.default.postMessage(g.ToMainMessageType.SET_FRMAE_RESUME),
                                    (this.isPaused = !1)),
                                n && v.default.postMessage(g.ToMainMessageType.RENDER_FPS_PAUSE);
                            }
                            (this.lastRenderTs = t), (this.lastRenderPts = e);
                          }
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this.player.getBufferLen();
                        },
                      },
                      {
                        key: 'checkSkipFrame',
                        value: function (e) {
                          var t = this.player.latencyCfg;
                          if (t.latencyMode) {
                            var i = this.player.getBufferLen(),
                              s = this.framelist.length;
                            if (i >= t.latencyBuf && s > 0) {
                              if (0 === this.checkLatencyTs) this.checkLatencyTs = e;
                              else if (
                                e - this.checkLatencyTs > 2e3 &&
                                this.latencyRenderCnt % t.skipFrameGap == 0
                              ) {
                                var r = this.framelist[0];
                                this.timeline.isDtsLess(e, r.timeStamp) &&
                                  (T.a.printRenderSkipFrame &&
                                    v.default.log(
                                      'VideoRender.checkLatencySkip skipFrameGap='
                                        .concat(t.skipFrameGap, ' renderCnt=')
                                        .concat(this.latencyRenderCnt, ' frames=')
                                        .concat(s, ' skipDts=')
                                        .concat(r.timeStamp),
                                    ),
                                  this.framelist.shift(),
                                  this.timeline.setJumpTime(
                                    r.timeStamp - this.timeline.lastDts + 1,
                                    !1,
                                  ),
                                  r.frame.close());
                              }
                            } else this.checkLatencyTs = 0;
                          }
                        },
                      },
                      {
                        key: 'setVieoCurrentDts',
                        value: function (e) {
                          this.player.storeWorkerShared(g.StoreWorkerType.VIDEO_PTS, e),
                            (this.videoCurrentDts = e),
                            this.player.decodeJitter.onRenderVideo(e);
                        },
                      },
                      {
                        key: 'getAudioCurrentDts',
                        value: function () {
                          return self.mainSharedArrayBuffer
                            ? Atomics.load(self.mainSharedArrayBuffer, w.e.AUDIO_DTS)
                            : 0;
                        },
                      },
                      {
                        key: 'rafHandler',
                        value: function (e) {
                          var t = this.getAudioCurrentDts();
                          this.curBitrate >= 4e3 && this.throwFrame(t),
                            this.renderVideo(t, e),
                            (this.lastRafNow = e),
                            this.videoEnhance.rafHandler(e);
                        },
                      },
                      {
                        key: 'getRealFps',
                        value: function () {
                          return self.mainSharedArrayBuffer
                            ? Atomics.load(self.mainSharedArrayBuffer, w.a.VIDEO_REAL_FPS)
                            : 0;
                        },
                      },
                      {
                        key: 'getDecodedBuffer',
                        value: function () {
                          var e = this.getRenderBuffer();
                          return (
                            this.player.storeWorkerShared(
                              g.StoreWorkerType.VIDEO_NOT_RENDERD_BUFFER,
                              e,
                            ),
                            e
                          );
                        },
                      },
                      {
                        key: 'getRenderBuffer',
                        value: function () {
                          var e = 0;
                          return (
                            this.framelist.length > 0 &&
                              (e =
                                null == this.lastPic
                                  ? 0
                                  : this.framelist[this.framelist.length - 1].timeStamp -
                                    this.lastPic.timeStamp),
                            e
                          );
                        },
                      },
                      {
                        key: 'throwFrame',
                        value: function (e, t) {
                          var i = !1;
                          if (0 != this.framelist.length)
                            for (; !i && this.framelist.length >= 2; ) {
                              if (!(e - this.framelist[0].timeStamp >= 200)) {
                                i = !0;
                                break;
                              }
                              var s = this.framelist.shift();
                              this.throwFps++,
                                this.setVieoCurrentDts(s),
                                this.player.storeWorkerShared(
                                  g.StoreWorkerType.VIDEO_THROW_FRAME_FPS,
                                  this.throwFps,
                                ),
                                s.frame.close();
                            }
                        },
                      },
                      {
                        key: 'getAudioDts',
                        value: function (e) {
                          if (!this.isSync) return 0;
                          var t = v.default.getNow(),
                            i = 0;
                          return (
                            0 != this.lastRafNow && (i = t - this.lastRafNow),
                            0 == e
                              ? (this.currentDts = 0)
                              : e != this.lastCurrentAudioDts
                              ? (this.currentDts = e)
                              : (this.currentDts += i),
                            (this.lastCurrentAudioDts = e),
                            this.currentDts
                          );
                        },
                      },
                      {
                        key: 'setJump',
                        value: function (e) {
                          this.timeline.setJumpTime(e);
                        },
                      },
                      {
                        key: 'getIsRender',
                        value: function (e, t) {
                          var i = v.default.getNow(),
                            s = !1;
                          if (null == this.lastPic) (s = !0), this.timeline.start(i, t.timeStamp);
                          else if (this.player.latencyCfg.latencyMode)
                            this.timeline.isDtsLess(i, t.timeStamp) && (s = !0);
                          else if (null != this.lastPic && 0 == e) {
                            var r = this.lastPic.timeStamp,
                              a = t.timeStamp,
                              n = i - this.startRenderTs,
                              o = t.timeStamp - this.firstTimeStamp;
                            n >= o
                              ? ((s = !0),
                                n - o > 100 &&
                                  ((this.startRenderTs = i), (this.firstTimeStamp = t.timeStamp)))
                              : a - r > 100 &&
                                ((s = !0),
                                (this.startRenderTs = i),
                                (this.firstTimeStamp = t.timeStamp));
                          } else 0 != e && e >= t.timeStamp ? (s = !0) : 0 != e && t.timeStamp;
                          return s;
                        },
                      },
                      {
                        key: 'appendFrame',
                        value: function (e) {
                          return this.isSeek
                            ? (this.closeVideoFrameInfo(e),
                              this.setVieoCurrentDts(e.timeStamp),
                              void (this.lastPic = null))
                            : e.timeStamp < this.renderedFrameTs
                            ? (v.default.log(
                                'VideoRender.appendFrame, frame timeStamp too small and  drop frame,rendered frame ts=' +
                                  this.renderedFrameTs +
                                  ',now ts=' +
                                  e.timeStamp,
                              ),
                              void this.closeVideoFrameInfo(e))
                            : (this.framelist.push(e),
                              void this.framelist.sort(function (e, t) {
                                return e.timeStamp > t.timeStamp ? 1 : -1;
                              }));
                        },
                      },
                      {
                        key: 'updateCanvasRect',
                        value: function (e, t) {
                          this.videoGlWrap.updateCanvasRect(e, t);
                        },
                      },
                      {
                        key: 'updateRect',
                        value: function (e, t) {
                          this.videoGlWrap.updateRect(e, t);
                        },
                      },
                      {
                        key: 'getCurrentDts',
                        value: function () {
                          return this.videoCurrentDts;
                        },
                      },
                      {
                        key: 'setNoRender',
                        value: function () {
                          v.default.log('VideoRender.setNoRender'), (this.noVideoRender = !0);
                        },
                      },
                      {
                        key: 'updateCurBitrate',
                        value: function (e) {
                          this.curBitrate = e;
                        },
                      },
                      {
                        key: 'closeVideoFrameInfo',
                        value: function (e) {
                          e.frame.close(), (e = null);
                        },
                      },
                      {
                        key: 'setBrowserHidden',
                        value: function (e) {
                          this.isBrowserHidden = e;
                        },
                      },
                      {
                        key: 'initConfig',
                        value: function (e) {
                          this.videoEnhance.initConfig(e);
                        },
                      },
                      {
                        key: 'setEnhanceNums',
                        value: function (e) {
                          this.player.storeWorkerShared(g.StoreWorkerType.VIDEO_ENHANCE_NUMS, e);
                        },
                      },
                      {
                        key: 'setEnhanceLess30Nums',
                        value: function (e) {
                          this.player.storeWorkerShared(
                            g.StoreWorkerType.VIDEO_ENHANCE_LESS30_NUMS,
                            e,
                          );
                        },
                      },
                      {
                        key: 'setEnhanceLess150Nums',
                        value: function (e) {
                          this.player.storeWorkerShared(
                            g.StoreWorkerType.VIDEO_ENHANCE_LESS150_NUMS,
                            e,
                          );
                        },
                      },
                      {
                        key: 'setEnhanceLess200Nums',
                        value: function (e) {
                          this.player.storeWorkerShared(
                            g.StoreWorkerType.VIDEO_ENHANCE_LESS200_NUMS,
                            e,
                          );
                        },
                      },
                      {
                        key: 'setEnhanceLarge200Nums',
                        value: function (e) {
                          this.player.storeWorkerShared(
                            g.StoreWorkerType.VIDEO_ENHANCE_LARGE200_NUMS,
                            e,
                          );
                        },
                      },
                      {
                        key: 'setEnhanceTotal',
                        value: function (e) {
                          this.player.storeWorkerShared(g.StoreWorkerType.VIDEO_ENHANCE_TOTAL, e);
                        },
                      },
                      {
                        key: 'getEnhanceCostList',
                        value: function () {
                          return this.videoEnhance.getEnhanceCostList();
                        },
                      },
                      {
                        key: 'getEnhanceSuccess',
                        value: function () {
                          return this.videoEnhance.getEnhanceSuccess();
                        },
                      },
                      {
                        key: 'handleEnhanceError',
                        value: function () {
                          this.videoEnhance.handleEnhanceError();
                        },
                      },
                      {
                        key: 'getVideoRenderPts',
                        value: function () {
                          return this.renderedFrameTs;
                        },
                      },
                      {
                        key: 'setLastPic',
                        value: function (e) {
                          this.lastPic = e;
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          var e = this;
                          (this.currentDts = 0),
                            (this.lastCurrentAudioDts = 0),
                            this.framelist.map(function (t) {
                              e.closeVideoFrameInfo(t);
                            }),
                            (this.lastPic = null),
                            (this.lastRafNow = 0),
                            (this.renderFps = 0),
                            (this.throwFps = 0),
                            (this.videoCurrentDts = 0),
                            (this.noVideoRender = !1),
                            (this.curBitrate = 0),
                            (this.isTriggerPlay = !1),
                            (this.isBrowserHidden = !1),
                            (this.isPaused = !1),
                            this.videoEnhance.close();
                        },
                      },
                    ]),
                    e
                  );
                })(),
                N = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.player = t),
                      (this.audioDuration = 0),
                      (this.framelist = []),
                      (this.ageneratorWriter = null),
                      (this.frameDuration = 23),
                      (this.audioSampleRate = 44100),
                      (this.isTriggerPlay = !1),
                      (this.lastRenderStamp = 0),
                      (this.lastRenderNow = 0),
                      (this.audioCurrentDts = 0),
                      (this.renderNums = 0),
                      (this.lastFrame = null),
                      (this.firstFrameRenderWriting = !1),
                      (this.firstFinshed = !1),
                      (this.startRenderTs = 0),
                      (this.firstTimeStamp = 0),
                      (this.totalLocalTime = 0),
                      (this.decodeTotolTime = 0),
                      (this.decodeTimeStamp = 0),
                      (this.timeline = new b('audio_render'));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setJump',
                        value: function (e) {
                          this.timeline.setJumpTime(e);
                        },
                      },
                      {
                        key: 'start',
                        value: function (e) {
                          this.ageneratorWriter = e.getWriter();
                        },
                      },
                      {
                        key: 'updateAACSampleRate',
                        value: function (e) {
                          (this.audioSampleRate = e),
                            (this.frameDuration = Math.floor(1024e3 / e)),
                            v.default.log(
                              'AudioRender.updateAACSampleRate, frameDuration=',
                              this.frameDuration,
                            );
                        },
                      },
                      {
                        key: 'onQuickCheckTimer',
                        value: function (e) {
                          if (
                            this.player.latencyCfg.latencyMode &&
                            this.player.latencyCfg.latencyMode.latencyBuf > 0 &&
                            this.framelist.length > 0
                          ) {
                            var t = this.framelist[0];
                            this.timeline.start(e, t.timeStamp),
                              this.player.setRenderAudioTs(e, this.timeline),
                              T.a.printTorenderAudio &&
                                v.default.log(
                                  'AudioRender.toRender timeline dts='
                                    .concat(t.timeStamp, ' dtsNow=')
                                    .concat(this.timeline.getDtsNow(e)),
                                ),
                              this.timeline.isDtsLess(e, t.timeStamp) &&
                                (this.timeline.setLast(t.timeStamp, e),
                                this.framelist.shift(),
                                v.default.postMessage(g.ToMainMessageType.AUDIO_FRAME_DECODED, t));
                          }
                          if (this.ageneratorWriter && this.framelist.length > 0) {
                            var i = this.framelist[0],
                              s = i.frame;
                            this.getIsRender(i, e) &&
                              (this.render(s, e, i),
                              this.framelist.shift(),
                              this.renderNums++,
                              this.setAudioRenderNums(),
                              (this.lastRenderStamp = i.timeStamp),
                              (this.lastRenderNow = e),
                              (this.lastFrame = i),
                              this.setAudioCurrentDts(i.timeStamp));
                          }
                        },
                      },
                      {
                        key: 'getIsRender',
                        value: function (e) {
                          var t = v.default.getNow();
                          if (null == this.lastFrame) return !0;
                          var i = t - this.lastRenderNow,
                            s = e.timeStamp - this.lastFrame.timeStamp;
                          return (
                            t - this.startRenderTs >= e.timeStamp - this.firstTimeStamp ||
                            (i > 2 * this.frameDuration && s > 2 * this.frameDuration
                              ? ((this.startRenderTs = t), (this.firstTimeStamp = e.timeStamp), !0)
                              : void 0)
                          );
                        },
                      },
                      {
                        key: 'render',
                        value: function (e, t, i) {
                          var s = this;
                          return (
                            (this.audioDuration += e.duration / 1e3),
                            this.ageneratorWriter.ready
                              .then(function () {
                                return s.ageneratorWriter.write(e);
                              })
                              .then(function () {
                                e.close(),
                                  s.isTriggerPlay ||
                                    ((s.isTriggerPlay = !0),
                                    v.default.postMessage(g.ToMainMessageType.AUDIO_PLAY),
                                    (s.startRenderTs = t),
                                    (s.firstTimeStamp = i.timeStamp));
                              })
                              .catch(function (t) {
                                console.error(t),
                                  e.close(),
                                  v.default.postMessage(g.ToMainMessageType.AUDIORENDERERROR);
                              }),
                            !0
                          );
                        },
                      },
                      {
                        key: 'setAudioCurrentDts',
                        value: function (e) {
                          (this.audioCurrentDts = e),
                            this.player.storeWorkerShared(
                              g.StoreWorkerType.AUDIO_DTS,
                              this.audioCurrentDts,
                            );
                        },
                      },
                      {
                        key: 'getDecodedBuffer',
                        value: function () {
                          return 0 != this.decodeTimeStamp && 0 != this.audioCurrentDts
                            ? this.decodeTimeStamp - this.audioCurrentDts
                            : 0;
                        },
                      },
                      {
                        key: 'setAudioRenderNums',
                        value: function () {
                          this.player.storeWorkerShared(
                            g.StoreWorkerType.AUDIO_RENDER_NUMS,
                            this.renderNums,
                          );
                        },
                      },
                      {
                        key: 'getAudioCurrentDts',
                        value: function () {
                          var e = self.mainSharedArrayBuffer
                            ? Atomics.load(self.mainSharedArrayBuffer, g.StoreWorkerType.AUDIO_DTS)
                            : 0;
                          return (this.audioCurrentDts = e), this.audioCurrentDts;
                        },
                      },
                      {
                        key: 'setLastAudioData',
                        value: function (e) {
                          this.setAudioCurrentDts(e.timeStamp);
                        },
                      },
                      {
                        key: 'onFrameDecoded',
                        value: function (e) {
                          (this.decodeTimeStamp = e.timeStamp),
                            this.ageneratorWriter
                              ? this.appendFrame(e)
                              : this.sentAudioFrameData(e);
                        },
                      },
                      {
                        key: 'sentAudioFrameData',
                        value: function (e) {
                          if (-1 != e.frame.format.indexOf('32')) {
                            for (var t = e.frame.numberOfChannels, i = [], s = 0; s < t; s++) {
                              var r = e.frame.allocationSize({ planeIndex: s }),
                                a = new ArrayBuffer(r);
                              e.frame.copyTo(a, { planeIndex: s }), i.push(a);
                            }
                            var n = e.frame.allocationSize({ planeIndex: 0 }),
                              o = new ArrayBuffer(n);
                            e.frame.copyTo(o, { planeIndex: 0 });
                            var h = {
                              timeStamp: e.timeStamp,
                              frameBuffer: o,
                              frameBuffers: i,
                              isEmptyAudioFrame: e.isEmptyAudioFrame,
                              format: e.frame.format,
                            };
                            this.player.latencyCfg.latencyMode &&
                            this.player.latencyCfg.latencyMode.latencyBuf > 0
                              ? this.framelist.push(h)
                              : (T.a.printTorenderAudio &&
                                  v.default.log(
                                    'AudioRender.toRender rightnow dts='.concat(h.timeStamp),
                                  ),
                                v.default.postMessage(g.ToMainMessageType.AUDIO_FRAME_DECODED, h));
                          } else v.default.postMessage(g.ToMainMessageType.AUDIO_FORMAT_ERROR);
                        },
                      },
                      {
                        key: 'appendFrame',
                        value: function (e) {
                          this.framelist.push(e);
                        },
                      },
                      {
                        key: 'appendFrames',
                        value: function (e) {
                          for (; e.length > 0; ) this.framelist.push(e.shift());
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          (this.audioCurrentDts = 0),
                            (this.decodeTimeStamp = 0),
                            this.setAudioCurrentDts(e);
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          (this.framelist.length = 0),
                            (this.isTriggerPlay = !1),
                            (this.audioCurrentDts = 0),
                            (this.renderNums = 0),
                            (this.lastFrame = null),
                            (this.firstFrameRenderWriting = !1),
                            (this.firstFinshed = !1),
                            (this.startRenderTs = 0),
                            (this.firstTimeStamp = 0),
                            (this.decodeTimeStamp = 0);
                        },
                      },
                    ]),
                    e
                  );
                })(),
                F = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._decodeHelper = t),
                      (this._decodeJitter = t.getDecodeJitter()),
                      (this._type = ''),
                      this._initType(),
                      (this._timeline = new b(''.concat(this._type, '_decode'))),
                      (this._timelineSlow = new b(''.concat(this._type, '_decode_slow'))),
                      (this._state = B.FAST_DOING),
                      (this._fastBuf = 0),
                      (this._waitKeyFrameTs = 0),
                      (this._waitKeyFramePostTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      { key: '_initType', value: function () {} },
                      {
                        key: 'setFastEnding',
                        value: function () {
                          v.default.log('MediaDecodeHelper.setFastEnding type='.concat(this._type)),
                            (this._state = B.FAST_ENDING);
                        },
                      },
                      {
                        key: 'setNormal',
                        value: function () {
                          v.default.log('MediaDecodeHelper.setNormal type='.concat(this._type)),
                            this._timelineSlow.reset(),
                            (this._state = B.NORMAL);
                        },
                      },
                      {
                        key: 'setSlow',
                        value: function () {
                          v.default.log('MediaDecodeHelper.setSlow type='.concat(this._type)),
                            (this._state = B.SLOW);
                        },
                      },
                      {
                        key: 'setWaitKeyFrame',
                        value: function () {
                          v.default.log(
                            'MediaDecodeHelper.setWaitKeyFrame type='.concat(this._type),
                          ),
                            (this._state = B.WAIT_KEY_FRAME),
                            (this._waitKeyFrameTs = v.default.getNow());
                        },
                      },
                      {
                        key: 'isWaitForKeyFrame',
                        value: function () {
                          return this._state === B.WAIT_KEY_FRAME;
                        },
                      },
                      {
                        key: 'checkDecode',
                        value: function (e) {
                          var t = this._getSamples();
                          if (t.length > 0) {
                            var i = t[0];
                            this._timeline.start(e, i.timeStamp),
                              this._state === B.FAST_DOING
                                ? this._decodeInFastDoing(e, i)
                                : this._state === B.FAST_ENDING
                                ? this._decodeInFastEnding(e, i)
                                : this._state === B.NORMAL
                                ? this._decodeInNormal(e, i)
                                : this._state === B.SLOW
                                ? this._decodeInSlow(e, i)
                                : this._state === B.WAIT_KEY_FRAME &&
                                  this._decodeInWaitKeyFrame(e, i);
                          }
                        },
                      },
                      {
                        key: '_decodeInFastDoing',
                        value: function (e, t) {
                          this._todecode(e, t);
                        },
                      },
                      { key: '_decodeInFastEnding', value: function (e, t) {} },
                      {
                        key: '_getWillDecodeBuffer',
                        value: function () {
                          var e = this._getSamples(),
                            t = e.length,
                            i = 0,
                            s = 0;
                          return (
                            t > 0 && ((i = e[t - 1].timeStamp), (s = this._timeline.lastDts)), i - s
                          );
                        },
                      },
                      {
                        key: '_decodeInNormal',
                        value: function (e, t) {
                          if (0 === this.jitBuf) this._decode(e, t);
                          else {
                            var i = this._timeline.getDtsSlowTime(t.timeStamp, e);
                            i >= 500
                              ? (v.default.log(
                                  'MediaDecodeHelper._decodeInNormal type='
                                    .concat(this._type, ' sample slow dtsSlowTime=')
                                    .concat(i, ' dts=')
                                    .concat(t.timeStamp, ' samples=')
                                    .concat(this._getSamples().length),
                                ),
                                this.setSlow(),
                                this._timelineSlow.start(e, t.timeStamp),
                                this._todecodeSlow(e, t))
                              : 0 === this.jitBuf
                              ? this._decode(e, t)
                              : this._todecode(e, t);
                          }
                        },
                      },
                      {
                        key: '_decodeInSlow',
                        value: function (e, t) {
                          var i = this._getSamples(),
                            s = this._findNextSample(e, i);
                          if (-1 !== s) {
                            var r = i[s],
                              a = i[0],
                              n = i[i.length - 1];
                            r.timeStamp - a.timeStamp < 1e3 && this._decodeAllSlowSamples(e, i, s),
                              v.default.log(
                                'MedisDecodeHelper._decodeInSlow type='
                                  .concat(this._type, ' done cur=')
                                  .concat(r.timeStamp, ' first=')
                                  .concat(a.timeStamp, ' last=')
                                  .concat(n.timeStamp, ' lateBuf=')
                                  .concat(r.timeStamp - a.timeStamp, ' buffer=')
                                  .concat(n.timeStamp - r.timeStamp),
                              ),
                              this._setSamples(i.slice(s)),
                              this.setNormal();
                          } else this._todecodeSlow(e, t);
                        },
                      },
                      { key: '_decodeAllSlowSamples', value: function (e, t, i) {} },
                      {
                        key: '_findNextSample',
                        value: function (t, i) {
                          var s = i.length;
                          if (s > 0)
                            for (var r = 0; r < s; r++) {
                              var a = i[r];
                              if (
                                (this._type !== e.Types.VIDEO || a.isKeyFrame) &&
                                !this._timeline.isDtsLess(t, a.timeStamp)
                              )
                                return r;
                            }
                          return -1;
                        },
                      },
                      {
                        key: '_findLastSample',
                        value: function (t, i, s, r) {
                          var a = i.length;
                          if (a > 0)
                            for (var n = i[a - 1], o = a - 1; o >= 0; o--) {
                              var h = i[o];
                              if (this._type !== e.Types.VIDEO || h.isKeyFrame) {
                                var u = n.timeStamp - h.timeStamp;
                                if (s <= u && u <= r && !this._timeline.isDtsLess(t, h.timeStamp))
                                  return o;
                              }
                            }
                          return -1;
                        },
                      },
                      {
                        key: '_decodeInWaitKeyFrame',
                        value: function (e, t) {
                          (0 === this._waitKeyFramePostTs || e - this._waitKeyFramePostTs > 500) &&
                            ((this._waitKeyFramePostTs = e),
                            v.default.postMessage(
                              g.ToMainMessageType.WAIT_KEY_FRAME,
                              e - this._waitKeyFrameTs,
                            ));
                        },
                      },
                      {
                        key: '_todecode',
                        value: function (e, t) {
                          this._timeline.isDtsLess(e, t.timeStamp) && this._decode(e, t);
                        },
                      },
                      {
                        key: '_todecodeSlow',
                        value: function (e, t) {
                          this._timelineSlow.isDtsLess(e, t.timeStamp) && this._decode(e, t);
                        },
                      },
                      { key: '_decode', value: function (e, t) {} },
                      {
                        key: '_getSamples',
                        value: function () {
                          return [];
                        },
                      },
                      { key: '_setSamples', value: function (e) {} },
                      {
                        key: 'jitBuf',
                        get: function () {
                          return this._decodeJitter.player.latencyCfg.latencyBuf;
                        },
                      },
                      {
                        key: 'jitMin',
                        get: function () {
                          return this._decodeJitter.player.latencyCfg.latencyMin;
                        },
                      },
                      {
                        key: 'jitMax',
                        get: function () {
                          return this._decodeJitter.player.latencyCfg.latencyMax;
                        },
                      },
                      {
                        key: 'isNoGop',
                        get: function () {
                          return this._decodeJitter.player.latencyCfg.isNoGop;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                B = { FAST_DOING: 1, FAST_ENDING: 2, NORMAL: 3, SLOW: 4, WAIT_KEY_FRAME: 5 };
              F.Types = { VIDEO: 'video', AUDIO: 'audio' };
              var U = F,
                x = (function (e) {
                  Object(o.a)(i, e);
                  var t = Object(h.a)(i);
                  function i(e) {
                    return Object(s.a)(this, i), t.call(this, e);
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: '_initType',
                        value: function () {
                          this._type = U.Types.VIDEO;
                        },
                      },
                      {
                        key: '_getSamples',
                        value: function () {
                          return this._decodeJitter.videoSamples;
                        },
                      },
                      {
                        key: '_setSamples',
                        value: function (e) {
                          this._decodeJitter.videoSamples = e;
                        },
                      },
                      {
                        key: '_decodeInFastEnding',
                        value: function (e, t) {
                          var i = this._getWillDecodeBuffer();
                          i <= this.jitBuf
                            ? (this._todecode(e, t),
                              this.setNormal(),
                              v.default.log(
                                'MediaDecodeHelper._decodeInFastEnding type='
                                  .concat(this._type, ' fastEnding to normal buffer=')
                                  .concat(i),
                              ))
                            : this._lookupBuffer(e, t, i);
                        },
                      },
                      {
                        key: '_lookupBuffer',
                        value: function (e, t, i) {
                          var s = this._getSamples(),
                            r = this._findLastSample(e, s, this.jitMin, this.jitMax, !0);
                          if (-1 !== r) {
                            var a = s[r],
                              n = s[s.length - 1].timeStamp - a.timeStamp;
                            if (n === this.jitBuf) {
                              var o = s[0];
                              v.default.log(
                                'VideoDecodeHelper._lookupBuffer done firstDts='
                                  .concat(o.timeStamp, ' buffer=')
                                  .concat(n),
                              ),
                                this._setSamples(s.slice(r)),
                                this._updateJump(e, o.timeStamp, a.timeStamp, i),
                                this._decode(e, a);
                            } else this._fixToJitBuf(e, s, r, i);
                            this.setNormal();
                          } else this._todecode(e, t);
                        },
                      },
                      {
                        key: '_fixToJitBuf',
                        value: function (e, t, i, s) {
                          for (
                            var r = t.length,
                              a = t[0],
                              n = t[i],
                              o = t[r - 1],
                              h = o.timeStamp,
                              u = r - 1,
                              d = i;
                            d < r;
                            d++
                          ) {
                            var c = t[d];
                            if (0 === this.jitBuf) this._decodeJitter._decodeVideoSample(c, e);
                            else {
                              if (o.timeStamp - c.timeStamp <= this.jitBuf) {
                                (h = c.timeStamp), (u = d);
                                break;
                              }
                              this._decodeJitter._decodeVideoSample(c, e);
                            }
                          }
                          v.default.log(
                            'VideoDecoderHelper._fixToJitBuf fitBuf='.concat(h - n.timeStamp),
                          ),
                            this._setSamples(0 === this.jitBuf ? [] : t.slice(u)),
                            this._updateJump(e, a.timeStamp, h, s);
                        },
                      },
                      {
                        key: '_updateJump',
                        value: function (e, t, i, s) {
                          var r = i - t;
                          this._timeline.setJumpTime(r),
                            this._timeline.setLast(i, e),
                            this._decodeHelper.onVideoJump(e, { jumpTime: r }),
                            (this._fastBuf = this._getWillDecodeBuffer()),
                            v.default.log(
                              'VideoDecodeHelper._updateJump jumpTime='
                                .concat(r, ' jumpStartDts=')
                                .concat(t, ' endDts=')
                                .concat(i, ' before=')
                                .concat(s, ' after=')
                                .concat(this._fastBuf),
                            );
                        },
                      },
                      {
                        key: '_decodeAllSlowSamples',
                        value: function (e, t, i) {
                          for (var s = 0; s < i; s++) {
                            var r = t[s];
                            this._decodeJitter._decodeVideoSample(r, e);
                          }
                        },
                      },
                      {
                        key: '_decodeInWaitKeyFrame',
                        value: function (e, t) {
                          Object(a.a)(Object(n.a)(i.prototype), '_decodeInWaitKeyFrame', this).call(
                            this,
                            e,
                            t,
                          );
                          var s = this._getSamples();
                          if (t.isKeyFrame) this.setNormal();
                          else {
                            for (var r = s.length, o = -1, h = 0; h < r; h++) {
                              var u = s[h];
                              if (u.isKeyFrame) {
                                (t = u), (o = h);
                                break;
                              }
                            }
                            -1 !== o
                              ? ((s = s.slice(o)), this.setNormal())
                              : ((t = null), (s = [])),
                              this._setSamples(s);
                          }
                        },
                      },
                      {
                        key: '_decode',
                        value: function (e, t) {
                          this._timeline.setLast(t.timeStamp, e),
                            this._decodeJitter._decodeVideoSample(t, e),
                            this._decodeJitter.videoSamples.shift();
                        },
                      },
                    ]),
                    i
                  );
                })(U),
                H = (function (e) {
                  Object(o.a)(i, e);
                  var t = Object(h.a)(i);
                  function i(e) {
                    var r;
                    return Object(s.a)(this, i), ((r = t.call(this, e))._jumpEndDts = 0), r;
                  }
                  return (
                    Object(r.a)(i, [
                      {
                        key: '_initType',
                        value: function () {
                          this._type = U.Types.AUDIO;
                        },
                      },
                      {
                        key: '_getSamples',
                        value: function () {
                          return this._decodeJitter.audioSamples;
                        },
                      },
                      {
                        key: '_setSamples',
                        value: function (e) {
                          this._decodeJitter.audioSamples = e;
                        },
                      },
                      {
                        key: 'setJump',
                        value: function (e) {
                          this._timeline.setJumpTime(e),
                            (this._jumpEndDts = this._timeline.lastDts + e);
                        },
                      },
                      {
                        key: '_decodeInFastEnding',
                        value: function (e, t) {
                          if (this._jumpEndDts > 0) {
                            var i = this._getSamples(),
                              s = i.length;
                            if (s > 0) {
                              for (
                                var r = i[0], a = i[s - 1], n = -1, o = null, h = 0;
                                h < s;
                                h++
                              ) {
                                var u = i[h];
                                if (u.timeStamp >= this._jumpEndDts) {
                                  (n = h), (o = u);
                                  break;
                                }
                              }
                              -1 !== n &&
                                ((this._jumpEndDts = 0),
                                (i = i.slice(n)),
                                v.default.log(
                                  'AudioDecodeHelper._decodeInFastEnding done firstDts='
                                    .concat(r.timeStamp, ' endDts=')
                                    .concat(o.timeStamp, '  lastDts=')
                                    .concat(a.timeStamp, ' before=')
                                    .concat(a.timeStamp - r.timeStamp, ' after=')
                                    .concat(a.timeStamp - o.timeStamp, ' dropBuffer=')
                                    .concat(o.timeStamp - r.timeStamp),
                                ),
                                this._setSamples(i),
                                this.setNormal());
                            }
                          } else this._todecode(e, t);
                        },
                      },
                      {
                        key: '_decodeAllSlowSamples',
                        value: function (e, t, i) {
                          for (var s = 0; s < i; s++) {
                            var r = t[s];
                            this._decodeJitter._decodeAudioSample(r, e);
                          }
                        },
                      },
                      {
                        key: '_decode',
                        value: function (e, t) {
                          this._timeline.setLast(t.timeStamp, e),
                            this._decodeJitter._decodeAudioSample(t, e),
                            this._decodeJitter.audioSamples.shift();
                        },
                      },
                    ]),
                    i
                  );
                })(U),
                W = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._decodeJitter = t),
                      (this._lastTodecodeDts = 0),
                      (this._lastTodecodeTs = 0),
                      (this._waitKeyFrameTs = 0),
                      (this._waitKeyFramePostTs = 0);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'checkDecode',
                        value: function (e, t, i) {
                          var s = this._decodeJitter.videoSamples;
                          if (this._waitKeyFrameTs > 0) this._waitForKeyFrame(e, s);
                          else if (s.length > 0) {
                            var r = s[0];
                            (i < 2 ||
                              e - this._lastTodecodeTs >= r.timeStamp - this._lastTodecodeDts) &&
                              (s.shift(),
                              (this._lastTodecodeDts = r.timeStamp),
                              (this._lastTodecodeTs = e),
                              T.a.printVideoDecodeFast &&
                                v.default.log(
                                  'VideoDecodeFastHelper.checkDecode dts='
                                    .concat(r.timeStamp, ' samples=')
                                    .concat(s.length, ' videoDecodedFrames=')
                                    .concat(t, ' queueSize=')
                                    .concat(i),
                                ),
                              this._decodeJitter._decodeVideoSample(r, v.default.getNow()));
                          }
                        },
                      },
                      {
                        key: '_waitForKeyFrame',
                        value: function (e, t) {
                          if (
                            ((0 === this._waitKeyFramePostTs ||
                              e - this._waitKeyFramePostTs > 500) &&
                              ((this._waitKeyFramePostTs = e),
                              v.default.postMessage(
                                g.ToMainMessageType.WAIT_KEY_FRAME,
                                e - this._waitKeyFrameTs,
                              )),
                            t.length > 0)
                          ) {
                            for (var i = t.length, s = -1, r = 0; r < i; r++)
                              if (t[r].isKeyFrame) {
                                s = r;
                                break;
                              }
                            -1 !== s ? ((t = t.slice(s)), (this._waitKeyFrameTs = 0)) : (t = []),
                              (this._decodeJitter.videoSamples = t);
                          }
                        },
                      },
                      {
                        key: 'setWaitKeyFrame',
                        value: function () {
                          v.default.log('VideoDecodeFastHelper.setWaitKeyFrame'),
                            (this._waitKeyFrameTs = v.default.getNow());
                        },
                      },
                      {
                        key: 'isWaitForKeyFrame',
                        value: function () {
                          return this._waitKeyFrameTs > 0;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                G = (function () {
                  function e(t) {
                    Object(s.a)(this, e), (this._decodeJitter = t);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'checkDecode',
                        value: function (e) {
                          var t = this._decodeJitter.audioSamples;
                          if (t.length > 0) {
                            var i = t.shift();
                            this._decodeJitter._decodeAudioSample(i);
                          }
                        },
                      },
                    ]),
                    e
                  );
                })(),
                j = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this._decodeJitter = t),
                      (this._videoHelper = new x(this)),
                      (this._audioHelper = new H(this)),
                      (this._videoFastHelper = new W(t)),
                      (this._audioFastHelper = new G(t));
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'getDecodeJitter',
                        value: function () {
                          return this._decodeJitter;
                        },
                      },
                      {
                        key: 'decodeLowlatency',
                        value: function (e, t) {
                          var i = v.default.getNow();
                          this._decodeJitter.player.latencyCfg.fastMode
                            ? (this._videoFastHelper.checkDecode(i, e, t),
                              this._audioFastHelper.checkDecode(i))
                            : (this._videoHelper.checkDecode(i), this._audioHelper.checkDecode(i));
                        },
                      },
                      {
                        key: 'onVideoJump',
                        value: function (e, t) {
                          var i = t.jumpTime;
                          this._audioHelper.setJump(i),
                            this._decodeJitter.player.audioRender.setJump(i),
                            this._decodeJitter.player.videoRender.setJump(i);
                        },
                      },
                      {
                        key: 'fastAccessOver',
                        value: function () {
                          v.default.log('DecodeHelper.fastAccessOver'),
                            this._videoHelper.setFastEnding(),
                            this._audioHelper.setFastEnding();
                        },
                      },
                      {
                        key: 'setNormal',
                        value: function () {
                          this._videoHelper.setNormal(), this._audioHelper.setNormal();
                        },
                      },
                      {
                        key: 'updateSoftAcceleration',
                        value: function () {
                          this._videoHelper.setWaitKeyFrame(),
                            this._videoFastHelper.setWaitKeyFrame();
                        },
                      },
                      {
                        key: 'isWaitForKeyFrame',
                        value: function () {
                          return this._decodeJitter.player.latencyCfg.fastMode
                            ? this._videoFastHelper.isWaitForKeyFrame()
                            : this._videoHelper.isWaitForKeyFrame();
                        },
                      },
                    ]),
                    e
                  );
                })(),
                Y = (function () {
                  function e(t) {
                    Object(s.a)(this, e),
                      (this.player = t),
                      (this.videoSamples = []),
                      (this.audioSamples = []),
                      (this.audioFrameDecodedQueueLimit = 10),
                      (this.lastDecodedVideoTimeStamp = 0),
                      (this.lastToDecodAudioTimeStamp = 0),
                      (this.lastJumpBufferAudioTimeStamp = 0),
                      (this.videoFPS = 0),
                      (this.noReferFps = 0),
                      (this.discardVideoTSGap = 60),
                      (this.decodeAudioQueueTime = 1e3),
                      (this.decodeVideoQueueTime = 100),
                      (this.discardFrameDecodeDelay = 200),
                      (this.lastToDecodeTimeStamp = 0),
                      (this.minBuffer = 2e3),
                      (this.videoToDecodedLocalTime = 0),
                      (this.firstVideoTs = 0),
                      (this.videoToDecodedTime = 0),
                      (this.isFirstAudioStamp = 0),
                      (this.discardNums = 0),
                      (this.lastVideoDiscardNums = 0),
                      (this.JITTER_BUFLEN = 0),
                      (this.JITTER_BUFMIN = 0),
                      (this.JITTER_BUFMAX = 0),
                      (this.jumpBufferCfg = [120, 1e3, 1e4, 5e3, 120, 25]),
                      (this.JUMP_BUFFER = 0),
                      (this.startPlayTime = 0),
                      (this.isStartBuffer = !0),
                      (this.setVideoCurrentTime = 0),
                      (this.startMoreBufferTime = 0),
                      (this.bufferMoreContinueTime = 1e3),
                      (this.isPauseVideoDecode = !1),
                      (this.isPauseAudioDecode = !1),
                      (this.isEnableDiscard = !1),
                      (this.isSoftWebcodecs = !1),
                      (this.decode10SecCostList = []),
                      (this.videoMaxCts = 0),
                      (this.decodeVideoQueueTimeToCtsMaxGap = 100),
                      (this.decodeVideoQueueTimeMax = 350),
                      (this.outputFrameByPts = !1),
                      (this.decodeVideoQueueTimeDefault = 100),
                      (this.lastVideoStamp = 0),
                      (this.lastAudioStamp = 0),
                      (this.recvMap = new Map()),
                      (this.lastAppendVideoPts = 0),
                      (this.firstVideoDts = 0),
                      (this.fastDecodeTime = 500),
                      (this.realFps = 0),
                      (this.shieldAudioCfgBufLen = 3e3),
                      (this.isRemuxBuf = !1),
                      (this.isRevFastOver = !1),
                      (this._helper = new j(this)),
                      (this.isLive = !0),
                      (this.seekVideoDts = 0),
                      (this.isVideoSeek = !1),
                      (this.isAudioSeek = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'fastOver',
                        value: function () {
                          this.player.latencyCfg.latencyMode && this._helper.fastAccessOver();
                        },
                      },
                      {
                        key: 'onRevFastOver',
                        value: function () {
                          this.isRevFastOver = !0;
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e, t) {
                          v.default.log('DecodeJitter.seek', e),
                            (this.isVideoSeek = !0),
                            (this.isAudioSeek = !0),
                            (this.seekVideoDts = t),
                            (this.audioSamples.length = 0),
                            (this.videoSamples.length = 0),
                            (this.firstVideoDts = 0),
                            (this.isFirstAudioStamp = 0),
                            (this.lastAppendVideoPts = 0);
                        },
                      },
                      { key: 'onVideoSeek', value: function () {} },
                      { key: 'onAudioSeek', value: function () {} },
                      {
                        key: 'setJitter',
                        value: function (e) {
                          (this.JITTER_BUFLEN = e.bufLen),
                            (this.JITTER_BUFMIN = e.bufMin),
                            (this.JITTER_BUFMAX = e.bufMax),
                            (this.jumpBufferCfg = e.jumpBufferCfg),
                            (this.shieldAudioCfgBufLen = e.shieldAudioCfgBufLen),
                            (this.isRemuxBuf = e.isRemuxBuf),
                            v.default.log(
                              'WebCodecsWorkerPlayer.setJitter bufMin='
                                .concat(e.bufMin, ' bufLen=')
                                .concat(e.bufLen, ' bufMax=')
                                .concat(e.bufMax, ' jumpBufferCfg=')
                                .concat(this.jumpBufferCfg.toString(), ' shieldAudioCfgBufLen=')
                                .concat(this.shieldAudioCfgBufLen, ' isRemuxBuf=')
                                .concat(this.isRemuxBuf),
                            );
                        },
                      },
                      {
                        key: 'setLive',
                        value: function (e) {
                          this.isLive = e;
                        },
                      },
                      {
                        key: 'setVideoOutputByPts',
                        value: function (e) {
                          (this.outputFrameByPts = e),
                            this.outputFrameByPts &&
                              (this.decodeVideoQueueTime = this.decodeVideoQueueTimeDefault);
                        },
                      },
                      {
                        key: 'updateVideoCts',
                        value: function (e) {
                          !this.outputFrameByPts &&
                            e > this.videoMaxCts &&
                            ((this.videoMaxCts = e),
                            (this.decodeVideoQueueTime = Math.max(
                              this.decodeVideoQueueTime,
                              this.videoMaxCts + this.decodeVideoQueueTimeToCtsMaxGap,
                            )),
                            (this.decodeVideoQueueTime = Math.min(
                              this.decodeVideoQueueTime,
                              this.decodeVideoQueueTimeMax,
                            )),
                            v.default.log(
                              'WebCodecsWorkerPlayer.updateVideoCts videoMaxCts='
                                .concat(this.videoMaxCts, ' decodeAudioQueueTime=')
                                .concat(this.decodeVideoQueueTime, ' '),
                            ));
                        },
                      },
                      {
                        key: 'setStartPlayTime',
                        value: function (e) {
                          this.startPlayTime = e;
                        },
                      },
                      {
                        key: 'setPlayMinBuffer',
                        value: function (e) {
                          this.minBuffer = e;
                        },
                      },
                      {
                        key: 'decodeThread',
                        value: function (e, t, i, s) {
                          if (this.player.latencyCfg.latencyMode)
                            this._helper.decodeLowlatency(
                              this.player.videoRender.framelist.length,
                              s,
                            );
                          else {
                            var r = v.default.getNow(),
                              a = this.player.audioDecoderReadyed && !this.isAudioSeek,
                              n = this.audioSamples.length > 0,
                              o = !this.isPauseAudioDecode,
                              h = e < this.decodeAudioQueueTime,
                              u = Atomics.load(
                                self.mainSharedArrayBuffer,
                                g.StoreWorkerType.AUDIO_RENDER_NUMS,
                              ),
                              d = ~~(
                                Atomics.load(
                                  self.mainSharedArrayBuffer,
                                  g.StoreWorkerType.AUDIO_WORKER_UN_RENDER_AUDIO_FRAMES,
                                ) * this.player.getAacTimeLen()
                              );
                            u > 0 && !this.isLive && (h = h || d < this.decodeAudioQueueTime),
                              this.player.getAudioCurrentDts(),
                              a && h && n && o && this.decodeAudioSamples(),
                              this.isVideoSeek ||
                                (this.newDiscardVideoFrame(),
                                this.player.videoDecoderReadyed &&
                                  this.videoSamples.length > 0 &&
                                  !this.isPauseVideoDecode &&
                                  (this.decodeVideoSamples(t, r, i, s), this.jumpBuffers(r)));
                          }
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function () {
                          this.checkTurnToSoft();
                        },
                      },
                      {
                        key: 'checkTurnToSoft',
                        value: function () {
                          if (!this._helper.isWaitForKeyFrame()) {
                            var e = 5;
                            this.isLive || (e = 20);
                            var t = this.player.delayDecode;
                            if (
                              (this.decode10SecCostList.length >= e &&
                                this.decode10SecCostList.shift(),
                              this.decode10SecCostList.push(t),
                              !(this.decode10SecCostList.length < e))
                            ) {
                              var i = !0;
                              this.decode10SecCostList.forEach(function (e) {
                                e < 2e3 && (i = !1);
                              }),
                                this.player.getEnhanceSuccess()
                                  ? i &&
                                    (this.player.handleEnhanceError(),
                                    (this.decode10SecCostList.length = 0))
                                  : this.isSoftWebcodecs
                                  ? i && this.player.turnToMse()
                                  : i && this.player.turnToWebcodecsSoft();
                            }
                          }
                        },
                      },
                      {
                        key: 'decodeAudioSamples',
                        value: function () {
                          var e = this.audioSamples.shift();
                          e.timeStamp &&
                            ((this.lastToDecodAudioTimeStamp = e.timeStamp),
                            this._decodeAudioSample(e));
                        },
                      },
                      {
                        key: '_decodeAudioSample',
                        value: function (e) {
                          this.player.toDecodeFrame(e);
                        },
                      },
                      {
                        key: 'decodeVideoSamples',
                        value: function (e, t, i, s) {
                          var r = this.decodeVideoQueueTime,
                            a =
                              (this.lastToDecodAudioTimeStamp,
                              this.player.getVideoCurrentDts(),
                              this.player.getAudioCurrentDts(),
                              0);
                          if (
                            (this.realFps > 0 && (a = Math.floor(1e3 / this.realFps)),
                            e < r && (s < 2 || (0 != a && t - this.videoToDecodedTime) >= a))
                          ) {
                            var n = this.videoSamples.shift();
                            this._decodeVideoSample(n, t);
                          }
                        },
                      },
                      {
                        key: '_decodeVideoSample',
                        value: function (e, t) {
                          (this.lastToDecodeTimeStamp = e.timeStamp),
                            this.player.toDecodeFrame(e),
                            0 == this.videoToDecodedLocalTime && (this.videoToDecodedLocalTime = t),
                            (this.videoToDecodedTime = t);
                        },
                      },
                      {
                        key: 'updateAACSampleRate',
                        value: function (e) {
                          (this.audioSampleRate = e),
                            (this.frameDuration = 1024e3 / e),
                            (this.audioFrameDecodedQueueLimit = Math.ceil(
                              this.decodeAudioQueueTime / this.frameDuration,
                            ));
                        },
                      },
                      {
                        key: 'getBufferLength',
                        value: function (e) {
                          if (this.isRemuxBuf && self.mainSharedArrayBuffer)
                            return (
                              Atomics.load(
                                self.mainSharedArrayBuffer,
                                g.MainSharedBufferType.LAST_VIDEO_RCV_TS,
                              ) - e
                            );
                          if (this.isLive) {
                            if (this.lastAppendVideoPts > 0 && e > 0)
                              return this.lastAppendVideoPts - e;
                          } else if (this.lastAppendVideoPts > 0)
                            return this.lastAppendVideoPts - e;
                          return 0;
                        },
                      },
                      {
                        key: 'getWillDecodeVBuf',
                        value: function () {
                          return 0 == this.videoSamples.length
                            ? 0
                            : 1 == this.videoSamples.length
                            ? 33
                            : this.videoSamples.length > 1
                            ? this.videoSamples[this.videoSamples.length - 1].timeStamp -
                              this.videoSamples[0].timeStamp
                            : 0;
                        },
                      },
                      {
                        key: 'getAudioBufferLength',
                        value: function (e) {
                          return 0 == e
                            ? this.audioSamples.length > 1
                              ? this.videoSamples[this.audioSamples.length - 1].timeStamp -
                                this.audioSamples[0].timeStamp
                              : 0
                            : this.audioSamples.length > 0
                            ? this.audioSamples[this.audioSamples.length - 1].timeStamp - e
                            : 0;
                        },
                      },
                      {
                        key: 'jumpBuffers',
                        value: function (e) {
                          if (this.isLive) {
                            var t = this.player.getVideoCurrentDts(),
                              i = e,
                              s = this.getBufferLength(t),
                              r = s - this.JITTER_BUFLEN,
                              a = !1;
                            self.mainSharedArrayBuffer &&
                              (a =
                                1 ==
                                Atomics.load(
                                  self.mainSharedArrayBuffer,
                                  g.MainSharedBufferType.IS_SHIELD_AUDIO,
                                ));
                            var n = this.jumpBufferCfg[1],
                              o = this.jumpBufferCfg[3],
                              h = 1e3 * this.jumpBufferCfg[4],
                              u = 1e3 * this.jumpBufferCfg[5];
                            if (a) {
                              var d =
                                  (self.mainSharedArrayBuffer
                                    ? Atomics.load(
                                        self.mainSharedArrayBuffer,
                                        g.MainSharedBufferType.FRAME_BUFFER_LEN,
                                      )
                                    : 0) + s,
                                c = this.JITTER_BUFLEN + this.shieldAudioCfgBufLen,
                                l = this.JITTER_BUFLEN;
                              if ((r = d - c) <= 0) return;
                              if ((s - r < l && (r = s - l), r < 0)) return;
                            }
                            if (!(i - this.startPlayTime < o))
                              if (this.isStartBuffer)
                                r >= n &&
                                  (this.isRevFastOver || i - this.startPlayTime >= u) &&
                                  this.setJumpBuffer(r, s, 1, t, e, a) &&
                                  (this.isStartBuffer = !1);
                              else if (
                                i - this.setVideoCurrentTime >= h ||
                                0 == this.setVideoCurrentTime
                              ) {
                                if (
                                  i - this.startMoreBufferTime >= this.bufferMoreContinueTime &&
                                  0 != this.startMoreBufferTime &&
                                  this.setJumpBuffer(r, s, 2, t, e, a)
                                )
                                  return void (this.startMoreBufferTime = 0);
                                r >= n
                                  ? 0 == this.startMoreBufferTime && (this.startMoreBufferTime = i)
                                  : (this.startMoreBufferTime = 0);
                              }
                          }
                        },
                      },
                      {
                        key: 'setJumpBuffer',
                        value: function (e, t, i, s, r, a) {
                          var n = !1;
                          if (
                            (self.mainSharedArrayBuffer &&
                              (n =
                                1 ==
                                Atomics.load(
                                  self.mainSharedArrayBuffer,
                                  g.MainSharedBufferType.BROWSER_PAUSE_STATUS,
                                )),
                            0 == this.videoSamples.length)
                          )
                            return !1;
                          if (0 != this.audioSamples.length || n) {
                            var o = this.videoSamples.length,
                              h = this.player.getVideoDecodedBuffer(),
                              u = this.player.getVideoDecodingBuffer(),
                              d = 0,
                              c = 0,
                              l = 0,
                              p = 0,
                              f = this.videoSamples[0].timeStamp;
                            if (n) l = 0;
                            else if (
                              this.videoSamples[0].timeStamp < this.audioSamples[0].timeStamp
                            ) {
                              for (var m = 0; m < o; m++)
                                if (
                                  this.videoSamples[m].timeStamp >= this.audioSamples[0].timeStamp
                                ) {
                                  (f = this.videoSamples[m].timeStamp), (l = m);
                                  break;
                                }
                            } else l = 0;
                            for (var _ = f + e, y = 0, S = 0, T = o - 1; T >= 0; T--) {
                              var E = this.videoSamples[T].timeStamp;
                              if (this.videoSamples[T].isKeyFrame) {
                                var C = E - f;
                                if (C - e < 100 && C - e >= -100) {
                                  p = T;
                                  break;
                                }
                              }
                            }
                            if (-1 != l) {
                              if (
                                (l >= 0 &&
                                  p > l &&
                                  ((f = this.videoSamples[l].timeStamp),
                                  (_ = this.videoSamples[p].timeStamp)),
                                n)
                              ) {
                                if (p - l < 1) return !1;
                                this.videoSamples.splice(l, p - l);
                              } else {
                                for (var D = 0; D < this.audioSamples.length; D++)
                                  if (
                                    (-1 == d &&
                                      this.audioSamples[D].timeStamp >= f &&
                                      (0 == D || this.audioSamples[D - 1].timeStamp < f) &&
                                      (d = D),
                                    this.audioSamples[D].timeStamp > _)
                                  ) {
                                    c = D;
                                    break;
                                  }
                                if (
                                  (d >= 0 &&
                                    c > d &&
                                    ((y = this.audioSamples[d].timeStamp),
                                    (S = this.audioSamples[c].timeStamp)),
                                  c - d < 1 || p - l < 1)
                                )
                                  return !1;
                                this.videoSamples.splice(l, p - l),
                                  this.audioSamples.splice(d, c - d);
                              }
                              var P = 'WebCodecs.DecodeJitter.setJumpBuffer,type='
                                .concat(i, ',isRemuxBuf=')
                                .concat(this.isRemuxBuf, ',');
                              return (
                                (P += 'bufLen='
                                  .concat(t, ',decodedBuf=')
                                  .concat(h, ',decodingBuf=')
                                  .concat(u, ',')),
                                (P += 'aStartI='
                                  .concat(d, ',aEndI=')
                                  .concat(c, ',vStartI=')
                                  .concat(l, ',vEndI=')
                                  .concat(p, ',')),
                                (P += 'currentTime='
                                  .concat(s, ',aDrop=')
                                  .concat(c - d, ',vDrop=')
                                  .concat(p - l, ",'jumpABuflen'=")
                                  .concat(S - y, ",'jumpVbufLen'=")
                                  .concat(_ - f, ',isShieldAudio=')
                                  .concat(a)),
                                v.default.log(P),
                                (this.setVideoCurrentTime = v.default.getNow()),
                                !0
                              );
                            }
                          }
                        },
                      },
                      {
                        key: 'discardDeltaVideoFrame',
                        value: function () {
                          if (this.isEnableDiscard && 0 != this.videoSamples.length) {
                            var e = this.player.getVideoCurrentDts(),
                              t = this.player.getAudioCurrentDts(),
                              i = this.getBufferLength(e),
                              s = t - e;
                            if (i <= 1e3) return !1;
                            var r = this.videoSamples[0],
                              a =
                                this.player.toDecodeVideoFps >= 60
                                  ? 60
                                  : this.player.toDecodeVideoFps;
                            if (0 == a) return !1;
                            var n = ~~((1e3 / a) * 3);
                            n <= 50 && (n = 50);
                            var o = 0;
                            return !(
                              s <= 100 ||
                              (s <= 200
                                ? ((o = 1), (this.discardVideoTSGap = 6 * n))
                                : s <= 500
                                ? ((o = 2), (this.discardVideoTSGap = 4 * n))
                                : s <= 1e3
                                ? ((o = 3), (this.discardVideoTSGap = 2 * n))
                                : ((o = 4), (this.discardVideoTSGap = n)),
                              !r.discardAllow ||
                                r.timeStamp - this.lastDiscardFrameTimeStamp <
                                  this.discardVideoTSGap ||
                                ((this.lastDiscardFrameTimeStamp = r.timeStamp),
                                this.videoSamples.shift(),
                                this.discardNums++,
                                this.player.storeWorkerShared(
                                  g.StoreWorkerType.VIDEO_DECODE_DISCARD_NUMS,
                                  this.discardNums,
                                ),
                                v.default.log(
                                  'WebCodecs.DecodeJitter.discardDeltaVideoFrame discardNums='
                                    .concat(this.discardNums, ' dropLevel=')
                                    .concat(o, ', bufLen=')
                                    .concat(i, ', delta=')
                                    .concat(s),
                                ),
                                0))
                            );
                          }
                        },
                      },
                      {
                        key: 'newDiscardVideoFrame',
                        value: function () {
                          return (
                            !!this.isEnableDiscard &&
                            0 != this.videoSamples.length &&
                            void (
                              this.discardFrameByPending() ||
                              this.discardDeltaVideoFrame() ||
                              this.discardFrameByDecodeRate()
                            )
                          );
                        },
                      },
                      {
                        key: 'discardFrameByPending',
                        value: function () {
                          var e = v.default.getNow();
                          if (
                            0 != this.setVideoCurrentTime &&
                            e - this.setVideoCurrentTime < 1e3 * this.jumpBufferCfg[0]
                          )
                            return !1;
                          var t =
                              this.player.toDecodeVideoFps >= 60
                                ? 60
                                : this.player.toDecodeVideoFps,
                            i = this.player.delayDecode,
                            s = Number(t) * Number(i);
                          if (0 === t || 0 === i) return !1;
                          var r = this.videoSamples[0],
                            a = this.player.getVideoCurrentDts(),
                            n = this.getWillDecodeVBuf(a),
                            o = this.player.webcodecCfg,
                            h = 2e3,
                            u = 1e4,
                            d = 2e4;
                          o &&
                            o[5] &&
                            o[5].length >= 3 &&
                            ((h = o[5][0]), (u = o[5][1]), (d = o[5][2]));
                          var c = this.player.getAudioCurrentDts() - a;
                          if (!(c < 100)) {
                            var l = this.player.webcodecCfg[4] || 1500,
                              p = !1,
                              f = 0;
                            if (n >= h && n <= u)
                              n - h >= Math.random() * h &&
                                r.discardAllow &&
                                s >= l &&
                                ((p = !0), (f = 1));
                            else if (n > u && n <= d)
                              s >= l && r.discardAllow && ((p = !0), (f = 2));
                            else if (n > d && s >= l)
                              return (f = 3), this.discardPendingIframe(f, n, c), !0;
                            var m = ~~((1e3 / t) * 3);
                            return (
                              m <= 50 && (m = 50),
                              !(r.timeStamp - this.lastDiscardFrameTimeStamp < m) &&
                                (p &&
                                  ((this.lastDiscardFrameTimeStamp = r.timeStamp),
                                  this.videoSamples.shift(),
                                  this.discardNums++,
                                  this.player.storeWorkerShared(
                                    g.StoreWorkerType.VIDEO_DECODE_DISCARD_NUMS,
                                    this.discardNums,
                                  ),
                                  v.default.log(
                                    'WebCodecs.DecodeJitter.discardFrameByPending discardNums='
                                      .concat(this.discardNums, ' dropLevel=')
                                      .concat(f, ', bufLen=')
                                      .concat(n),
                                  )),
                                p)
                            );
                          }
                        },
                      },
                      {
                        key: 'discardFrameByDecodeRate',
                        value: function () {
                          var e = this.player.getVideoCurrentDts(),
                            t = !1;
                          if (!(this.player.getAudioCurrentDts() - e < 100)) {
                            var i = this.videoSamples[0];
                            if (!i.discardAllow) return t;
                            var s =
                                this.player.toDecodeVideoFps >= 60
                                  ? 60
                                  : this.player.toDecodeVideoFps,
                              r = this.player.delayDecode;
                            if (this.noReferFps <= 0 || s <= 0 || r <= 0) return t;
                            var a = Number(s) * Number(r),
                              n = Number(this.noReferFps) * Number(r),
                              o = (this.videoFPS - 1e3 / r) / this.noReferFps,
                              h = this.player.webcodecCfg[4] || 1500,
                              u = 0;
                            a >= h &&
                              (a < n + h
                                ? 100 * o >= 100 * Math.random() && ((t = !0), (u = 1))
                                : ((t = !0), (u = 2)));
                            var d = ~~((1e3 / s) * 3);
                            return (
                              d <= 50 && (d = 50),
                              !(i.timeStamp - this.lastDiscardFrameTimeStamp < d) &&
                                (t &&
                                  ((this.lastDiscardFrameTimeStamp = i.timeStamp),
                                  this.videoSamples.shift(),
                                  this.discardNums++,
                                  this.player.storeWorkerShared(
                                    g.StoreWorkerType.VIDEO_DECODE_DISCARD_NUMS,
                                    this.discardNums,
                                  ),
                                  v.default.log(
                                    'WebCodecs.DecodeJitter.discardFrameByDecodeRate discardNums='
                                      .concat(this.discardNums, ' dropLevel=')
                                      .concat(u),
                                  )),
                                t)
                            );
                          }
                        },
                      },
                      {
                        key: 'discardPendingIframe',
                        value: function (e, t, i) {
                          if (!(i < 3e3)) {
                            var s = this.videoSamples,
                              r = s.length;
                            if (!(r <= 0)) {
                              for (var a = -1, n = -1, o = 0; o < r; o++) {
                                var h = s[o];
                                if (-1 != a && h.isKeyFrame) {
                                  n = o - 1;
                                  break;
                                }
                                h.isKeyFrame && (a = o + 1);
                              }
                              a >= 0 &&
                                n >= 0 &&
                                a < n &&
                                (this.videoSamples.splice(a, n - a),
                                (this.discardNums += n - a),
                                v.default.log(
                                  'WebCodecs.DecodeJitter.discardFrameByPending discard='
                                    .concat(n - a, ',start=')
                                    .concat(a, ',end=')
                                    .concat(n, ',dropLevel=')
                                    .concat(e, ',bufLen=')
                                    .concat(t, '}'),
                                ));
                            }
                          }
                        },
                      },
                      {
                        key: 'addRecv',
                        value: function (e, t) {
                          var i = e + t;
                          i > this.lastAppendVideoPts && (this.lastAppendVideoPts = i);
                        },
                      },
                      { key: 'onRenderVideo', value: function (e) {} },
                      {
                        key: 'appendAudioFrame',
                        value: function (e) {
                          for (; e.length > 0; ) {
                            var t = e.shift();
                            0 == this.isFirstAudioStamp && (this.isFirstAudioStamp = t.timeStamp),
                              this.isAudioSeek &&
                                t.timeStamp >= this.seekVideoDts &&
                                (v.default.log('DecodeJitter.audioSeek recover!'),
                                (this.isAudioSeek = !1)),
                              this.checkAvDiff(this.lastVideoStamp, t.timeStamp),
                              T.a.printAppendAudio &&
                                v.default.log(
                                  'DecodeJitter.appendAudioFrame dts='
                                    .concat(t.timeStamp, ' samples=')
                                    .concat(this.audioSamples.length),
                                ),
                              this.audioSamples.push(t),
                              this.player.latencyCfg.latencyMode ||
                                (this.player.audioDecoderReadyed &&
                                  ((0 != this.isFirstAudioStamp &&
                                    t.timeStamp - this.isFirstAudioStamp <= 500) ||
                                    this.isAudioSeek) &&
                                  this.decodeAudioSamples());
                          }
                        },
                      },
                      {
                        key: 'appendVideoFrame',
                        value: function (e) {
                          for (; e.length > 0; ) {
                            var t = e.shift();
                            0 === this.firstVideoDts && (this.firstVideoDts = t.timeStamp),
                              this.checkAvDiff(t.timeStamp, this.lastAudioStamp),
                              this.addRecv(t.timeStamp, t.compositionTime),
                              T.a.printAppendVideo &&
                                v.default.log(
                                  'DecodeJitter.appendVideoFrame dts='
                                    .concat(t.timeStamp, ' samples=')
                                    .concat(this.videoSamples.length),
                                ),
                              this.isVideoSeek &&
                                t.timeStamp >= this.seekVideoDts &&
                                (v.default.log('DecodeJitter.videoSeek recover!'),
                                (this.isVideoSeek = !1)),
                              this.videoSamples.push(t),
                              this.player.latencyCfg.latencyMode ||
                                (this.player.isVodAv1
                                  ? this.player.videoDecoderReadyed &&
                                    (t.timeStamp - this.firstVideoDts < this.fastDecodeTime ||
                                      this.isVideoSeek) &&
                                    this.decodeVideoSamples(0, v.default.getNow(), 0, 0)
                                  : (t.timeStamp - this.firstVideoDts < this.fastDecodeTime ||
                                      this.isVideoSeek) &&
                                    this.decodeVideoSamples(0, v.default.getNow(), 0, 0));
                          }
                        },
                      },
                      {
                        key: 'checkAvDiff',
                        value: function (e, t) {
                          if (this.isLive && this.player.dtsJumpOpen) {
                            if (this.player.videoRender.isSync && e > 0 && t > 0) {
                              var i = e > t ? e - t : t - e;
                              i > this.player.dtsJumpThreshold &&
                                (this.player.videoRender.setNotSync(),
                                v.default.log('DecodeJitter.checkAvDiff diff='.concat(i)));
                            }
                            (this.lastVideoStamp = e), (this.lastAudioStamp = t);
                          }
                        },
                      },
                      {
                        key: 'updateVideoDecodedTimeStamp',
                        value: function (e) {
                          this.lastDecodedVideoTimeStamp = e;
                        },
                      },
                      {
                        key: 'updateVideoFPS',
                        value: function (e, t) {
                          (this.videoFPS = e), (this.noReferFps = t);
                        },
                      },
                      {
                        key: 'close',
                        value: function () {
                          (this.player = null),
                            (this.videoSamples.length = 0),
                            (this.videoSamples = null),
                            (this.audioSamples.length = 0),
                            (this.lastAppendVideoPts = 0),
                            this.recvMap.clear(),
                            (this.videoToDecodedTime = 0),
                            (this.isFirstAudioStamp = 0),
                            (this.firstVideoDts = 0),
                            (this.discardNums = 0),
                            (this.startPlayTime = 0),
                            (this.isStartBuffer = !0),
                            (this.setVideoCurrentTime = 0),
                            (this.startMoreBufferTime = 0),
                            (this.isPauseVideoDecode = !1),
                            (this.isPauseAudioDecode = !1),
                            (this.isEnableDiscard = !1),
                            (this.isSoftWebcodecs = !1),
                            (this.decode10SecCostList.length = 0),
                            (this.isRevFastOver = !1);
                        },
                      },
                      {
                        key: 'checkAVSync',
                        value: function () {
                          if (!(v.default.getNow() - this.startPlayTime < startCD)) {
                            var e = this.player.getVideoCurrentDts(),
                              t = this.player.getAudioCurrentDts();
                            if (!(e <= 0 || t <= 0)) {
                              var i = t - e;
                              (i >= 1e3 && i >= 0) ||
                                (i < 0 && i <= -1e3 && this.checkDiscardAudio(t, e));
                            }
                          }
                        },
                      },
                      {
                        key: 'checkDiscardAudio',
                        value: function (e, t) {
                          var i = this.getAudioBufferLength(e),
                            s = i - this.JITTER_BUFLEN;
                          if (
                            (v.default.log(
                              'DecodeJitter.checkDiscardAudio, bufLen='
                                .concat(i, ', audioCurrentDts=')
                                .concat(e, ', videoCurrentDts=')
                                .concat(t, ', minusBuffer=')
                                .concat(s, ', delta=')
                                .concat(e - t),
                            ),
                            !(i <= this.JITTER_BUFLEN || this.audioSamples.length <= 1))
                          ) {
                            var r = this.audioSamples[0].timeStamp;
                            if (!(0 == t || t < r)) {
                              for (var a = r, n = 0; this.audioSamples.length > 0; ) {
                                var o = this.audioSamples[0];
                                if (!(o.timeStamp < t && o.timeStamp - a <= s)) break;
                                this.audioSamples.shift(), (n = o.timeStamp);
                              }
                              n > 0 &&
                                v.default.log(
                                  'DecodeJitter.checkDiscardAudio, startTs='
                                    .concat(a, ', endTs=')
                                    .concat(n, ', discardBuffer=')
                                    .concat(n - a),
                                );
                            }
                          }
                        },
                      },
                      {
                        key: 'checkDiscardVideo',
                        value: function (e, t) {
                          var i = this.getBufferLength(t),
                            s = i - this.JITTER_BUFLEN;
                          if (
                            (v.default.log(
                              'DecodeJitter.checkDiscardVideo, bufLen='
                                .concat(i, ', audioCurrentDts=')
                                .concat(e, ', videoCurrentDts=')
                                .concat(t, ', minusBuffer=')
                                .concat(s, ', delta=')
                                .concat(e - t),
                            ),
                            !(i <= this.JITTER_BUFLEN))
                          ) {
                            var r = this.videoSamples.length;
                            if (!(r <= 1)) {
                              var a = this.videoSamples[0].timeStamp;
                              if (!(0 == e || e < a)) {
                                for (var n = a, o = 0, h = 0; h < r; h++) {
                                  var u = this.videoSamples[h];
                                  if (!(u.timeStamp < e && u.timeStamp - n <= s)) break;
                                  u.discardAllow &&
                                    (this.videoSamples.shift(), (o = u.timeStamp), r--);
                                }
                                o > 0 &&
                                  v.default.log(
                                    'DecodeJitter.checkDiscardVideo, startTs='
                                      .concat(n, ', endTs=')
                                      .concat(o, ', discardBuffer=')
                                      .concat(o - n),
                                  );
                              }
                            }
                          }
                        },
                      },
                      {
                        key: 'setPauseVideoDecode',
                        value: function (e) {
                          this.isPauseVideoDecode = e.isPause;
                        },
                      },
                      {
                        key: 'setPauseAudioDecode',
                        value: function (e) {
                          this.isPauseAudioDecode = e.isPause;
                        },
                      },
                      {
                        key: 'setEnableDiscard',
                        value: function (e) {
                          this.isEnableDiscard = e.enableDiscard;
                        },
                      },
                      {
                        key: 'setUseSoftAcceleration',
                        value: function () {
                          this.isSoftWebcodecs = !0;
                        },
                      },
                      {
                        key: 'updateSoftAcceleration',
                        value: function () {
                          (this.decode10SecCostList = []), this._helper.updateSoftAcceleration();
                        },
                      },
                      {
                        key: 'getVideoDiscardNums',
                        value: function () {
                          var e = this.discardNums - this.lastVideoDiscardNums;
                          return (this.lastVideoDiscardNums = this.discardNums), e;
                        },
                      },
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          this.realFps = e;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                q = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this._firstVideoRenderTs = 0),
                      (this._firstVideoPts = 0),
                      (this._firstAudioRenderTs = 0),
                      (this._firstAudioPts = 0),
                      (this._syncDone = !1),
                      (this._openSync = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'reset',
                        value: function () {
                          (this._firstVideoRenderTs = 0),
                            (this._firstVideoPts = 0),
                            (this._firstAudioRenderTs = 0),
                            (this._firstAudioPts = 0),
                            (this._syncDone = !1);
                        },
                      },
                      {
                        key: 'setRenderVideoTs',
                        value: function (e) {
                          0 === this._firstVideoRenderTs && (this._firstVideoRenderTs = e);
                        },
                      },
                      {
                        key: 'setRenderAudioTs',
                        value: function (e, t, i) {
                          if (
                            (0 === this._firstAudioRenderTs && (this._firstAudioRenderTs = e),
                            this._openSync &&
                              !this._syncDone &&
                              this._firstAudioRenderTs > 0 &&
                              this._firstVideoRenderTs > 0 &&
                              this._firstVideoPts > 0 &&
                              this._firstAudioPts > 0)
                          ) {
                            this._syncDone = !0;
                            var s = this._firstVideoPts - this._firstAudioPts;
                            v.default.log('AVRenderSync.syncAudio render done delta='.concat(s)),
                              t.setJumpTime(s),
                              i.setJumpTime(s);
                          }
                        },
                      },
                      {
                        key: 'setVideoPts',
                        value: function (e) {
                          0 === this._firstVideoPts && (this._firstVideoPts = e);
                        },
                      },
                      {
                        key: 'setAudioPts',
                        value: function (e) {
                          0 === this._firstAudioPts && (this._firstAudioPts = e);
                        },
                      },
                      {
                        key: 'openSync',
                        set: function (e) {
                          this._openSync = e;
                        },
                      },
                    ]),
                    e
                  );
                })(),
                K = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.openRenderSync = !1),
                      (this.latencyBuf = 2500),
                      (this.latencyMin = 3e3),
                      (this.latencyMax = 3500),
                      (this.skipFrameGap = 5),
                      (this.isNoGop = !1),
                      (this.fastMode = !1),
                      (this.latencyMode = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'initConfig',
                        value: function (e) {
                          (this.latencyMode = !1),
                            e &&
                              (e.hasOwnProperty('openRenderSync') &&
                                (this.openRenderSync = e.openRenderSync),
                              e.hasOwnProperty('lowlatencyBuf') &&
                                ((this.latencyBuf = e.lowlatencyBuf),
                                (this.latencyMode = -1 !== this.latencyBuf)),
                              e.hasOwnProperty('lowlatencyMin') &&
                                (this.latencyMin = e.lowlatencyMin),
                              e.hasOwnProperty('lowlatencyMax') &&
                                (this.latencyMax = e.lowlatencyMax),
                              e.hasOwnProperty('isNoGop') && (this.isNoGop = e.isNoGop),
                              e.hasOwnProperty('fastMode') && (this.fastMode = e.fastMode),
                              e.hasOwnProperty('skipFrameGap') &&
                                (this.skipFrameGap = e.skipFrameGap));
                        },
                      },
                    ]),
                    e
                  );
                })(),
                J = (function () {
                  function e() {
                    Object(s.a)(this, e),
                      (this.videoDecoder = new D(this)),
                      (this.audioDecoder = new A(this)),
                      (this.videoRender = new V(this)),
                      (this.audioRender = new N(this)),
                      (this.decodeJitter = new Y(this)),
                      (this.audioDecodedFrames = []),
                      (this.audioRenderStarted = !1),
                      (this.audioStartRenderFrameTimeLen = 500),
                      (this.oneSecNow = 0),
                      (this.fastCheckNow = 0),
                      (this.frameDuration = 0),
                      (this.startAppendAudioTime = 0),
                      (this.isFirstPostAudio = !1),
                      (this.quickTimerInterval = null),
                      (this.onQuickCheckTimerBind = this.onQuickCheckTimer.bind(this)),
                      (this.videoFrameStampMap = new Map()),
                      (this.delayDecode = 0),
                      (this.toDecodeVideoFps = 0),
                      (this.userPaused = !1),
                      (this.webcodecCfg = {}),
                      (this.latencyCfg = new K()),
                      (this.videoDecodeCostErrCnt = 0),
                      (this.printCnt = 0),
                      (this.avRenderSync = new q()),
                      (this.isBrowserHidden = !1),
                      (this.renderNum = 0),
                      (this.lastTs = 0),
                      (this.pageFps = 0),
                      (this.lowFpsCnt = 0),
                      (this.dtsJumpOpen = !1),
                      (this.dtsJumpThreshold = 1e4),
                      (this.seekTime = 0),
                      (this.seekVideoDts = 0),
                      (this.isSeek = !1),
                      (this.isAudioSeek = !1),
                      (this.firstVideoTs = -1e4),
                      (this.firstAudioTs = -1e4),
                      (this.seekAudioSamples = []),
                      (this.isVodAv1 = !1);
                  }
                  return (
                    Object(r.a)(e, [
                      {
                        key: 'setVideoOutputByPts',
                        value: function (e) {
                          this.decodeJitter.setVideoOutputByPts(e);
                        },
                      },
                      {
                        key: 'initWebcodecCfg',
                        value: function (e) {
                          var t = e.webcodecCfg,
                            i = e.lowlatencyCfg,
                            s = e.aiEnhanceCfg,
                            r = e.isLive;
                          t && (this.webcodecCfg = t),
                            this.decodeJitter.setLive(r),
                            this.latencyCfg.initConfig(i),
                            (this.avRenderSync.openSync = this.latencyCfg.openRenderSync),
                            0 === this.latencyCfg.latencyBuf &&
                              this.decodeJitter._helper.setNormal(),
                            (this.dtsJumpOpen = !!e.dtsJumpOpen),
                            (this.dtsJumpThreshold = e.dtsJumpThreshold || 1e4),
                            this.videoRender.initConfig(s);
                        },
                      },
                      {
                        key: 'startVideoRender',
                        value: function (e, t) {
                          var i = e.width,
                            s = e.height,
                            r = e.agenerator,
                            a = v.default.getNow();
                          this.videoRender.start(i, s, r, t),
                            clearInterval(this.quickTimerInterval),
                            (this.quickTimerInterval = setInterval(this.onQuickCheckTimerBind, 4)),
                            this.decodeJitter.setStartPlayTime(a);
                        },
                      },
                      {
                        key: 'startAudioRender',
                        value: function (e) {
                          this.audioRender.start(e);
                        },
                      },
                      {
                        key: 'onQuickCheckTimer',
                        value: function () {
                          v.default.postMessage(g.ToMainMessageType.INTERVAL);
                          var e = !1;
                          self.mainSharedArrayBuffer &&
                            ((e = 1 == Atomics.load(self.mainSharedArrayBuffer, w.a.PAUSE_STATUS)),
                            (this.userPaused = e));
                          var t = v.default.getNow();
                          if (!this.userPaused) {
                            var i = this.getAudioDecodedBuffer(),
                              s = this.videoRender.getDecodedBuffer(),
                              r = this.getVideoCurrentDts();
                            this.decodeJitter.decodeThread(
                              i,
                              s,
                              r,
                              this.videoDecoder.decoder.decodeQueueSize,
                            ),
                              this.audioRender.onQuickCheckTimer(t),
                              this.videoRender.rafHandler(t);
                          }
                          0 === this.oneSecNow
                            ? (this.oneSecNow = t)
                            : t - this.oneSecNow >= 1e3 &&
                              (this.onCheckTimer(t), (this.oneSecNow = t)),
                            0 === this.fastCheckNow
                              ? (this.fastCheckNow = t)
                              : t - this.fastCheckNow >= 100 &&
                                (this.onCheckFastTimer(t), (this.fastCheckNow = t)),
                            this.storeWorkerShared(
                              g.StoreWorkerType.VIDEO_BUFFER_LEN,
                              this.getBufferLen(),
                            );
                        },
                      },
                      {
                        key: 'rafHandler',
                        value: function (e) {
                          if ((this.renderNum++, 0 === this.lastTs)) this.lastTs = e;
                          else {
                            var t = e - this.lastTs;
                            if (t >= 1e3) {
                              this.lastTs = e;
                              var i = Math.floor(this.renderNum / (t / 1e3));
                              (this.pageFps = i), (this.renderNum = 0);
                            }
                          }
                        },
                      },
                      {
                        key: 'onCheckTimer',
                        value: function (e) {
                          if (
                            (this.decodeJitter.onCheckTimer(e),
                            v.default.logArr.length > 0 &&
                              (v.default.postMessage(g.ToMainMessageType.LOG, v.default.logArr),
                              (v.default.logArr.length = 0)),
                            this.statEverySec(e),
                            self.mainSharedArrayBuffer)
                          ) {
                            var t = Atomics.load(self.mainSharedArrayBuffer, w.a.VIDEO_REAL_FPS);
                            this.decodeJitter.setRealFps(t),
                              Atomics.store(
                                self.mainSharedArrayBuffer,
                                w.e.VIDEO_DECODED_DELAY_SMOOTH,
                                this.videoDecoder.smoothFrameDecodeDelay,
                              );
                          }
                          this.videoRender.onCheckTimer(e);
                        },
                      },
                      {
                        key: 'onCheckFastTimer',
                        value: function (e) {
                          this.decodeJitter &&
                            this.decodeJitter.onCheckFastTimer &&
                            this.decodeJitter.onCheckFastTimer(e);
                        },
                      },
                      {
                        key: 'getAudioDecodedBuffer',
                        value: function () {
                          return this.audioRender.getDecodedBuffer();
                        },
                      },
                      {
                        key: 'getVideoDecodedBuffer',
                        value: function () {
                          return this.videoRender.getDecodedBuffer();
                        },
                      },
                      {
                        key: 'getVideoDecodingBuffer',
                        value: function () {
                          return this.videoDecoder.getDecodingBuffer();
                        },
                      },
                      {
                        key: 'statEverySec',
                        value: function () {
                          var e = this.videoDecoder.getDecodeDelay(),
                            t = 0,
                            i = 0,
                            s = -1;
                          e.map(function (e) {
                            t += e;
                          }),
                            t > 0 && (s = i = ~~(t / e.length)),
                            (this.delayDecode = i),
                            s > -1 && s < 15
                              ? this.videoDecodeCostErrCnt++
                              : (this.videoDecodeCostErrCnt = 0);
                          var r = this.videoDecoder.getDecodeFps();
                          (this.toDecodeVideoFps = r.toDecodeFps),
                            this.storeWorkerShared(g.StoreWorkerType.VIDEO_DECODED_DELAY, i),
                            this.storeWorkerShared(
                              g.StoreWorkerType.VIDEO_READY_TO_RENDER_LIST_LEN,
                              this.videoRender.framelist.length,
                            ),
                            this.videoDecodeCostErrCnt,
                            this.videoDecoder.isOutputFrameByDts() &&
                              '265' == this.videoDecoder.codecType &&
                              this.handlerError(g.ToMainMessageType.DECODE_DTS);
                          var a = this.videoRender.getEnhanceCostList(),
                            n = 0,
                            o = 0;
                          a.map(function (e) {
                            n += e;
                          }),
                            n > 0 && (o = ~~(n / a.length)),
                            this.storeWorkerShared(g.StoreWorkerType.VIDEO_ENAHNCE_COST, o);
                        },
                      },
                      {
                        key: 'storeWorkerShared',
                        value: function (e, t) {
                          self.mainSharedArrayBuffer &&
                            Atomics.store(self.mainSharedArrayBuffer, e, t);
                        },
                      },
                      {
                        key: 'updateRect',
                        value: function (e, t) {
                          this.videoRender.updateRect(e, t);
                        },
                      },
                      {
                        key: 'updateAVCConfig',
                        value: function (e) {
                          this.videoRender.updateAVCConfig(e.width, e.height);
                        },
                      },
                      {
                        key: 'updateAudioConfig',
                        value: function (e, t, i, s) {
                          this.audioDecoder.updateAudioConfig(e, t, i, s),
                            this.decodeJitter.updateAACSampleRate(t),
                            this.audioRender.updateAACSampleRate(t),
                            this.updateAACSampleRate(t);
                        },
                      },
                      { key: 'updateAVCPPS', value: function (e, t) {} },
                      { key: 'updateAVCSPS', value: function (e, t) {} },
                      { key: 'updateAVCVPS', value: function (e, t) {} },
                      {
                        key: 'toDecodeFrame',
                        value: function (e) {
                          e.type == S.AUIDO
                            ? (this.avRenderSync.setAudioPts(e.timeStamp),
                              (this.lastToDecodeAudioTs = e.timeStamp),
                              this.audioDecoder.decodeFrame(e))
                            : e.type == S.VIDEO &&
                              (this.avRenderSync.setVideoPts(e.timeStamp + e.compositionTime || 0),
                              (this.lastToDecodeVideoTs = e.timeStamp),
                              this.toDecodeVideoFrameNums++,
                              this.videoDecoder.decodeFrame(e));
                        },
                      },
                      {
                        key: 'onFrameDecoded',
                        value: function (e) {
                          var t = this.seekVideoDts;
                          if (e.type == _.VIDEO) {
                            this.decodedVideoFrameNums++,
                              this.decodeJitter.updateVideoDecodedTimeStamp(e.frame.timestamp),
                              0 == this.firstPerformentTime &&
                                (this.firstPerformentTime = v.default.getNow()),
                              (e.noRenderCount = 0);
                            var i = e.timeStamp,
                              s = this.videoFrameStampMap.get(i);
                            void 0 !== s && ((e.timeStamp += s), this.videoFrameStampMap.delete(i)),
                              this.isSeek
                                ? e.timeStamp - t >= 0
                                  ? (this.onVideoSeek(), this.videoRender.appendFrame(e))
                                  : (this.videoRender.setLastPic(e), e.frame.close())
                                : this.videoRender.appendFrame(e);
                          } else
                            e.type == _.AUIDO &&
                              (this.isAudioSeek
                                ? e.timeStamp - t >= 0
                                  ? (this.onAudioSeek(), this.seekAudioSamples.push(e))
                                  : (e.frame.close(),
                                    this.audioRender.setLastAudioData(e),
                                    (e = null))
                                : this.isSeek
                                ? this.seekAudioSamples.push(e)
                                : this.audioRender.onFrameDecoded(e));
                        },
                      },
                      {
                        key: 'setRenderAudioTs',
                        value: function (e, t) {
                          this.avRenderSync.setRenderAudioTs(
                            e,
                            t,
                            this.decodeJitter._helper._audioHelper._timeline,
                          );
                        },
                      },
                      {
                        key: 'appendAudioFrame',
                        value: function (e) {
                          0 == this.startAppendAudioTime &&
                            (this.startAppendAudioTime = v.default.getNow()),
                            -1e4 == this.firstAudioTs &&
                              e.length > 0 &&
                              (this.firstAudioTs = e[0].timeStamp),
                            this.decodeJitter.appendAudioFrame(e);
                        },
                      },
                      {
                        key: 'appendVideoFrame',
                        value: function (e) {
                          var t = this;
                          -1e4 == this.firstVideoTs &&
                            e.length > 0 &&
                            (this.firstVideoTs = e[0].timeStamp),
                            e.map(function (e) {
                              t.videoFrameStampMap.set(e.timeStamp, e.compositionTime),
                                t.decodeJitter.updateVideoCts(e.compositionTime);
                            }),
                            this.decodeJitter.appendVideoFrame(e);
                        },
                      },
                      {
                        key: 'fastOver',
                        value: function () {
                          this.decodeJitter.fastOver();
                        },
                      },
                      {
                        key: 'updateAACSampleRate',
                        value: function (e) {
                          this.frameDuration = 1024e3 / e;
                        },
                      },
                      {
                        key: 'updateVideoFPS',
                        value: function (e, t) {
                          this.decodeJitter.updateVideoFPS(e, t);
                        },
                      },
                      {
                        key: 'setPlayMinBuffer',
                        value: function (e) {
                          this.decodeJitter.updateVideoFPS(e);
                        },
                      },
                      {
                        key: 'setJitter',
                        value: function (e) {
                          this.decodeJitter.setJitter(e);
                        },
                      },
                      {
                        key: 'handlerError',
                        value: function (e, t) {
                          v.default.postMessage(e, t);
                        },
                      },
                      {
                        key: 'getBufferLen',
                        value: function () {
                          return this.decodeJitter
                            ? this.decodeJitter.getBufferLength(this.videoRender.getCurrentDts())
                            : 0;
                        },
                      },
                      {
                        key: 'getAudioCurrentDts',
                        value: function () {
                          return this.audioRender.getAudioCurrentDts();
                        },
                      },
                      {
                        key: 'getVideoCurrentDts',
                        value: function () {
                          return this.videoRender.getCurrentDts();
                        },
                      },
                      {
                        key: 'setUseSoftAcceleration',
                        value: function () {
                          v.default.log('WebCodecsWorkerPlayer.setUseSoftAcceleration'),
                            this.videoDecoder.setUseSoftAcceleration(),
                            this.decodeJitter.setUseSoftAcceleration();
                        },
                      },
                      {
                        key: 'updateSoftAcceleration',
                        value: function () {
                          v.default.log('WebCodecsWorkerPlayer.updateSoftAcceleration'),
                            this.setUseSoftAcceleration(),
                            this.videoDecoder.resetDecoder(),
                            this.decodeJitter.updateSoftAcceleration();
                        },
                      },
                      {
                        key: 'setLocalConfig',
                        value: function (e) {
                          1 == e._webcodecsNoRenderVideo && this.videoRender.setNoRender(),
                            1 == e._useSoftAcceleration && this.setUseSoftAcceleration();
                        },
                      },
                      {
                        key: 'setPauseVideoDecode',
                        value: function (e) {
                          this.decodeJitter.setPauseVideoDecode(e);
                        },
                      },
                      {
                        key: 'setPauseAudioDecode',
                        value: function (e) {
                          this.decodeJitter.setPauseAudioDecode(e);
                        },
                      },
                      {
                        key: 'setEnableDiscard',
                        value: function (e) {
                          this.decodeJitter.setEnableDiscard(e);
                        },
                      },
                      {
                        key: 'turnToWebcodecsSoft',
                        value: function () {
                          (this.videoRender && this.videoRender.videoEnhance.isSuccess) ||
                            ('265' == this.videoDecoder.codecType
                              ? v.default.postMessage(g.ToMainMessageType.SOFT_TURN_TO_MSE)
                              : v.default.postMessage(g.ToMainMessageType.TURN_TO_WEBCODECS_SOFT));
                        },
                      },
                      {
                        key: 'turnToMse',
                        value: function () {
                          (this.videoRender && this.videoRender.videoEnhance.isSuccess) ||
                            v.default.postMessage(g.ToMainMessageType.SOFT_TURN_TO_MSE);
                        },
                      },
                      {
                        key: 'updateCurBitrate',
                        value: function (e) {
                          this.videoRender.updateCurBitrate(e);
                        },
                      },
                      {
                        key: 'setRealFps',
                        value: function (e) {
                          this.decodeJitter.setRealFps(e), this.videoRender.setRealFps(e);
                        },
                      },
                      {
                        key: 'setBrowserHidden',
                        value: function (e) {
                          (this.isBrowserHidden = e), this.videoRender.setBrowserHidden(e);
                        },
                      },
                      {
                        key: 'setEnhance',
                        value: function (e) {
                          this.videoRender.setEnhance(e);
                        },
                      },
                      {
                        key: 'setSegmenttion',
                        value: function (e) {
                          this.videoRender.setSegmenttion(e);
                        },
                      },
                      {
                        key: 'getEnhanceSuccess',
                        value: function () {
                          return this.videoRender.getEnhanceSuccess();
                        },
                      },
                      {
                        key: 'handleEnhanceError',
                        value: function () {
                          this.videoRender.handleEnhanceError();
                        },
                      },
                      {
                        key: 'onRevFastOver',
                        value: function () {
                          this.decodeJitter.onRevFastOver();
                        },
                      },
                      {
                        key: 'initAv1Seg',
                        value: function (e) {
                          this.videoDecoder.initAv1Seg(e);
                        },
                      },
                      {
                        key: 'seek',
                        value: function (e) {
                          (this.isSeek = !0),
                            (this.isAudioSeek = !0),
                            (this.seekTime = e.seekTime),
                            (this.seekVideoDts = 1e3 * e.seekTime + e.initDts);
                          var t = this.videoRender.getVideoRenderPts();
                          t > this.seekVideoDts && (this.isSeekBack = !0),
                            0 != t && (this.videoDecoder.seek(), this.audioDecoder.seek()),
                            v.default.log(
                              'WebCodecsWorkerPlayer.seek',
                              this.seekTime,
                              this.seekVideoDts,
                              this.isSeekBack,
                            ),
                            this.decodeJitter.seek(this.seekTime, this.seekVideoDts),
                            this.videoRender.seek(this.seekVideoDts),
                            this.audioRender.seek(this.seekVideoDts);
                        },
                      },
                      {
                        key: 'setPlaybackRate',
                        value: function (e) {
                          this.videoRender.setPlaybackRate(e);
                        },
                      },
                      {
                        key: 'setVodAv1',
                        value: function () {
                          this.isVodAv1 = !0;
                        },
                      },
                      {
                        key: 'onVideoSeek',
                        value: function () {
                          var e = this;
                          v.default.log(
                            'WebCodecsWorkerPlayer.onVideoSeek, aLen='.concat(
                              this.seekAudioSamples.length,
                            ),
                          ),
                            v.default.postMessage(
                              g.ToMainMessageType.ON_WCS_VIDEO_SEEK,
                              this.seekTime,
                            ),
                            (this.seekTime = 0),
                            this.seekAudioSamples.forEach(function (t) {
                              e.audioRender.onFrameDecoded(t);
                            }),
                            (this.seekAudioSamples.length = 0),
                            this.decodeJitter.onVideoSeek(),
                            this.videoRender.onVideoSeek(),
                            (this.isSeek = !1),
                            (this.seekVideoDts = 0),
                            (this.isSeekBack = !1),
                            (this.seekTime = 0);
                        },
                      },
                      {
                        key: 'onAudioSeek',
                        value: function () {
                          v.default.log('WebCodecsWorkerPlayer.onAudioSeek'),
                            (this.isAudioSeek = !1),
                            this.decodeJitter.onAudioSeek();
                        },
                      },
                      {
                        key: 'getAacTimeLen',
                        value: function () {
                          return this.audioDecoder.getAacTimeLen();
                        },
                      },
                      {
                        key: 'destroy',
                        value: function () {
                          v.default.log('WebCodecsWorkerPlayer.destroy'),
                            (this.destroyed = !0),
                            this.videoDecoder.close(),
                            (this.videoDecoder = null),
                            this.audioDecoder.close(),
                            (this.audioDecoder = null),
                            this.decodeJitter.close(),
                            (this.decodeJitter = null),
                            this.videoRender.close(),
                            (this.videoRender = null),
                            (this.startAudioFastTs = 0),
                            (this.startVideoFastTs = 0),
                            (this.oneSecNow = 0),
                            (this.startAppendAudioTime = 0),
                            (this.isFirstPostAudio = !1),
                            clearInterval(this.quickTimerInterval),
                            (this.quickTimerInterval = null),
                            (this.videoFrameStampMap = null),
                            (this.delayDecode = 0),
                            (this.toDecodeVideoFps = 0),
                            (this.userPaused = !1),
                            (this.isBrowserHidden = !1),
                            (this.pageFps = 0),
                            (this.renderNum = 0),
                            (this.lastTs = 0);
                        },
                      },
                      {
                        key: 'audioDecoderReadyed',
                        get: function () {
                          return this.audioDecoder && this.audioDecoder.configured;
                        },
                      },
                      {
                        key: 'videoDecoderReadyed',
                        get: function () {
                          return this.videoDecoder && this.videoDecoder.configured;
                        },
                      },
                    ]),
                    e
                  );
                })();
              t.default = J;
            },
          ]).default;
        },
        8001: function (e) {
          e.exports = (function () {
            'use strict';
            function e(t) {
              return (e =
                'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                  ? function (e) {
                      return typeof e;
                    }
                  : function (e) {
                      return e &&
                        'function' == typeof Symbol &&
                        e.constructor === Symbol &&
                        e !== Symbol.prototype
                        ? 'symbol'
                        : typeof e;
                    })(t);
            }
            function t(e, t) {
              if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
            }
            function i(e, t) {
              for (var i = 0; i < t.length; i++) {
                var s = t[i];
                (s.enumerable = s.enumerable || !1),
                  (s.configurable = !0),
                  'value' in s && (s.writable = !0),
                  Object.defineProperty(e, s.key, s);
              }
            }
            function s(e, t, s) {
              return t && i(e.prototype, t), s && i(e, s), e;
            }
            function r(e, t) {
              var i = Object.keys(e);
              if (Object.getOwnPropertySymbols) {
                var s = Object.getOwnPropertySymbols(e);
                t &&
                  (s = s.filter(function (t) {
                    return Object.getOwnPropertyDescriptor(e, t).enumerable;
                  })),
                  i.push.apply(i, s);
              }
              return i;
            }
            function a(e) {
              for (var t = 1; t < arguments.length; t++) {
                var i = null != arguments[t] ? arguments[t] : {};
                t % 2
                  ? r(i, !0).forEach(function (t) {
                      var s, r, a;
                      (s = e),
                        (a = i[(r = t)]),
                        r in s
                          ? Object.defineProperty(s, r, {
                              value: a,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                            })
                          : (s[r] = a);
                    })
                  : Object.getOwnPropertyDescriptors
                  ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(i))
                  : r(i).forEach(function (t) {
                      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(i, t));
                    });
              }
              return e;
            }
            function n(e) {
              return (
                (function (e) {
                  if (Array.isArray(e)) {
                    for (var t = 0, i = new Array(e.length); t < e.length; t++) i[t] = e[t];
                    return i;
                  }
                })(e) ||
                (function (e) {
                  if (
                    Symbol.iterator in Object(e) ||
                    '[object Arguments]' === Object.prototype.toString.call(e)
                  )
                    return Array.from(e);
                })(e) ||
                (function () {
                  throw new TypeError('Invalid attempt to spread non-iterable instance');
                })()
              );
            }
            var o = '1.1.17',
              u = {
                ISDEBUG: !1,
                appSrc: '',
                userId: null,
                uid: 0,
                guid: 0,
                ua: '',
                config: null,
                iRequestId: 0,
                dims: {},
              };
            (u.ver = o),
              (u.report = null),
              (u.enableTrace = 0),
              (u.setEnableTrace = function () {
                if (u.config.hasOwnProperty('enableTrace')) u.enableTrace = u.config.enableTrace;
                else {
                  var e = Math.random() < 0.1;
                  u.enableTrace = e ? 1 : 0;
                }
              }),
              (u.getTraceId = function () {
                return 'xxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (e) {
                  var t = (16 * Math.random()) | 0;
                  return ('x' == e ? t : (3 & t) | 8).toString(16);
                });
              }),
              (u.reportAPI = null);
            var d = {
              Wup: function () {
                (this.iVersion = 3),
                  (this.cPacketType = 0),
                  (this.iMessageType = 0),
                  (this.iRequestId = 0),
                  (this.sServantName = ''),
                  (this.sFuncName = ''),
                  (this.sBuffer = new d.BinBuffer()),
                  (this.iTimeout = 0),
                  (this.context = new d.Map(new d.STRING(), new d.STRING())),
                  (this.status = new d.Map(new d.STRING(), new d.STRING())),
                  (this.data = new d.Map(
                    new d.STRING(),
                    new d.Map(new d.STRING(), new d.BinBuffer()),
                  )),
                  (this.newdata = new d.Map(new d.STRING(), new d.BinBuffer()));
              },
            };
            (d.Wup.prototype.setVersion = function (e) {
              this.iVersion = e;
            }),
              (d.Wup.prototype.getVersion = function (e) {
                return this.iVersion;
              }),
              (d.Wup.prototype.setServant = function (e) {
                this.sServantName = e;
              }),
              (d.Wup.prototype.setFunc = function (e) {
                this.sFuncName = e;
              }),
              (d.Wup.prototype.setRequestId = function (e) {
                this.iRequestId = e || ++this.iRequestId;
              }),
              (d.Wup.prototype.getRequestId = function () {
                return this.iRequestId;
              }),
              (d.Wup.prototype.setTimeOut = function (e) {
                this.iTimeout = e;
              }),
              (d.Wup.prototype.getTimeOut = function () {
                return this.iTimeout;
              }),
              (d.Wup.prototype.writeTo = function () {
                var e = new d.JceOutputStream();
                return (
                  e.writeInt16(1, this.iVersion),
                  e.writeInt8(2, this.cPacketType),
                  e.writeInt32(3, this.iMessageType),
                  e.writeInt32(4, this.iRequestId),
                  e.writeString(5, this.sServantName),
                  e.writeString(6, this.sFuncName),
                  e.writeBytes(7, this.sBuffer),
                  e.writeInt32(8, this.iTimeout),
                  e.writeMap(9, this.context),
                  e.writeMap(10, this.status),
                  new d.BinBuffer(e.getBuffer())
                );
              }),
              (d.Wup.prototype.encode = function () {
                var e = new d.JceOutputStream();
                3 == this.iVersion ? e.writeMap(0, this.newdata) : e.writeMap(0, this.data),
                  (this.sBuffer = e.getBinBuffer());
                var t = new d.BinBuffer();
                t = this.writeTo();
                var i = new d.BinBuffer();
                return i.writeInt32(4 + t.len), i.writeBytes(t), i;
              }),
              (d.Wup.prototype.writeBoolean = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeBoolean(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.BOOLEAN;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new d.BinBuffer(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeInt8 = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeInt8(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.CHAR;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new d.BinBuffer(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeInt16 = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeInt16(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.SHORT;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeInt32 = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeInt32(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.INT32;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeInt64 = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeInt64(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.INT64;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeFloat = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeFloat(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.FLOAT;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeDouble = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeDouble(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.DOUBLE;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeString = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeString(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.TypeHelp.STRING;
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeVector = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeVector(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBinBuffer()));
                else {
                  var s = this.data.get(e),
                    r = t._className();
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeStruct = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeStruct(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e);
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(' ', new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeBytes = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeBytes(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e);
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put('vec', new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.writeMap = function (e, t) {
                var i = new d.JceOutputStream();
                if ((i.writeMap(0, t), 3 == this.iVersion))
                  this.newdata.put(e, new d.BinBuffer(i.getBuffer()));
                else {
                  var s = this.data.get(e),
                    r = d.Util.getClassType(t);
                  null == s && (s = new d.Map(d.STRING, d.STRING)),
                    s.put(r, new Uint8Array(i.getBuffer())),
                    this.data.put(e, s);
                }
              }),
              (d.Wup.prototype.readFrom = function (e) {
                (this.iVersion = e.readInt16(1, !0)),
                  (this.cPacketType = e.readInt8(2, !0)),
                  (this.iMessageType = e.readInt32(3, !0)),
                  (this.iRequestId = e.readInt32(4, !0)),
                  (this.sServantName = e.readString(5, !0)),
                  (this.sFuncName = e.readString(6, !0)),
                  localStorage.__wup &&
                    console.info(
                      '%c@@@ ' + this.sServantName + '.' + this.sFuncName,
                      'color:white;background:black;',
                      this,
                    ),
                  (this.sBuffer = e.readBytes(7, !0)),
                  (this.iTimeout = e.readInt32(8, !0)),
                  (this.context = e.readMap(9, !0, new d.Map(new d.STRING(), new d.STRING()))),
                  (this.status = e.readMap(10, !0, new d.Map(new d.STRING(), new d.STRING())));
              }),
              (d.Wup.prototype.decode = function (e) {
                var t = new d.JceInputStream(e);
                if (t.buf.vew.getInt32(t.buf.position) < 4) throw Error('packet length too short');
                (t.buf.position += 4),
                  this.readFrom(t),
                  (t = new d.JceInputStream(this.sBuffer.getBuffer())),
                  3 == this.iVersion
                    ? (this.newdata.clear(), t.readMap(0, !0, this.newdata))
                    : (this.data.clear(), t.readMap(0, !0, this.data));
              }),
              (d.Wup.prototype.readBoolean = function (e) {
                var t, i;
                if (3 == this.iVersion) {
                  if (null == (t = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  i = new d.JceInputStream(t.buffer).readBoolean(0, !0, i);
                } else {
                  if (null == (t = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var s = d.TypeHelp.BOOLEAN,
                    r = t.get(s);
                  if (null == r) throw Error('UniAttribute not found type:' + s);
                  i = new d.JceInputStream(r).readBoolean(0, !0, i);
                }
                return i;
              }),
              (d.Wup.prototype.readInt8 = function (e) {
                var t, i;
                if (3 == this.iVersion) {
                  if (null == (t = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  i = new d.JceInputStream(t.buffer).readInt8(0, !0, i);
                } else {
                  if (null == (t = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var s = d.TypeHelp.CHAR,
                    r = t.get(s);
                  if (null == r) throw Error('UniAttribute not found type:' + s);
                  i = new d.JceInputStream(r).readInt8(0, !0, i);
                }
                return i;
              }),
              (d.Wup.prototype.readInt16 = function (e) {
                var t, i;
                if (3 == this.iVersion) {
                  if (null == (t = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  i = (a = new d.JceInputStream(t.buffer)).readInt16(0, !0, i);
                } else {
                  if (null == (t = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var s = d.TypeHelp.SHORT,
                    r = t.get(s),
                    a = new d.JceInputStream(r);
                  if (null == r) throw Error('UniAttribute not found type:' + s);
                  i = a.readInt16(0, !0, i);
                }
                return i;
              }),
              (d.Wup.prototype.readInt32 = function (e) {
                var t, i;
                if (3 == this.iVersion) {
                  if (null == (t = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  i = new d.JceInputStream(t.buffer).readInt32(0, !0, i);
                } else {
                  if (null == (t = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var s = d.TypeHelp.INT32,
                    r = t.get(s);
                  if (null == r) throw Error('UniAttribute not found type:' + s);
                  i = new d.JceInputStream(r).readInt32(0, !0, i);
                }
                return i;
              }),
              (d.Wup.prototype.readInt64 = function (e) {
                var t, i;
                if (3 == this.iVersion) {
                  if (null == (t = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  i = new d.JceInputStream(t.buffer).readInt64(0, !0, i);
                } else {
                  if (null == (t = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var s = d.TypeHelp.INT64,
                    r = t.get(s);
                  if (null == r) throw Error('UniAttribute not found type:' + s);
                  i = new d.JceInputStream(r).readInt64(0, !0, i);
                }
                return i;
              }),
              (d.Wup.prototype.readFloat = function (e) {
                var t, i;
                if (3 == this.iVersion) {
                  if (null == (t = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  i = new d.JceInputStream(t.buffer).readFloat(0, !0, i);
                } else {
                  if (null == (t = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var s = d.TypeHelp.FLOAT,
                    r = t.get(s);
                  if (null == r) throw Error('UniAttribute not found type:' + s);
                  i = new d.JceInputStream(r).readFloat(0, !0, i);
                }
                return i;
              }),
              (d.Wup.prototype.readDouble = function (e) {
                var t;
                if (3 == this.iVersion) {
                  if (null == (t = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var i = new d.JceInputStream(t.buffer);
                  def = i.readDouble(0, !0, def);
                } else {
                  if (null == (t = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var s = d.TypeHelp.DOUBLE,
                    r = t.get(s);
                  if (null == r) throw Error('UniAttribute not found type:' + s);
                  (i = new d.JceInputStream(r)), (def = i.readDouble(0, !0, def));
                }
                return def;
              }),
              (d.Wup.prototype.readVector = function (e, t, i) {
                var s;
                if (3 == this.iVersion) {
                  if (null == (s = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  t = new d.JceInputStream(s.buffer).readVector(0, !0, t);
                } else {
                  if (null == (s = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var r = s.get(i);
                  if (null == r) throw Error('UniAttribute not found type:' + i);
                  t = new d.JceInputStream(r).readVector(0, !0, t);
                }
                return t;
              }),
              (d.Wup.prototype.readStruct = function (e, t, i) {
                var s;
                if (3 == this.iVersion) {
                  if (null == (s = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  t = new d.JceInputStream(s.buffer).readStruct(0, !0, t);
                } else {
                  if (null == (s = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var r = s.get(i);
                  if (null == r) throw Error('UniAttribute not found type:' + i);
                  t = new d.JceInputStream(r).readStruct(0, !0, t);
                }
                return t;
              }),
              (d.Wup.prototype.readMap = function (e, t, i) {
                var s;
                if (3 == this.iVersion) {
                  if (null == (s = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  t = new d.JceInputStream(s.buffer).readMap(0, !0, t);
                } else {
                  if (null == (s = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var r = s.get(i);
                  if (null == r) throw Error('UniAttribute not found type:' + i);
                  t = new d.JceInputStream(r).readMap(0, !0, t);
                }
                return t;
              }),
              (d.Wup.prototype.readBytes = function (e, t, i) {
                var s;
                if (3 == this.iVersion) {
                  if (null == (s = this.newdata.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  t = new d.JceInputStream(s.buffer).readBytes(0, !0, t);
                } else {
                  if (null == (s = this.data.get(e)))
                    throw Error('UniAttribute not found key:' + e);
                  var r = s.get(i);
                  if (null == r) throw Error('UniAttribute not found type:' + i);
                  t = new d.JceInputStream(r).readBytes(0, !0, t);
                }
                return t;
              }),
              (d.DataHelp = {
                EN_INT8: 0,
                EN_INT16: 1,
                EN_INT32: 2,
                EN_INT64: 3,
                EN_FLOAT: 4,
                EN_DOUBLE: 5,
                EN_STRING1: 6,
                EN_STRING4: 7,
                EN_MAP: 8,
                EN_LIST: 9,
                EN_STRUCTBEGIN: 10,
                EN_STRUCTEND: 11,
                EN_ZERO: 12,
                EN_SIMPLELIST: 13,
              }),
              (d.TypeHelp = {
                BOOLEAN: 'bool',
                CHAR: 'char',
                SHORT: 'short',
                INT32: 'int32',
                INT64: 'int64',
                FLOAT: 'float',
                DOUBLE: 'double',
                STRING: 'string',
                VECTOR: 'list<$t>',
                MAP: 'map<$k, $v>',
              }),
              (d.BinBuffer = function (e) {
                (this.buf = null),
                  (this.vew = null),
                  (this.len = 0),
                  (this.position = 0),
                  null != e &&
                    null != e &&
                    e instanceof d.BinBuffer &&
                    ((this.buf = e.buf),
                    (this.vew = new DataView(this.buf)),
                    (this.len = e.length),
                    (this.position = e.position)),
                  null != e &&
                    null != e &&
                    e instanceof ArrayBuffer &&
                    ((this.buf = e),
                    (this.vew = new DataView(this.buf)),
                    (this.len = this.vew.byteLength),
                    (this.position = 0)),
                  this.__defineGetter__('length', function () {
                    return this.len;
                  }),
                  this.__defineGetter__('buffer', function () {
                    return this.buf;
                  });
              }),
              (d.BinBuffer.prototype._write = function (e, t, i) {
                return e.writeBytes(t, i);
              }),
              (d.BinBuffer.prototype._read = function (e, t, i) {
                return e.readBytes(t, !0, i);
              }),
              (d.BinBuffer.prototype._clone = function () {
                return new d.BinBuffer();
              }),
              (d.BinBuffer.prototype.allocate = function (e) {
                if (((e = this.position + e), !(null != this.buf && this.buf.length > e))) {
                  var t = new ArrayBuffer(Math.max(256, 2 * e));
                  null != this.buf &&
                    (new Uint8Array(t).set(new Uint8Array(this.buf)), (this.buf = void 0)),
                    (this.buf = t),
                    (this.vew = void 0),
                    (this.vew = new DataView(this.buf));
                }
              }),
              (d.BinBuffer.prototype.getBuffer = function () {
                var e = new ArrayBuffer(this.len);
                return new Uint8Array(e).set(new Uint8Array(this.buf, 0, this.len)), e;
              }),
              (d.BinBuffer.prototype.memset = function (e, t, i) {
                this.allocate(i),
                  new Uint8Array(this.buf).set(new Uint8Array(e, t, i), this.position);
              }),
              (d.BinBuffer.prototype.writeInt8 = function (e) {
                this.allocate(1),
                  this.vew.setInt8(this.position, e),
                  (this.position += 1),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeUInt8 = function (e) {
                this.allocate(1), this.vew.setUint8(this.position++, e), (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeInt16 = function (e) {
                this.allocate(2),
                  this.vew.setInt16(this.position, e),
                  (this.position += 2),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeUInt16 = function (e) {
                this.allocate(2),
                  this.vew.setUint16(this.position, e),
                  (this.position += 2),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeInt32 = function (e) {
                this.allocate(4),
                  this.vew.setInt32(this.position, e),
                  (this.position += 4),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeUInt32 = function (e) {
                this.allocate(4),
                  this.vew.setUint32(this.position, e),
                  (this.position += 4),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeInt64 = function (e) {
                if ('string' == typeof e) {
                  this.allocate(8);
                  for (
                    var t = 4294967296, i = 0, s = 0, r = (e = e.toLowerCase()).length, a = 0;
                    a < r;
                    a++
                  ) {
                    var n = e.charCodeAt(a) - 48;
                    9 < n && (n -= 39),
                      (i = 10 * i + n),
                      (s = 10 * s + Math.floor(i / t)),
                      (i %= t);
                  }
                  return (
                    this.vew.setUint32(this.position, s),
                    this.vew.setUint32(this.position + 4, i),
                    (this.position += 8),
                    void (this.len = this.position)
                  );
                }
                this.allocate(8),
                  this.vew.setUint32(this.position, parseInt(e / 4294967296)),
                  this.vew.setUint32(this.position + 4, e % 4294967296),
                  (this.position += 8),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeFloat = function (e) {
                this.allocate(4),
                  this.vew.setFloat32(this.position, e),
                  (this.position += 4),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeDouble = function (e) {
                this.allocate(8),
                  this.vew.setFloat64(this.position, e),
                  (this.position += 8),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeString = function (e) {
                for (var t = [], i = 0; i < e.length; i++) t.push(255 & e.charCodeAt(i));
                this.allocate(t.length),
                  new Uint8Array(this.buf).set(new Uint8Array(t), this.position),
                  (this.position += t.length),
                  (this.len = this.position);
              }),
              (d.BinBuffer.prototype.writeBytes = function (e) {
                0 != e.length &&
                  null != e.buf &&
                  (this.allocate(e.length),
                  new Uint8Array(this.buf).set(new Uint8Array(e.buf, 0, e.length), this.position),
                  (this.position += e.length),
                  (this.len = this.position));
              }),
              (d.BinBuffer.prototype.readInt8 = function () {
                return this.vew.getInt8(this.position++);
              }),
              (d.BinBuffer.prototype.readInt16 = function () {
                return (this.position += 2), this.vew.getInt16(this.position - 2);
              }),
              (d.BinBuffer.prototype.readInt32 = function () {
                return (this.position += 4), this.vew.getInt32(this.position - 4);
              }),
              (d.BinBuffer.prototype.readUInt8 = function () {
                return (this.position += 1), this.vew.getUint8(this.position - 1);
              }),
              (d.BinBuffer.prototype.readUInt16 = function () {
                return (this.position += 2), this.vew.getUint16(this.position - 2);
              }),
              (d.BinBuffer.prototype.readUInt32 = function () {
                return (this.position += 4), this.vew.getUint32(this.position - 4);
              });
            var c = Math.pow(2, 53);
            function l(e) {
              return 'function' == typeof e ? new e()._className() : e._className();
            }
            (d.BinBuffer.prototype.readInt64 = function () {
              var e = this.vew.getUint32(this.position),
                t = this.vew.getUint32(this.position + 4);
              this.position += 8;
              var i = 4294967296 * e + t;
              if (i < c) return i;
              for (var s, r, a, n = '', o = Math.pow(2, 32); 0 != e || 0 != t; )
                (n = (r = (a = (s = e % 10) * o + t) % 10).toString(10) + n),
                  (e = (e - s) / 10),
                  (t = (a - r) / 10);
              return n;
            }),
              (d.BinBuffer.prototype.readFloat = function () {
                var e = this.vew.getFloat32(this.position);
                return (this.position += 4), e;
              }),
              (d.BinBuffer.prototype.readDouble = function () {
                var e = this.vew.getFloat64(this.position);
                return (this.position += 8), e;
              }),
              (d.BinBuffer.prototype.readString = function (e) {
                for (var t = [], i = 0; i < e; i++)
                  t.push(String.fromCharCode(this.vew.getUint8(this.position++)));
                var s = t.join('');
                try {
                  s = decodeURIComponent(escape(s));
                } catch (e) {}
                return s;
              }),
              (d.BinBuffer.prototype.readBytes = function (e) {
                var t = new d.BinBuffer();
                return (
                  t.allocate(e),
                  t.memset(this.buf, this.position, e),
                  (t.position = 0),
                  (t.len = e),
                  (this.position = this.position + e),
                  t
                );
              }),
              (d.JceOutputStream = function () {
                (this.buf = new d.BinBuffer()),
                  (this.getBinBuffer = function () {
                    return this.buf;
                  }),
                  (this.getBuffer = function () {
                    return this.buf.getBuffer();
                  });
              }),
              (d.JceOutputStream.prototype.writeTo = function (e, t) {
                e < 15
                  ? this.buf.writeUInt8(((e << 4) & 240) | t)
                  : this.buf.writeUInt16(((240 | t) << 8) | e);
              }),
              (d.JceOutputStream.prototype.writeBoolean = function (e, t) {
                this.writeInt8(e, 1 == t ? 1 : 0);
              }),
              (d.JceOutputStream.prototype.writeInt8 = function (e, t) {
                0 == t
                  ? this.writeTo(e, d.DataHelp.EN_ZERO)
                  : (this.writeTo(e, d.DataHelp.EN_INT8), this.buf.writeInt8(t));
              }),
              (d.JceOutputStream.prototype.writeInt16 = function (e, t) {
                -128 <= t && t <= 127
                  ? this.writeInt8(e, t)
                  : (this.writeTo(e, d.DataHelp.EN_INT16), this.buf.writeInt16(t));
              }),
              (d.JceOutputStream.prototype.writeInt32 = function (e, t) {
                -32768 <= t && t <= 32767
                  ? this.writeInt16(e, t)
                  : (this.writeTo(e, d.DataHelp.EN_INT32), this.buf.writeInt32(t));
              }),
              (d.JceOutputStream.prototype.writeInt64 = function (e, t) {
                -2147483648 <= t && t <= 2147483647
                  ? this.writeInt32(e, t)
                  : (this.writeTo(e, d.DataHelp.EN_INT64), this.buf.writeInt64(t));
              }),
              (d.JceOutputStream.prototype.writeUInt8 = function (e, t) {
                this.writeInt16(e, t);
              }),
              (d.JceOutputStream.prototype.writeUInt16 = function (e, t) {
                this.writeInt32(e, t);
              }),
              (d.JceOutputStream.prototype.writeUInt32 = function (e, t) {
                this.writeInt64(e, t);
              }),
              (d.JceOutputStream.prototype.writeFloat = function (e, t) {
                0 == t
                  ? this.writeTo(e, d.DataHelp.EN_ZERO)
                  : (this.writeTo(e, d.DataHelp.EN_FLOAT), this.buf.writeFloat(t));
              }),
              (d.JceOutputStream.prototype.writeDouble = function (e, t) {
                0 == t
                  ? this.writeTo(e, d.DataHelp.EN_ZERO)
                  : (this.writeTo(e, d.DataHelp.EN_DOUBLE), this.buf.writeDouble(t));
              }),
              (d.JceOutputStream.prototype.writeStruct = function (e, t) {
                if (null == t.writeTo) throw Error('not defined writeTo Function');
                this.writeTo(e, d.DataHelp.EN_STRUCTBEGIN),
                  t.writeTo(this),
                  this.writeTo(0, d.DataHelp.EN_STRUCTEND);
              }),
              (d.JceOutputStream.prototype.writeString = function (e, t) {
                var i = t;
                try {
                  i = unescape(encodeURIComponent(i));
                } catch (e) {}
                255 < i.length
                  ? (this.writeTo(e, d.DataHelp.EN_STRING4), this.buf.writeUInt32(i.length))
                  : (this.writeTo(e, d.DataHelp.EN_STRING1), this.buf.writeUInt8(i.length)),
                  this.buf.writeString(i);
              }),
              (d.JceOutputStream.prototype.writeBytes = function (e, t) {
                this.writeTo(e, d.DataHelp.EN_SIMPLELIST),
                  this.writeTo(0, d.DataHelp.EN_INT8),
                  this.writeInt32(0, t.length),
                  this.buf.writeBytes(t);
              }),
              (d.JceOutputStream.prototype.writeVector = function (e, t) {
                var i = t.value.length;
                this.writeTo(e, d.DataHelp.EN_LIST), this.writeInt32(0, i);
                for (var s = 0; s < i; s++)
                  ('function' == typeof t.proto ? new t.proto() : t.proto)._write(
                    this,
                    0,
                    t.value[s],
                  );
              }),
              (d.JceOutputStream.prototype.writeMap = function (e, t) {
                for (var i in (this.writeTo(e, d.DataHelp.EN_MAP),
                this.writeInt32(0, t.size()),
                t.value)) {
                  var s = 'function' == typeof t.kproto ? new t.kproto() : t.kproto,
                    r = 'function' == typeof t.vproto ? new t.vproto() : t.vproto;
                  s._write(this, 0, i), r._write(this, 1, t.value[i]);
                }
              }),
              (d.JceInputStream = function (e) {
                this.buf = new d.BinBuffer(e);
              }),
              (d.JceInputStream.prototype.readFrom = function () {
                var e = this.buf.readUInt8(),
                  t = (240 & e) >> 4,
                  i = 15 & e;
                return 15 <= t && (t = this.buf.readUInt8()), { tag: t, type: i };
              }),
              (d.JceInputStream.prototype.peekFrom = function () {
                var e = this.buf.position,
                  t = this.readFrom();
                return (
                  (this.buf.position = e), { tag: t.tag, type: t.type, size: 15 <= t.tag ? 2 : 1 }
                );
              }),
              (d.JceInputStream.prototype.skipField = function (e) {
                switch (e) {
                  case d.DataHelp.EN_INT8:
                    this.buf.position += 1;
                    break;
                  case d.DataHelp.EN_INT16:
                    this.buf.position += 2;
                    break;
                  case d.DataHelp.EN_INT32:
                    this.buf.position += 4;
                    break;
                  case d.DataHelp.EN_INT64:
                    this.buf.position += 8;
                    break;
                  case d.DataHelp.EN_STRING1:
                    var t = this.buf.readUInt8();
                    this.buf.position += t;
                    break;
                  case d.DataHelp.EN_STRING4:
                    var i = this.buf.readInt32();
                    this.buf.position += i;
                    break;
                  case d.DataHelp.EN_STRUCTBEGIN:
                    this.skipToStructEnd();
                    break;
                  case d.DataHelp.EN_STRUCTEND:
                  case d.DataHelp.EN_ZERO:
                    break;
                  case d.DataHelp.EN_MAP:
                    for (var s = this.readInt32(0, !0), r = 0; r < 2 * s; ++r) {
                      var a = this.readFrom();
                      this.skipField(a.type);
                    }
                    break;
                  case d.DataHelp.EN_SIMPLELIST:
                    if ((a = this.readFrom()).type != d.DataHelp.EN_INT8)
                      throw Error('skipField with invalid type, type value: ' + e + ',' + a.type);
                    (t = this.readInt32(0, !0)), (this.buf.position += t);
                    break;
                  case d.DataHelp.EN_LIST:
                    for (s = this.readInt32(0, !0), r = 0; r < s; ++r)
                      (a = this.readFrom()), this.skipField(a.type);
                    break;
                  case d.DataHelp.EN_FLOAT:
                    this.buf.position += 4;
                    break;
                  case d.DataHelp.EN_DOUBLE:
                    this.buf.position += 8;
                    break;
                  default:
                    throw new Error('skipField with invalid type, type value: ' + e);
                }
              }),
              (d.JceInputStream.prototype.skipToStructEnd = function () {
                for (;;) {
                  var e = this.readFrom();
                  if ((this.skipField(e.type), e.type == d.DataHelp.EN_STRUCTEND)) return;
                }
              }),
              (d.JceInputStream.prototype.skipToTag = function (e, t) {
                for (; this.buf.position < this.buf.length; ) {
                  var i = this.peekFrom();
                  if (e <= i.tag || i.type == d.DataHelp.EN_STRUCTEND)
                    return i.type != d.DataHelp.EN_STRUCTEND && e == i.tag;
                  (this.buf.position += i.size), this.skipField(i.type);
                }
                if (t) throw Error('require field not exist, tag:' + e);
                return !1;
              }),
              (d.JceInputStream.prototype.readBoolean = function (e, t, i) {
                return 1 == this.readInt8(e, t, i);
              }),
              (d.JceInputStream.prototype.readInt8 = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                switch (s.type) {
                  case d.DataHelp.EN_ZERO:
                    return 0;
                  case d.DataHelp.EN_INT8:
                    return this.buf.readInt8();
                }
                throw Error('read int8 type mismatch, tag:' + e + ', get type:' + s.type);
              }),
              (d.JceInputStream.prototype.readInt16 = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                switch (s.type) {
                  case d.DataHelp.EN_ZERO:
                    return 0;
                  case d.DataHelp.EN_INT8:
                    return this.buf.readInt8();
                  case d.DataHelp.EN_INT16:
                    return this.buf.readInt16();
                }
                throw Error('read int8 type mismatch, tag:' + e + ', get type:' + s.type);
              }),
              (d.JceInputStream.prototype.readInt32 = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                switch (s.type) {
                  case d.DataHelp.EN_ZERO:
                    return 0;
                  case d.DataHelp.EN_INT8:
                    return this.buf.readInt8();
                  case d.DataHelp.EN_INT16:
                    return this.buf.readInt16();
                  case d.DataHelp.EN_INT32:
                    return this.buf.readInt32();
                }
                throw Error('read int8 type mismatch, tag:' + e + ', get type:' + s.type);
              }),
              (d.JceInputStream.prototype.readInt64 = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                switch (this.readFrom().type) {
                  case d.DataHelp.EN_ZERO:
                    return 0;
                  case d.DataHelp.EN_INT8:
                    return this.buf.readInt8();
                  case d.DataHelp.EN_INT16:
                    return this.buf.readInt16();
                  case d.DataHelp.EN_INT32:
                    return this.buf.readInt32();
                  case d.DataHelp.EN_INT64:
                    return this.buf.readInt64();
                }
                throw Error('read int64 type mismatch, tag:' + e + ', get type:' + h.type);
              }),
              (d.JceInputStream.prototype.readFloat = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                switch (this.readFrom().type) {
                  case d.DataHelp.EN_ZERO:
                    return 0;
                  case d.DataHelp.EN_FLOAT:
                    return this.buf.readFloat();
                }
                throw Error('read float type mismatch, tag:' + e + ', get type:' + h.type);
              }),
              (d.JceInputStream.prototype.readDouble = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                switch (this.readFrom().type) {
                  case d.DataHelp.EN_ZERO:
                    return 0;
                  case d.DataHelp.EN_DOUBLE:
                    return this.buf.readDouble();
                }
                throw Error('read double type mismatch, tag:' + e + ', get type:' + h.type);
              }),
              (d.JceInputStream.prototype.readUInt8 = function (e, t, i) {
                return this.readInt16(e, t, i);
              }),
              (d.JceInputStream.prototype.readUInt16 = function (e, t, i) {
                return this.readInt32(e, t, i);
              }),
              (d.JceInputStream.prototype.readUInt32 = function (e, t, i) {
                return this.readInt64(e, t, i);
              }),
              (d.JceInputStream.prototype.readStruct = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                if (s.type != d.DataHelp.EN_STRUCTBEGIN)
                  throw Error('read struct type mismatch, tag: ' + e + ', get type:' + s.type);
                return i.readFrom(this), this.skipToStructEnd(), i;
              }),
              (d.JceInputStream.prototype.readString = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                if (s.type == d.DataHelp.EN_STRING1)
                  return this.buf.readString(this.buf.readUInt8());
                if (s.type == d.DataHelp.EN_STRING4)
                  return this.buf.readString(this.buf.readUInt32());
                throw Error(
                  "read 'string' type mismatch, tag: " + e + ', get type: ' + s.type + '.',
                );
              }),
              (d.JceInputStream.prototype.readString2 = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                if (s.type == d.DataHelp.EN_STRING1)
                  return this.buf.readBytes(this.buf.readUInt8());
                if (s.type == d.DataHelp.EN_STRING4)
                  return this.buf.readBytes(this.buf.readUInt32());
                throw Error(
                  "read 'string' type mismatch, tag: " + e + ', get type: ' + s.type + '.',
                );
              }),
              (d.JceInputStream.prototype.readBytes = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                if (s.type == d.DataHelp.EN_SIMPLELIST) {
                  var r = this.readFrom();
                  if (r.type != d.DataHelp.EN_INT8)
                    throw Error('type mismatch, tag:' + e + ',type:' + s.type + ',' + r.type);
                  if ((a = this.readInt32(0, !0)) < 0)
                    throw Error('invalid size, tag:' + e + ',type:' + s.type + ',' + r.type);
                  return this.buf.readBytes(a);
                }
                if (s.type != d.DataHelp.EN_LIST)
                  throw Error('type mismatch, tag:' + e + ',type:' + s.type);
                var a = this.readInt32(0, !0);
                return this.buf.readBytes(a);
              }),
              (d.JceInputStream.prototype.readVector = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                if (s.type != d.DataHelp.EN_LIST)
                  throw Error("read 'vector' type mismatch, tag: " + e + ', get type: ' + s.type);
                var r = this.readInt32(0, !0);
                if (r < 0)
                  throw Error('invalid size, tag: ' + e + ', type: ' + s.type + ', size: ' + r);
                for (var a = 0; a < r; ++a) {
                  var n = 'function' == typeof i.proto ? new i.proto() : i.proto;
                  i.value.push(n._read(this, 0, n._clone()));
                }
                return i;
              }),
              (d.JceInputStream.prototype.readMap = function (e, t, i) {
                if (0 == this.skipToTag(e, t)) return i;
                var s = this.readFrom();
                if (s.type != d.DataHelp.EN_MAP)
                  throw Error("read 'map' type mismatch, tag: " + e + ', get type: ' + s.type);
                var r = this.readInt32(0, !0);
                if (r < 0) throw Error('invalid map, tag: ' + e + ', size: ' + r);
                for (var a = 0; a < r; a++) {
                  var n = 'function' == typeof i.kproto ? new i.kproto() : i.kproto,
                    o = 'function' == typeof i.vproto ? new i.vproto() : i.vproto,
                    h = n._read(this, 0, n._clone()),
                    u = o._read(this, 1, o._clone());
                  i.put(h, u);
                }
                return i;
              }),
              (d.Util = d.Util || {}),
              (d.Util.jcestream = function (e, t) {
                if (null != e && null != e)
                  if (e instanceof ArrayBuffer) {
                    t = t || 16;
                    for (var i = new Uint8Array(e), s = '', r = 0; r < i.length; r++)
                      0 != r && r % t == 0 ? (s += '\n') : 0 != r && (s += ' '),
                        (s += (15 < i[r] ? '' : '0') + i[r].toString(16));
                    console.log(s.toUpperCase());
                  } else console.log('Taf.Util.jcestream::value is not ArrayBuffer');
                else console.log('Taf.Util.jcestream::value is null or undefined');
              }),
              (d.Util.str2ab = function (e) {
                var t,
                  i = e.length,
                  s = new Array(i);
                for (t = 0; t < i; ++t) s[t] = e.charCodeAt(t);
                return new Uint8Array(s).buffer;
              }),
              (d.Util.ajax = function (e, t, i, s) {
                var r = new XMLHttpRequest();
                r.overrideMimeType('text/plain; charset=x-user-defined'),
                  r.addEventListener('readystatechange', function e() {
                    4 === r.readyState &&
                      (200 === r.status || 304 === r.status
                        ? i(d.Util.str2ab(r.response))
                        : s(r.status),
                      r.removeEventListener('readystatechange', e),
                      (r = void 0));
                  }),
                  r.open('post', e),
                  r.send(t);
              }),
              (d.INT8 = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt8(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt8(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.CHAR;
                  });
              }),
              (d.INT16 = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt16(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt16(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.SHORT;
                  });
              }),
              (d.INT32 = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt32(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt32(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.INT32;
                  });
              }),
              (d.INT64 = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt64(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt64(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.INT64;
                  });
              }),
              (d.UINT8 = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt16(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt16(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.SHORT;
                  });
              }),
              (d.UInt16 = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt32(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt32(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.INT32;
                  });
              }),
              (d.UInt32 = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt64(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt64(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.INT64;
                  });
              }),
              (d.Float = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeFloat(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readFloat(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.FLOAT;
                  });
              }),
              (d.Double = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeDouble(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readDouble(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.DOUBLE;
                  });
              }),
              (d.STRING = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeString(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readString(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.STRING;
                  });
              }),
              (d.BOOLEAN = function () {
                (this._clone = function () {
                  return !1;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeBoolean(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readBoolean(t, !0, i);
                  }),
                  (this._className = function () {
                    return d.BOOLEAN;
                  });
              }),
              (d.ENUM = function () {
                (this._clone = function () {
                  return 0;
                }),
                  (this._write = function (e, t, i) {
                    return e.writeInt32(t, i);
                  }),
                  (this._read = function (e, t, i) {
                    return e.readInt32(t, !0, i);
                  });
              }),
              (d.Vector = function (e) {
                (this.proto = e), (this.value = []);
              }),
              (d.Vector.prototype._clone = function () {
                return new d.Vector(
                  'function' == typeof this.proto ? new this.proto() : this.proto,
                );
              }),
              (d.Vector.prototype._write = function (e, t, i) {
                return e.writeVector(t, i);
              }),
              (d.Vector.prototype._read = function (e, t, i) {
                return e.readVector(t, !0, i);
              }),
              (d.Vector.prototype._className = function () {
                var e = l(this.proto);
                return d.TypeHelp.VECTOR.replace('$t', e);
              }),
              (d.Map = function (e, t) {
                (this.kproto = e), (this.vproto = t), (this.value = new Object());
              }),
              (d.Map.prototype._clone = function () {
                var e = 'function' == typeof this.kproto ? new this.kproto() : this.kproto,
                  t = 'function' == typeof this.vproto ? new this.vproto() : this.vproto;
                return new d.Map(e, t);
              }),
              (d.Map.prototype._write = function (e, t, i) {
                return e.writeMap(t, i);
              }),
              (d.Map.prototype._read = function (e, t, i) {
                return e.readMap(t, !0, i);
              }),
              (d.Map.prototype.put = function (e, t) {
                this.value[e] = t;
              }),
              (d.Map.prototype.get = function (e) {
                return this.value[e];
              }),
              (d.Map.prototype.remove = function (e) {
                delete this.value[e];
              }),
              (d.Map.prototype.clear = function () {
                this.value = new Object();
              }),
              (d.Map.prototype.size = function () {
                var e = 0;
                for (var t in this.value) e++;
                return e;
              }),
              (d.Map.prototype._className = function () {
                var e = l(this.kproto),
                  t = l(this.vproto);
                return d.TypeHelp.Map.replace('$k', e).replace('$v', t);
              });
            var p = {
              EWebSocketCommandType: {
                EWSCmd_NULL: 0,
                EWSCmd_RegisterReq: 1,
                EWSCmd_RegisterRsp: 2,
                EWSCmd_WupReq: 3,
                EWSCmd_WupRsp: 4,
                EWSCmdC2S_HeartBeat: 5,
                EWSCmdS2C_HeartBeatAck: 6,
                EWSCmdS2C_MsgPushReq: 7,
                EWSCmdC2S_DeregisterReq: 8,
                EWSCmdS2C_DeRegisterRsp: 9,
                EWSCmdC2S_VerifyCookieReq: 10,
                EWSCmdS2C_VerifyCookieRsp: 11,
                EWSCmdC2S_VerifyHuyaTokenReq: 12,
                EWSCmdS2C_VerifyHuyaTokenRsp: 13,
                EWSCmdC2S_UNVerifyReq: 14,
                EWSCmdS2C_UNVerifyRsp: 15,
                EWSCmdC2S_RegisterGroupReq: 16,
                EWSCmdS2C_RegisterGroupRsp: 17,
                EWSCmdC2S_UnRegisterGroupReq: 18,
                EWSCmdS2C_UnRegisterGroupRsp: 19,
                EWSCmdC2S_HeartBeatReq: 20,
                EWSCmdS2C_HeartBeatRsp: 21,
                EWSCmdS2C_MsgPushReq_V2: 22,
                EWSCmdC2S_UpdateUserExpsReq: 23,
                EWSCmdS2C_UpdateUserExpsRsp: 24,
                EWSCmdC2S_WSHistoryMsgReq: 25,
                EWSCmdS2C_WSHistoryMsgRsp: 26,
                EWSCmdS2C_EnterP2P: 27,
                EWSCmdS2C_EnterP2PAck: 28,
                EWSCmdS2C_ExitP2P: 29,
                EWSCmdS2C_ExitP2PAck: 30,
                EWSCmdC2S_SyncGroupReq: 31,
                EWSCmdS2C_SyncGroupRsp: 32,
                EWSCmdC2S_UpdateUserInfoReq: 33,
                EWSCmdS2C_UpdateUserInfoRsp: 34,
                EWSCmdC2S_MsgAckReq: 35,
                EWSCmdS2C_MsgAckRsp: 36,
                EWSCmdC2S_CloudGameReq: 37,
                EWSCmdS2C_CloudGamePush: 38,
                EWSCmdS2C_CloudGameRsp: 39,
                EWSCmdS2C_RpcReq: 40,
                EWSCmdC2S_RpcRsp: 41,
                EWSCmdS2C_RpcRspRsp: 42,
                EWSCmdC2S_GetStunPortReq: 101,
                EWSCmdS2C_GetStunPortRsp: 102,
                EWSCmdC2S_WebRTCOfferReq: 103,
                EWSCmdS2C_WebRTCOfferRsp: 104,
                EWSCmdC2S_SignalUpgradeReq: 105,
                EWSCmdS2C_SignalUpgradeRsp: 106,
              },
              ELiveSource: { PC_YY: 0, PC_HUYA: 1, MOBILE_HUYA: 2, WEB_HUYA: 3 },
              EGender: { MALE: 0, FEMALE: 1 },
              TemplateType: { PRIMARY: 1, RECEPTION: 2 },
              EStreamLineType: {
                STREAM_LINE_OLD_YY: 0,
                STREAM_LINE_WS: 1,
                STREAM_LINE_NEW_YY: 2,
                STREAM_LINE_AL: 3,
                STREAM_LINE_HUYA: 4,
                STREAM_LINE_TX: 5,
                STREAM_LINE_CDN: 8,
                STREAM_LINE_HW: 6,
                STREAM_LINE_BD: 7,
                STREAM_LINE_GG: 9,
                STREAM_LINE_CF: 10,
                STREAM_LINE_QUICK_HUYA: 99,
              },
              eUserOperation: { USER_IN: 1, USER_OUT: 2, USER_MOVE: 3 },
              WebSocketCommand: function () {
                (this.iCmdType = 0),
                  (this.vData = new d.BinBuffer()),
                  (this.lRequestId = 0),
                  (this.traceId = ''),
                  (this.iEncryptType = 0),
                  (this.lTime = 0),
                  (this.sMD5 = '');
              },
            };
            (p.WebSocketCommand.prototype._clone = function () {
              return new p.WebSocketCommand();
            }),
              (p.WebSocketCommand.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WebSocketCommand.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WebSocketCommand.prototype.writeTo = function (e) {
                e.writeInt32(0, this.iCmdType),
                  e.writeBytes(1, this.vData),
                  e.writeInt64(2, this.lRequestId),
                  e.writeString(3, this.traceId),
                  e.writeInt32(4, this.iEncryptType),
                  e.writeInt64(5, this.lTime),
                  e.writeString(6, this.sMD5);
              }),
              (p.WebSocketCommand.prototype.readFrom = function (e) {
                (this.iCmdType = e.readInt32(0, !1, this.iCmdType)),
                  (this.vData = e.readBytes(1, !1, this.vData)),
                  (this.lRequestId = e.readInt64(2, !1, this.lRequestId)),
                  (this.traceId = e.readString(3, !1, this.traceId)),
                  (this.iEncryptType = e.readInt32(4, !1, this.iEncryptType)),
                  (this.lTime = e.readInt64(5, !1, this.lTime)),
                  (this.sMD5 = e.readString(6, !1, this.sMD5));
              }),
              (p.WSRegisterRsp = function () {
                (this.iResCode = 0),
                  (this.lRequestId = 0),
                  (this.sMessage = ''),
                  (this.sBCConnHost = '');
              }),
              (p.WSRegisterRsp.prototype._clone = function () {
                return new p.WSRegisterRsp();
              }),
              (p.WSRegisterRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSRegisterRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSRegisterRsp.prototype.readFrom = function (e) {
                (this.iResCode = e.readInt32(0, !1, this.iResCode)),
                  (this.lRequestId = e.readInt64(1, !1, this.lRequestId)),
                  (this.sMessage = e.readString(2, !1, this.sMessage)),
                  (this.sBCConnHost = e.readString(3, !1, this.sBCConnHost));
              }),
              (p.WSPushMessage = function () {
                (this.ePushType = 0),
                  (this.iUri = 0),
                  (this.sMsg = new d.BinBuffer()),
                  (this.iProtocolType = 0),
                  (this.sGroupId = ''),
                  (this.lMsgId = 0),
                  (this.iMsgTag = 0);
              }),
              (p.WSPushMessage.prototype._clone = function () {
                return new p.WSPushMessage();
              }),
              (p.WSPushMessage.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSPushMessage.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSPushMessage.prototype.writeTo = function (e) {
                e.writeInt32(0, this.ePushType),
                  e.writeInt64(1, this.iUri),
                  e.writeBytes(2, this.sMsg),
                  e.writeInt32(3, this.iProtocolType),
                  e.writeString(4, this.sGroupId),
                  e.writeInt64(5, this.lMsgId),
                  e.writeInt32(6, this.iMsgTag);
              }),
              (p.WSPushMessage.prototype.readFrom = function (e) {
                (this.ePushType = e.readInt32(0, !1, this.ePushType)),
                  (this.iUri = e.readInt64(1, !1, this.iUri)),
                  (this.sMsg = e.readBytes(2, !1, this.sMsg)),
                  (this.iProtocolType = e.readInt32(3, !1, this.iProtocolType)),
                  (this.sGroupId = e.readString(4, !1, this.sGroupId)),
                  (this.lMsgId = e.readInt64(5, !1, this.lMsgId)),
                  (this.iMsgTag = e.readInt32(6, !1, this.iMsgTag));
              }),
              (p.WSUserInfo = function () {
                (this.lUid = 0),
                  (this.bAnonymous = !0),
                  (this.sGuid = ''),
                  (this.sToken = ''),
                  (this.lTid = 0),
                  (this.lSid = 0),
                  (this.lGroupId = 0),
                  (this.lGroupType = 0),
                  (this.sAppId = ''),
                  (this.sUA = '');
              }),
              (p.WSUserInfo.prototype._clone = function () {
                return new p.WSUserInfo();
              }),
              (p.WSUserInfo.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSUserInfo.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSUserInfo.prototype.writeTo = function (e) {
                e.writeInt64(0, this.lUid),
                  e.writeBoolean(1, this.bAnonymous),
                  e.writeString(2, this.sGuid),
                  e.writeString(3, this.sToken),
                  e.writeInt64(4, this.lTid),
                  e.writeInt64(5, this.lSid),
                  e.writeInt64(6, this.lGroupId),
                  e.writeInt64(7, this.lGroupType),
                  e.writeString(8, this.sAppId),
                  e.writeString(9, this.sUA);
              }),
              (p.WSUserInfo.prototype.readFrom = function (e) {
                (this.lUid = e.readInt64(0, !1, this.lUid)),
                  (this.bAnonymous = e.readBoolean(1, !1, this.bAnonymous)),
                  (this.sGuid = e.readString(2, !1, this.sGuid)),
                  (this.sToken = e.readString(3, !1, this.sToken)),
                  (this.lTid = e.readInt64(4, !1, this.lTid)),
                  (this.lSid = e.readInt64(5, !1, this.lSid)),
                  (this.lGroupId = e.readInt64(6, !1, this.lGroupId)),
                  (this.lGroupType = e.readInt64(7, !1, this.lGroupType)),
                  (this.sAppId = e.readString(8, !1, this.sAppId)),
                  (this.sUA = e.readString(9, !1, this.sUA));
              }),
              (p.WSVerifyCookieReq = function () {
                (this.lUid = 0),
                  (this.sUA = ''),
                  (this.sCookie = ''),
                  (this.sGuid = ''),
                  (this.bAutoRegisterUid = 0),
                  (this.sAppSrc = '');
              }),
              (p.WSVerifyCookieReq.prototype._clone = function () {
                return new p.WSVerifyCookieReq();
              }),
              (p.WSVerifyCookieReq.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSVerifyCookieReq.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSVerifyCookieReq.prototype.writeTo = function (e) {
                e.writeInt64(0, this.lUid),
                  e.writeString(1, this.sUA),
                  e.writeString(2, this.sCookie),
                  e.writeString(3, this.sGuid),
                  e.writeInt32(4, this.bAutoRegisterUid),
                  e.writeString(5, this.sAppSrc);
              }),
              (p.WSVerifyCookieRsp = function () {
                this.iValidate = 0;
              }),
              (p.WSVerifyCookieRsp.prototype._clone = function () {
                return new p.WSVerifyCookieRsp();
              }),
              (p.WSVerifyCookieRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSVerifyCookieRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSVerifyCookieRsp.prototype.readFrom = function (e) {
                this.iValidate = e.readInt32(0, !1, this.iValidate);
              }),
              (p.UserId = function () {
                (this.lUid = 0),
                  (this.sGuid = ''),
                  (this.sToken = ''),
                  (this.sHuYaUA = ''),
                  (this.sCookie = ''),
                  (this.iTokenType = 0),
                  (this.sDeviceInfo = '');
              }),
              (p.UserId.prototype._clone = function () {
                return new p.UserId();
              }),
              (p.UserId.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.UserId.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.UserId.prototype.writeTo = function (e) {
                e.writeInt64(0, this.lUid),
                  e.writeString(1, this.sGuid),
                  e.writeString(2, this.sToken),
                  e.writeString(3, this.sHuYaUA),
                  e.writeString(4, this.sCookie),
                  e.writeInt32(5, this.iTokenType),
                  e.writeString(6, this.sDeviceInfo);
              }),
              (p.UserId.prototype.readFrom = function (e) {
                (this.lUid = e.readInt64(0, !1, this.lUid)),
                  (this.sGuid = e.readString(1, !1, this.sGuid)),
                  (this.sToken = e.readString(2, !1, this.sToken)),
                  (this.sHuYaUA = e.readString(3, !1, this.sHuYaUA)),
                  (this.sCookie = e.readString(4, !1, this.sCookie)),
                  (this.iTokenType = e.readInt32(5, !1, this.iTokenType)),
                  (this.sDeviceInfo = e.readString(6, !1, this.sDeviceInfo));
              }),
              (p.WSRegisterGroupReq = function () {
                (this.vGroupId = new d.Vector(new d.STRING())), (this.sToken = '');
              }),
              (p.WSRegisterGroupReq.prototype._clone = function () {
                return new p.WSRegisterGroupReq();
              }),
              (p.WSRegisterGroupReq.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSRegisterGroupReq.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSRegisterGroupReq.prototype.writeTo = function (e) {
                e.writeVector(0, this.vGroupId), e.writeString(1, this.sToken);
              }),
              (p.WSRegisterGroupRsp = function () {
                (this.iResCode = 0), (this.vSupportP2PGroupId = new d.Vector(new d.STRING()));
              }),
              (p.WSRegisterGroupRsp.prototype._clone = function () {
                return new p.WSRegisterGroupRsp();
              }),
              (p.WSRegisterGroupRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSRegisterGroupRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSRegisterGroupRsp.prototype.readFrom = function (e) {
                (this.iResCode = e.readInt32(0, !1, this.iResCode)),
                  (this.vSupportP2PGroupId = e.readVector(1, !1, this.vSupportP2PGroupId));
              }),
              (p.WSUpdateUserInfoReq = function () {
                (this.sAppSrc = ''),
                  (this.sGuid = ''),
                  (this.iReportMsgIdRatio = 0),
                  (this.iSupportAck = 0),
                  (this.tWSMsgStatInfo = new p.WSMsgStatInfo());
              }),
              (p.WSUpdateUserInfoReq.prototype._clone = function () {
                return new p.WSUpdateUserInfoReq();
              }),
              (p.WSUpdateUserInfoReq.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSUpdateUserInfoReq.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSUpdateUserInfoReq.prototype.writeTo = function (e) {
                e.writeString(0, this.sAppSrc),
                  e.writeString(1, this.sGuid),
                  e.writeInt32(2, this.iReportMsgIdRatio),
                  e.writeInt32(3, this.iSupportAck),
                  e.writeStruct(6, this.tWSMsgStatInfo);
              }),
              (p.WSUpdateUserInfoRsp = function () {
                (this.iResCode = 0), (this.iSupportAckMsgStat = 0);
              }),
              (p.WSUpdateUserInfoRsp.prototype._clone = function () {
                return new p.WSUpdateUserInfoRsp();
              }),
              (p.WSUpdateUserInfoRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSUpdateUserInfoRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSUpdateUserInfoRsp.prototype.readFrom = function (e) {
                (this.iResCode = e.readInt32(0, !1, this.iResCode)),
                  (this.iSupportAckMsgStat = e.readInt32(1, !1, this.iSupportAckMsgStat));
              }),
              (p.WSMsgStatInfo = function () {
                (this.mSignalPushUriCount = new d.Map(
                  new d.STRING(),
                  new d.Map(new d.INT64(), new d.INT32()),
                )),
                  (this.mP2pPushUriCount = new d.Map(
                    new d.STRING(),
                    new d.Map(new d.INT64(), new d.INT32()),
                  )),
                  (this.iSupportAckMsgStat = 0);
              }),
              (p.WSMsgStatInfo.prototype._clone = function () {
                return new p.WSMsgStatInfo();
              }),
              (p.WSMsgStatInfo.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSMsgStatInfo.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSMsgStatInfo.prototype.writeTo = function (e) {
                e.writeMap(0, this.mSignalPushUriCount),
                  e.writeMap(1, this.mP2pPushUriCount),
                  e.writeInt32(3, this.iSupportAckMsgStat);
              }),
              (p.WSMsgStatInfo.prototype.readFrom = function (e) {
                (this.mSignalPushUriCount = e.readMap(0, !1, this.mSignalPushUriCount)),
                  (this.mP2pPushUriCount = e.readMap(1, !1, this.mP2pPushUriCount)),
                  (this.iSupportAckMsgStat = e.readInt32(3, !1, this.iSupportAckMsgStat));
              }),
              (p.WSRedirect = function () {
                (this.vRemoveIps = new d.Vector(new d.STRING())), (this.sRedirectIp = '');
              }),
              (p.WSRedirect.prototype._clone = function () {
                return new p.WSRedirect();
              }),
              (p.WSRedirect.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSRedirect.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSRedirect.prototype.writeTo = function (e) {
                e.writeVector(0, this.vRemoveIps), e.writeString(1, this.sRedirectIp);
              }),
              (p.WSRedirect.prototype.readFrom = function (e) {
                (this.vRemoveIps = e.readVector(0, !1, this.vRemoveIps)),
                  (this.sRedirectIp = e.readString(1, !1, this.sRedirectIp));
              }),
              (p.WSPushMessage_V2 = function () {
                (this.sGroupId = ''), (this.vMsgItem = new d.Vector(new p.WSMsgItem()));
              }),
              (p.WSPushMessage_V2.prototype._clone = function () {
                return new p.WSPushMessage_V2();
              }),
              (p.WSPushMessage_V2.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSPushMessage_V2.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSPushMessage_V2.prototype.writeTo = function (e) {
                e.writeString(0, this.sGroupId), e.writeVector(1, this.vMsgItem);
              }),
              (p.WSPushMessage_V2.prototype.readFrom = function (e) {
                (this.sGroupId = e.readString(0, !1, this.sGroupId)),
                  (this.vMsgItem = e.readVector(1, !1, this.vMsgItem));
              }),
              (p.WSMsgItem = function () {
                (this.iUri = 0), (this.sMsg = new d.BinBuffer()), (this.lMsgId = 0);
              }),
              (p.WSMsgItem.prototype._clone = function () {
                return new p.WSMsgItem();
              }),
              (p.WSMsgItem.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSMsgItem.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSMsgItem.prototype.writeTo = function (e) {
                e.writeInt64(0, this.iUri),
                  e.writeBytes(1, this.sMsg),
                  e.writeInt64(2, this.lMsgId);
              }),
              (p.WSMsgItem.prototype.readFrom = function (e) {
                (this.iUri = e.readInt64(0, !1, this.iUri)),
                  (this.sMsg = e.readBytes(1, !1, this.sMsg)),
                  (this.lMsgId = e.readInt64(2, !1, this.lMsgId));
              }),
              (p.LiveLaunchReq = function () {
                (this.tId = new p.UserId()),
                  (this.tLiveUB = new p.LiveUserbase()),
                  (this.bSupportDomain = 0);
              }),
              (p.LiveLaunchReq.prototype._clone = function () {
                return new p.LiveLaunchReq();
              }),
              (p.LiveLaunchReq.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.LiveLaunchReq.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.LiveLaunchReq.prototype.writeTo = function (e) {
                e.writeStruct(0, this.tId),
                  e.writeStruct(1, this.tLiveUB),
                  e.writeInt32(2, this.bSupportDomain);
              }),
              (p.LiveLaunchRsp = function () {
                (this.sGuid = ''),
                  (this.iTime = 0),
                  (this.vProxyList = new d.Vector(new p.LiveProxyValue())),
                  (this.eAccess = 0),
                  (this.sClientIp = '');
              }),
              (p.LiveLaunchRsp.prototype._clone = function () {
                return new p.LiveLaunchRsp();
              }),
              (p.LiveLaunchRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.LiveLaunchRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.LiveLaunchRsp.prototype.readFrom = function (e) {
                (this.sGuid = e.readString(0, !1, this.sGuid)),
                  (this.iTime = e.readInt32(1, !1, this.iTime)),
                  (this.vProxyList = e.readVector(2, !1, this.vProxyList)),
                  (this.eAccess = e.readInt32(3, !1, this.eAccess)),
                  (this.sClientIp = e.readString(4, !1, this.sClientIp));
              }),
              (p.LiveProxyValue = function () {
                (this.eProxyType = 0), (this.sProxy = new d.Vector(new d.STRING()));
              }),
              (p.LiveProxyValue.prototype._clone = function () {
                return new p.LiveProxyValue();
              }),
              (p.LiveProxyValue.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.LiveProxyValue.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.LiveProxyValue.prototype.writeTo = function (e) {
                e.writeInt32(0, this.eProxyType), e.writeVector(1, this.sProxy);
              }),
              (p.LiveProxyValue.prototype.readFrom = function (e) {
                (this.eProxyType = e.readInt32(0, !1, this.eProxyType)),
                  (this.sProxy = e.readVector(1, !1, this.sProxy));
              }),
              (p.WSLaunchReq = function () {
                (this.lUid = 0),
                  (this.sGuid = ''),
                  (this.sUA = ''),
                  (this.sAppSrc = ''),
                  (this.tDeviceInfo = new p.WSDeviceInfo());
              }),
              (p.WSLaunchReq.prototype._clone = function () {
                return new p.WSLaunchReq();
              }),
              (p.WSLaunchReq.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSLaunchReq.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSLaunchReq.prototype.writeTo = function (e) {
                e.writeInt64(0, this.lUid),
                  e.writeString(1, this.sGuid),
                  e.writeString(2, this.sUA),
                  e.writeString(3, this.sAppSrc),
                  e.writeStruct(4, this.tDeviceInfo);
              }),
              (p.WSLaunchRsp = function () {
                (this.sGuid = ''), (this.sClientIp = '');
              }),
              (p.WSLaunchRsp.prototype._clone = function () {
                return new p.WSLaunchRsp();
              }),
              (p.WSLaunchRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSLaunchRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSLaunchRsp.prototype.readFrom = function (e) {
                (this.sGuid = e.readString(0, !1, this.sGuid)),
                  (this.sClientIp = e.readString(1, !1, this.sClientIp));
              }),
              (p.WSDeviceInfo = function () {
                (this.sIMEI = ''),
                  (this.sAPN = ''),
                  (this.sNetType = ''),
                  (this.sDeviceId = ''),
                  (this.sMId = '');
              }),
              (p.WSDeviceInfo.prototype._clone = function () {
                return new p.WSDeviceInfo();
              }),
              (p.WSDeviceInfo.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSDeviceInfo.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSDeviceInfo.prototype.writeTo = function (e) {
                e.writeString(0, this.sIMEI),
                  e.writeString(1, this.sAPN),
                  e.writeString(2, this.sNetType),
                  e.writeString(3, this.sDeviceId),
                  e.writeString(4, this.sMId);
              }),
              (p.WSDeviceInfo.prototype.readFrom = function (e) {
                (this.sIMEI = e.readString(0, !1, this.sIMEI)),
                  (this.sAPN = e.readString(1, !1, this.sAPN)),
                  (this.sNetType = e.readString(2, !1, this.sNetType)),
                  (this.sDeviceId = e.readString(3, !1, this.sDeviceId)),
                  (this.sMId = e.readString(4, !1, this.sMId));
              }),
              (p.QueryHttpDnsReq = function () {
                (this.lUid = 0),
                  (this.sUA = ''),
                  (this.vDomain = new d.Vector(new d.STRING())),
                  (this.sAppSrc = ''),
                  (this.sClientIp = ''),
                  (this.iIpStack = 0),
                  (this.iIpType = 0);
              }),
              (p.QueryHttpDnsReq.prototype._clone = function () {
                return new p.QueryHttpDnsReq();
              }),
              (p.QueryHttpDnsReq.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.QueryHttpDnsReq.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.QueryHttpDnsReq.prototype.writeTo = function (e) {
                e.writeInt64(0, this.lUid),
                  e.writeString(1, this.sUA),
                  e.writeVector(2, this.vDomain),
                  e.writeString(3, this.sAppSrc),
                  e.writeString(4, this.sClientIp),
                  e.writeInt32(5, this.iIpStack),
                  e.writeInt32(6, this.iIpType);
              }),
              (p.QueryHttpDnsRsp = function () {
                (this.mDomain2Ip = new d.Map(new d.STRING(), new p.HttpDnsItem())),
                  (this.iEnvType = 0);
              }),
              (p.QueryHttpDnsRsp.prototype._clone = function () {
                return new p.QueryHttpDnsRsp();
              }),
              (p.QueryHttpDnsRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.QueryHttpDnsRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.QueryHttpDnsRsp.prototype.readFrom = function (e) {
                (this.mDomain2Ip = e.readMap(0, !1, this.mDomain2Ip)),
                  (this.iEnvType = e.readInt32(1, !1, this.iEnvType));
              }),
              (p.HttpDnsItem = function () {
                (this.vIp = new d.Vector(new d.STRING())),
                  (this.iExpireTime = 0),
                  (this.vIpv6 = new d.Vector(new d.STRING()));
              }),
              (p.HttpDnsItem.prototype._clone = function () {
                return new p.HttpDnsItem();
              }),
              (p.HttpDnsItem.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.HttpDnsItem.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.HttpDnsItem.prototype.writeTo = function (e) {
                e.writeVector(0, this.vIp),
                  e.writeInt64(1, this.iExpireTime),
                  e.writeVector(2, this.vIpv6);
              }),
              (p.HttpDnsItem.prototype.readFrom = function (e) {
                (this.vIp = e.readVector(0, !1, this.vIp)),
                  (this.iExpireTime = e.readInt64(1, !1, this.iExpireTime)),
                  (this.vIpv6 = e.readVector(2, !1, this.vIpv6));
              }),
              (p.MetricDetailSet = function () {
                (this.tId = new p.UserId()),
                  (this.vMetricDetail = new d.Vector(new p.MetricDetail()));
              }),
              (p.MetricDetailSet.prototype._clone = function () {
                return new p.MetricDetailSet();
              }),
              (p.MetricDetailSet.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.MetricDetailSet.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.MetricDetailSet.prototype.writeTo = function (e) {
                e.writeStruct(0, this.tId), e.writeVector(1, this.vMetricDetail);
              }),
              (p.MetricDetailSet.prototype.readFrom = function (e) {
                (this.tId = e.readStruct(0, !0, this.tId)),
                  (this.vMetricDetail = e.readVector(1, !0, this.vMetricDetail));
              }),
              (p.MetricDetail = function () {
                (this.sMetricName = ''),
                  (this.iTS = 0),
                  (this.vDimension = new d.Vector(new p.Dimension())),
                  (this.vFiled = new d.Vector(new p.Field())),
                  (this.vExLog = new d.Vector(new p.Dimension()));
              }),
              (p.MetricDetail.prototype._clone = function () {
                return new p.MetricDetail();
              }),
              (p.MetricDetail.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.MetricDetail.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.MetricDetail.prototype.writeTo = function (e) {
                e.writeString(0, this.sMetricName),
                  e.writeInt64(1, this.iTS),
                  e.writeVector(2, this.vDimension),
                  e.writeVector(3, this.vFiled),
                  e.writeVector(4, this.vExLog);
              }),
              (p.MetricDetail.prototype.readFrom = function (e) {
                (this.sMetricName = e.readString(0, !0, this.sMetricName)),
                  (this.iTS = e.readInt64(1, !1, this.iTS)),
                  (this.vDimension = e.readVector(2, !1, this.vDimension)),
                  (this.vFiled = e.readVector(3, !1, this.vFiled)),
                  (this.vExLog = e.readVector(4, !1, this.vExLog));
              }),
              (p.Field = function () {
                (this.sName = ''), (this.fValue = 0);
              }),
              (p.Field.prototype._clone = function () {
                return new p.Field();
              }),
              (p.Field.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.Field.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.Field.prototype.writeTo = function (e) {
                e.writeString(0, this.sName), e.writeDouble(1, this.fValue);
              }),
              (p.Field.prototype.readFrom = function (e) {
                (this.sName = e.readString(0, !1, this.sName)),
                  (this.fValue = e.readDouble(1, !1, this.fValue));
              }),
              (p.Dimension = function () {
                (this.sName = ''), (this.sValue = '');
              }),
              (p.Dimension.prototype._clone = function () {
                return new p.Dimension();
              }),
              (p.Dimension.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.Dimension.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.Dimension.prototype.writeTo = function (e) {
                e.writeString(0, this.sName), e.writeString(1, this.sValue);
              }),
              (p.Dimension.prototype.readFrom = function (e) {
                (this.sName = e.readString(0, !1, this.sName)),
                  (this.sValue = e.readString(1, !1, this.sValue));
              }),
              (p.WSUnRegisterGroupReq = function () {
                this.vGroupId = new d.Vector(new d.STRING());
              }),
              (p.WSUnRegisterGroupReq.prototype._clone = function () {
                return new p.WSUnRegisterGroupReq();
              }),
              (p.WSUnRegisterGroupReq.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSUnRegisterGroupReq.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSUnRegisterGroupReq.prototype.writeTo = function (e) {
                e.writeVector(0, this.vGroupId);
              }),
              (p.WSUnRegisterGroupRsp = function () {
                this.iResCode = 0;
              }),
              (p.WSUnRegisterGroupRsp.prototype._clone = function () {
                return new p.WSUnRegisterGroupRsp();
              }),
              (p.WSUnRegisterGroupRsp.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSUnRegisterGroupRsp.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSUnRegisterGroupRsp.prototype.readFrom = function (e) {
                this.iResCode = e.readInt32(0, !1, this.iResCode);
              }),
              (p.WSConnectParaInfo = function () {
                (this.lUid = 0),
                  (this.sGuid = ''),
                  (this.sUA = ''),
                  (this.sAppSrc = ''),
                  (this.sMid = ''),
                  (this.sExp = ''),
                  (this.iTokenType = 0),
                  (this.sToken = ''),
                  (this.sCookie = ''),
                  (this.sTraceId = ''),
                  (this.mCustomHeaders = new d.Map(new d.STRING(), new d.STRING()));
              }),
              (p.WSConnectParaInfo.prototype._clone = function () {
                return new p.WSConnectParaInfo();
              }),
              (p.WSConnectParaInfo.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.WSConnectParaInfo.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.WSConnectParaInfo.prototype.writeTo = function (e) {
                e.writeInt64(0, this.lUid),
                  e.writeString(1, this.sGuid),
                  e.writeString(2, this.sUA),
                  e.writeString(3, this.sAppSrc),
                  e.writeString(4, this.sMid),
                  e.writeString(5, this.sExp),
                  e.writeInt32(6, this.iTokenType),
                  e.writeString(7, this.sToken),
                  e.writeString(8, this.sCookie),
                  e.writeString(9, this.sTraceId),
                  e.writeMap(10, this.mCustomHeaders);
              }),
              (p.WSConnectParaInfo.prototype.readFrom = function (e) {
                (this.lUid = e.readInt64(0, !1, this.lUid)),
                  (this.sGuid = e.readString(1, !1, this.sGuid)),
                  (this.sUA = e.readString(2, !1, this.sUA)),
                  (this.sAppSrc = e.readString(3, !1, this.sAppSrc)),
                  (this.sMid = e.readString(4, !1, this.sMid)),
                  (this.sExp = e.readString(5, !1, this.sExp)),
                  (this.iTokenType = e.readInt32(6, !1, this.iTokenType)),
                  (this.sToken = e.readString(7, !1, this.sToken)),
                  (this.sCookie = e.readString(8, !1, this.sCookie)),
                  (this.sTraceId = e.readString(9, !1, this.sTraceId)),
                  (this.mCustomHeaders = e.readMap(10, !1, this.mCustomHeaders));
              }),
              (p.CloudGamePacket = function () {
                (this.sToken = ''),
                  (this.sCommand = ''),
                  (this.packetBytes = new d.BinBuffer()),
                  (this.sRequestId = '');
              }),
              (p.CloudGamePacket.prototype._clone = function () {
                return new p.CloudGamePacket();
              }),
              (p.CloudGamePacket.prototype._write = function (e, t, i) {
                e.writeStruct(t, i);
              }),
              (p.CloudGamePacket.prototype._read = function (e, t, i) {
                return e.readStruct(t, !0, i);
              }),
              (p.CloudGamePacket.prototype.writeTo = function (e) {
                e.writeString(0, this.sToken),
                  e.writeString(1, this.sCommand),
                  e.writeBytes(2, this.packetBytes),
                  e.writeString(3, this.sRequestId);
              }),
              (p.CloudGamePacket.prototype.readFrom = function (e) {
                (this.sToken = e.readString(0, !1, this.sToken)),
                  (this.sCommand = e.readString(1, !1, this.sCommand)),
                  (this.packetBytes = e.readBytes(2, !1, this.packetBytes)),
                  (this.sRequestId = e.readString(3, !1, this.sRequestId));
              });
            var f = -10092,
              m = -10504,
              _ = -20001,
              v = -20002,
              y = {
                storeDns: function (e, t) {
                  for (
                    var i = '',
                      s = this.getIpsKey(!0),
                      r = e.join('|').toLocaleLowerCase(),
                      a = 0,
                      n = r.length;
                    a < n;
                    a++
                  ) {
                    var o = s[r.charAt(a)],
                      h = (Math.random() * o.length) >> 0;
                    i += o.charAt(h);
                  }
                  localStorage['wssdns'.concat(t)] = i;
                },
                getDns: function (e) {
                  var t = localStorage['wssdns'.concat(e)];
                  if (!t) return [];
                  for (var i = '', s = this.getIpsKey(!1), r = 0, a = t.length; r < a; r++)
                    i += s[t.charAt(r)];
                  return i.split('|');
                },
                storeIps: function (e, t) {
                  for (
                    var i = '',
                      s = this.getIpsKey(!0),
                      r = e.join('|').toLocaleLowerCase(),
                      a = 0,
                      n = r.length;
                    a < n;
                    a++
                  ) {
                    var o = s[r.charAt(a)],
                      h = (Math.random() * o.length) >> 0;
                    i += o.charAt(h);
                  }
                  localStorage['wssips'.concat(t)] = i;
                },
                getIps: function (e) {
                  var t = localStorage['wssips'.concat(e)];
                  if (!t) return [];
                  for (var i = '', s = this.getIpsKey(!1), r = 0, a = t.length; r < a; r++)
                    i += s[t.charAt(r)];
                  return i.split('|');
                },
                getIpsKey: function (e) {
                  for (
                    var t = ['-', '.', ':', '|'],
                      i =
                        '_N1Y%/ny^6?Mi7|wCe#$VmT=.GBut]3L*f<acX2Eop>d}WqKPQ@r;zx!s`(:IHFRZ~[A{Jb-O&D)v0Ukj95,8lg+h4S',
                      s = {},
                      r = 0;
                    r < 40;
                    r++
                  ) {
                    var a = r < 11 ? 3 : 2,
                      n = i.substr(0, a);
                    i = i.substr(a);
                    var o = r + '';
                    if ((13 < r ? (o = String.fromCharCode(r + 83)) : 9 < r && (o = t[r - 10]), e))
                      s[o] = n;
                    else for (var h = 0; h < n.length; h++) s[n.charAt(h)] = o;
                  }
                  return s;
                },
                getQueryString: function (e) {
                  var t = new RegExp('(^|&)' + e + '=([^&]*)(&|$)'),
                    i = window.location.search.substr(1).match(t);
                  return null != i ? unescape(i[2]) : null;
                },
                parseQueryString: function (e) {
                  for (var t = /([^\?\=\&]+)\=([^\?\=\&]*)/g, i = {}; t.exec(e); )
                    i[RegExp.$1] = RegExp.$2;
                  return i;
                },
                ab2str: function (e, t) {
                  for (var i = new DataView(e), s = i.byteLength, r = 0, a = [], n = 0; n < s; n++)
                    a.push(String.fromCharCode(i.getUint8(r++)));
                  var o = a.join('');
                  if (t)
                    try {
                      o = decodeURIComponent(escape(o));
                    } catch (e) {}
                  return o;
                },
                copy: function (e, t) {
                  for (var i in t) e[i] = t[i];
                  return e;
                },
              },
              S = {};
            (S.UriMapping = a({}, S.UriMapping, { 1025305: p.WSRedirect })),
              (S.WupMapping = a({}, S.WupMapping, {
                wsLaunch: p.WSLaunchRsp,
                queryHttpDns: p.QueryHttpDnsRsp,
              }));
            var g = 99;
            function T(e, t) {
              var i = e.toString().length,
                s = Math.max(0, t - i);
              return '0'.repeat(s) + e;
            }
            function E() {
              var e = new Date(),
                t = e.getFullYear(),
                i = T(e.getMonth() + 1, 2),
                s = T(e.getDate(), 2),
                r = T(e.getHours(), 2),
                a = T(e.getMinutes(), 2),
                n = T(e.getSeconds(), 2),
                o = T(e.getMilliseconds(), 3);
              return ''
                .concat(t, '-')
                .concat(i, '-')
                .concat(s, ' ')
                .concat(r, ':')
                .concat(a, ':')
                .concat(n, '.')
                .concat(o, ' ');
            }
            var C = {
                _data: [],
                _length: 0,
                init: function () {
                  var e = Number(localStorage._logLevel);
                  isNaN(e) || (g = e);
                },
                debug: function () {
                  var e = E(),
                    t = Array.prototype.slice.call(arguments);
                  (t[0] = e + t[0]), g <= -1 && console.log.apply(console, t);
                },
                log: function (e) {
                  var t = E(),
                    i = Array.prototype.slice.call(arguments);
                  (i[0] = t + i[0]), g <= 0 && console.log.apply(console, i), C.record(i, 'log');
                },
                info: function (e) {
                  var t = E(),
                    i = Array.prototype.slice.call(arguments);
                  (i[0] = t + i[0]), g <= 1 && console.info.apply(console, i), C.record(i, 'info');
                },
                warn: function (e) {
                  var t = E(),
                    i = Array.prototype.slice.call(arguments);
                  (i[0] = t + i[0]), g <= 2 && console.warn.apply(console, i), C.record(i, 'warn');
                },
                error: function (e) {
                  var t = E(),
                    i = Array.prototype.slice.call(arguments);
                  (i[0] = t + i[0]),
                    g <= 3 && console.error.apply(console, i),
                    C.record(i, 'error');
                },
                group: function (e) {
                  var t = E(),
                    i = Array.prototype.slice.call(arguments);
                  (i[0] = t + i[0]),
                    g <= 1 &&
                      (console.groupCollapsed || console.group || console.log).apply(console, i),
                    C.record(i, 'group');
                },
                groupEnd: function () {
                  console.groupEnd && console.groupEnd.apply(console);
                },
                setLevel: function (e) {
                  e != g && (console.log(E() + ' set log level from ' + g + ' to ' + e), (g = e));
                },
                getLevel: function () {
                  return g;
                },
                record: function (t, i) {
                  1100 === C._length && (C._data.splice(0, 100), (C._length = 1e3));
                  var s = 0,
                    r = (t.shift() || '').toString();
                  for (
                    r = r.replace(/\%c/gi, function (e, t) {
                      return s++, '';
                    });
                    s-- && t.length;

                  )
                    t.shift();
                  for (var a = 0, n = t.length; a < n; a++) 'object' == e(t[a]) && (t[a] = '');
                  t.unshift(r);
                  var o = t.join(' ');
                  C._length++, C._data.push('['.concat(i, ']').concat(o));
                },
                getLog: function () {
                  return C._data;
                },
                logcss: function (e) {
                  return 'color:' + e + ';font-weight:900';
                },
              },
              D = {
                WEBSOCKET_CONNECTED: 'WEBSOCKET_CONNECTED',
                WEBSOCKET_DOLAUNCH: 'WEBSOCKET_DOLAUNCH',
                VERIFYCOOKIE_PASS: 'VERIFYCOOKIE_PASS',
                WS_REGISTER_GROUP_RSP: 'WS_REGISTER_GROUP_RSP',
                WS_UNREGISTER_GROUP_RSP: 'WS_UNREGISTER_GROUP_RSP',
                WS_CONNET_STATE: 'WS_CONNET_STATE',
                WS_URI_NOTICE: 'WS_URI_NOTICE',
                EXT_TAF_DATA: 'extTafData',
                CLOUD_GAME_DATA: 'CLOUD_GAME_DATA',
              },
              P = {
                setCookie: function (e, t, i, s, r) {
                  var a = new Date();
                  a.setTime(a.getTime() + 24 * i * 60 * 60 * 1e3);
                  var n = e + '=' + t + '; expires=' + a.toUTCString();
                  s && (n += '; domain=' + s), r && (n += '; path=' + r), (document.cookie = n);
                },
                getCookie: function (e) {
                  for (
                    var t = e + '=', i = document.cookie.split(';'), s = 0, r = i.length;
                    s < r;
                    s++
                  ) {
                    var a = i[s].trim();
                    if (0 == a.indexOf(t)) return a.substr(t.length);
                  }
                  return '';
                },
                clearCookie: function (e) {
                  setCookie(e, '', -1);
                },
              },
              A = (function () {
                function e() {
                  t(this, e),
                    (this.list = []),
                    (this.tickHandler = 0),
                    (this.trytime = u.config.tryCime || 8);
                }
                return (
                  s(e, [
                    {
                      key: 'add',
                      value: function (e) {
                        -1 != e.id &&
                          ((e.trycount = 1),
                          (e.time = 0),
                          (e.paramlist = e.paramlist || [
                            e.moduleName,
                            e.funcName,
                            e.data,
                            e.id,
                            e.callbackFun,
                          ]),
                          this.list.push(e),
                          this.turnOn());
                      },
                    },
                    {
                      key: 'getCallBack',
                      value: function (e) {
                        for (var t in this.list)
                          if (this.list[t].id == e) return this.list[t].callbackFun;
                        return null;
                      },
                    },
                    {
                      key: 'del',
                      value: function (e) {
                        if (-1 != e)
                          for (var t in this.list)
                            if (this.list[t].id == e) {
                              this.list.splice(t, 1);
                              break;
                            }
                      },
                    },
                    {
                      key: 'getDataById',
                      value: function (e) {
                        for (var t in this.list) if (this.list[t].id == e) return this.list[t];
                        return null;
                      },
                    },
                    {
                      key: 'loop',
                      value: function () {
                        var e = [];
                        for (var t in this.list) {
                          var i = this.list[t];
                          if (i.time < this.trytime) i.time++;
                          else if ((i.trycount++, (i.time = 0), i.trycount > i.tryCountMax))
                            i.errFun(i.id, i.funcName, i.callbackFun), e.push(i.id);
                          else {
                            var s = i.paramlist;
                            i.reSend && i.reSend.apply(this, s),
                              u.report.setDim(i.id, 'trycount', i.trycount);
                          }
                        }
                        for (var r in e) this.del(e[r]);
                        0 == this.list.length && this.turnOff();
                      },
                    },
                    {
                      key: 'turnOn',
                      value: function () {
                        var e = this;
                        0 == this.tickHandler &&
                          (this.tickHandler = setInterval(function () {
                            e.loop();
                          }, 1e3));
                      },
                    },
                    {
                      key: 'turnOff',
                      value: function () {
                        clearInterval(this.tickHandler), (this.tickHandler = 0);
                      },
                    },
                  ]),
                  e
                );
              })(),
              I = {},
              k = null,
              R = {},
              O = {
                addEvent: function (e, t) {
                  return (
                    void 0 === I[e] && (I[e] = []), 'function' == typeof t && I[e].push(t), this
                  );
                },
                removeEvent: function (e, t) {
                  if (null != e && e === k)
                    return void 0 === R[e] && (R[e] = []), R[e].push(t), this;
                  var i = I[e];
                  if (i instanceof Array)
                    if ('function' == typeof t) {
                      for (var s = 0, r = i.length; s < r; s++)
                        if (i[s] === t) {
                          i.splice(s, 1);
                          break;
                        }
                      0 == i.length && delete I[e];
                    } else null == t && delete I[e];
                  return this;
                },
                fireEvent: function (e, t) {
                  var i = I[(k = e)];
                  if (i instanceof Array)
                    for (var s = 0, r = i.length; s < r; s++) 'function' == typeof i[s] && i[s](t);
                  if (((k = null), (i = R[e]) instanceof Array)) {
                    for (s = 0, r = i.length; s < r; s++) this.removeEvent(e, i[s]);
                    delete R[e];
                  }
                  return this;
                },
                hasListener: function (e, t) {
                  if (!e) return !1;
                  var i = I[e];
                  if (i instanceof Array)
                    if ('function' == typeof t) {
                      for (var s = 0, r = i.length; s < r; s++) if (i[s] === t) return !0;
                    } else if (null == t && 0 < i.length) return !0;
                  return !1;
                },
              },
              b = (function () {
                function e() {
                  t(this, e),
                    (this.index = 0),
                    (this.MAX_MESSAGE_COUNT = 1e3),
                    (this.cacheArr = []);
                }
                return (
                  s(e, [
                    {
                      key: 'cache',
                      value: function (e) {
                        var t = this.cacheArr.indexOf(e);
                        return (
                          this.index >= this.MAX_MESSAGE_COUNT && (this.index = 0),
                          (this.cacheArr[this.index] = e),
                          this.index++,
                          -1 != t
                        );
                      },
                    },
                  ]),
                  e
                );
              })(),
              w = (function () {
                function i() {
                  var e = this,
                    s = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : {};
                  t(this, i),
                    (this.DEBUG_IP = s.DEBUG_IP || 'testws.va.huya.com:80'),
                    (this.DEFAULT_IP = s.DEFAULT_IP || 'ws.api.huya.com'),
                    (this.CDN_IP = s.CDN_IP || 'cdnws.api.huya.com'),
                    (this.WSS_DEBUG_IP = s.WSS_DEBUG_IP || 'testws.va.huya.com:443'),
                    (this.WSS_DEFAULT_IP = s.WSS_DEFAULT_IP || 'wsapi.huya.com'),
                    (this.WSS_CDN_IP = s.WSS_CDN_IP || 'cdnws.api.huya.com'),
                    (this.HTTP_IP = s.HTTP_IP || 'cdnws.api.huya.com'),
                    (this.HTTP_DEBUG_IP = s.HTTP_DEBUG_IP || 'testws.va.huya.com'),
                    (this.STORE_DNS = this.WSS_CDN_IP),
                    (this.connected = !1),
                    (this.ws = null),
                    (this.url = ''),
                    (this.wsType = s.wsType || 0),
                    (this.listeners = {}),
                    (this.lockType = null),
                    (this.delayRemove = {}),
                    (this._pingTimer = 0),
                    (this.isDoLaunch = !1),
                    (this.isHttps = -1 < location.protocol.indexOf('https')),
                    (this.baseinfo = '?baseinfo=default'),
                    (this.wsBaseInfo = '?baseinfo=default'),
                    (this.extTafFunNameList = []),
                    (this.wsProtocol = !u.ISDEBUG || this.isHttps ? 'wss://' : 'ws://'),
                    (this.connectType = s.connectType || 0),
                    (this.wsConnectTime = 0),
                    (this.reConnectTimes = 0),
                    (this.reconnectDecay = 1.5),
                    (this.maxReconnectInterval = 3e4),
                    (this.reconnectInterval = 1e3),
                    (this.reconnectTimeId = 0),
                    (this.reconnectMax = 120),
                    (this.cloudGameIpList = []),
                    (this.signalCache = new b()),
                    (this.wsurl = ''),
                    (this.wsIps = []),
                    (this.httpWs = []),
                    (this.wsBaseInfo = this.setBaseinfo(!1, '')),
                    (this.retry = new A()),
                    1 != this.connectType &&
                      (C.log('configs', s),
                      C.log('G', u),
                      s.isForeign &&
                        ((this.WSS_DEBUG_IP = s.WSS_DEBUG_IP || 'testws.master.live:443'),
                        (this.WSS_DEFAULT_IP = s.WSS_DEFAULT_IP || 'wsapi.nimo.tv'),
                        (this.WSS_CDN_IP = s.WSS_CDN_IP || 'wsapi-global.nimo.tv'),
                        (this.HTTP_IP = s.HTTP_IP || 'wsapi.nimo.tv'),
                        (this.HTTP_DEBUG_IP = s.HTTP_DEBUG_IP || 'testws.master.live'),
                        (this.STORE_DNS = this.WSS_DEFAULT_IP),
                        C.log('======', this.WSS_DEBUG_IP)),
                      O.addEvent('1025305', function (t) {
                        e.onWSRedirect(t);
                      }));
                }
                return (
                  s(i, [
                    {
                      key: 'start',
                      value: function () {
                        (this.wsConnectTime = Date.now()),
                          (this._testws = localStorage._testws),
                          (this._testws && '' != this._testws) || u.ISDEBUG
                            ? this.connecting()
                            : this.testWsIp(),
                          setTimeout(
                            function () {
                              this.wsIps.unshift(u.ISDEBUG ? this.CDN_IP : this.WSS_CDN_IP),
                                this.connecting();
                            }.bind(this),
                            5e3,
                          );
                      },
                    },
                    {
                      key: 'testWsIp',
                      value: function (e) {
                        var t;
                        e && 0 < e.length
                          ? (t = e)
                          : u.ISDEBUG
                          ? ((t = y.getIps(this.connectType)), delete localStorage.wssips)
                          : ((t = y.getDns(this.connectType)), delete localStorage.wssdns);
                        var i = t.length;
                        0 == i && this.connecting();
                        for (
                          var s = !1,
                            r = [],
                            a = function (e) {
                              var t = e.currentTarget,
                                i = t.ip;
                              (t.onopen = t.onclose = t.onerror = void 0),
                                s
                                  ? (this.wsIps.push(i), t.close())
                                  : ((s = !0),
                                    (this.url = this.wsProtocol + i),
                                    this.connecting(t),
                                    this.onopen());
                            },
                            n = function (e) {
                              var t = e.currentTarget.ip;
                              -1 == r.indexOf(t) && r.push(t),
                                r.length != i || s || 1 == this.connectType || this.connecting();
                            },
                            o = 0;
                          o < i;
                          o++
                        ) {
                          var h = t[o],
                            d = this.wsProtocol + h + this.wsBaseInfo;
                          C.log('WebSocket', d);
                          var c = new WebSocket(d);
                          (c.ip = h),
                            (c.onopen = a.bind(this)),
                            (c.onclose = n.bind(this)),
                            (c.onerror = n.bind(this));
                        }
                      },
                    },
                    {
                      key: 'connecting',
                      value: function (e) {
                        if (!this.connected) {
                          if ((C.log('connecting'), this.ws)) {
                            this.releaseWs(this.ws);
                            var t = this.url.replace(this.wsProtocol, '');
                            1 == this.wsType
                              ? this.wsIps.push(t)
                              : 2 == this.wsType && this.httpWs.push(t);
                          }
                          if (e) (this.ws = e), (this.wsType = 1);
                          else {
                            var i = '',
                              s = localStorage._testws;
                            s && '' != s
                              ? ((this.wsType = 3), (i = s))
                              : ((this.wsType = 0),
                                (i = u.ISDEBUG ? this.DEFAULT_IP : this.WSS_DEFAULT_IP),
                                u.report.setCommonDim('iptype', 2),
                                u.ISDEBUG
                                  ? ((this.wsType = 4),
                                    (i = this.isHttps ? this.WSS_DEBUG_IP : this.DEBUG_IP),
                                    u.report.setCommonDim('iptype', 1))
                                  : 0 < this.wsIps.length
                                  ? ((this.wsType = 1),
                                    (i = this.wsIps.shift()),
                                    this.WSS_CDN_IP == i
                                      ? u.report.setCommonDim('iptype', 5)
                                      : u.report.setCommonDim('iptype', 4))
                                  : 0 < this.httpWs.length &&
                                    ((this.wsType = 2), (i = this.httpWs.shift()))),
                              (this.url = this.wsProtocol + i),
                              C.log('WebSocket,connet', this.url + this.wsBaseInfo),
                              (this.ws = new WebSocket(this.url + this.wsBaseInfo));
                          }
                          (this.ws.onopen = this.onopen.bind(this)),
                            (this.ws.onclose = this.onclose.bind(this)),
                            (this.ws.onerror = this.onerror.bind(this)),
                            (this.ws.onmessage = this.onmessage.bind(this));
                        }
                      },
                    },
                    {
                      key: 'releaseWs',
                      value: function (e) {
                        if (e) {
                          C.log('===== releaseWs =====', e),
                            clearInterval(this._pingTimer),
                            (this._pingTimer = 0),
                            (e.onopen = e.onclose = e.onerror = e.onmessage = void 0);
                          try {
                            e.close();
                          } catch (e) {}
                        }
                      },
                    },
                    {
                      key: 'doLaunch',
                      value: function () {
                        if (!this.isDoLaunch) {
                          this.isDoLaunch = !0;
                          var e = new p.WSLaunchReq();
                          (e.lUid = u.uid),
                            (e.sGuid = u.guid),
                            (e.sUA = u.ua),
                            (e.sAppSrc = u.appSrc),
                            this.sendWup('launch', 'wsLaunch', e, this.onDoLaunch.bind(this));
                        }
                      },
                    },
                    {
                      key: 'onDoLaunch',
                      value: function (e) {
                        u.guid != e.sGuid &&
                          ((u.guid = e.sGuid),
                          (u.userId.sGuid = u.guid),
                          this.sendWSUpdateUserInfoReq('', e.sGuid));
                        var t = u.config.domain || '';
                        P.setCookie('guid', e.sGuid, 365, t, '/'),
                          this.queryHttpDns(),
                          O.fireEvent(D.WEBSOCKET_DOLAUNCH, { guid: u.guid });
                      },
                    },
                    {
                      key: 'queryHttpDns',
                      value: function () {
                        var e,
                          t = this,
                          i = new p.QueryHttpDnsReq();
                        (i.lUid = u.uid), (i.sUA = u.ua), (i.sAppSrc = u.appSrc), (i.iIpType = 1);
                        var s = [this.STORE_DNS];
                        (e = i.vDomain.value).push.apply(e, s),
                          this.sendWupHttp('launch', 'queryHttpDns', i, -1, function (e) {
                            t.onGueryHttpDns(e);
                          });
                      },
                    },
                    {
                      key: 'onGueryHttpDns',
                      value: function (e) {
                        if (!u.ISDEBUG)
                          for (var t in e.mDomain2Ip.value)
                            if (t == this.STORE_DNS) {
                              var i = e.mDomain2Ip.value[t].vIp.value;
                              y.storeDns(i, this.connectType);
                              break;
                            }
                      },
                    },
                    {
                      key: 'send',
                      value: function (e) {
                        this.ws && this.connected && this.ws.send(e);
                      },
                    },
                    {
                      key: 'onopen',
                      value: function () {
                        var e = this;
                        (this.wsurl = this.url.replace(this.wsProtocol, '')),
                          this.connected ||
                            0 != this.reConnectTimes ||
                            (this.wsConnectTime = Date.now() - this.wsConnectTime),
                          C.log('onopen', this.wsurl),
                          (this.connected = !0),
                          O.fireEvent(D.WEBSOCKET_CONNECTED, { type: this.connectType }),
                          O.fireEvent(D.WS_CONNET_STATE, {
                            connected: this.connected,
                            type: 'open',
                            connectType: this.connectType,
                          }),
                          clearInterval(this._pingTimer),
                          (this._pingTimer = setInterval(function () {
                            e.sendHeartBeat();
                          }, 6e4)),
                          (this.reConnectTimes = 0),
                          clearTimeout(this.reconnectTimeId),
                          1 != this.connectType && (this.doLaunch(), this.sendVerifyCookie());
                      },
                    },
                    {
                      key: 'onclose',
                      value: function (e) {
                        var t = this;
                        if (
                          ((this.connected = !1),
                          (this.isDoLaunch = !1),
                          O.fireEvent(D.WS_CONNET_STATE, {
                            connected: this.connected,
                            type: 'close',
                            code: e.code,
                            reason: e.reason,
                            connectType: this.connectType,
                          }),
                          this.reConnectTimes++,
                          this.reConnectTimes > this.reconnectMax)
                        )
                          C.log('%c=== WebSocket重连次数超标 ===', 'font-size:120%');
                        else {
                          1 == this.connectType && (this.reconnectDecay = 0.1);
                          var i =
                            this.reconnectInterval *
                            Math.pow(this.reconnectDecay, this.reConnectTimes);
                          clearTimeout(this.reconnectTimeId),
                            (this.reconnectTimeId = setTimeout(
                              function () {
                                t.reconnect(!0),
                                  C.log(
                                    '%c=== WebSocket 重连' + t.reConnectTimes + '===' + t.wsurl,
                                    'font-size:120%',
                                  );
                              },
                              i > this.maxReconnectInterval ? this.maxReconnectInterval : i,
                            ));
                        }
                      },
                    },
                    {
                      key: 'reconnetWS',
                      value: function () {
                        this.wsconnected ||
                          ((this.reConnectTimes = 0), (this.isDoLaunch = !1), this.connecting());
                      },
                    },
                    {
                      key: 'onerror',
                      value: function (e) {
                        (this.connected = !1),
                          O.fireEvent(D.WS_CONNET_STATE, {
                            connected: this.connected,
                            type: 'error',
                            connectType: this.connectType,
                          }),
                          C.log('%c=== WebSocket Error ===', 'font-size:120%', e);
                      },
                    },
                    {
                      key: 'sendHeartBeat',
                      value: function () {
                        var e = new p.WebSocketCommand();
                        e.iCmdType = p.EWebSocketCommandType.EWSCmdC2S_HeartBeatReq;
                        var t = new d.JceOutputStream();
                        e.writeTo(t), this.send(t.getBuffer());
                      },
                    },
                    {
                      key: 'onmessage',
                      value: function (e) {
                        var t = this,
                          i = new FileReader();
                        (i.onload = function () {
                          t.decodeTaf(i);
                        }),
                          i.readAsArrayBuffer(e.data);
                      },
                    },
                    {
                      key: 'decodeTaf',
                      value: function (e) {
                        var t = e.result;
                        1 < localStorage.__wup && d.Util.jcestream(t, 32);
                        var i = new d.JceInputStream(t),
                          s = new p.WebSocketCommand();
                        switch ((s.readFrom(i), s.iCmdType)) {
                          case p.EWebSocketCommandType.EWSCmd_RegisterRsp:
                            i = new d.JceInputStream(s.vData.buffer);
                            var r = new p.WSRegisterRsp();
                            r.readFrom(i), O.fireEvent('WSRegisterRsp', r);
                            break;
                          case p.EWebSocketCommandType.EWSCmdS2C_RegisterGroupRsp:
                            i = new d.JceInputStream(s.vData.buffer);
                            var a = new p.WSRegisterGroupRsp();
                            a.readFrom(i),
                              C.log(
                                '%c<<<<<<< %crspregisterGroup',
                                C.logcss('#0000E3'),
                                C.logcss('#D9006C'),
                                a,
                              ),
                              O.fireEvent(D.WS_REGISTER_GROUP_RSP, a),
                              this.retry.del('group');
                            break;
                          case p.EWebSocketCommandType.EWSCmdS2C_UnRegisterGroupRsp:
                            i = new d.JceInputStream(s.vData.buffer);
                            var n = new p.WSUnRegisterGroupRsp();
                            n.readFrom(i),
                              C.log(
                                '%c<<<<<<< %crspunRegisterGroup',
                                C.logcss('#0000E3'),
                                C.logcss('#D9006C'),
                                n,
                              ),
                              O.fireEvent(D.WS_UNREGISTER_GROUP_RSP, n);
                            break;
                          case p.EWebSocketCommandType.EWSCmd_WupRsp:
                            var o = new d.Wup();
                            o.decode(s.vData.buffer);
                            var h = -1,
                              c = !1;
                            try {
                              h = o.readInt32('');
                            } catch (e) {
                              (c = !0), C.log('获取返回值失败', e);
                            }
                            var l = o.iRequestId,
                              f = o.sFuncName,
                              _ = o.sServantName;
                            u.report.setField(l, 'hysignal_response'),
                              u.report.setDim(l, 'retcode', h),
                              h < 0
                                ? u.report.setDim(l, 'success', 2)
                                : u.report.setDim(l, 'success', 0),
                              u.report.setField(l, 'decode_response_begin'),
                              u.report.setField(l, 'unipacket_decode_begin'),
                              u.report.setField(l, 'unipacket_decode_end'),
                              this.fireExtTafData(0, f, s.vData.buffer);
                            var y = S.WupMapping[f],
                              g = this.retry.getCallBack(l),
                              T = { id: l, fn: f, cb: g };
                            if (y) {
                              var E = new y();
                              E.bcode = h;
                              try {
                                if (0 <= h) {
                                  var P = 3 == o.iVersion ? o.newdata : o.data,
                                    A = this.getWupKey(P, c);
                                  u.report.setField(l, 'unipacket_read_rsp_end'),
                                    'noKey' != A && o.readStruct(A, E, y);
                                }
                              } catch (e) {
                                return (
                                  C.log('ConstEnum.SIGNAL_ERROR_READ_ERROR', e),
                                  (T.code = m),
                                  void this.reportError(T)
                                );
                              }
                              u.report.setField(l, 'decode_response_end'),
                                0 < l && (E.iRequestId = l),
                                C.log(
                                  '%c<<<<<<< %crspWup:%c ' + f,
                                  C.logcss('#0000E3'),
                                  C.logcss('black'),
                                  C.logcss('#0000E3'),
                                  _,
                                  E,
                                ),
                                u.report.setField(l, 'join_dispatcher_thread'),
                                u.report.setField(l, 'dispatcher_thread_execute_time'),
                                (E.sdkcode = 0),
                                O.fireEvent(0 < l ? f + l : f, E);
                            } else
                              g && g({ sdkcode: v, bcode: h }),
                                u.report.clearData(l),
                                this.retry.del(l);
                            break;
                          case p.EWebSocketCommandType.EWSCmdS2C_MsgPushReq:
                            (i = new d.JceInputStream(s.vData.buffer)),
                              (N = new p.WSPushMessage()).readFrom(i);
                            var I = N.iUri,
                              k = N.lMsgId,
                              R = N.sGroupId,
                              b = this.signalCache.cache(k);
                            if (k && b) return void C.log('重复的消息id', k, R);
                            i = new d.JceInputStream(N.sMsg.buffer);
                            var w = S.UriMapping[N.iUri];
                            if (w) {
                              var L = new w();
                              L.readFrom(i),
                                C.log(
                                  '%c<<<<<<< %crspMsgPush, %curi=' + I,
                                  C.logcss('#0000E3'),
                                  C.logcss('black'),
                                  C.logcss('#8600FF'),
                                  L,
                                ),
                                O.fireEvent(I, L);
                            } else C.log('收到未映射的 WSPushMessage，uri=' + N.iUri);
                            O.fireEvent('origin:' + I, {
                              data: N.sMsg.buffer,
                              groupId: R,
                              connectType: this.connectType,
                            }),
                              O.fireEvent(D.WS_URI_NOTICE, {
                                uri: I,
                                data: N.sMsg.buffer,
                                groupId: R,
                                connectType: this.connectType,
                              }),
                              this.fireExtTafData(I, '', N.sMsg.buffer);
                            break;
                          case p.EWebSocketCommandType.EWSCmdS2C_HeartBeatRsp:
                            break;
                          case p.EWebSocketCommandType.EWSCmdS2C_VerifyCookieRsp:
                            i = new d.JceInputStream(s.vData.buffer);
                            var M = new p.WSVerifyCookieRsp();
                            M.readFrom(i);
                            var V = 0 == M.iValidate;
                            O.fireEvent(D.VERIFYCOOKIE_PASS, V),
                              C.log('VerifyCookie校验' + (V ? '通过！' : '失败！'));
                            break;
                          case p.EWebSocketCommandType.EWSCmdS2C_MsgPushReq_V2:
                            var N;
                            (i = new d.JceInputStream(s.vData.buffer)),
                              (N = new p.WSPushMessage_V2()).readFrom(i);
                            for (var F = 0, B = N.vMsgItem.value.length; F < B; F++) {
                              var U = N.vMsgItem.value[F],
                                x = U.iUri,
                                H = U.lMsgId,
                                W = S.UriMapping[x],
                                G = N.sGroupId,
                                j = this.signalCache.cache(H);
                              if (H && j) C.log('重复的消息id', H, G);
                              else if (
                                (O.fireEvent('origin:' + x, {
                                  data: U.sMsg.buffer,
                                  groupId: G,
                                  connectType: this.connectType,
                                }),
                                O.fireEvent(D.WS_URI_NOTICE, {
                                  uri: x,
                                  data: U.sMsg.buffer,
                                  groupId: G,
                                  connectType: this.connectType,
                                }),
                                this.fireExtTafData(x, '', U.sMsg.buffer),
                                W)
                              ) {
                                var Y = new W(),
                                  q = new d.JceInputStream(U.sMsg);
                                Y.readFrom(q),
                                  C.log(
                                    '%c<<<<<<< %crspMsgPushV2, %curi=' + x,
                                    C.logcss('#0000E3'),
                                    C.logcss('black'),
                                    C.logcss('#8600FF'),
                                    Y,
                                  ),
                                  O.fireEvent(x, Y);
                              } else C.log('收到未映射的 WSPushMessage_V2 uri=' + x);
                            }
                            break;
                          case p.EWebSocketCommandType.EWSCmdS2C_CloudGamePush:
                            i = new d.JceInputStream(s.vData.buffer);
                            var K = new p.CloudGamePacket();
                            K.readFrom(i),
                              K.sRequestId,
                              O.fireEvent(D.CLOUD_GAME_DATA, K),
                              C.log(
                                '%c<<<<<<< %ccloundGameData:',
                                C.logcss('#0000E3'),
                                C.logcss('black'),
                                K,
                              );
                            break;
                          default:
                            C.log('%c<<<<<<< Not matched CmdType: ' + s.iCmdType);
                        }
                      },
                    },
                    {
                      key: 'getWupKey',
                      value: function (e, t) {
                        return e.get('tRsp') ? 'tRsp' : t && e.get('') ? '' : 'noKey';
                      },
                    },
                    {
                      key: 'onWSRedirect',
                      value: function (e) {
                        var t = e.vRemoveIps.value;
                        C.log('---onWSRedirect---'),
                          C.log('vRemoveIps', t),
                          C.log('this.wsurl', this.wsurl);
                        for (var i = 0; i < this.wsIps.length; i++)
                          for (var s = 0; s < t.length; s++)
                            this.wsIps[i] == t[s] && this.wsIps.splice(i, 1),
                              this.wsurl == t[s] && this.reconnect();
                        C.log('storeDns', this.wsIps), y.storeDns(this.wsIps, this.connectType);
                      },
                    },
                    {
                      key: 'reconnect',
                      value: function (e) {
                        e || (this.reConnectTimes = 0),
                          this.releaseWs(this.ws),
                          (this.ws = null),
                          (this.connected = !1),
                          (this.isDoLaunch = !1),
                          1 == this.connectType
                            ? this.connectIPList(this.cloudGameIpList)
                            : this.connecting();
                      },
                    },
                    {
                      key: '_sendWup',
                      value: function (e, t, i, s, r) {
                        C.log(
                          '%c>>>>>>> %creqWup: %c' + t,
                          C.logcss('#009100'),
                          C.logcss('black'),
                          C.logcss('#009100'),
                          e,
                          i,
                        ),
                          u.report.setDim(s, 'path', '/' + e + '/' + t),
                          u.report.setDim(s, 'channel', 'ws'),
                          u.report.setDim(s, 'ip', this.wsurl),
                          u.report.setField(s, 'unipacket_encode_begin');
                        var a = { id: s, fn: t, cb: r };
                        try {
                          var n = new d.Wup();
                          n.setServant(e),
                            n.setFunc(t),
                            n.setRequestId(s),
                            n.writeStruct('tReq', i);
                          var o = new p.WebSocketCommand();
                          (o.iCmdType = p.EWebSocketCommandType.EWSCmd_WupReq),
                            (o.vData = n.encode());
                          var h = u.report.getTraceId(s);
                          if (h) {
                            var c = ''
                              .concat(h, ':')
                              .concat(h, ':')
                              .concat(0, ':')
                              .concat(u.enableTrace);
                            o.traceId = c;
                          }
                          var l = new d.JceOutputStream();
                          o.writeTo(l), u.report.setField(s, 'unipacket_encode_end');
                        } catch (e) {
                          return C.log(e), (a.code = _), void this.reportError(a);
                        }
                        try {
                          this.send(l.getBuffer());
                        } catch (e) {
                          return C.log(e), (a.code = f), void this.reportError(a);
                        }
                        u.report.setField(s, 'hysignal_enqueue');
                      },
                    },
                    {
                      key: 'sendWup',
                      value: function (e, t, i, s, r, a) {
                        var n = this,
                          o = 3 < arguments.length && void 0 !== s ? s : null,
                          h = 4 < arguments.length && void 0 !== r ? r : -1,
                          d = 5 < arguments.length && void 0 !== a ? a : 1,
                          c = +new Date();
                        'function' == typeof o &&
                          O.addEvent(0 < h ? t + h : t, function i(s) {
                            u.report.setField(h, 'execute_end'),
                              o && o(s),
                              n.sendReport(h),
                              u.report.clearData(h),
                              n.retry.del(h),
                              O.removeEvent(0 < h ? t + h : t, i),
                              u.reportAPI &&
                                u.reportAPI({
                                  type: 'reportApiTime',
                                  state: 'end',
                                  moduleName: e,
                                  funcName: t,
                                  startTime: c,
                                  endTime: +new Date(),
                                });
                          });
                        var l = {
                          id: h,
                          reSend: this._sendWup.bind(this),
                          moduleName: e,
                          funcName: t,
                          data: i,
                          tryCountMax: d,
                          errFun: this.sendTimeoutReport.bind(this),
                          callbackFun: o,
                        };
                        this.retry.add(l),
                          this._sendWup(e, t, i, h, o),
                          u.reportAPI &&
                            u.reportAPI({
                              type: 'reportApiTime',
                              state: 'start',
                              moduleName: e,
                              funcName: t,
                              startTime: c,
                            });
                      },
                    },
                    {
                      key: 'sendRegister',
                      value: function (e) {
                        var t = new d.JceOutputStream();
                        e.writeTo(t);
                        var i = new p.WebSocketCommand();
                        (i.iCmdType = p.EWebSocketCommandType.EWSCmd_RegisterReq),
                          (i.vData = t.getBinBuffer()),
                          (t = new d.JceOutputStream()),
                          i.writeTo(t),
                          this.send(t.getBuffer());
                      },
                    },
                    {
                      key: 'sendRegisterGroup',
                      value: function (e, t) {
                        var i = this;
                        this._sendRegisterGroup(e, t);
                        var s = {
                          id: 'group',
                          reSend: function (e, t) {
                            var s = 1 < arguments.length && void 0 !== t ? t : '';
                            i._sendRegisterGroup(e, s);
                          },
                          moduleName: 'group',
                          funcName: 'group',
                          data: null,
                          tryCountMax: 2,
                          errFun: this.sendRegisterGroupErr,
                          callbackFun: null,
                          paramlist: [e],
                        };
                        this.retry.add(s);
                      },
                    },
                    {
                      key: '_sendRegisterGroup',
                      value: function (e, t) {
                        var i,
                          s = new p.WSRegisterGroupReq();
                        (i = s.vGroupId.value).push.apply(i, n(e)),
                          (s.sToken = t || ''),
                          C.log(
                            '%c>>>>>>> %creqRegisterGroup:',
                            C.logcss('#009100'),
                            C.logcss('#D26900'),
                            s,
                          );
                        var r = new d.JceOutputStream();
                        s.writeTo(r);
                        var a = new p.WebSocketCommand();
                        (a.iCmdType = p.EWebSocketCommandType.EWSCmdC2S_RegisterGroupReq),
                          (a.vData = r.getBinBuffer()),
                          (r = new d.JceOutputStream()),
                          a.writeTo(r),
                          this.send(r.getBuffer());
                      },
                    },
                    {
                      key: 'sendRegisterGroupErr',
                      value: function () {
                        C.log('进组重试超过次数');
                      },
                    },
                    {
                      key: 'sendUnRegisterGroup',
                      value: function (e) {
                        var t,
                          i = new p.WSUnRegisterGroupReq();
                        (t = i.vGroupId.value).push.apply(t, n(e)),
                          C.log(
                            '%c>>>>>>> %creqUnRegisterGroup:',
                            C.logcss('#009100'),
                            C.logcss('#D26900'),
                            i,
                          );
                        var s = new d.JceOutputStream();
                        i.writeTo(s);
                        var r = new p.WebSocketCommand();
                        (r.iCmdType = p.EWebSocketCommandType.EWSCmdC2S_UnRegisterGroupReq),
                          (r.vData = s.getBinBuffer()),
                          (s = new d.JceOutputStream()),
                          r.writeTo(s),
                          this.send(s.getBuffer()),
                          this.retry.del('group');
                      },
                    },
                    {
                      key: 'sendWSUpdateUserInfoReq',
                      value: function (e, t) {
                        C.log('>>>>>>>  sendWSUpdateUserInfoReq:', e, t);
                        var i = new p.WSUpdateUserInfoReq();
                        (i.sAppSrc = e || u.appSrc), (i.sGuid = t || u.guid);
                        var s = new d.JceOutputStream();
                        i.writeTo(s);
                        var r = new p.WebSocketCommand();
                        (r.iCmdType = p.EWebSocketCommandType.EWSCmdC2S_UpdateUserInfoReq),
                          (r.vData = s.getBinBuffer()),
                          (s = new d.JceOutputStream()),
                          r.writeTo(s),
                          this.send(s.getBuffer());
                      },
                    },
                    {
                      key: 'sendVerifyCookie',
                      value: function () {
                        var e = new p.WSVerifyCookieReq();
                        (e.lUid = u.uid),
                          (e.sGuid = u.guid),
                          (e.sUA = u.ua),
                          (e.bAutoRegisterUid = 1),
                          (e.sAppSrc = u.appSrc),
                          (e.sCookie = document.cookie);
                        var t = new d.JceOutputStream();
                        e.writeTo(t);
                        var i = new p.WebSocketCommand();
                        (i.iCmdType = p.EWebSocketCommandType.EWSCmdC2S_VerifyCookieReq),
                          (i.vData = t.getBinBuffer()),
                          (t = new d.JceOutputStream()),
                          i.writeTo(t),
                          this.send(t.getBuffer()),
                          C.log('VerifyCookie:', e);
                      },
                    },
                    {
                      key: 'sendReport',
                      value: function (e) {
                        if (-1 !== e && !(u.enableTrace <= 0)) {
                          var t = new p.MetricDetailSet(),
                            i = new p.UserId();
                          y.copy(i, u.userId),
                            (i.sHuYaUA = u.config.APPID.toLowerCase() + '&' + u.ver + '&signalsdk'),
                            (t.tId = i),
                            t.vMetricDetail.value.push(this.createDetailById(e)),
                            C.log('sendReport', t),
                            this.sendReportHttp('metric', 'reportDetailV2', t);
                        }
                      },
                    },
                    {
                      key: 'createDetailById',
                      value: function (e) {
                        var t = new p.MetricDetail();
                        (t.sMetricName = 'hymtp.hyns.monitor.client'), (t.iTS = Date.now());
                        var i = u.report.getFieldData(e),
                          s = u.report.getDimData(e);
                        return (
                          this.fillField(i, t.vFiled.value),
                          this.fillDimension(s, t.vDimension.value),
                          t
                        );
                      },
                    },
                    {
                      key: 'fillField',
                      value: function (e, t) {
                        if (e)
                          for (var i in e) {
                            var s = new p.Field();
                            (s.sName = i), (s.fValue = e[i]), t.push(s);
                          }
                      },
                    },
                    {
                      key: 'fillDimension',
                      value: function (e, t) {
                        for (var i in e) {
                          var s = new p.Dimension();
                          (s.sName = i), (s.sValue = e[i]), t.push(s);
                        }
                      },
                    },
                    {
                      key: 'sendDataMetric',
                      value: function (e, t) {
                        var i = new p.MetricDetailSet(),
                          s = new p.UserId();
                        y.copy(s, u.userId), t && (s.sHuYaUA = t), (i.tId = s);
                        var r = Date.now();
                        for (var a in e) i.vMetricDetail.value.push(this.createDetail(e[a], r));
                        C.log('sendDataMetric', i),
                          this.sendReportHttp('metric', 'reportDetailV2', i);
                      },
                    },
                    {
                      key: 'createDetail',
                      value: function (e, t) {
                        var i = new p.MetricDetail();
                        return (
                          (i.sMetricName = e.sMetricName),
                          (i.iTS = t),
                          this.fillField(e.vField, i.vFiled.value),
                          this.fillDimension(e.vDimension, i.vDimension.value),
                          this.fillExLog(e.vExLog, i.vExLog.value),
                          i
                        );
                      },
                    },
                    {
                      key: 'fillExLog',
                      value: function (e, t) {
                        this.fillDimension(e, t);
                      },
                    },
                    {
                      key: 'rspDecode',
                      value: function (e, t) {
                        var i = new d.Wup();
                        i.decode(e);
                        var s = S.WupMapping[i.sFuncName];
                        if (s) {
                          var r = new s(),
                            a = 3 == i.iVersion ? i.newdata : i.data,
                            n = this.getWupKey(a);
                          return i.readStruct(n, r, t), r;
                        }
                        return null;
                      },
                    },
                    {
                      key: 'sendReportHttp',
                      value: function (e, t, i) {
                        var s = new d.Wup();
                        s.setServant(e), s.setFunc(t), s.writeStruct('tReq', i);
                        var r = s.encode().getBuffer(),
                          a = new Date().getTime(),
                          n = u.config.reportUrl || 'https://statwup.huya.com';
                        d.Util.ajax(
                          n + '?timestamp=' + a,
                          r,
                          function () {},
                          function (e) {
                            C.log('上报失败', e);
                          },
                        );
                      },
                    },
                    {
                      key: 'sendExtWup',
                      value: function (e) {
                        var t = e.buff,
                          i = e.funcName;
                        -1 == this.extTafFunNameList.indexOf(i) && this.extTafFunNameList.push(i),
                          t && this.send(t);
                      },
                    },
                    {
                      key: 'fireExtTafData',
                      value: function (e, t, i) {
                        (e || (t && -1 != this.extTafFunNameList.indexOf(t))) &&
                          O.fireEvent(D.EXT_TAF_DATA, { uri: e, funcName: t, data: i });
                      },
                    },
                    {
                      key: 'sendWupHttp',
                      value: function (e, t, i, s, r) {
                        var a = this,
                          n = +new Date(),
                          o = { id: s, fn: t, cb: r },
                          h = new d.Wup();
                        u.report.setDim(s, 'path', '/' + e + '/' + t),
                          u.report.setField(s, 'unipacket_encode_begin'),
                          u.report.setDim(s, 'channel', 'http');
                        var c = u.ISDEBUG ? this.HTTP_DEBUG_IP : this.HTTP_IP;
                        u.report.setDim(s, 'ip', c);
                        try {
                          h.setServant(e),
                            h.setFunc(t),
                            h.setRequestId(s),
                            h.writeStruct('tReq', i),
                            C.log(
                              '%c>>>>>>> %c http reqWup: %c' + t,
                              C.logcss('#009100'),
                              C.logcss('black'),
                              C.logcss('#009100'),
                              e,
                              i,
                            );
                          var l = h.encode().getBuffer();
                        } catch (i) {
                          return (
                            C.log('writeStruct错误', i), (o.code = _), void this.reportError(o)
                          );
                        }
                        var p = new Date().getTime(),
                          y = u.report.getTraceId(s);
                        y &&
                          (y = ''
                            .concat(y, ':')
                            .concat(y, ':')
                            .concat(0, ':')
                            .concat(u.enableTrace)),
                          (this.baseinfo = this.setBaseinfo(!0, y));
                        var g = 'https://'.concat(c).concat(this.baseinfo);
                        u.report.setField(s, 'unipacket_encode_end'),
                          u.report.setField(s, 'hysignal_enqueue');
                        try {
                          d.Util.ajax(
                            g + '&timestamp=' + p,
                            l,
                            function (i) {
                              var s, h;
                              try {
                                (s = new d.Wup()).decode(i);
                              } catch (i) {
                                return (
                                  C.log('decodewup错误', i), (o.code = -500), void a.reportError(o)
                                );
                              }
                              var c = !1;
                              try {
                                h = s.readInt32('');
                              } catch (i) {
                                c = !0;
                              }
                              var l = s.iRequestId,
                                p = s.sFuncName,
                                f = s.sServantName;
                              u.report.setField(l, 'hysignal_response'),
                                u.report.setDim(l, 'retcode', h),
                                h < 0
                                  ? u.report.setDim(l, 'success', 2)
                                  : u.report.setDim(l, 'success', 0),
                                u.report.setField(l, 'decode_response_begin'),
                                u.report.setField(l, 'unipacket_decode_begin'),
                                u.report.setField(l, 'unipacket_decode_end');
                              var _ = S.WupMapping[p];
                              if (_) {
                                var y = new _();
                                y.bcode = h;
                                try {
                                  if (0 <= h) {
                                    var g = 3 == s.iVersion ? s.newdata : s.data,
                                      T = a.getWupKey(g, c);
                                    u.report.setField(l, 'unipacket_read_rsp_end'),
                                      'noKey' != T && s.readStruct(T, y, _);
                                  }
                                } catch (i) {
                                  return (
                                    C.log('readStruct错误', i), (o.code = m), void a.reportError(o)
                                  );
                                }
                                u.report.setField(l, 'decode_response_end'),
                                  0 < l && (y.iRequestId = l),
                                  C.log(
                                    '%c<<<<<<< %chttp rspWup:%c' + t,
                                    C.logcss('#0000E3'),
                                    C.logcss('black'),
                                    C.logcss('#0000E3'),
                                    f,
                                    y,
                                  ),
                                  u.report.setField(l, 'join_dispatcher_thread'),
                                  u.report.setField(l, 'dispatcher_thread_execute_time'),
                                  u.report.setField(l, 'execute_end'),
                                  a.sendReport(l),
                                  (y.sdkcode = 0),
                                  r && r(y),
                                  u.reportAPI &&
                                    u.reportAPI({
                                      type: 'reportApiTime',
                                      state: 'end',
                                      servantName: e,
                                      funcName: t,
                                      startTime: n,
                                      endTime: +new Date(),
                                    });
                              } else
                                r && r({ sdkcode: v, bcode: h }),
                                  u.report.clearData(l),
                                  a.retry.del(l);
                            },
                            function (i) {
                              (o.code = -20003),
                                a.reportError(o, i),
                                C.log('http请求失败', e, t, i);
                            },
                          ),
                            u.reportAPI &&
                              u.reportAPI({
                                type: 'reportApiTime',
                                state: 'start',
                                servantName: e,
                                funcName: t,
                                startTime: n,
                              });
                        } catch (i) {
                          C.log('http请求error', i), (o.code = f), this.reportError(o);
                        }
                      },
                    },
                    {
                      key: 'sendTimeoutReport',
                      value: function (e, t, i) {
                        var s = { id: e, fn: t, code: -1, cb: i };
                        this.reportError(s);
                      },
                    },
                    {
                      key: 'reportError',
                      value: function (e, t) {
                        var i = e.fn,
                          s = e.id,
                          r = e.code;
                        u.report.setDim(s, 'retcode', r),
                          u.report.setDim(s, 'success', 1),
                          u.report.setField(s, 'execute_end'),
                          this.sendReport(s),
                          u.report.clearData(s),
                          this.retry.del(s);
                        var a = S.WupMapping[i];
                        if (a) {
                          var n = new a();
                          (n.bcode = void 0 === t ? 0 : t),
                            (n.sdkcode = r),
                            e.cb && (e.cb(n), O.removeEvent(i + s, e.cb));
                        }
                      },
                    },
                    {
                      key: 'setBaseinfo',
                      value: function (e, t) {
                        try {
                          var i = this.makeBaseInfo(e, t);
                          return C.log('baseinfo', i), i;
                        } catch (e) {
                          return C.log('setBaseinfo', e), '?baseinfo=default';
                        }
                      },
                    },
                    {
                      key: 'makeBaseInfo',
                      value: function (t, i) {
                        var s = new p.WSConnectParaInfo();
                        (s.lUid = u.uid),
                          (s.sGuid = u.guid || ''),
                          (s.sUA = u.ua),
                          (s.sAppSrc = u.appSrc),
                          t && ((s.sCookie = document.cookie), i && (s.sTraceId = i));
                        var r = u.config.customHeaders;
                        r && 'object' === e(r) && y.copy(s.mCustomHeaders.value, r);
                        var a = new d.JceOutputStream();
                        s.writeTo(a);
                        var n = a.getBuffer(),
                          o = y.ab2str(n, !1),
                          h = window.btoa(o);
                        return '?baseinfo='.concat(encodeURIComponent(h));
                      },
                    },
                    {
                      key: 'connectIPList',
                      value: function (e) {
                        for (var t = [], i = 0, s = (this.cloudGameIpList = e).length; i < s; i++) {
                          var r = e[i],
                            a = r.host,
                            n = r.ip,
                            o = this.isHttps ? ''.concat(a) : ''.concat(n || a);
                          t.push(o);
                        }
                        this.testWsIp(t);
                      },
                    },
                    {
                      key: 'sendCloudGameReq',
                      value: function (e) {
                        var t = new d.JceOutputStream();
                        e.writeTo(t);
                        var i = new p.WebSocketCommand();
                        (i.iCmdType = p.EWebSocketCommandType.EWSCmdC2S_CloudGameReq),
                          (i.vData = t.getBinBuffer()),
                          (t = new d.JceOutputStream()),
                          i.writeTo(t),
                          this.send(t.getBuffer()),
                          C.log(
                            '%c>>>>>>> %csendCloudGameReq:',
                            C.logcss('#009100'),
                            C.logcss('black'),
                            e,
                          );
                      },
                    },
                    {
                      key: 'clear',
                      value: function () {
                        this.releaseWs(this.ws), (this.ws = null);
                      },
                    },
                    {
                      key: 'getCurrentWSUrl',
                      value: function () {
                        return this.wsurl;
                      },
                    },
                    {
                      key: 'logcss',
                      value: function (e) {
                        return 'color:' + e + ';font-weight:900';
                      },
                    },
                  ]),
                  i
                );
              })(),
              L = (function () {
                function e() {
                  t(this, e), (this.fieldsList = {}), (this.dimsList = {}), (this.dims = {});
                  var i =
                    window.navigator &&
                    window.navigator.connection &&
                    window.navigator.connection.effectiveType;
                  (this.dims.appid = u.config.APPID.toLowerCase()),
                    (this.dims.platform = 'web'),
                    (this.dims.schema = 'hysignal'),
                    (this.dims.nettype = i || ''),
                    (this.dims.osver = u.config.osver || ''),
                    (this.dims.iptype = '0'),
                    (this.dims.device = u.config.device || ''),
                    (this.dims.sguid = u.config.guid),
                    (this.dims.ns_version = u.ver),
                    (this.dims.ns_compat = '0'),
                    (this.dims.trycount = 1),
                    (this.dims.prodenv = u.ISDEBUG ? 'test' : 'prod');
                }
                return (
                  s(e, [
                    {
                      key: 'setField',
                      value: function (e, t) {
                        this.fieldsList[e] = this.fieldsList[e] || {};
                        var i = this.fieldsList[e];
                        (i.ctime = i.ctime || (performance && performance.now()) || Date.now()),
                          (i.data = i.data || {});
                        var s = (performance && performance.now()) || Date.now();
                        (i.data[t] = s - i.ctime),
                          'execute' == t && (i.begintime = s),
                          'execute_end' == t && (i.data.response_time = s - i.begintime),
                          (i.ctime = s);
                      },
                    },
                    {
                      key: 'getFieldData',
                      value: function (e) {
                        return this.fieldsList[e] ? a({}, this.fieldsList[e].data) : {};
                      },
                    },
                    {
                      key: 'setDim',
                      value: function (e, t, i) {
                        (this.dimsList[e] = this.dimsList[e] || a({}, this.dims)),
                          (this.dimsList[e][t] = i);
                      },
                    },
                    {
                      key: 'getTraceId',
                      value: function (e) {
                        return this.dimsList[e] ? this.dimsList[e].traceid : '';
                      },
                    },
                    {
                      key: 'getDimData',
                      value: function (e) {
                        return this.dimsList[e] ? a({}, this.dimsList[e]) : {};
                      },
                    },
                    {
                      key: 'clearData',
                      value: function (e) {
                        delete this.fieldsList[e], delete this.dimsList[e];
                      },
                    },
                    {
                      key: 'setCommonDim',
                      value: function (e, t) {
                        this.dims[e] = t;
                      },
                    },
                  ]),
                  e
                );
              })(),
              M = (function () {
                function e(i) {
                  var s = this;
                  t(this, e),
                    C.init(),
                    C.log('初始化', i),
                    (u.ISDEBUG = i.isDebug || 0),
                    (u.appSrc = i.appSrc || ''),
                    (u.uid = i.uid || 0),
                    (u.guid = i.guid || P.getCookie('guid')),
                    (u.ua = i.ua || ''),
                    (u.config = i),
                    u.setEnableTrace(),
                    P.setCookie('huya_ua', u.ua, 365),
                    this.creatUserId(i),
                    (u.report = new L()),
                    (this.TafHandlerList = []),
                    (this.tafHandler = new w(i)),
                    i.noConnect || this.tafHandler.start(),
                    this.TafHandlerList.push(this.tafHandler),
                    (this.wsLaunch = !1),
                    (this.queue = []),
                    this.on(D.WEBSOCKET_DOLAUNCH, function () {
                      C.log('sendWup 缓存队列'),
                        (s.wsLaunch = !0),
                        s.queue.forEach(function (e) {
                          return e();
                        }),
                        (s.queue = []);
                    }),
                    (this.inited = !0);
                }
                return (
                  s(e, [
                    {
                      key: 'creatUserId',
                      value: function (e) {
                        (u.userId = new p.UserId()),
                          (u.userId.lUid = u.uid),
                          (u.userId.sGuid = u.guid),
                          (u.userId.sToken = ''),
                          (u.userId.sHuYaUA = u.ua),
                          (u.userId.sCookie = document.cookie),
                          (u.userId.sDeviceInfo = e.device || '');
                      },
                    },
                    {
                      key: 'bindWup',
                      value: function (e) {
                        var t = this;
                        return function (i) {
                          var s = i.funcName,
                            r = i.resStruct;
                          return (
                            t.registerWup(s, r),
                            function (i) {
                              var r = i.data,
                                a = i.callback,
                                n = i.iRequestId;
                              t.sendWup(e, s, r, a, n);
                            }
                          );
                        };
                      },
                    },
                    {
                      key: 'sendWup',
                      value: function (e, t, i, s, r) {
                        var a = 4 < arguments.length && void 0 !== r ? r : 1;
                        u.iRequestId++;
                        var n = u.getTraceId();
                        u.report.setDim(u.iRequestId, 'traceid', n),
                          u.report.setDim(u.iRequestId, 'spanid', n),
                          u.report.setField(u.iRequestId, 'execute');
                        var o = { id: u.iRequestId, fn: t, cb: s };
                        if (!this.inited)
                          return (o.code = -10), void this.tafHandler.reportError(o);
                        try {
                          this.tafHandler.connected
                            ? (C.log('sendWup', t),
                              this.tafHandler.sendWup(e, t, i, s, u.iRequestId, a))
                            : (C.log('sendWupHttp', t),
                              this.tafHandler.sendWupHttp(e, t, i, u.iRequestId, s));
                        } catch (e) {
                          (o.code = -3), this.tafHandler.reportError(o);
                        }
                      },
                    },
                    {
                      key: 'sendWupHttp',
                      value: function (e, t, i, s) {
                        u.iRequestId++;
                        var r = u.getTraceId();
                        u.report.setDim(u.iRequestId, 'traceid', r),
                          u.report.setDim(u.iRequestId, 'spanid', r),
                          u.report.setField(u.iRequestId, 'execute');
                        var a = { id: u.iRequestId, fn: t, cb: s };
                        if (!this.inited)
                          return (a.code = -10), void this.tafHandler.reportError(a);
                        this.tafHandler.sendWupHttp(e, t, i, u.iRequestId, s);
                      },
                    },
                    {
                      key: 'registerUri',
                      value: function (e, t) {
                        S.UriMapping[e + ''] = t;
                      },
                    },
                    {
                      key: 'registerUriMap',
                      value: function (e) {
                        for (var t in e) {
                          var i = e[t];
                          S.UriMapping[t + ''] = i;
                        }
                      },
                    },
                    {
                      key: 'registerWup',
                      value: function (e, t) {
                        S.WupMapping[e] = t;
                      },
                    },
                    {
                      key: 'registerWupMap',
                      value: function (e) {
                        for (var t in e) {
                          var i = e[t];
                          S.WupMapping[t] = i;
                        }
                      },
                    },
                    {
                      key: 'on',
                      value: function (e, t) {
                        O.addEvent(e, t);
                      },
                    },
                    {
                      key: 'off',
                      value: function (e, t) {
                        O.removeEvent(e, t);
                      },
                    },
                    {
                      key: 'has',
                      value: function (e, t) {
                        return O.hasListener(e, t);
                      },
                    },
                    {
                      key: 'sendRegisterGroup',
                      value: function (e, t) {
                        var i = 1 < arguments.length && void 0 !== t ? t : '';
                        this.tafHandler.sendRegisterGroup(e, i);
                      },
                    },
                    {
                      key: 'sendUnRegisterGroup',
                      value: function (e) {
                        this.tafHandler.sendUnRegisterGroup(e);
                      },
                    },
                    {
                      key: 'sendVerifyCookie',
                      value: function (e, t, i) {
                        var s = 2 < arguments.length && void 0 !== i ? i : 'webh5&0.0.1&huya';
                        this.tafHandler.sendVerifyCookie(e, t, s);
                      },
                    },
                    {
                      key: 'reconnetWS',
                      value: function (e) {
                        var t = 0 < arguments.length && void 0 !== e ? e : 0,
                          i = this.TafHandlerList.find(function (e) {
                            return e.connectType === t;
                          });
                        if (i) return i.reconnetWS();
                      },
                    },
                    {
                      key: 'isWSConnected',
                      value: function (e) {
                        var t = 0 < arguments.length && void 0 !== e ? e : 0,
                          i = this.TafHandlerList.find(function (e) {
                            return e.connectType === t;
                          });
                        return !!i && i.connected;
                      },
                    },
                    {
                      key: 'isWSLaunch',
                      value: function () {
                        return this.wsLaunch;
                      },
                    },
                    {
                      key: 'sendWSUpdateUserInfoReq',
                      value: function (e) {
                        this.tafHandler.sendWSUpdateUserInfoReq(e);
                      },
                    },
                    {
                      key: 'getTaf',
                      value: function () {
                        return d;
                      },
                    },
                    {
                      key: 'getUserId',
                      value: function () {
                        return u.userId;
                      },
                    },
                    {
                      key: 'getTafProtocol',
                      value: function () {
                        return { HUYA: p, TafMx: S, Taf: d };
                      },
                    },
                    {
                      key: 'rspDecode',
                      value: function (e, t) {
                        return this.tafHandler.rspDecode(e, t);
                      },
                    },
                    {
                      key: 'sendDataMetric',
                      value: function (e, t) {
                        this.tafHandler.sendDataMetric(e, t);
                      },
                    },
                    {
                      key: 'sendExtWup',
                      value: function (e) {
                        this.tafHandler.sendExtWup(e);
                      },
                    },
                    {
                      key: 'connectCloudGameWS',
                      value: function (e) {
                        C.log('云游戏建连', e), this.cloudTaf && this.clearCloudTaf();
                        var t = a({}, u.config, { connectType: 1 });
                        return (
                          (this.cloudTaf = new w(t)),
                          this.cloudTaf.connectIPList(e),
                          this.TafHandlerList.push(this.cloudTaf),
                          this.cloudTaf
                        );
                      },
                    },
                    {
                      key: 'clearCloudTaf',
                      value: function () {
                        var e = this.TafHandlerList.indexOf(this.cloudTaf);
                        -1 < e && this.TafHandlerList.splice(e, 1),
                          this.cloudTaf.clear(),
                          (this.cloudTaf = null);
                      },
                    },
                    {
                      key: 'sendCloudGameReq',
                      value: function (e) {
                        this.cloudTaf
                          ? this.cloudTaf.sendCloudGameReq(e)
                          : C.log('云游戏连接未创建');
                      },
                    },
                    {
                      key: 'getCurrentWSUrl',
                      value: function (e) {
                        var t = 0 < arguments.length && void 0 !== e ? e : 0,
                          i = this.TafHandlerList.find(function (e) {
                            return e.connectType === t;
                          });
                        return i ? i.getCurrentWSUrl() : '';
                      },
                    },
                    {
                      key: 'setReportAPI',
                      value: function (e) {
                        u.reportAPI = e;
                      },
                    },
                  ]),
                  e
                );
              })();
            return {
              HUYA: p,
              Taf: d,
              init: function (e) {
                return new M(e);
              },
              events: D,
              utils: y,
              store: P,
              version: o,
            };
          })();
        },
      },
      t = {};
    function i(s) {
      if (t[s]) return t[s].exports;
      var r = (t[s] = { exports: {} });
      return e[s].call(r.exports, r, r.exports, i), r.exports;
    }
    return (
      (i.n = function (e) {
        var t =
          e && e.__esModule
            ? function () {
                return e.default;
              }
            : function () {
                return e;
              };
        return i.d(t, { a: t }), t;
      }),
      (i.d = function (e, t) {
        for (var s in t)
          i.o(t, s) && !i.o(e, s) && Object.defineProperty(e, s, { enumerable: !0, get: t[s] });
      }),
      (i.g = (function () {
        if ('object' == typeof globalThis) return globalThis;
        try {
          return this || new Function('return this')();
        } catch (e) {
          if ('object' == typeof window) return window;
        }
      })()),
      (i.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }),
      i(442)
    );
  })().default;
});
